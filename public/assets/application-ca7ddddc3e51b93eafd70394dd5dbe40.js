/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.7.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',

    // Button elements boud jquery-ujs
    buttonClickSelector: 'button[data-remote]',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[type=file]',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with]',

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = $('meta[name="csrf-token"]').attr('content');
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element.attr('href');
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, elCrossDomain, crossDomain, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        elCrossDomain = element.data('cross-domain');
        crossDomain = elCrossDomain === undefined ? null : elCrossDomain;
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.attr('method');
          url = element.attr('action');
          data = element.serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: crossDomain
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        var jqxhr = rails.ajax(options);
        element.trigger('ajax:send', jqxhr);
        return jqxhr;
      } else {
        return false;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrf_token = $('meta[name=csrf-token]').attr('content'),
        csrf_param = $('meta[name=csrf-param]').attr('content'),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrf_param !== undefined && csrf_token !== undefined) {
        metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadata_input).appendTo('body');
      form.submit();
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      form.find(rails.disableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        element.data('ujs:enable-with', element[method]());
        element[method](element.data('disable-with'));
        element.prop('disabled', true);
      });
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      form.find(rails.enableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
        element.prop('disabled', false);
      });
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        answer = rails.confirm(message);
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var inputs = $(), input, valueToCheck,
          selector = specifiedSelector || 'input,textarea',
          allInputs = form.find(selector);

      allInputs.each(function() {
        input = $(this);
        valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
        // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
        if (!valueToCheck === !nonBlank) {

          // Don't count unchecked required radio if other radio with same name is checked
          if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
            return true; // Skip to next input
          }

          inputs = inputs.add(input);
        }
      });
      return inputs.length ? inputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      element.data('ujs:enable-with', element.html()); // store enabled state
      element.html(element.data('disable-with')); // set to disabled state
      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
    },

    // restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
    }

  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
        rails.enableElement($(this));
    });

    $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params');
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (link.data('remote') !== undefined) {
        if ( (e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data ) { return true; }

        var handleRemote = rails.handleRemote(link);
        // response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.error( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (link.data('method')) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
      var button = $(this);
      if (!rails.allowAction(button)) return rails.stopEverything(e);

      rails.handleRemote(button);
      return false;
    });

    $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
      var link = $(this);
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
      var form = $(this),
        remote = form.data('remote') !== undefined,
        blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // skip other logic when required values are missing or file upload is present
      if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
        return rails.stopEverything(e);
      }

      if (remote) {
        if (nonBlankFileInputs) {
          // slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      button.closest('form').data('ujs:submit-button', data);
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function(event) {
      if (this == event.target) rails.disableFormElements($(this));
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
      if (this == event.target) rails.enableFormElements($(this));
    });

    $(function(){
      // making sure that all forms have actual up-to-date token(cached forms contain old one)
      var csrf_token = $('meta[name=csrf-token]').attr('content');
      var csrf_param = $('meta[name=csrf-param]').attr('content');
      $('form input[name="' + csrf_param + '"]').val(csrf_token);
    });
  }

})( jQuery );
(function() {
  var CSRFToken, allowLinkExtensions, anchoredLink, browserCompatibleDocumentParser, browserIsntBuggy, browserSupportsCustomEvents, browserSupportsPushState, browserSupportsTurbolinks, cacheCurrentPage, cacheSize, changePage, constrainPageCacheTo, createDocument, crossOriginLink, currentState, enableTransitionCache, executeScriptTags, extractLink, extractTitleAndBody, fetch, fetchHistory, fetchReplacement, handleClick, historyStateIsDefined, htmlExtensions, ignoreClick, initializeTurbolinks, installClickHandlerLast, installDocumentReadyPageEventTriggers, installHistoryChangeHandler, installJqueryAjaxSuccessPageUpdateTrigger, loadedAssets, noTurbolink, nonHtmlLink, nonStandardClick, pageCache, pageChangePrevented, pagesCached, popCookie, processResponse, recallScrollPosition, referer, reflectNewUrl, reflectRedirectedUrl, rememberCurrentState, rememberCurrentUrl, rememberReferer, removeHash, removeHashForIE10compatiblity, removeNoscriptTags, requestMethodIsSafe, resetScrollPosition, targetLink, transitionCacheEnabled, transitionCacheFor, triggerEvent, visit, xhr, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  pageCache = {};

  cacheSize = 10;

  transitionCacheEnabled = false;

  currentState = null;

  loadedAssets = null;

  htmlExtensions = ['html'];

  referer = null;

  createDocument = null;

  xhr = null;

  fetch = function(url) {
    var cachedPage;
    rememberReferer();
    cacheCurrentPage();
    reflectNewUrl(url);
    if (transitionCacheEnabled && (cachedPage = transitionCacheFor(url))) {
      fetchHistory(cachedPage);
      return fetchReplacement(url);
    } else {
      return fetchReplacement(url, resetScrollPosition);
    }
  };

  transitionCacheFor = function(url) {
    var cachedPage;
    cachedPage = pageCache[url];
    if (cachedPage && !cachedPage.transitionCacheDisabled) {
      return cachedPage;
    }
  };

  enableTransitionCache = function(enable) {
    if (enable == null) {
      enable = true;
    }
    return transitionCacheEnabled = enable;
  };

  fetchReplacement = function(url, onLoadFunction) {
    var _this = this;
    if (onLoadFunction == null) {
      onLoadFunction = function() {};
    }
    triggerEvent('page:fetch', {
      url: url
    });
    if (xhr != null) {
      xhr.abort();
    }
    xhr = new XMLHttpRequest;
    xhr.open('GET', removeHashForIE10compatiblity(url), true);
    xhr.setRequestHeader('Accept', 'text/html, application/xhtml+xml, application/xml');
    xhr.setRequestHeader('X-XHR-Referer', referer);
    xhr.onload = function() {
      var doc;
      triggerEvent('page:receive');
      if (doc = processResponse()) {
        changePage.apply(null, extractTitleAndBody(doc));
        reflectRedirectedUrl();
        onLoadFunction();
        return triggerEvent('page:load');
      } else {
        return document.location.href = url;
      }
    };
    xhr.onloadend = function() {
      return xhr = null;
    };
    xhr.onerror = function() {
      return document.location.href = url;
    };
    return xhr.send();
  };

  fetchHistory = function(cachedPage) {
    if (xhr != null) {
      xhr.abort();
    }
    changePage(cachedPage.title, cachedPage.body);
    recallScrollPosition(cachedPage);
    return triggerEvent('page:restore');
  };

  cacheCurrentPage = function() {
    pageCache[currentState.url] = {
      url: document.location.href,
      body: document.body,
      title: document.title,
      positionY: window.pageYOffset,
      positionX: window.pageXOffset,
      cachedAt: new Date().getTime(),
      transitionCacheDisabled: document.querySelector('[data-no-transition-cache]') != null
    };
    return constrainPageCacheTo(cacheSize);
  };

  pagesCached = function(size) {
    if (size == null) {
      size = cacheSize;
    }
    if (/^[\d]+$/.test(size)) {
      return cacheSize = parseInt(size);
    }
  };

  constrainPageCacheTo = function(limit) {
    var cacheTimesRecentFirst, key, pageCacheKeys, _i, _len, _results;
    pageCacheKeys = Object.keys(pageCache);
    cacheTimesRecentFirst = pageCacheKeys.map(function(url) {
      return pageCache[url].cachedAt;
    }).sort(function(a, b) {
      return b - a;
    });
    _results = [];
    for (_i = 0, _len = pageCacheKeys.length; _i < _len; _i++) {
      key = pageCacheKeys[_i];
      if (!(pageCache[key].cachedAt <= cacheTimesRecentFirst[limit])) {
        continue;
      }
      triggerEvent('page:expire', pageCache[key]);
      _results.push(delete pageCache[key]);
    }
    return _results;
  };

  changePage = function(title, body, csrfToken, runScripts) {
    document.title = title;
    document.documentElement.replaceChild(body, document.body);
    if (csrfToken != null) {
      CSRFToken.update(csrfToken);
    }
    if (runScripts) {
      executeScriptTags();
    }
    currentState = window.history.state;
    triggerEvent('page:change');
    return triggerEvent('page:update');
  };

  executeScriptTags = function() {
    var attr, copy, nextSibling, parentNode, script, scripts, _i, _j, _len, _len1, _ref, _ref1;
    scripts = Array.prototype.slice.call(document.body.querySelectorAll('script:not([data-turbolinks-eval="false"])'));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (!((_ref = script.type) === '' || _ref === 'text/javascript')) {
        continue;
      }
      copy = document.createElement('script');
      _ref1 = script.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        attr = _ref1[_j];
        copy.setAttribute(attr.name, attr.value);
      }
      copy.appendChild(document.createTextNode(script.innerHTML));
      parentNode = script.parentNode, nextSibling = script.nextSibling;
      parentNode.removeChild(script);
      parentNode.insertBefore(copy, nextSibling);
    }
  };

  removeNoscriptTags = function(node) {
    node.innerHTML = node.innerHTML.replace(/<noscript[\S\s]*?<\/noscript>/ig, '');
    return node;
  };

  reflectNewUrl = function(url) {
    if (url !== referer) {
      return window.history.pushState({
        turbolinks: true,
        url: url
      }, '', url);
    }
  };

  reflectRedirectedUrl = function() {
    var location, preservedHash;
    if (location = xhr.getResponseHeader('X-XHR-Redirected-To')) {
      preservedHash = removeHash(location) === location ? document.location.hash : '';
      return window.history.replaceState(currentState, '', location + preservedHash);
    }
  };

  rememberReferer = function() {
    return referer = document.location.href;
  };

  rememberCurrentUrl = function() {
    return window.history.replaceState({
      turbolinks: true,
      url: document.location.href
    }, '', document.location.href);
  };

  rememberCurrentState = function() {
    return currentState = window.history.state;
  };

  recallScrollPosition = function(page) {
    return window.scrollTo(page.positionX, page.positionY);
  };

  resetScrollPosition = function() {
    if (document.location.hash) {
      return document.location.href = document.location.href;
    } else {
      return window.scrollTo(0, 0);
    }
  };

  removeHashForIE10compatiblity = function(url) {
    return removeHash(url);
  };

  removeHash = function(url) {
    var link;
    link = url;
    if (url.href == null) {
      link = document.createElement('A');
      link.href = url;
    }
    return link.href.replace(link.hash, '');
  };

  popCookie = function(name) {
    var value, _ref;
    value = ((_ref = document.cookie.match(new RegExp(name + "=(\\w+)"))) != null ? _ref[1].toUpperCase() : void 0) || '';
    document.cookie = name + '=; expires=Thu, 01-Jan-70 00:00:01 GMT; path=/';
    return value;
  };

  triggerEvent = function(name, data) {
    var event;
    event = document.createEvent('Events');
    if (data) {
      event.data = data;
    }
    event.initEvent(name, true, true);
    return document.dispatchEvent(event);
  };

  pageChangePrevented = function() {
    return !triggerEvent('page:before-change');
  };

  processResponse = function() {
    var assetsChanged, clientOrServerError, doc, extractTrackAssets, intersection, validContent;
    clientOrServerError = function() {
      var _ref;
      return (400 <= (_ref = xhr.status) && _ref < 600);
    };
    validContent = function() {
      return xhr.getResponseHeader('Content-Type').match(/^(?:text\/html|application\/xhtml\+xml|application\/xml)(?:;|$)/);
    };
    extractTrackAssets = function(doc) {
      var node, _i, _len, _ref, _results;
      _ref = doc.head.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if ((typeof node.getAttribute === "function" ? node.getAttribute('data-turbolinks-track') : void 0) != null) {
          _results.push(node.getAttribute('src') || node.getAttribute('href'));
        }
      }
      return _results;
    };
    assetsChanged = function(doc) {
      var fetchedAssets;
      loadedAssets || (loadedAssets = extractTrackAssets(document));
      fetchedAssets = extractTrackAssets(doc);
      return fetchedAssets.length !== loadedAssets.length || intersection(fetchedAssets, loadedAssets).length !== loadedAssets.length;
    };
    intersection = function(a, b) {
      var value, _i, _len, _ref, _results;
      if (a.length > b.length) {
        _ref = [b, a], a = _ref[0], b = _ref[1];
      }
      _results = [];
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        value = a[_i];
        if (__indexOf.call(b, value) >= 0) {
          _results.push(value);
        }
      }
      return _results;
    };
    if (!clientOrServerError() && validContent()) {
      doc = createDocument(xhr.responseText);
      if (doc && !assetsChanged(doc)) {
        return doc;
      }
    }
  };

  extractTitleAndBody = function(doc) {
    var title;
    title = doc.querySelector('title');
    return [title != null ? title.textContent : void 0, removeNoscriptTags(doc.body), CSRFToken.get(doc).token, 'runScripts'];
  };

  CSRFToken = {
    get: function(doc) {
      var tag;
      if (doc == null) {
        doc = document;
      }
      return {
        node: tag = doc.querySelector('meta[name="csrf-token"]'),
        token: tag != null ? typeof tag.getAttribute === "function" ? tag.getAttribute('content') : void 0 : void 0
      };
    },
    update: function(latest) {
      var current;
      current = this.get();
      if ((current.token != null) && (latest != null) && current.token !== latest) {
        return current.node.setAttribute('content', latest);
      }
    }
  };

  browserCompatibleDocumentParser = function() {
    var createDocumentUsingDOM, createDocumentUsingParser, createDocumentUsingWrite, e, testDoc, _ref;
    createDocumentUsingParser = function(html) {
      return (new DOMParser).parseFromString(html, 'text/html');
    };
    createDocumentUsingDOM = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.documentElement.innerHTML = html;
      return doc;
    };
    createDocumentUsingWrite = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.open('replace');
      doc.write(html);
      doc.close();
      return doc;
    };
    try {
      if (window.DOMParser) {
        testDoc = createDocumentUsingParser('<html><body><p>test');
        return createDocumentUsingParser;
      }
    } catch (_error) {
      e = _error;
      testDoc = createDocumentUsingDOM('<html><body><p>test');
      return createDocumentUsingDOM;
    } finally {
      if ((testDoc != null ? (_ref = testDoc.body) != null ? _ref.childNodes.length : void 0 : void 0) !== 1) {
        return createDocumentUsingWrite;
      }
    }
  };

  installClickHandlerLast = function(event) {
    if (!event.defaultPrevented) {
      document.removeEventListener('click', handleClick, false);
      return document.addEventListener('click', handleClick, false);
    }
  };

  handleClick = function(event) {
    var link;
    if (!event.defaultPrevented) {
      link = extractLink(event);
      if (link.nodeName === 'A' && !ignoreClick(event, link)) {
        if (!pageChangePrevented()) {
          visit(link.href);
        }
        return event.preventDefault();
      }
    }
  };

  extractLink = function(event) {
    var link;
    link = event.target;
    while (!(!link.parentNode || link.nodeName === 'A')) {
      link = link.parentNode;
    }
    return link;
  };

  crossOriginLink = function(link) {
    return location.protocol !== link.protocol || location.host !== link.host;
  };

  anchoredLink = function(link) {
    return ((link.hash && removeHash(link)) === removeHash(location)) || (link.href === location.href + '#');
  };

  nonHtmlLink = function(link) {
    var url;
    url = removeHash(link);
    return url.match(/\.[a-z]+(\?.*)?$/g) && !url.match(new RegExp("\\.(?:" + (htmlExtensions.join('|')) + ")?(\\?.*)?$", 'g'));
  };

  noTurbolink = function(link) {
    var ignore;
    while (!(ignore || link === document)) {
      ignore = link.getAttribute('data-no-turbolink') != null;
      link = link.parentNode;
    }
    return ignore;
  };

  targetLink = function(link) {
    return link.target.length !== 0;
  };

  nonStandardClick = function(event) {
    return event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
  };

  ignoreClick = function(event, link) {
    return crossOriginLink(link) || anchoredLink(link) || nonHtmlLink(link) || noTurbolink(link) || targetLink(link) || nonStandardClick(event);
  };

  allowLinkExtensions = function() {
    var extension, extensions, _i, _len;
    extensions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = extensions.length; _i < _len; _i++) {
      extension = extensions[_i];
      htmlExtensions.push(extension);
    }
    return htmlExtensions;
  };

  installDocumentReadyPageEventTriggers = function() {
    return document.addEventListener('DOMContentLoaded', (function() {
      triggerEvent('page:change');
      return triggerEvent('page:update');
    }), true);
  };

  installJqueryAjaxSuccessPageUpdateTrigger = function() {
    if (typeof jQuery !== 'undefined') {
      return jQuery(document).on('ajaxSuccess', function(event, xhr, settings) {
        if (!jQuery.trim(xhr.responseText)) {
          return;
        }
        return triggerEvent('page:update');
      });
    }
  };

  installHistoryChangeHandler = function(event) {
    var cachedPage, _ref;
    if ((_ref = event.state) != null ? _ref.turbolinks : void 0) {
      if (cachedPage = pageCache[event.state.url]) {
        cacheCurrentPage();
        return fetchHistory(cachedPage);
      } else {
        return visit(event.target.location.href);
      }
    }
  };

  initializeTurbolinks = function() {
    rememberCurrentUrl();
    rememberCurrentState();
    createDocument = browserCompatibleDocumentParser();
    document.addEventListener('click', installClickHandlerLast, true);
    return window.addEventListener('popstate', installHistoryChangeHandler, false);
  };

  historyStateIsDefined = window.history.state !== void 0 || navigator.userAgent.match(/Firefox\/26/);

  browserSupportsPushState = window.history && window.history.pushState && window.history.replaceState && historyStateIsDefined;

  browserIsntBuggy = !navigator.userAgent.match(/CriOS\//);

  requestMethodIsSafe = (_ref = popCookie('request_method')) === 'GET' || _ref === '';

  browserSupportsTurbolinks = browserSupportsPushState && browserIsntBuggy && requestMethodIsSafe;

  browserSupportsCustomEvents = document.addEventListener && document.createEvent;

  if (browserSupportsCustomEvents) {
    installDocumentReadyPageEventTriggers();
    installJqueryAjaxSuccessPageUpdateTrigger();
  }

  if (browserSupportsTurbolinks) {
    visit = fetch;
    initializeTurbolinks();
  } else {
    visit = function(url) {
      return document.location.href = url;
    };
  }

  this.Turbolinks = {
    visit: visit,
    pagesCached: pagesCached,
    enableTransitionCache: enableTransitionCache,
    allowLinkExtensions: allowLinkExtensions,
    supported: browserSupportsTurbolinks
  };

}).call(this);
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mr.doob / http://mrdoob.com/
 */


var Detector = {

	canvas: !! window.CanvasRenderingContext2D,
	webgl: ( function () { try { var canvas = document.createElement( 'canvas' ); return !! window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ); } catch( e ) { return false; } } )(),
	workers: !! window.Worker,
	fileapi: window.File && window.FileReader && window.FileList && window.Blob,

	getWebGLErrorMessage: function () {

		var element = document.createElement( 'div' );
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if ( ! this.webgl ) {

			element.innerHTML = window.WebGLRenderingContext ? [
				'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
			].join( '\n' ) : [
				'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
				'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
			].join( '\n' );

		}

		return element;

	},

	addGetWebGLMessage: function ( parameters ) {

		var parent, id, element;

		parameters = parameters || {};

		parent = parameters.parent !== undefined ? parameters.parent : document.body;
		id = parameters.id !== undefined ? parameters.id : 'oldie';

		element = Detector.getWebGLErrorMessage();
		element.id = id;

		parent.appendChild( element );

	}

};
{

    "metadata" :
    {
        "formatVersion" : 3.1,
        "sourceFile"    : "female02.obj",
        "generatedBy"   : "OBJConverter",
        "vertices"      : 3274,
        "faces"         : 6233,
        "normals"       : 3292,
        "colors"        : 0,
        "uvs"           : 4935,
        "materials"     : 6
    },

    "scale" : 100.000000,

    "materials": [	{
	"DbgColor" : 15658734,
	"DbgIndex" : 0,
	"DbgName" : "_03_-_Default1noCulli__03_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.64, 0.64, 0.64],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "03_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	},

	{
	"DbgColor" : 15597568,
	"DbgIndex" : 1,
	"DbgName" : "_02_-_Default1noCulli__02_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.64, 0.64, 0.64],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "02_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	},

	{
	"DbgColor" : 60928,
	"DbgIndex" : 2,
	"DbgName" : "FrontColorNoCullingID__02_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.8, 0.8, 0.8],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "02_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	},

	{
	"DbgColor" : 238,
	"DbgIndex" : 3,
	"DbgName" : "FrontColorNoCullingID__03_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.8, 0.8, 0.8],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "03_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	},

	{
	"DbgColor" : 15658496,
	"DbgIndex" : 4,
	"DbgName" : "_01_-_Default1noCulli__01_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.64, 0.64, 0.64],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "01_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	},

	{
	"DbgColor" : 61166,
	"DbgIndex" : 5,
	"DbgName" : "FrontColorNoCullingID__01_-_Default1noCulli",
	"colorAmbient" : [0.0, 0.0, 0.0],
	"colorDiffuse" : [0.8, 0.8, 0.8],
	"colorSpecular" : [0.165, 0.165, 0.165],
	"illumination" : 2,
	"mapDiffuse" : "01_-_Default1noCulling.JPG",
	"opticalDensity" : 1.0,
	"specularCoef" : 154.901961,
	"transparency" : 1.0
	}],

    "vertices": [1525,10464,868,1404,10444,1171,1576,9895,1152,1356,10926,946,1475,10477,497,1314,10917,626,1180,10484,84,1050,10897,303,759,10476,-194,1316,9895,-81,1645,9910,355,1698,9907,807,1629,9259,1204,1293,9298,1544,1215,9872,1466,1085,10397,1469,602,10311,1664,518,10807,1607,100,10765,1618,457,11337,1603,89,11339,1663,-275,11334,1569,-233,11783,1619,-656,11296,1434,-576,11752,1493,-551,12086,1482,-823,12136,1120,-820,11740,1169,-895,11703,780,-892,11269,1160,-958,11280,822,-853,11666,453,-899,11265,527,-582,11636,134,-633,11266,212,-170,11613,20,-580,12098,-6,-196,12039,-86,-597,12411,-66,-211,12296,-160,-552,13008,-156,-226,12762,-274,-501,13583,-300,-211,13513,-324,-537,13976,-281,-79,13906,-289,-614,14221,-99,-125,14394,30,212,14399,20,457,13885,-231,481,14383,30,489,14536,100,744,14344,76,714,14503,146,494,14682,165,698,14655,209,646,14838,236,774,14816,373,724,15029,255,610,15006,191,466,14833,195,281,14819,198,284,14685,165,259,14550,98,86,14531,187,-200,14426,380,-643,14289,309,-859,14148,-147,-743,13966,-302,-682,13611,-277,-785,13138,-26,-934,12889,285,-878,12551,298,-888,12173,314,-916,12179,705,-903,12454,1040,-769,12354,1257,-515,12299,1484,-230,12053,1626,72,11774,1680,430,11769,1626,839,11352,1524,963,10855,1491,1240,10903,1236,1114,11376,1288,1079,11698,1275,779,11728,1541,750,12016,1545,422,12024,1657,68,12036,1703,-237,12280,1620,-248,12405,1790,84,12396,1779,107,12656,1874,-256,12673,1905,-507,12702,1859,-530,12415,1689,-730,12746,1701,-752,12492,1483,-957,12769,987,-958,12831,669,-950,12492,663,-867,13179,312,-966,13159,669,-945,13111,949,-907,13037,1365,-903,12745,1360,-702,13002,1680,-480,12964,1828,-245,12942,1875,16,12917,1836,139,12906,1815,256,12892,1862,496,12871,1943,445,12613,1954,417,12367,1815,434,12248,1646,745,12240,1552,714,12349,1757,971,12354,1614,957,12595,1852,701,12598,1956,736,12848,1944,988,12838,1848,1258,12822,1588,1194,12550,1563,1330,12536,1212,1387,12839,1162,1219,13019,1628,1363,13176,1315,1507,12980,871,1580,13219,888,1660,12966,523,1668,13299,733,1860,13571,678,1962,13178,496,1739,12806,294,1478,12943,517,1452,12881,864,1406,12552,871,1208,12266,1242,1012,12219,1391,82,12270,1697,1071,11994,1245,1211,11721,939,1258,11994,892,1342,12266,881,1478,12603,481,1477,12875,509,1445,12892,158,1270,13542,-203,1273,13106,-25,1390,13344,-274,1473,13176,-393,1373,12953,-119,1493,12740,-399,1544,12572,-127,1904,12846,-238,1801,12545,91,2081,12707,94,2026,12975,304,2215,13210,152,2104,13428,296,2085,13601,-26,1904,13943,114,1712,13868,-113,1902,13605,-259,2184,13370,-133,2302,12920,-40,2274,13101,-316,2106,13145,-544,1846,13084,-635,1631,12940,-583,1717,13309,-458,2004,13388,-379,1623,13500,-342,1520,13689,-215,1506,13948,-96,1649,14041,176,1290,13952,-115,1417,13733,-186,981,13497,-228,880,12657,-164,1209,12800,-23,1138,12248,101,1357,12306,488,1253,11977,535,1206,11690,612,1236,11379,975,1209,11370,673,1008,11655,257,1063,11961,158,706,11973,1,635,11606,89,995,11340,326,595,11304,154,635,10885,72,254,10417,-229,867,9888,-368,1387,9238,-166,1723,9258,309,1791,9277,779,1698,8697,1251,1339,8739,1619,760,8777,1823,728,9281,1749,681,9791,1708,181,9732,1693,135,10273,1649,-341,10244,1543,-311,10729,1513,-732,10703,1327,-977,10695,1075,-1029,10201,1009,-775,10217,1325,-1104,9648,1002,-826,9654,1349,-906,9126,1335,-1179,9125,979,-982,8562,1275,-1241,8561,914,-1065,7971,1209,-1311,7970,822,-1391,7220,719,-1163,7217,1177,-1252,6479,1188,-1489,6484,693,-1460,6501,166,-1386,7236,262,-1353,7986,355,-1314,8564,452,-1246,9117,558,-1169,9658,644,-1095,10207,730,-1036,10699,811,-969,10727,497,-1034,10235,365,-1094,9689,200,-1150,9140,97,-1212,8583,8,-1231,8007,-68,-1264,7259,-183,-1278,6527,-334,-834,7293,-596,-824,6563,-758,-182,6587,-895,-209,7316,-722,186,6597,-745,221,7332,-612,404,7321,-525,196,8079,-540,399,8068,-492,382,8715,-550,567,8695,-511,347,9272,-540,934,8667,-439,914,9263,-460,317,9850,-416,1416,8632,-172,1772,8656,336,1846,8683,793,1766,8102,1290,1394,8157,1656,788,8203,1882,417,8195,1887,424,8744,1808,191,9218,1723,-352,9686,1575,-399,9138,1596,-482,8575,1568,-574,7975,1572,-651,7228,1580,-713,6508,1621,-343,6551,1848,-256,7279,1746,-176,8019,1715,-61,8602,1693,188,8660,1769,145,8114,1810,68,7378,1888,-24,6654,2038,341,6729,2117,379,7456,1995,780,7463,1986,760,6737,2120,1434,7405,1734,1466,6676,1852,1806,7354,1371,1882,8056,824,1787,8024,381,1926,7307,882,1958,6572,938,1835,6622,1449,1827,7272,401,1437,7250,-111,1416,8001,-132,915,8052,-393,902,7284,-412,904,6542,-512,1458,6506,-177,1858,6531,386,610,6564,-585,543,7294,-471,554,8047,-460,421,6586,-646,-244,9802,-431,-239,9226,-564,-248,8656,-621,179,8689,-587,-225,8066,-639,-818,8040,-479,-802,8615,-412,-765,9178,-338,-723,9743,-197,-707,10290,-17,-672,10761,200,-221,11273,94,-251,10804,19,187,11277,100,194,10845,8,220,11608,42,256,11993,-45,278,12242,-111,770,12219,-63,325,12673,-241,409,13472,-296,988,13905,-176,1437,14124,190,1435,14057,518,1044,14286,105,857,14451,268,824,14627,337,812,14771,601,802,15033,497,889,15186,430,933,15342,371,761,15219,175,849,15446,92,976,15509,328,1005,15745,274,634,15701,-45,637,15415,10,612,15184,89,429,15172,50,438,14973,162,262,14970,156,134,14969,195,130,14783,307,117,14636,262,-22,14479,419,-202,14290,735,-643,14176,647,-981,14211,227,-1121,13979,-195,-898,13876,-317,-685,13609,-275,-529,13476,39,-691,13396,-260,-520,13348,44,-675,13334,345,-880,13322,647,-970,13340,700,-814,13141,578,-1173,13139,555,-1188,13399,610,-1386,13522,376,-1400,13223,322,-1184,12799,519,-1383,12873,274,-1028,12841,90,-848,12755,512,-590,13166,347,-536,13141,33,-709,13155,-235,-596,12786,-23,-624,12754,278,-714,12830,-255,-965,12874,-377,-1237,12928,-305,-1447,12926,-49,-1450,13294,-6,-1434,13615,35,-1312,13928,469,-1148,13756,697,-1017,13616,820,-971,13341,693,-883,13428,1095,-836,13227,1413,-666,13264,1535,-640,13599,1247,-451,13261,1678,-227,13252,1718,-20,13219,1683,187,13217,1641,384,13177,1726,576,13172,1801,802,13136,1809,1038,13093,1713,1136,13409,1431,1228,13657,1152,937,13723,1253,899,13469,1491,694,13483,1499,709,13692,1324,981,14164,847,696,14000,1090,661,14220,930,510,13930,1125,514,14188,965,651,14461,898,508,14449,916,504,14635,948,395,14612,965,372,14686,1102,529,14733,1077,358,14663,1267,575,14745,1232,484,14695,1330,507,14724,1357,575,14759,1282,627,14798,1233,689,14829,1127,694,14848,1168,779,14931,1043,774,14969,1104,817,14998,996,829,15087,1096,844,15057,936,878,15194,902,838,15202,1115,912,15368,914,929,15284,843,953,15375,862,988,15339,791,969,15380,806,1051,15362,746,1047,15316,734,984,15269,780,947,15229,789,923,15261,785,975,15230,737,991,15235,752,1068,15318,705,1115,15415,677,1100,15413,702,1141,15513,666,1066,15486,733,1054,15628,734,1008,15505,797,1013,15608,823,1086,15675,752,1125,15655,677,1144,15686,651,1099,15738,711,1128,15698,640,1150,15624,603,1042,15633,649,1156,15542,596,1164,15623,616,1139,15601,658,1168,15540,610,1156,15487,634,1101,15410,665,1055,15319,691,968,15288,693,881,15185,842,839,15041,881,801,14990,914,752,14904,970,644,14802,1024,626,14660,930,774,14496,818,826,14309,781,902,14383,517,1081,14291,463,1374,13872,845,1503,13493,982,1623,13758,776,1954,13823,426,1693,13960,483,847,14566,555,731,14701,851,806,14962,825,834,15009,649,880,15124,655,942,15268,664,1028,15451,644,1043,15553,604,1043,15770,586,977,16018,275,605,15974,-33,365,15937,-90,395,15664,-102,416,15388,-40,189,15369,-34,244,15146,52,77,15149,105,-36,15356,2,-151,15230,261,-89,15085,330,11,14952,416,49,14732,523,45,14566,472,61,14497,744,-19,14397,692,89,14279,870,164,14461,847,216,14219,934,135,13968,1085,-20,14074,1014,-144,13780,1234,-341,13855,1117,-631,13886,978,-936,13867,846,-1000,14114,576,-1319,14017,124,-1240,13581,-249,-1251,13279,-272,-965,13198,-355,-972,13478,-351,-406,13604,1352,-208,13577,1403,-20,13444,1508,48,13694,1304,320,13933,1111,265,13631,1335,492,13648,1351,465,13394,1560,364,14198,958,299,14449,895,290,14624,927,172,14637,884,83,14668,784,104,14747,970,217,14701,1046,140,14700,1188,218,14668,1303,350,14671,1337,429,14695,1372,510,14770,1383,425,14745,1413,400,14855,1429,323,14841,1431,316,14915,1427,247,14840,1413,258,14912,1415,310,14935,1460,374,14924,1426,361,14940,1462,435,14944,1418,434,14971,1442,388,14969,1491,433,14995,1471,472,14999,1422,467,15023,1430,492,15037,1407,461,15036,1432,451,15047,1427,479,15047,1409,499,15047,1402,509,15045,1403,512,15022,1400,530,15003,1391,485,14970,1405,542,14892,1365,476,14870,1398,573,14809,1337,623,14857,1297,676,14916,1241,738,14974,1200,781,15090,1205,786,15201,1241,855,15345,1112,764,15324,1328,783,15413,1311,795,15484,1292,881,15505,1111,798,15551,1255,877,15662,1077,793,15660,1233,865,15787,1109,927,15663,958,920,15793,987,980,15831,851,943,16055,858,1003,16041,576,1027,15663,717,985,15647,797,983,15604,860,931,15503,910,966,15504,858,1004,15631,854,1038,15674,832,1072,15724,776,1085,15748,699,1141,15484,619,880,15179,783,753,14913,898,1053,15737,771,1024,15698,820,1001,15464,823,995,15404,835,964,15447,799,894,16053,1010,855,15911,1105,757,16190,1190,807,16349,1033,626,16395,1184,454,16315,1369,391,16422,1261,408,16533,1122,692,16451,1067,176,16423,1287,180,16542,1120,-36,16487,1077,-25,16379,1218,-229,16307,1097,-281,16352,968,-364,16229,914,-315,16080,1081,-383,15922,880,-336,15788,984,-351,15663,858,-322,15665,989,-326,15534,831,-301,15541,957,-281,15386,993,-288,15378,786,-244,15250,797,-312,15373,728,-275,15249,737,-331,15328,687,-315,15270,702,-279,15252,679,-287,15319,672,-340,15367,660,-380,15337,586,-391,15260,550,-443,15351,505,-400,15260,523,-446,15323,471,-384,15258,514,-342,15174,562,-326,15177,550,-318,15313,507,-237,15165,571,-203,15151,547,-113,15022,554,-44,14919,560,-43,14875,739,3,14836,821,-8,14826,893,35,14762,1060,79,14742,1177,127,14713,1236,184,14691,1324,109,14762,1290,167,14735,1348,263,14678,1355,345,14680,1379,336,14724,1419,248,14727,1395,177,14840,1368,115,14848,1321,59,14799,1240,18,14779,1099,-54,14846,958,-69,14882,1018,7,14848,1173,68,14878,1297,147,14936,1371,100,14959,1347,57,14993,1341,-18,14955,1253,-39,15001,1263,-120,14997,1114,-55,14892,1119,-144,14987,997,-94,14904,903,-62,14902,826,-102,14945,785,-121,14958,838,-174,15087,795,-163,15079,736,-149,15074,678,-207,15145,670,-229,15166,725,-179,15098,1011,-155,15105,1146,-59,15069,1281,76,15012,1361,93,14996,1360,111,14981,1360,150,14966,1389,197,14920,1394,260,14929,1451,188,14946,1417,223,14952,1474,258,14946,1490,305,14951,1499,240,14989,1490,184,14995,1451,178,14969,1445,151,15004,1400,149,14991,1398,126,14999,1370,109,15004,1363,117,15011,1373,103,15027,1385,142,15057,1439,133,15108,1436,175,15120,1474,168,15183,1466,104,15164,1435,140,15235,1461,65,15219,1423,93,15308,1443,49,15316,1425,25,15211,1401,-53,15302,1358,0,15382,1392,-105,15373,1335,-1,15456,1375,-99,15449,1327,-78,15489,1345,-111,15497,1334,-136,15514,1309,-152,15458,1290,-160,15539,1279,-189,15479,1248,-230,15379,1188,-162,15363,1287,-208,15311,1210,-224,15234,1002,-175,15228,1233,-239,15445,1150,-219,15510,1186,-202,15554,1243,-172,15554,1275,-142,15551,1297,-125,15530,1312,-103,15513,1333,-76,15506,1347,-6,15514,1366,-2,15523,1369,-70,15519,1353,1,15537,1358,-83,15537,1332,-36,15595,1373,-99,15579,1342,-107,15582,1342,-73,15598,1365,-121,15590,1361,-80,15612,1381,-7,15607,1387,-13,15617,1402,49,15603,1397,-14,15620,1417,50,15608,1414,-17,15638,1422,-101,15636,1397,-37,15687,1449,-118,15672,1408,-146,15722,1399,-183,15656,1358,-199,15690,1344,-218,15656,1286,-196,15590,1301,-229,15610,1244,-212,15575,1243,-238,15587,1197,-251,15553,1126,-286,15688,1129,-241,15729,1225,-208,15777,1307,-135,15828,1383,-32,15738,1462,65,15707,1485,31,15685,1477,41,15661,1460,52,15628,1427,97,15636,1447,108,15662,1484,113,15684,1490,140,15635,1471,126,15611,1431,88,15609,1421,77,15585,1405,71,15579,1393,46,15597,1392,58,15586,1374,93,15561,1383,96,15568,1398,113,15595,1412,137,15563,1408,117,15542,1394,104,15543,1382,93,15529,1383,90,15538,1372,89,15544,1376,70,15534,1372,71,15541,1375,87,15557,1367,-11,15492,1372,63,15487,1388,87,15426,1433,72,15372,1431,137,15380,1479,145,15462,1454,92,15505,1392,64,15517,1380,143,15537,1418,172,15473,1477,179,15407,1526,168,15324,1508,143,15334,1478,151,15303,1478,156,15290,1504,153,15252,1497,139,15279,1464,161,15222,1497,184,15197,1478,182,15222,1515,223,15245,1511,192,15224,1555,208,15222,1586,225,15217,1601,201,15247,1613,230,15249,1644,213,15290,1643,259,15251,1652,265,15218,1625,272,15197,1573,308,15225,1610,288,15255,1650,323,15259,1625,297,15298,1652,253,15294,1661,251,15329,1648,211,15322,1636,211,15442,1552,198,15349,1600,180,15318,1553,165,15263,1551,180,15231,1552,192,15286,1607,203,15505,1499,183,15557,1459,155,15583,1430,178,15604,1460,200,15565,1475,245,15519,1518,247,15449,1563,286,15450,1560,291,15514,1508,329,15422,1541,307,15360,1611,293,15331,1644,325,15299,1621,340,15335,1570,359,15344,1528,384,15405,1504,387,15359,1503,385,15327,1502,379,15313,1527,366,15284,1572,357,15249,1570,388,15245,1520,390,15276,1521,414,15263,1489,405,15307,1491,447,15345,1479,457,15411,1470,432,15461,1468,364,15484,1477,332,15489,1493,308,15570,1472,287,15574,1484,242,15574,1488,238,15618,1482,151,15654,1490,140,15743,1510,86,15829,1498,-20,15838,1452,-47,15943,1436,-159,15912,1362,-56,16143,1379,-241,16072,1255,-85,16260,1314,-291,15955,1163,-282,15818,1154,-238,15851,1229,177,16306,1391,183,16195,1445,201,15961,1498,212,15842,1517,219,15764,1528,231,15666,1503,313,15670,1506,302,15759,1527,339,15855,1524,449,15887,1500,478,15791,1514,386,15739,1518,344,15708,1513,331,15655,1490,303,15616,1472,335,15602,1448,361,15586,1430,358,15559,1440,419,15538,1425,451,15527,1427,523,15510,1428,532,15436,1446,492,15361,1470,497,15263,1467,468,15202,1472,396,15206,1489,375,15217,1497,365,15241,1533,347,15240,1570,326,15234,1598,322,15255,1521,312,15205,1551,323,15186,1539,276,15179,1549,232,15177,1530,237,15197,1544,204,15184,1490,229,15129,1515,210,15090,1515,206,15058,1499,153,15035,1432,150,15019,1404,160,15017,1397,192,15019,1426,183,15027,1438,214,15036,1471,258,15072,1527,261,15104,1534,264,15131,1526,283,15135,1525,285,15103,1536,289,15072,1534,262,15048,1492,262,15037,1452,301,15034,1457,295,15040,1501,328,15055,1498,320,15078,1533,380,15053,1488,378,15076,1517,419,15051,1462,447,15065,1462,451,15089,1470,364,15106,1531,310,15109,1539,303,15135,1529,338,15140,1526,357,15200,1505,401,15143,1497,451,15140,1468,505,15068,1426,498,15050,1412,458,15051,1436,414,15042,1449,380,15044,1457,338,15044,1459,492,15047,1401,540,15059,1408,513,15130,1434,516,15195,1451,658,15236,1383,541,15264,1454,607,15369,1425,647,15450,1411,627,15524,1401,596,15558,1414,525,15547,1426,517,15567,1419,439,15572,1410,446,15556,1418,419,15572,1405,415,15562,1415,402,15574,1412,388,15570,1422,409,15593,1415,401,15599,1429,424,15615,1428,414,15620,1439,377,15622,1438,358,15635,1455,354,15687,1509,425,15725,1517,496,15742,1503,604,15799,1475,575,15900,1455,456,15995,1488,436,16193,1429,653,16163,1346,585,15988,1438,670,15867,1397,671,15779,1433,660,15742,1444,585,15744,1480,578,15705,1466,492,15690,1474,425,15666,1465,423,15700,1499,377,15664,1476,397,15641,1452,435,15647,1454,440,15643,1437,494,15672,1468,570,15682,1459,497,15669,1454,496,15659,1438,445,15638,1433,439,15625,1413,529,15653,1430,507,15589,1410,419,15591,1401,417,15578,1409,436,15578,1413,511,15575,1422,590,15574,1415,628,15573,1409,654,15595,1389,617,15587,1406,639,15608,1390,619,15617,1400,603,15599,1410,594,15606,1401,638,15640,1389,598,15651,1413,580,15585,1419,605,15655,1414,565,15663,1430,566,15678,1447,624,15671,1439,634,15692,1440,698,15681,1392,680,15667,1405,656,15655,1409,614,15666,1436,641,15642,1403,673,15649,1388,687,15643,1362,736,15709,1342,708,15750,1380,728,15828,1323,763,15925,1260,699,15948,1324,743,16061,1268,798,15799,1239,759,15689,1298,727,15671,1339,722,15649,1337,678,15625,1364,654,15632,1378,663,15639,1384,684,15544,1375,713,15452,1376,699,15399,1388,646,15316,1406,674,15144,1356,673,15074,1336,566,15046,1392,527,15041,1404,587,14931,1350,663,15024,1322,724,15573,1341,759,15611,1286,222,15028,1441,126,15009,1364,118,15008,1363,136,15012,1374,186,15015,1436,238,15021,1465,219,15035,1435,300,15038,1455,299,15027,1476,300,14997,1500,361,15002,1502,362,15033,1477,383,15052,1451,419,15039,1460,421,15019,1475,352,14956,1500,-179,15579,1318,-165,15564,1302,-154,15571,1326,-133,15594,1362,-146,15612,1361,-87,15615,1392,-136,15563,1324,-153,15556,1301,-130,15561,1311,-110,15542,1326,-92,15528,1339,-67,15161,1309,82,15086,1390,63,15148,1405,-76,15242,1333,-140,15313,1303,-286,15208,661,-266,15140,653,-225,15109,670,-261,15107,625,-242,15105,613,-327,15175,595,-342,15219,605,-345,15411,463,-429,15323,460,-449,15378,433,-369,15488,506,-385,15624,441,-217,15387,206,-281,15614,143,-309,15886,145,-399,15898,434,-389,15691,712,-374,15520,575,-463,15535,478,-462,15459,439,-478,15455,449,-464,15373,444,-457,15437,495,-396,15480,587,-371,15466,682,-349,15468,725,-346,15511,662,-373,15490,714,-399,15552,675,-400,15917,722,-425,15586,620,-443,15592,543,-441,15569,622,-457,15579,553,-478,15520,486,-458,15493,516,-440,15519,597,-410,15526,685,117,15924,-83,146,15651,-94,401,14439,931,-267,10359,-250,1458,12792,131,1446,10505,1238,1412,10472,1265,1435,10483,1281,1413,10489,1225,1466,10516,1176,1430,10502,1168,1429,10499,1162,1468,10518,1170,1420,10506,1155,1467,10528,1167,1419,10494,1140,1471,10529,1155,1478,10566,1106,1429,10543,1084,1456,10543,1043,1498,10561,1059,1478,10541,1005,1516,10559,1022,1535,10518,870,1462,10471,1000,1506,10444,879,1588,10480,753,1543,10404,806,1632,10465,635,1538,10302,690,1678,10455,561,1620,10310,543,1675,10175,578,1724,10229,478,1668,10119,637,1759,10099,615,1707,10099,742,1774,10070,758,1692,10116,823,1794,10046,903,1683,10182,876,1716,10176,942,1767,10094,1027,1828,10037,1032,1748,10066,1082,1807,10018,1085,1948,10100,1105,1903,10051,1217,1928,10182,1136,1958,10210,1059,1900,10273,1015,1962,10223,963,2001,10241,829,1938,10333,837,1944,10393,725,1840,10447,862,1848,10478,750,1923,10448,615,2023,10349,589,1881,10500,515,1844,10513,590,1746,10485,451,1913,10546,479,1768,10542,410,1940,10577,394,1808,10573,339,1872,10718,151,2021,10730,217,2038,11018,-129,1810,10646,67,1911,10933,-227,1864,10823,-310,1831,10556,3,1896,10458,-44,1934,10701,-375,2044,10603,-422,2008,10377,-62,2258,10574,-378,2141,10387,-7,2229,10478,97,2369,10677,-266,2493,10889,-668,2356,10857,-150,2527,11098,-522,2582,10994,-907,2634,11241,-751,2767,11400,-1099,2490,11416,-671,2677,11463,-994,2708,11545,-1081,2777,11514,-1199,2757,11695,-1262,2743,11671,-1091,2606,12156,-816,2501,12221,-1051,2321,12219,-1191,2609,11699,-1426,2444,11632,-1497,2673,11478,-1413,2679,11246,-1271,2495,11211,-1377,2420,10887,-1040,2357,10770,-799,2104,10843,-848,1991,10979,-799,1928,11140,-711,2010,11247,-604,2192,11320,-494,2098,11421,-788,2294,11488,-687,2415,11670,-927,2227,11625,-1027,2322,11699,-1130,2494,11714,-1059,2646,11574,-927,2502,11994,-657,2374,12407,-366,2448,12602,-560,2279,12669,-810,2064,12623,-954,2154,12133,-1210,2031,11975,-1084,2296,11575,-1405,2325,11443,-1404,2503,11432,-1467,2288,11284,-1353,2163,10991,-1052,2046,11134,-999,1992,11306,-907,2120,11505,-1137,2218,11349,-1273,2259,11452,-1307,2190,11589,-1250,2260,11447,-1075,2458,11483,-948,2298,11842,-626,2066,11788,-757,1872,12166,-425,2151,12248,-290,1981,12771,103,1705,12693,9,1590,12755,-139,1784,12233,-592,1991,11853,-913,2236,11520,-1204,1805,12344,-769,1579,12845,-291,1683,13016,-431,1912,12518,-924,1814,13132,-509,2054,13182,-434,2229,13116,-189,2161,12920,8,2385,11272,-460,2221,11001,-89,2163,10625,184,2096,10484,362,2068,10423,462,2024,10388,507,2059,10270,560,2012,10306,712,2050,10136,813,2034,10114,930,1980,10147,997,2029,10086,1017,2038,10008,944,2007,10046,1086,1955,9958,1223,1889,10007,1220,1811,9970,1131,1854,9970,991,1831,9912,1096,1907,9928,968,1887,9869,1094,2018,9971,1037,1976,9892,1177,2052,9930,1012,2031,9863,1069,1983,9903,1084,1911,9888,1010,1934,9873,927,1931,9844,970,1994,9840,904,1978,9804,959,2071,9872,970,2052,9816,1031,2065,9952,964,2072,9985,885,2080,10023,791,2061,10203,667,2086,10178,508,2088,10252,440,2132,10267,363,2147,10343,272,2068,10268,181,2053,10185,259,2040,10163,357,2034,10107,447,2062,9949,604,2103,10067,647,2070,9911,744,2070,9885,884,1951,9825,829,1839,9910,848,1810,9931,718,1929,9833,701,1914,9893,567,1795,9974,579,1780,10130,410,1908,10061,390,1906,10163,297,1821,10232,302,1833,10263,241,1780,10356,291,1776,10312,340,1700,10402,384,1674,10341,439,1721,10460,508,1714,10451,347,1760,10518,263,1814,10434,205,1865,10344,153,1935,10179,224,1955,10263,139,1800,10530,657,1748,10549,740,1678,10556,814,1586,10553,895,1645,10547,926,1719,10543,880,1774,10540,839,1817,10525,770,1808,10483,874,1775,10513,886,1720,10458,960,1683,10484,970,1595,10505,1068,1556,10561,1042,1541,10565,1081,1532,10570,1127,1529,10520,1181,1514,10528,1190,1507,10518,1191,1501,10520,1195,1482,10505,1251,1465,10485,1285,1433,10479,1289,1415,10470,1274,1413,10462,1280,1409,10464,1270,1410,10480,1222,1404,10463,1265,1405,10479,1223,1401,10464,1217,1407,10436,1201,1422,10430,1148,1445,10454,1061,1443,10386,1181,1484,10414,1055,1534,10412,1067,1493,10384,1193,1532,10408,1215,1573,10437,1089,1578,10488,1111,1565,10463,1082,1575,10512,1093,1572,10445,1082,1531,10419,1064,1528,10436,1059,1480,10441,1044,1486,10423,1038,1448,10479,1036,1532,10394,925,1580,10386,961,1651,10419,985,1685,10366,977,1666,10284,959,1669,10312,941,1682,10249,1043,1732,10176,1062,1721,10129,1113,1641,10019,1271,1667,9960,1240,1723,9915,1243,1802,9937,1383,1876,10120,1253,1848,10235,1140,1858,10343,1070,1866,10348,970,1788,10411,1018,1732,10420,971,1661,10327,1068,1642,10295,1131,1674,10241,1107,1745,10183,1117,1607,10147,1260,1664,10109,1264,1821,10240,1212,1721,10148,1370,1782,10308,1236,1821,10341,1146,1748,10387,1130,1811,10170,1247,1717,10043,1412,1698,10021,1460,1654,9994,1348,1678,9949,1317,1716,9907,1319,1788,9909,1430,1757,9884,1457,1753,9968,1464,1701,9918,1496,1672,9988,1485,1612,9838,1531,1543,9868,1526,1623,9971,1371,1795,10020,1391,1655,9927,1335,1698,9879,1347,1622,9771,1500,1607,9750,1513,1569,9799,1549,1522,9853,1541,1505,9834,1535,1512,9859,1428,1487,9849,1421,1542,9821,1393,1551,9834,1368,1580,9776,1405,1561,9758,1396,1582,9739,1509,1527,9769,1536,1446,9791,1510,1436,9804,1418,1464,9762,1385,1527,9812,1384,1505,9719,1394,1521,9699,1485,1498,9749,1527,1486,9738,1529,1443,9770,1521,1379,9734,1486,1374,9744,1421,1397,9706,1392,1436,9669,1401,1445,9654,1465,1503,9696,1501,1475,9733,1518,1438,9757,1510,1384,9724,1499,1338,9685,1472,1342,9679,1486,1343,9673,1484,1340,9675,1474,1348,9697,1439,1360,9667,1424,1354,9648,1474,1376,9630,1461,1390,9646,1425,1384,9628,1456,1440,9656,1481,1487,9697,1494,1439,9661,1481,1481,9695,1498,1469,9728,1517,1436,9663,1491,1416,9687,1511,1393,9716,1505,1436,9750,1514,1389,9722,1498,1351,9674,1491,1340,9663,1480,1347,9665,1488,1351,9643,1481,1347,9642,1474,1366,9630,1471,1372,9634,1479,1358,9647,1489,1383,9635,1480,1378,9631,1472,1365,9629,1464,1336,9664,1474,1384,9628,1472,1366,9652,1492,1602,9791,1379,1525,9884,1404,1719,10350,1227,1575,10206,1277,1597,10133,1300,1638,10106,1310,1708,10128,1405,1610,10063,1314,1675,10103,1411,1670,10184,1423,1616,10133,1447,1588,10197,1421,1491,10092,1487,1460,10076,1379,1530,10149,1323,1616,10228,1417,1634,10243,1382,1709,10227,1355,1575,10174,1318,1563,10102,1300,1489,10028,1358,1537,9993,1370,1569,10008,1477,1553,10070,1487,1518,10035,1516,1470,10076,1506,1444,10049,1409,1471,10009,1386,1512,9976,1401,1553,9986,1495,1482,9945,1394,1441,9982,1381,1409,10024,1404,1396,9941,1407,1437,9905,1420,1524,9967,1491,1463,9915,1501,1442,9966,1527,1478,9999,1520,1392,9992,1510,1448,10050,1501,1368,9979,1429,1326,9930,1460,1346,9891,1440,1387,9863,1452,1403,9866,1508,1450,9916,1518,1433,9957,1533,1394,9978,1526,1337,9937,1517,1310,9891,1492,1321,9862,1485,1352,9846,1487,1353,9839,1518,1400,9872,1522,1435,9914,1515,1423,9949,1528,1418,9945,1529,1390,9964,1521,1389,9959,1526,1349,9930,1528,1345,9932,1529,1307,9889,1524,1310,9882,1528,1325,9860,1533,1347,9842,1523,1338,9841,1528,1340,9844,1533,1349,9846,1532,1354,9852,1537,1345,9851,1538,1331,9864,1545,1325,9859,1541,1320,9878,1541,1313,9873,1537,1322,9886,1541,1315,9883,1536,1355,9927,1535,1314,9889,1537,1309,9873,1531,1320,9855,1536,1378,9907,1543,1338,9870,1545,1397,9881,1530,1399,9877,1522,1431,9913,1520,1355,9844,1531,1664,10322,929,1618,10329,917,1558,10350,843,1582,10245,773,1645,10189,838,1548,10462,1196,1523,10466,1245,1504,10489,1256,1492,10500,1255,1489,10499,1252,1467,10478,1291,1458,10473,1297,1457,10480,1290,1432,10472,1296,1432,10465,1299,1412,10455,1281,1409,10454,1270,1435,10466,1292,1461,10467,1299,1470,10469,1293,1480,10468,1292,1451,10426,1277,1403,10449,1263,1417,10422,1252,1490,10441,1280,1473,10480,1291,2008,9815,1122,1950,9829,1149,1884,9820,1074,1897,9776,1042,1943,9746,1029,2011,9753,1104,1991,9781,1157,1946,9819,1167,1903,9810,1098,1918,9779,1064,1910,9775,1060,1955,9747,1060,2011,9741,1119,1947,9733,1058,1864,9715,1095,1908,9683,1088,1996,9731,1126,1943,9668,1166,1962,9749,1172,1936,9803,1170,1885,9734,1207,1849,9752,1131,1888,9803,1102,1868,9703,1122,1904,9669,1119,1938,9650,1180,1887,9655,1115,1856,9693,1120,1849,9730,1157,1875,9721,1225,1829,9717,1154,1821,9661,1121,1853,9627,1116,1920,9640,1180,1868,9603,1172,1853,9635,1208,1879,9656,1212,1812,9664,1211,1845,9625,1212,1813,9648,1216,1765,9626,1197,1761,9639,1164,1799,9685,1153,1782,9617,1134,1861,9705,1222,1912,9683,1214,1937,9717,1192,1811,9586,1131,1817,9569,1161,1858,9599,1186,1837,9622,1206,1809,9639,1208,1771,9617,1204,1738,9591,1186,1740,9603,1163,1741,9584,1186,1750,9581,1146,1754,9563,1181,1771,9552,1166,1774,9567,1140,1776,9550,1161,1773,9551,1173,1778,9549,1172,1814,9573,1175,1813,9574,1183,1841,9598,1187,1833,9619,1205,1799,9589,1203,1779,9611,1206,1808,9634,1210,1775,9616,1202,1744,9586,1195,1745,9582,1193,1743,9574,1189,1739,9576,1185,1749,9559,1181,1753,9559,1186,1765,9550,1174,1770,9553,1180,1759,9561,1190,1777,9554,1179,1764,9565,1192,1751,9582,1197,1749,9575,1194,1763,9550,1169,1845,9600,1183,1815,9569,1174,1910,9811,1305,1908,9890,1315,1834,9909,1341,1748,9874,1260,1766,9815,1233,1821,9777,1224,1920,9808,1314,1891,9863,1351,1837,9912,1354,1790,9886,1261,1808,9846,1231,1849,9811,1233,1867,9818,1198,1909,9808,1307,1861,9837,1355,1831,9903,1344,1743,9813,1371,1719,9831,1262,1791,9909,1234,1825,9869,1194,1743,9788,1230,1787,9750,1229,1816,9726,1337,1810,9788,1370,1772,9748,1393,1727,9796,1391,1707,9803,1297,1734,9768,1267,1765,9728,1258,1804,9705,1355,1748,9703,1257,1714,9753,1264,1678,9789,1302,1666,9713,1264,1706,9667,1266,1780,9692,1352,1717,9641,1344,1694,9684,1390,1732,9715,1393,1643,9728,1380,1683,9674,1392,1642,9707,1390,1581,9681,1359,1576,9696,1301,1635,9751,1300,1708,9777,1387,1606,9662,1266,1643,9619,1269,1652,9598,1325,1702,9637,1361,1673,9670,1382,1637,9696,1378,1588,9670,1370,1545,9637,1344,1554,9652,1312,1548,9628,1345,1571,9622,1293,1566,9597,1342,1591,9578,1325,1601,9596,1290,1598,9576,1319,1648,9600,1341,1687,9639,1355,1646,9604,1342,1681,9636,1360,1668,9666,1381,1636,9689,1381,1592,9668,1369,1551,9631,1357,1552,9625,1355,1549,9616,1351,1546,9618,1345,1560,9592,1342,1564,9593,1349,1582,9577,1335,1587,9581,1343,1570,9595,1356,1597,9581,1343,1593,9578,1335,1581,9577,1328,1598,9575,1334,1644,9606,1352,1622,9630,1376,1597,9662,1375,1560,9625,1361,1557,9617,1358,1578,9600,1359,275,4985,1312,601,4694,1387,620,4975,1510,298,4732,1213,232,4649,857,256,4112,1101,170,4080,810,240,3487,1043,168,3486,756,288,2526,963,207,2520,752,259,1636,953,207,1628,724,145,1231,680,218,1220,974,51,1002,660,198,1008,1011,185,810,1045,38,764,611,78,548,971,114,586,517,114,401,884,559,575,431,753,386,760,79,-3,1442,974,-24,1162,1000,-24,1614,277,-7,1915,774,-18,2160,772,150,2168,994,157,1623,982,179,1169,830,530,825,701,748,482,439,756,101,733,981,567,454,989,171,197,997,206,416,1252,358,532,1247,355,446,1599,443,580,1593,477,533,2483,349,749,2477,462,624,3464,210,949,3475,370,1054,3480,778,1001,3996,353,1115,4055,841,1104,4603,890,984,4382,426,639,4375,295,650,3941,198,287,4027,368,345,4418,422,390,4759,572,641,4697,404,338,4949,629,656,4917,507,299,5142,659,673,5115,528,701,5468,513,932,5106,684,1023,5456,662,720,5740,460,1119,5716,611,824,6512,232,1282,6483,394,886,7339,76,1379,7327,253,922,8172,12,1451,8158,194,958,8955,-9,1426,8951,175,1607,8201,806,1576,8990,753,1408,8259,1365,1368,9041,1316,865,8306,1568,881,9073,1501,341,8314,1321,395,9074,1263,215,8273,748,179,7439,799,345,7380,210,328,6532,354,383,8213,149,453,8985,122,278,9034,683,277,5759,576,277,5494,631,145,5458,974,160,5190,963,194,4961,922,264,3496,375,304,2502,449,322,1607,469,299,1258,361,103,764,166,176,616,193,397,611,150,366,337,215,456,323,448,217,328,494,219,340,244,246,-9,280,361,-12,257,432,-13,448,247,-9,484,251,5199,1350,638,5187,1547,960,5160,1378,962,4947,1339,979,4665,1238,577,4096,1254,545,3464,1181,494,2521,1123,453,1633,1119,435,1218,1162,447,1027,1211,500,795,1280,184,650,1163,176,363,1491,73,200,1452,281,174,1922,562,155,2234,561,-13,2226,555,233,2198,306,240,1925,581,430,1669,535,618,1439,959,340,1214,849,590,1038,733,796,948,678,992,949,631,1200,966,707,1228,666,727,1598,740,878,2483,770,935,3450,1068,997,4088,1129,1083,4911,957,973,4684,525,945,4906,652,1076,5139,999,1148,5402,1014,1231,5758,1004,1418,6539,941,1531,7369,856,1337,7426,1402,830,7471,1611,303,7479,1358,182,6602,889,139,5814,959,236,5517,1394,245,5386,1384,653,5402,1576,661,5514,1580,679,5838,1600,247,5839,1412,292,6638,1384,773,6631,1620,1246,6588,1424,1089,5796,1447,1020,5475,1427,987,5344,1414,789,2498,977,635,1614,964,966,224,1636,764,229,2133,-2309,8016,1087,-2275,7967,1093,-2272,8014,1105,-2305,7963,1080,-2326,7969,1056,-2304,7952,1079,-2321,7960,1060,-2318,7951,1054,-2301,7943,1075,-2297,7938,1069,-2275,7950,1085,-2280,7959,1089,-2269,7960,1089,-2261,7956,1083,-2269,7947,1081,-2296,7946,1068,-2316,7948,1048,-2320,7957,1041,-2325,7961,1032,-2324,7961,1050,-2338,8015,1058,-2303,8088,1081,-2267,8080,1103,-2262,8013,1101,-2264,7962,1094,-2251,7959,1085,-2258,8010,1105,-2261,8085,1101,-2303,8096,1081,-2336,8087,1048,-2335,8081,1054,-2337,8014,1048,-2330,7964,1046,-2342,8012,1045,-2348,8093,1049,-2341,8011,1028,-2328,8021,998,-2304,7968,1007,-2318,8077,977,-2274,8036,955,-2319,8179,974,-2264,8183,946,-2211,8185,963,-2221,8037,972,-2187,8034,1015,-2178,8181,1006,-2223,8222,983,-2278,8220,975,-2328,8227,998,-2269,8239,965,-2217,8236,983,-2177,8343,934,-2183,8246,1023,-2140,8364,981,-2174,8392,879,-2086,8439,941,-2080,8508,992,-1994,8585,922,-2115,8690,949,-2165,8571,1010,-2306,8659,930,-2293,8752,846,-2357,8576,894,-2357,8673,820,-2369,8534,869,-2389,8575,819,-2410,8460,837,-2386,8585,755,-2461,8430,780,-2433,8460,687,-2488,8375,693,-2422,8395,623,-2450,8265,651,-2443,8260,559,-2454,8128,595,-2398,8114,539,-2390,7908,604,-2251,8171,590,-2258,7973,644,-2255,8195,659,-2237,8234,567,-2249,8252,648,-2153,8333,603,-2187,8244,512,-2274,8146,574,-2385,8103,541,-2376,8243,503,-2383,8076,467,-2351,7926,586,-2357,7940,510,-2297,7900,477,-2321,8073,414,-2360,8246,427,-2286,8239,379,-2249,8352,380,-2250,8241,331,-2262,8104,361,-2218,8094,317,-2251,8027,391,-2204,7997,363,-2124,8045,389,-2130,8135,351,-2129,8061,441,-2139,8158,406,-2097,8259,326,-2109,8248,393,-2017,8321,364,-2043,8317,499,-1966,8425,533,-1936,8421,386,-2072,8471,305,-2010,8601,329,-1890,8557,426,-2018,8695,328,-1883,8664,423,-1988,8835,329,-1873,8830,415,-1832,8920,352,-1804,8958,474,-1764,9094,440,-1791,9054,328,-1713,9238,259,-1677,9269,391,-1450,9713,141,-1445,9758,299,-1201,10144,19,-1203,10207,191,-1111,10376,-44,-1116,10442,134,-1043,10796,40,-1002,10748,-122,-1025,10964,18,-976,10950,-144,-922,11108,-144,-939,11106,-375,-805,11611,-18,-805,11645,-252,-935,11690,-381,-791,12218,-316,-704,12181,-155,-751,12948,-186,-1037,12289,-373,-1159,11730,-396,-1325,11195,-426,-1098,11154,-462,-1175,10955,-477,-1025,10918,-377,-1084,10704,-365,-1247,10350,-284,-1370,10126,-186,-1605,9727,-14,-1837,9258,188,-1892,9069,264,-1931,8939,279,-2110,8866,361,-2149,8745,351,-2136,8642,351,-2183,8495,350,-2212,8397,339,-2141,8344,293,-2193,8243,285,-2234,8314,330,-2257,8524,444,-2313,8418,434,-2345,8332,425,-2355,8366,495,-2428,8343,544,-2380,8428,547,-2319,8552,537,-2267,8691,527,-2308,8707,626,-2363,8576,634,-2347,8710,743,-2276,8839,746,-2106,8785,864,-2081,8871,804,-2062,8957,772,-2173,8964,682,-2124,9093,658,-2155,9049,469,-2179,8922,505,-2079,8980,302,-2027,9112,281,-1991,9313,213,-1780,9795,1,-1579,10205,-176,-1470,10424,-300,-1285,10734,-437,-1511,10857,-301,-1677,10578,-155,-1759,10327,-40,-1901,9893,149,-2050,9380,372,-2096,9177,428,-2061,9220,606,-1997,9084,744,-1935,8927,744,-1960,8830,776,-1959,8736,848,-1947,8665,765,-1952,8739,667,-1893,8888,614,-1877,9034,712,-1836,9000,584,-1825,9163,652,-1795,9132,545,-1697,9313,509,-1754,9359,598,-1480,9813,439,-1592,9871,487,-1763,9933,476,-1872,9399,623,-2014,9420,546,-1899,9951,347,-1937,9208,678,-1764,10408,177,-1635,10414,332,-1427,10353,388,-1271,10287,353,-1195,10533,297,-1141,10815,197,-1114,10955,134,-981,11131,36,-891,11615,177,-736,12146,96,-710,12924,0,-736,12883,238,-846,12891,377,-838,12158,279,-1016,12176,371,-1034,12897,439,-1296,12954,300,-1303,12259,253,-1362,12985,59,-1412,12299,-6,-1303,11698,189,-1423,11762,-27,-1461,11228,-40,-1312,11182,101,-1309,11031,141,-1470,11059,50,-1487,11065,-170,-1515,10941,147,-1561,10913,-91,-1695,10652,72,-1583,10669,249,-1375,10605,322,-1316,10897,223,-1088,11125,153,-1051,11631,267,-1423,11020,-360,-1449,11240,-243,-1388,11785,-273,-1327,12336,-275,-978,12978,-300,-1270,13022,-210,-1854,8862,518,-1865,8705,554,-1905,8555,565,-2000,8581,656,-1979,8555,736,-2031,8489,869,-2104,8411,794,-2202,8382,855,-2254,8353,897,-2323,8277,986,-2344,8241,1061,-2363,8185,1065,-2346,8104,1032,-2309,8102,1089,-2307,8115,1086,-2241,8102,1107,-2258,8091,1113,-2241,8009,1099,-2214,8018,1077,-2195,8074,1063,-2232,7966,1057,-2189,8176,1064,-2194,8222,1032,-2202,8230,1084,-2191,8287,1076,-2144,8411,1037,-2215,8451,1063,-2294,8568,990,-2335,8515,943,-2359,8448,873,-2395,8309,850,-2508,8318,804,-2514,8301,720,-2522,8195,738,-2471,8183,677,-2471,7988,731,-2359,8031,765,-2347,8208,720,-2365,8042,830,-2358,8238,797,-2313,8262,717,-2333,8292,795,-2236,8347,730,-2301,8376,825,-2174,8389,757,-2233,8375,840,-2112,8403,722,-2305,8209,712,-2456,8155,669,-2443,7942,724,-2445,7957,643,-2393,7861,611,-2287,7924,659,-2261,7995,710,-2309,8006,760,-2449,7897,737,-2440,7869,669,-2379,7826,631,-2269,7893,669,-2275,7925,724,-2297,7947,708,-2338,7949,750,-2431,7860,749,-2407,7810,698,-2341,7715,750,-2331,7723,821,-2319,7696,838,-2307,7663,778,-2265,7662,722,-2241,7651,742,-2257,7642,805,-2221,7628,825,-2218,7660,884,-2290,7681,848,-2161,7735,885,-2212,7771,857,-2241,7779,836,-2252,7819,828,-2316,7923,773,-2205,7815,782,-2205,7789,722,-2281,7692,713,-2198,7752,742,-2204,7783,791,-2179,7780,804,-2164,7741,755,-2116,7707,790,-2123,7735,841,-2065,7683,880,-2062,7658,833,-2047,7628,902,-2102,7683,918,-2140,7629,919,-2210,7638,880,-2210,7618,832,-2196,7621,838,-2193,7636,878,-2144,7614,912,-2083,7601,934,-2090,7587,930,-2144,7614,907,-2190,7629,878,-2190,7618,841,-2146,7606,902,-2085,7585,927,-2094,7582,922,-2140,7587,872,-2118,7588,843,-2073,7569,878,-2086,7569,901,-2077,7567,905,-2068,7568,887,-2067,7569,909,-2084,7578,921,-2075,7581,926,-2060,7573,911,-2070,7586,929,-2078,7593,930,-2074,7635,926,-2066,7577,907,-2051,7574,889,-2055,7579,880,-2058,7570,889,-2063,7572,880,-2111,7594,839,-2161,7611,817,-2161,7617,811,-2108,7592,836,-2063,7571,874,-2053,7582,871,-2047,7618,868,-2098,7603,829,-2172,7614,797,-2169,7630,781,-2073,8456,630,-2167,8241,444,-2223,8141,527,-2203,7969,575,-2251,7982,619,-2353,7901,596,-2341,7876,532,-2329,7887,605,-2247,7962,623,-2262,7957,604,-2212,7970,570,-2226,7958,567,-2221,7937,520,-2197,7937,517,-2295,7873,479,-2276,7860,496,-2128,7871,570,-2136,7894,621,-2174,7894,665,-2230,7796,666,-2301,7839,559,-2240,7779,601,-2197,7956,512,-2218,8120,462,-2272,8125,419,-2248,8024,453,-2233,7980,413,-2198,7977,368,-2149,8032,387,-2128,8043,382,-2181,7971,382,-2074,8007,410,-2077,8034,455,-2139,8077,422,-2154,8057,427,-2170,8072,475,-2182,8165,449,-2183,8055,464,-2241,8006,464,-2217,7997,471,-2160,8069,470,-2106,8033,498,-2139,7955,506,-2192,7958,436,-2110,7929,421,-2151,7937,457,-2119,7916,473,-2102,7913,424,-2090,7981,415,-2090,7920,428,-2090,7996,405,-2048,8004,415,-2036,7946,436,-1991,8003,434,-2002,8030,464,-2059,8032,449,-2106,8025,440,-2098,8012,452,-2115,8007,495,-2130,7943,517,-2114,7950,514,-2111,8026,486,-2068,8032,493,-2057,7975,516,-2083,7927,479,-2056,7942,480,-2043,7939,484,-2044,7964,513,-2036,7948,483,-2035,7970,507,-2031,7949,483,-2030,7967,506,-1997,7984,514,-1996,7986,518,-2000,7998,520,-2009,8028,504,-1954,8026,478,-1955,8010,454,-1940,7988,468,-1941,7992,492,-1951,8004,511,-1967,8028,502,-1956,8008,515,-1955,7996,516,-1952,7996,512,-1945,7997,508,-1955,7989,511,-1995,7977,512,-1987,7959,491,-1948,7978,495,-1942,7981,495,-1949,7990,508,-1938,7987,494,-1935,7993,493,-1944,8002,508,-1935,7990,474,-1936,7985,476,-1941,7979,478,-1946,7976,474,-1982,7959,463,-2018,7949,459,-2022,7951,455,-2028,7941,449,-1980,7963,454,-1982,7964,457,-1942,7979,467,-1941,7981,472,-1942,7988,461,-1981,7971,445,-2182,7772,564,-2201,7746,625,-2169,7753,571,-2140,7848,577,-2161,7864,620,-2186,7860,664,-2219,7777,678,-2195,7781,683,-2185,7878,672,-2165,7887,615,-2136,7866,568,-2149,7760,582,-2086,7863,592,-2108,7893,638,-2131,7883,691,-2123,7803,712,-2155,7748,645,-2109,7763,661,-2096,7762,667,-2106,7788,709,-2086,7773,669,-2068,7771,625,-2062,7783,635,-2008,7797,646,-2012,7798,649,-1963,7813,673,-1963,7816,679,-2013,7791,656,-1969,7808,680,-1958,7819,687,-1961,7826,676,-1956,7826,685,-1968,7825,709,-1987,7874,693,-1978,7858,659,-2015,7868,625,-2007,7810,635,-1962,7827,667,-2076,7782,607,-2036,7897,668,-2056,7887,718,-2051,7830,734,-2046,7814,730,-2092,7797,704,-2080,7775,671,-2086,7792,704,-2043,7804,722,-2046,7813,725,-1993,7827,739,-1995,7842,740,-2008,7872,725,-1988,7837,736,-1988,7827,735,-1992,7818,732,-2027,7785,692,-1978,7807,708,-1971,7811,711,-1964,7812,687,-1964,7818,712,-1961,7826,712,-1978,7836,734,-1978,7829,733,-1983,7820,730,-2058,7780,641,-2057,8464,700,-2328,8391,841,-2316,8396,915,-2324,8442,990,-2333,8294,1053,-2306,8248,1094,-2316,8174,1100,-2262,8186,1135,-2260,8244,1118,-2256,8298,1105,-2299,8299,1085,-2282,8453,1042,-2402,8236,854,-2526,8211,809,-2518,8011,844,-2512,8043,772,-2516,7960,787,-2477,7951,732,-2376,7985,788,-2375,7997,835,-2407,8055,881,-2526,7976,851,-2502,7948,862,-2486,7898,811,-2456,7924,750,-2463,7813,836,-2421,7785,798,-2326,7834,827,-2344,7943,795,-2327,7848,883,-2348,7962,852,-2410,8002,869,-2387,7965,899,-2367,7855,926,-2463,7806,899,-2452,7759,851,-2414,7753,802,-2329,7796,841,-2329,7813,890,-2366,7814,928,-2460,7775,910,-2433,7754,920,-2335,7792,949,-2299,7791,907,-2294,7772,855,-2391,7734,821,-2276,7713,877,-2280,7731,927,-2314,7731,966,-2387,7692,945,-2421,7719,872,-2395,7681,890,-2348,7673,854,-2391,7668,894,-2358,7658,864,-2307,7616,886,-2260,7648,901,-2260,7660,949,-2294,7664,981,-2343,7634,970,-2389,7673,937,-2380,7663,900,-2376,7666,935,-2351,7625,961,-2310,7587,977,-2321,7581,971,-2350,7626,957,-2317,7578,967,-2354,7621,950,-2376,7659,933,-2376,7658,902,-2353,7610,921,-2331,7609,895,-2307,7571,921,-2321,7571,942,-2315,7565,945,-2305,7566,928,-2307,7562,949,-2296,7564,931,-2300,7562,952,-2289,7565,931,-2303,7569,949,-2289,7571,924,-2268,7601,957,-2309,7581,971,-2289,7612,978,-2266,7600,924,-2285,7575,917,-2320,7610,889,-2298,7570,917,-2298,7569,923,-2322,7612,893,-2351,7654,876,-2353,7648,879,-2311,7571,965,-2324,7579,962,-2318,7573,960,-2305,7572,969,-2267,7953,1030,-2204,8771,452,-2205,8670,445,-2258,8790,533,-2280,8831,621,106,4686,538,81,4872,738,-229,4589,593,267,4756,210,262,5011,406,294,4739,-281,180,4980,-34,37,4754,-499,86,4401,-764,398,4407,-479,373,4257,-49,227,4167,197,-124,4100,239,-555,4638,351,-503,4158,14,-589,4692,-24,-541,4253,-281,-376,3602,-283,-24,3555,-74,-135,2770,-714,-168,2845,-924,63,2052,-1010,114,2720,-497,217,1998,-814,231,1562,-914,71,1658,-1139,33,1476,-1234,198,1347,-971,-14,1313,-1350,137,1092,-1045,-137,1107,-1429,75,860,-1037,-275,792,-1469,-11,600,-970,-373,478,-1195,-288,680,-1593,-396,433,-1249,-278,508,-1700,-395,288,-1358,539,300,-1296,208,86,-863,211,250,-782,538,463,-1173,622,976,-1506,629,1038,-1343,696,1342,-1678,740,1420,-1482,777,1692,-1838,708,1593,-1317,672,1857,-1710,465,1757,-1964,503,1608,-2005,708,1565,-1923,668,1319,-2058,532,1348,-2113,545,1043,-2290,651,1021,-2247,614,1160,-1872,284,1429,-1844,392,1207,-1962,432,936,-2159,604,900,-2090,125,1550,-1731,-67,1184,-1625,30,1100,-1745,68,1687,-1553,69,1838,-1390,32,2134,-1237,36,2964,-1161,-421,3754,-555,-301,4397,-701,-213,3916,-885,146,3961,-943,276,3008,-1199,453,3910,-689,439,3739,-339,291,3624,-108,356,2785,-580,427,2063,-912,467,1648,-1019,482,1412,-1071,495,1214,-1151,478,1015,-1156,424,587,-1073,190,312,-757,-113,233,-562,-302,283,-661,-322,199,-663,-331,49,-741,-138,-1,-640,-132,149,-564,608,1803,-1237,535,1996,-1524,536,2150,-1101,492,2241,-1362,379,2248,-1422,474,2977,-1043,489,2864,-745,242,2233,-1430,312,2002,-1592,423,1999,-1558,432,1892,-1798,-333,4718,-449,-371,4951,-236,-602,4944,166,-564,4849,563,-302,4797,816,79,5053,858,-343,4984,925,-377,5197,1008,-588,5030,678,-618,5144,302,-632,5195,753,-389,5315,1029,-671,5322,779,-706,5385,385,-400,5268,61,-390,5099,-52,-17,5001,-273,198,5127,106,-75,5159,-97,-112,5331,-2,212,5289,222,-118,5431,-16,253,5433,220,263,5419,639,286,5706,611,265,5702,202,254,6498,632,268,6498,73,270,7339,652,281,7358,38,239,8173,698,250,8192,73,-197,7345,-249,-170,6504,-186,-125,5708,-37,-469,5407,31,-783,5669,335,-753,5648,801,-413,5663,1069,-917,6441,833,-943,6455,319,-655,6465,-167,-549,5673,-11,-720,7322,-223,-1039,7292,310,-1010,7276,892,-521,6449,1160,53,5677,1014,69,5348,978,66,5222,941,269,5175,534,7,6474,1075,-8,7312,1153,-46,8146,1211,18,8927,1157,201,8948,592,89,8959,13,-225,8180,-215,-784,8156,-196,-1109,8125,346,-1081,8109,941,-585,7284,1242,-619,8118,1295,-953,8894,1096,-1096,8904,511,-882,8926,-46,-396,8946,-176,-490,8905,1337,95,16666,115,292,16444,-111,-84,16579,106,325,16462,-109,279,16756,268,59,16747,422,0,16706,337,-65,16685,331,-126,16635,383,-185,16541,151,-208,16308,-54,27,16373,-135,129,16115,-257,433,16161,-204,496,16173,-213,579,16583,65,791,16247,-37,614,16614,170,665,16671,406,967,16337,393,944,16271,780,672,16640,750,356,16768,706,336,16796,468,56,16758,544,-67,16689,520,-38,16694,450,-34,16578,451,-94,16601,521,-169,16590,489,-261,16492,231,-302,16465,415,-325,16291,83,-384,16237,285,-333,16041,-21,-418,15970,190,-407,15671,129,-289,15719,-47,-347,15291,117,-206,15330,-10,-52,15350,-115,-116,15747,-151,128,15773,-240,145,15397,-191,166,15778,-230,219,15407,-176,262,15410,-215,201,15781,-265,497,15812,-206,551,15441,-150,621,15448,-145,582,15820,-217,877,15849,-22,924,15478,-17,1002,15846,108,886,16294,94,1110,15838,298,1134,15857,387,1097,15839,620,1033,15859,644,1036,15422,601,1058,15435,558,1180,15461,376,1170,15470,334,1153,15462,266,1044,15472,107,952,15095,22,1065,15087,108,1176,15060,220,1213,15035,331,1249,15040,413,1135,15022,565,1033,15006,576,1103,14617,408,1212,14618,399,1132,14335,247,1257,14359,258,1276,14163,129,1435,14183,138,1411,14377,204,1319,14653,313,1270,14676,242,1234,14700,153,1147,14707,69,1375,14409,27,1257,14415,-64,1460,14205,-132,1333,14177,-244,1060,14406,-164,1206,14154,-310,1006,14395,-135,1118,14115,-319,967,14706,-5,1000,14707,-7,924,15094,40,653,15066,-107,704,14718,-116,981,14398,-144,748,14435,-246,1089,14139,-335,833,14059,-520,729,14049,-451,663,14413,-228,641,14700,-123,586,15062,-79,551,15057,-123,569,14698,-145,662,14411,-194,592,14413,-282,336,14686,-165,349,14390,-291,635,14024,-528,695,14060,-440,368,14059,-526,297,14393,-250,285,14680,-129,244,15027,-117,292,15030,-157,169,15017,-139,210,14677,-167,217,14391,-299,297,14066,-496,178,14093,-558,42,14342,-213,-24,14083,-465,32,14643,-105,-22,14988,-58,-1,14640,-110,-8,14373,-229,-30,14080,-406,-148,14095,-472,-131,14371,-164,-245,14110,-388,-295,14354,-99,-365,14105,-308,-340,14074,-175,-316,14352,-47,-277,14581,77,-360,14565,150,-438,14332,6,-431,14093,-212,-524,14092,-151,-306,14306,127,-401,14088,-89,-264,14071,-118,-122,14270,123,-120,14552,285,-254,14555,257,-266,14878,410,-163,14883,454,-274,15288,475,-322,15294,431,-417,15279,265,-389,14902,270,-340,15290,151,-286,14925,193,-298,14927,137,-255,14601,25,-127,14620,-47,-151,14957,36,-456,15666,252,-429,15668,467,-409,15705,532,-441,15873,514,-421,15852,558,-436,16160,606,-393,16220,331,-460,15941,265,-361,16414,606,-431,16118,854,-461,15833,661,-423,15841,644,-343,15529,703,-434,15537,705,-373,15257,727,-308,15263,709,-310,14899,738,-262,14903,712,-239,14574,734,-177,14579,715,-229,14397,748,-145,14408,732,-200,14301,964,-256,14541,914,-254,14536,966,-316,14885,883,-392,15259,864,-333,14881,934,-283,14861,1075,-204,14518,1095,-234,14288,993,-173,14233,1121,-136,14187,1186,-170,14497,1199,-66,14173,1228,-117,14497,1225,-237,14848,1180,-368,15219,1058,-409,15259,899,-442,15560,871,-431,15530,1040,-310,15198,1204,-200,14848,1208,-96,14850,1331,-20,14496,1344,-42,14151,1269,56,14146,1378,-170,15191,1333,-210,15502,1339,-359,15507,1213,-424,15768,1043,-363,15704,1220,-219,15666,1353,-207,15808,1362,-351,15895,1222,-402,16007,1052,-462,15810,853,-380,16335,867,-365,16233,1076,-294,16100,1245,-158,15972,1377,-110,16103,1397,-208,16252,1286,-251,16390,1116,-171,16410,1103,-179,16517,901,-151,16607,923,-146,16505,1138,-138,16307,1331,-165,16264,1296,25,16174,1466,30,16100,1486,259,16187,1542,20,16366,1387,25,16579,1210,30,16692,965,54,16755,661,-99,16675,610,-127,16578,603,-195,16578,596,-251,16504,897,353,16762,726,329,16706,1018,287,16568,1258,273,16390,1442,557,16283,1422,519,16103,1514,247,16068,1551,468,16007,1536,640,15884,1467,698,15930,1433,741,15726,1403,784,15746,1371,785,15553,1350,814,15568,1334,798,15349,1321,766,16071,1282,697,15951,1411,856,15770,1288,847,15760,1312,812,15747,1318,892,15595,1236,892,15586,1241,934,15395,989,917,15620,1216,1006,15800,1148,1038,15411,1165,956,15406,1271,849,15396,1283,955,15011,1267,843,14995,1277,967,14737,1275,851,14707,1289,995,14322,1267,885,14258,1323,1053,14765,1189,1114,14387,1196,996,14340,1301,992,14444,1064,974,14753,1047,1049,15023,1177,973,15015,1056,1014,14756,1014,967,14396,1033,1020,14441,1015,1008,14810,858,1025,15036,879,984,15031,844,952,14804,827,1018,14530,817,958,14527,786,1022,15400,861,1042,15403,895,985,15672,842,1034,15712,877,1042,15407,1026,1012,15793,1028,1015,15864,856,898,16231,1085,950,16253,799,627,16557,1073,669,16621,774,973,15866,814,581,16413,1304,993,15796,1071,1034,15407,1071,1014,15021,1018,344,14049,-442,1432,14169,-64,1345,14386,120,1358,14379,141,1472,14178,-9,1573,14185,82,101,16110,-229,-182,16066,-133,-386,15568,451,-428,15842,690,-418,15852,528,-342,15453,720,-436,16160,606,827,15546,14,983,15277,433,822,15218,201,988,15644,297,808,15826,-28,990,15837,266,798,16128,-26,346,16129,-171,424,15787,-161,469,15479,-104,480,15165,109,858,14905,313,1026,14983,471,1086,14695,342,851,14671,231,1135,14465,218,909,14450,126,1244,14303,91,981,14277,-37,1108,14155,-254,1362,14183,-69,948,14237,-29,1052,14130,-226,867,14432,157,527,14891,219,544,14642,177,854,14421,139,580,14432,94,907,14262,-50,644,14230,-121,971,14099,-284,738,14076,-412,662,14078,-344,599,14208,-138,562,14409,74,291,14223,-148,343,14093,-435,634,14053,-416,258,14069,-388,249,14188,-135,238,14392,42,205,14632,149,174,14873,202,106,15143,91,47,15465,-109,-38,15738,-159,-115,16035,-119,-340,15951,129,-299,15705,135,-264,15516,170,-237,15151,251,-197,14856,311,-164,14639,214,7,14620,169,211,14389,64,190,14222,-128,217,14069,-350,154,14073,-395,-68,14074,-357,-13,14276,-62,-10,14381,81,-42,14398,82,-32,14249,-53,-90,14289,-87,-248,14271,-39,-321,14133,-261,-184,14120,-349,-87,14092,-330,-140,14398,141,981,16086,263,1076,14644,342,1106,14507,263,977,14412,280,1174,14356,142,1028,14261,143,1139,14173,-13,1295,14255,13,942,14589,369,721,14385,237,1040,14245,164,773,14213,87,874,14104,-119,1121,14183,1,699,14569,338,463,14569,287,481,14363,184,750,14206,74,512,14201,23,822,14106,-139,565,14066,-219,189,14561,282,207,14353,178,233,14191,20,485,14187,20,216,14078,-214,500,14070,-229,-50,14548,284,-38,14363,180,-82,14205,32,203,14182,13,-133,14105,-173,167,14072,-217,-146,14604,219,-167,14440,129,-202,14325,-33,-123,14231,13,-305,14229,-199,-152,14140,-172,-144,14863,337,-46,14867,466,-163,15107,332,-140,15066,472,-278,15516,205,-295,15355,445,196,15012,421,154,15146,382,448,15005,422,387,15163,401,631,15075,471,618,15194,429,899,15179,546,973,15485,574,966,15218,405,1027,14918,449,900,14838,511,676,14798,477,438,14777,430,180,14776,405,994,15646,335,1048,15841,589,1000,15853,849,983,15649,858,944,16271,780,1064,15649,590],

    "morphTargets": [],

    "morphColors": [],

    "normals": [0.94537,0.30021,0.12693,0.79427,0.21268,0.56908,0.79205,0.18473,0.58181,0.95178,0.29109,0.096561,0.863,0.37138,-0.34242,0.83831,0.33,-0.43394,0.63842,0.43251,-0.63665,0.54057,0.35475,-0.76281,0.32682,0.45091,-0.83056,0.67739,0.26658,-0.6856,0.92788,0.24064,-0.28477,0.96753,0.19111,0.16535,0.8381,0.13251,0.52913,0.52281,0.15931,0.8374,0.46556,0.14249,0.87344,0.49715,0.12751,0.85821,0.14505,0.10483,0.98382,0.17838,0.070467,0.98141,-0.10093,0.009674,0.99484,0.16715,-0.021027,0.98569,-0.038057,-0.060884,0.99741,-0.29704,-0.083651,0.95117,-0.29649,-0.036103,0.95434,-0.57341,-0.019776,0.819,-0.64107,0.042177,0.76629,-0.58684,0.018952,0.80944,-0.90564,-0.04416,0.4217,-0.88726,0.081393,0.45399,-0.99698,0.042146,0.064852,-0.8919,0.089084,0.44334,-0.99188,0.12656,0.00998,-0.93203,-0.03119,-0.36094,-0.89718,0.07242,-0.43565,-0.61772,-0.16016,-0.76986,-0.53301,-0.018647,-0.84588,-0.10892,-0.21757,-0.96994,-0.52586,-0.19019,-0.829,-0.097476,-0.25257,-0.96264,-0.55873,-0.16639,-0.81246,-0.15455,-0.24372,-0.95743,-0.53108,-0.20063,-0.82321,-0.19782,-0.15937,-0.96716,-0.25239,-0.13059,-0.95874,-0.006287,-0.000519,-0.99997,0.001007,0.29954,-0.95407,0.051149,0.36708,-0.92877,-0.097964,0.79183,-0.6028,-0.2078,0.81756,-0.537,0.034394,0.47057,-0.88165,0.11313,0.37327,-0.92077,0.13889,0.43037,-0.89187,0.13813,0.41585,-0.89886,0.1836,0.46666,-0.86514,0.36854,0.49516,-0.78674,0.11799,0.3151,-0.94168,0.56789,0.33055,-0.75378,0.45625,0.033723,-0.88919,0.88708,0.12195,-0.44517,0.10941,-0.080966,-0.99066,-0.24241,-0.073,-0.96741,-0.36924,0.3881,-0.84439,-0.12116,0.54576,-0.8291,-0.51457,0.76412,-0.38893,-0.34376,0.93497,0.087313,-0.27824,0.9599,0.033662,-0.19477,0.81521,-0.5454,-0.13251,0.27128,-0.95331,-0.34983,-0.26627,-0.89816,-0.84677,0.058992,-0.52867,-0.9256,-0.056063,-0.37431,-0.91015,-0.10242,-0.40138,-0.91455,-0.099429,-0.39204,-0.99658,-0.077212,0.029237,-0.9606,-0.16227,0.22553,-0.78875,-0.26899,0.55272,-0.5146,-0.46705,0.71902,-0.32685,-0.007477,0.94501,-0.038759,-0.06592,0.99704,0.20808,-0.04648,0.97699,0.44682,0.038728,0.89377,0.49083,0.076449,0.86786,0.82556,0.18647,0.53258,0.80859,0.12479,0.57494,0.78485,0.091586,0.61284,0.51369,0.047334,0.85666,0.46654,-0.062532,0.88226,0.22306,-0.041932,0.97388,-0.056429,-0.009888,0.99835,-0.26875,-0.37696,0.88635,-0.1449,-0.60695,0.7814,-0.064119,-0.5837,0.80941,-0.076754,-0.046327,0.99594,-0.059145,-0.14569,0.98755,-0.38435,-0.10617,0.91705,-0.49867,-0.60201,0.62358,-0.76806,-0.15168,0.62212,-0.79492,-0.46867,0.38523,-0.98691,-0.11762,0.11029,-0.9996,-0.001099,-0.027802,-0.9946,-0.089297,-0.052736,-0.86468,0.46028,-0.20106,-0.9208,0.14606,-0.36161,-0.99042,0.078066,0.11374,-0.93649,0.1091,0.33323,-0.93353,-0.20872,0.29139,-0.62328,0.28724,0.72729,-0.33116,0.30378,0.89331,0.003113,0.30317,0.95291,0.17701,0.3347,0.92553,-0.052736,0.41392,0.90878,-0.28456,0.37925,0.88043,-0.1279,0.28718,0.94928,-0.1362,-0.21177,0.96777,-0.03769,-0.65508,0.75457,0.12503,-0.38588,0.914,0.30341,-0.53935,0.78548,0.23014,-0.72677,0.64714,0.52361,-0.66091,0.53758,0.54323,-0.37046,0.75341,0.16822,-0.24851,0.95389,0.18967,0.206,0.95999,0.49706,0.13288,0.85745,0.84848,-0.097995,0.52004,0.755,-0.44285,0.48351,0.88876,-0.32487,0.32328,0.95434,-0.14011,0.26377,0.77636,0.21244,0.59337,0.82299,0.18647,0.53651,0.83789,-0.48637,0.24763,0.88809,-0.14106,0.43745,0.5634,-0.59652,0.57158,0.77227,-0.12751,0.62233,0.66652,-0.038453,0.74447,0.63332,-0.32942,0.70025,0.11686,-0.73028,0.67302,0.65011,-0.72237,0.23551,0.96164,-0.2595,0.088778,0.96545,-0.17646,0.19157,0.80926,-0.37168,0.45485,0.54967,-0.44392,0.70763,-0.057588,-0.27155,0.96066,0.77612,-0.12684,0.61766,0.97403,-0.006745,0.2262,0.9425,-0.25864,0.21158,0.94717,-0.27274,0.16871,0.94565,-0.26148,-0.19321,0.98575,-0.060701,0.15677,0.90362,-0.14975,-0.40126,-0.051576,0.098575,-0.99377,-0.94571,-0.25584,-0.20032,-0.65349,0.034639,-0.75613,-0.72155,0.10166,-0.68483,-0.9212,-0.3346,-0.1984,-0.53239,-0.57491,-0.62126,-0.4358,-0.88015,-0.18796,0.40086,-0.75304,-0.52168,0.13419,-0.91363,0.38368,0.68801,-0.67892,0.25626,0.52223,-0.4677,0.71306,0.90939,0.029786,0.41481,0.91495,0.22422,0.33555,0.82391,0.52324,-0.21763,0.61373,0.773,-0.16059,0.26395,0.62014,-0.73873,0.37995,0.59508,-0.70812,0.84744,0.46934,-0.24799,0.93835,-0.339,-0.067263,0.8554,-0.24253,-0.45763,0.65847,0.048921,-0.751,0.13886,0.019868,-0.99011,-0.24979,-0.22575,-0.94159,-0.19034,0.47755,-0.85769,0.34449,0.61721,-0.70736,-0.21467,0.41279,-0.88513,-0.099887,0.40703,-0.90793,0.12052,0.68331,-0.72008,0.29762,0.94464,-0.13794,0.067171,0.55461,-0.82937,-0.08063,0.30232,-0.94977,0.11679,0.032289,-0.99262,0.26899,-0.20209,-0.94168,0.59346,-0.30818,-0.74346,0.64772,-0.30412,-0.69851,0.91705,-0.33521,-0.21589,0.94031,-0.25867,-0.22114,0.97241,-0.091037,-0.2147,0.97732,0.14548,0.15372,0.94449,0.087008,-0.31681,0.74606,-0.2327,-0.62386,0.65719,-0.32218,-0.68136,0.24049,-0.28306,-0.92843,0.26292,-0.24998,-0.93185,0.64141,-0.024049,-0.76681,0.31278,0.007721,-0.94977,0.20112,0.38716,-0.89978,0.010498,0.41118,-0.91147,0.2982,0.24409,-0.92276,0.68429,0.10373,-0.72176,0.91946,0.10752,-0.37818,0.98654,0.12439,0.10605,0.846,0.12766,0.51762,0.54344,0.13074,0.82916,0.15268,0.13758,0.97864,0.14945,0.13651,0.97928,0.13428,0.093234,0.98654,-0.12949,0.064638,0.98944,-0.13016,0.061617,0.98956,-0.32322,0.066744,0.94394,-0.3516,0.009919,0.93606,-0.60146,-0.018647,0.79867,-0.90494,0.062227,0.42091,-0.88998,0.07297,0.45009,-0.62227,0.077151,0.77895,-0.88675,0.10932,0.44911,-0.56716,0.077425,0.81994,-0.64477,0.046937,0.7629,-0.91589,0.084078,0.3925,-0.68249,0.028291,0.73031,-0.9267,0.061678,0.37065,-0.77633,0.036073,0.62926,-0.9555,0.055239,0.28965,-0.96597,0.090762,0.24216,-0.72152,0.087069,0.68685,-0.82089,0.10392,0.56151,-0.97296,0.12229,0.19593,-0.97989,0.11362,-0.16395,-0.98288,0.087497,-0.16199,-0.99231,0.073763,-0.099338,-0.99347,0.10727,-0.038087,-0.99176,0.12726,-0.013184,-0.98987,0.13559,0.041688,-0.99109,0.12949,0.030793,-0.99185,0.12665,-0.011383,-0.83596,0.19523,-0.51283,-0.88906,0.21253,-0.40538,-0.92337,0.18629,-0.33567,-0.88205,0.17747,-0.43641,-0.87381,0.12909,-0.46876,-0.84088,0.10428,-0.53105,-0.87558,0.12314,-0.46709,-0.78832,0.13483,-0.60027,-0.4734,0.16331,-0.86557,-0.46297,0.18534,-0.86676,-0.017884,0.22687,-0.97375,0.090701,0.17005,-0.98123,0.35701,0.17267,-0.91797,0.3169,0.12403,-0.94027,0.35011,0.094577,-0.93191,0.23289,0.008576,-0.97244,0.21,-0.031495,-0.97717,0.1988,-0.035554,-0.97937,0.19553,-0.038179,-0.97992,0.12445,0.079836,-0.98898,0.28104,-0.044008,-0.95868,0.3242,0.088565,-0.9418,0.051424,0.23963,-0.96948,0.644,-0.019776,-0.76476,0.92209,0.032716,-0.38557,0.99432,0.085177,0.063631,0.8876,0.10596,0.4482,0.6024,0.11383,0.79,0.2107,0.12064,0.97006,-0.14478,0.13126,0.98071,-0.11682,0.13123,0.98444,-0.16428,0.073794,0.98364,-0.30668,0.06061,0.94986,-0.34684,0.038453,0.9371,-0.40019,0.038392,0.91562,-0.48918,0.054323,0.87048,-0.51555,0.098209,0.85119,-0.59157,0.093051,0.80084,-0.48161,0.17035,0.85964,-0.40013,0.11203,0.90957,-0.33692,0.090365,0.93716,-0.28602,0.066836,0.95587,-0.26374,0.099033,0.95947,-0.3162,0.11765,0.94134,-0.38636,0.16712,0.90704,-0.40736,0.23478,0.88253,-0.20917,0.19111,0.95901,-0.14304,0.15836,0.97696,0.19657,0.15305,0.96844,0.18848,0.17029,0.96719,0.48479,0.13855,0.86358,0.61428,0.13886,0.77676,0.87265,0.096255,0.47871,0.99832,0.05414,0.019684,0.9006,0.01001,-0.43452,0.99817,0.050996,-0.03235,0.9986,0.049074,0.019196,0.88351,0.083926,0.4608,0.92843,0.038697,-0.36943,0.66228,0.046052,-0.74779,0.65288,-0.025849,-0.75698,0.34941,-0.025941,-0.93658,0.31623,0.091067,-0.94427,0.42406,0.11286,-0.89856,0.67953,0.082736,-0.72893,0.88293,0.0553,-0.4662,0.24558,0.15699,-0.95654,0.26408,0.091342,-0.96014,0.21891,-0.02942,-0.97528,0.36402,0.16456,-0.91671,-0.22172,0.26673,-0.9379,-0.18763,0.16706,-0.96789,-0.050111,0.040071,-0.99792,0.13095,-0.014893,-0.99127,-0.057283,0.095492,-0.99377,-0.50114,0.12915,-0.85565,-0.51494,0.10709,-0.85049,-0.58782,0.19251,-0.78573,-0.62886,0.24674,-0.7373,-0.63961,0.30812,-0.70422,-0.50609,0.26194,-0.82171,-0.18873,-0.00235,-0.98199,-0.15662,0.34718,-0.92459,0.067995,-0.00354,-0.99765,0.024415,0.35234,-0.93551,0.081149,-0.20466,-0.97543,0.077364,-0.24531,-0.96634,0.07297,-0.27686,-0.9581,0.27009,-0.29011,-0.91806,0.07947,-0.17502,-0.98132,0.088839,0.05533,-0.99448,0.14835,0.4377,-0.88678,0.2931,0.90054,-0.32105,0.43696,0.85617,0.27567,0.44664,0.78408,-0.43089,0.72811,0.62297,-0.28584,0.9194,0.28791,-0.26783,0.9996,0.015656,0.02234,-0.76461,-0.074953,-0.64009,-0.81448,0.40376,-0.41664,-0.65874,0.74496,0.10523,-0.30674,0.78121,0.54369,-0.28559,0.8302,0.47871,-0.36109,0.93234,-0.018006,-0.49849,0.56319,-0.65899,-0.063173,0.13788,-0.9884,0.16089,-0.31474,-0.93542,0.48134,0.7561,-0.44337,0.64733,-0.053133,-0.76034,0.99979,-0.003052,-0.019105,0.68935,0.55913,0.46055,-0.43324,0.90124,-0.002686,0.37593,0.11942,0.91888,0.41371,-0.11747,0.90277,-0.50105,-0.211,0.83926,-0.65951,0.001679,0.75167,-0.91018,-0.014588,0.41392,-0.87942,-0.063417,0.47179,-0.44166,-0.56316,0.69839,-0.80621,-0.56719,0.16813,-0.15766,-0.97974,-0.12351,0.33433,-0.72481,0.60234,0.85952,0.071139,0.50609,0.99249,-0.021821,-0.12018,0.65178,-0.035737,-0.75753,0.69756,-0.63378,-0.33421,0.68545,-0.70132,0.19562,0.43583,-0.5436,-0.71728,-0.11634,-0.5006,-0.85781,-0.47026,-0.62551,-0.62252,-0.7788,-0.51646,-0.35591,-0.98376,0.031495,-0.17658,-0.9512,0.21244,-0.22367,-0.84725,0.2942,0.44224,-0.69582,0.18995,0.69259,-0.74953,-0.10187,0.65404,-0.83218,0.14133,0.53615,-0.81552,0.30805,0.48988,-0.81689,0.36735,0.44462,-0.54805,0.55126,0.62908,-0.45836,0.62151,0.63527,-0.2729,0.57415,0.7719,0.054323,0.57726,0.81472,0.15824,0.54259,0.82491,-0.025788,0.57503,0.81768,-0.21198,0.57924,0.78707,-0.1099,0.58834,0.80108,0.21964,0.51561,0.82818,0.51427,0.45234,0.7286,0.48296,0.53288,0.69478,0.54311,0.52266,0.65712,0.24622,0.64138,0.72662,0.20795,0.64806,0.73263,0.005799,0.66439,0.74734,0.10904,0.63002,0.76885,0.40184,0.68581,0.60674,0.08533,0.60711,0.79,0.30119,0.40156,0.86486,-0.035005,0.57808,0.81521,0.051973,0.34986,0.93533,0.2909,0.01587,0.9566,0.11417,-0.00885,0.99341,0.2953,-0.51808,0.80273,-0.071535,-0.45763,0.88623,0.46724,-0.26246,0.84423,0.77184,0.10071,0.62774,0.66948,0.44737,0.59294,0.82897,0.51482,0.21845,0.54131,0.82574,0.15839,0.4872,0.61711,0.61785,0.74279,0.25358,0.61959,0.56447,0.38911,0.72796,0.7318,0.53389,0.42351,0.43522,0.81283,0.3871,0.966,0.18687,0.17856,0.85986,-0.13294,0.49287,-0.95526,-0.20689,-0.21131,-0.95688,0.29014,0.011719,-0.83776,0.25452,0.48305,-0.60552,0.64934,0.46004,-0.35765,0.50267,0.78701,-0.46315,0.067324,0.88369,-0.17179,0.39039,0.90445,-0.018647,0.5764,0.81692,-0.11173,0.62603,0.77172,-0.13285,0.65163,0.74679,-0.21104,0.68084,0.70135,-0.37675,0.62889,0.68007,-0.53386,0.45741,0.71111,-0.48311,0.73864,0.47005,-0.72011,0.68908,-0.081149,-0.59264,0.16599,-0.78817,-0.5219,0.060427,-0.85086,0.16263,0.043703,-0.98569,0.019349,0.02826,-0.99939,-0.20194,0.69317,0.69188,-0.02768,0.6672,0.74435,0.042787,0.6184,0.78466,0.051668,0.61135,0.78967,-0.029298,0.56325,0.82574,-0.023072,0.59825,0.80093,-0.089175,0.62596,0.77471,-0.078677,0.63094,0.77181,-0.074526,0.28175,0.95657,-0.30537,0.011475,0.95215,-0.37034,-0.60149,0.70782,-0.60143,-0.37187,0.70705,-0.90729,-0.32182,0.27055,-0.10157,-0.033082,0.99426,-0.3119,0.3878,-0.86734,-0.5508,-0.76333,0.33747,0.73818,-0.32307,-0.59215,0.31959,-0.32496,-0.89007,0.93994,-0.2674,-0.21201,0.87072,-0.44881,-0.20096,0.8872,-0.35231,-0.29777,0.62313,-0.41145,-0.66512,0.704,-0.26219,-0.66002,0.94263,-0.19785,-0.26878,0.85046,0.009705,-0.52592,0.38276,-0.027833,-0.9234,0.33656,-0.30796,-0.88986,0.40321,-0.40699,-0.81961,0.13456,-0.42692,-0.89419,0.12961,-0.34806,-0.92843,-0.065279,-0.38911,-0.91885,-0.50941,-0.49318,-0.70513,0.053774,-0.95471,0.29258,0.42531,-0.8923,0.15119,0.10819,-0.99197,-0.065157,0.56423,-0.82281,0.067782,0.35935,-0.91324,0.19193,0.59947,-0.62914,0.49474,0.7373,-0.57015,0.36238,0.74331,-0.59108,0.31315,0.70919,-0.70092,0.075594,0.81692,-0.45094,0.35948,0.8482,-0.52196,0.089785,0.85489,-0.40129,0.32875,0.8945,-0.4391,0.083895,0.92618,-0.26725,0.266,0.95709,-0.27964,0.075594,0.95373,-0.23194,0.19126,0.944,-0.13684,0.30015,0.90268,-0.16245,0.39845,0.73522,-0.43822,0.51707,0.79299,-0.17353,0.58394,0.74261,-0.10147,0.66195,0.95309,-0.10001,0.28565,0.65453,-0.093051,0.75024,0.74367,-0.27442,0.60958,0.68749,-0.33393,0.6448,-0.00235,-0.91095,0.41243,0.009919,-0.98004,-0.1984,-0.18793,-0.81811,-0.54344,0.63814,-0.75912,0.1283,0.82549,-0.56438,-0.001495,0.90115,-0.38374,0.20158,0.71798,-0.07944,0.69149,0.80471,-0.019288,0.59331,0.65999,-0.087588,0.74612,0.77014,-0.19419,0.60753,0.86596,-0.18745,0.46361,0.8102,-0.35716,0.46474,0.85696,-0.22712,0.4626,0.7908,-0.18003,0.58498,0.93203,0.35868,0.05121,0.78204,0.5848,0.2154,0.10846,0.74926,-0.65331,0.29222,0.36232,-0.88504,0.19523,0.48488,-0.8525,0.38783,-0.078372,-0.91836,0.98941,0.14426,0.014649,0.76147,0.022065,0.64779,0.98596,-0.11152,-0.12409,0.85842,-0.45421,-0.23829,0.39195,-0.52495,-0.75549,0.28544,-0.59734,-0.74944,0.72939,-0.64019,-0.24107,0.9284,-0.35701,0.10276,0.90085,-0.4329,0.032502,0.82586,-0.56166,-0.049654,0.75408,-0.65261,-0.073519,0.64803,-0.70699,0.28315,0.9371,-0.29499,0.18647,0.96921,-0.2454,-0.020081,0.92383,-0.38096,-0.036805,0.88003,-0.45711,-0.1286,0.56825,-0.41246,-0.71197,0.63497,-0.21235,-0.74276,0.9986,0.052614,0.0047,0.92807,0.11216,-0.35508,0.51186,0.081057,-0.85522,0.095523,0.053316,-0.99399,0.10874,-0.078982,-0.99091,0.12409,-0.26252,-0.95688,-0.083956,-0.35102,-0.93258,-0.14197,-0.46281,-0.875,-0.38279,-0.51442,-0.76733,-0.49132,-0.38456,-0.78146,-0.72109,-0.51698,-0.4612,-0.70519,-0.61016,-0.36109,-0.77746,-0.49336,-0.39003,-0.52211,-0.84518,0.11402,-0.24827,-0.96692,0.058321,-0.38966,-0.92047,-0.029115,-0.19971,-0.97049,0.13511,0.080996,-0.97864,0.18891,0.28245,-0.74807,0.60048,0.47609,-0.24827,0.84359,0.23035,-0.30506,0.92401,0.19428,0.008789,0.98089,-0.093387,-0.072878,0.99295,-0.067232,-0.29038,0.95453,-0.38337,-0.050325,0.92221,-0.27192,-0.53685,0.79861,0.045656,-0.89212,0.44945,0.20957,-0.48756,0.84753,0.26771,-0.84277,0.4669,0.42662,-0.39143,0.81533,0.57204,-0.61947,0.53755,0.4677,-0.42601,0.77444,0.68722,-0.13752,0.71331,0.59673,-0.21479,0.77312,0.699,0.060396,0.71255,0.42753,0.25831,0.86627,0.58654,0.39763,0.70556,0.5659,0.087039,0.81982,0.4019,0.36091,0.84152,0.37925,0.48805,0.78607,0.067507,-0.40278,0.91278,0.25376,-0.080905,0.96387,0.35346,-0.22101,0.90893,0.4095,-0.2306,0.88266,0.48308,-0.13395,0.86523,0.40382,-0.00885,0.91476,0.67827,-0.24009,0.69442,0.74737,-0.29975,0.59291,0.77868,-0.34025,0.52712,0.79983,-0.39735,0.44978,0.83254,-0.24897,0.4948,0.84728,-0.18155,0.49907,0.93133,-0.11359,0.34596,0.75454,-0.14307,0.64043,0.80184,-0.027345,0.59688,0.80068,0.10968,0.58892,0.93509,-0.005463,0.35435,0.84018,0.17823,0.51216,0.89618,0.064028,0.43898,0.8634,0.011811,0.50435,0.902,0.003754,0.43165,0.92413,0.016816,0.38163,0.91549,0.043794,0.39988,0.94592,0.046968,0.3209,0.94162,0.11881,0.31501,0.98349,0.15052,0.10028,-0.26194,0.90261,-0.3415,0.20243,0.74679,0.63347,0.76458,-0.013184,0.64437,0.89135,-0.11585,0.43818,0.79849,-0.048372,0.60002,0.006623,0.25837,0.966,0.61458,0.19361,0.7647,0.64913,0.54897,0.52651,0.011963,0.98965,-0.14283,0.29054,-0.51268,-0.80789,0.89956,-0.43529,0.035371,0.84967,-0.4799,0.21839,-0.17844,0.90127,0.39476,-0.54885,0.7134,0.43559,0.99325,-0.10807,0.041566,0.89441,-0.39903,0.20197,0.91842,-0.29328,0.26545,0.88861,0.11518,0.44389,0.8764,0.11209,0.46831,0.75268,0.33024,0.56954,0.71441,0.3878,0.58239,0.46904,0.61431,0.63448,0.29695,0.60024,0.74264,0.18403,0.75387,0.6307,0.18226,0.77844,0.60067,0.48439,0.64895,0.58666,-0.14249,0.74395,0.65285,-0.14084,0.80779,0.57237,-0.45054,0.71361,0.53636,-0.45329,0.68859,0.56597,-0.69945,0.49467,0.51576,-0.7116,0.52651,0.46516,-0.87899,0.22465,0.42052,-0.90161,0.16086,0.40144,-0.96387,-0.074465,0.25572,-0.95639,-0.075533,0.28211,-0.96658,-0.14887,0.20866,-0.95193,-0.18604,0.24329,-0.96582,-0.17664,0.18964,-0.9599,-0.12598,0.2504,-0.9664,-0.20014,0.16117,-0.919,-0.30119,0.25425,-0.9126,-0.34831,0.21403,-0.87567,-0.21976,0.42991,-0.8421,-0.34095,0.41783,-0.93936,-0.30592,-0.15476,-0.81811,-0.57436,0.028016,-0.95105,-0.29493,0.092196,-0.87497,-0.47691,0.083254,-0.88534,-0.36674,0.28568,-0.76403,-0.23337,0.60143,-0.81042,-0.23591,0.53621,-0.88614,-0.19242,0.42152,-0.82757,-0.56072,0.025941,-0.68487,-0.61223,-0.39512,-0.12027,-0.57738,-0.80752,-0.67834,-0.71835,-0.15424,-0.004791,-0.62706,-0.77892,-0.32063,-0.50346,-0.8023,-0.52324,-0.76846,-0.36836,-0.72686,-0.62163,-0.29188,-0.80242,-0.55773,-0.21216,-0.85192,-0.4778,-0.21418,-0.84896,-0.52788,-0.024171,-0.7441,-0.66726,0.032411,-0.57778,-0.789,-0.20884,-0.55473,-0.83032,-0.052797,-0.65679,-0.73443,0.1709,-0.665,-0.71371,0.21989,-0.54732,-0.74654,0.37822,-0.74072,-0.38539,0.55025,-0.57479,-0.35588,0.73684,-0.24039,-0.8016,0.54738,0.036988,-0.86236,0.50493,-0.037141,-0.49727,0.86679,-0.3437,-0.36384,0.86569,-0.56768,-0.10831,0.81607,-0.60875,-0.24574,0.75433,-0.7748,-0.45561,0.43825,-0.76473,-0.6129,0.19877,-0.72683,-0.68322,-0.070193,-0.80499,-0.57125,0.1601,-0.78359,-0.5002,0.36839,-0.63027,-0.35038,0.69277,-0.52226,-0.32597,0.78799,-0.47566,-0.30592,0.8247,-0.51555,-0.35997,0.77755,-0.71172,-0.4575,0.53301,-0.70708,-0.374,0.60008,-0.84716,-0.42094,0.32414,-0.77706,-0.55882,0.28959,-0.88775,-0.45296,0.081698,-0.78665,-0.61123,-0.086856,-0.66964,-0.71477,-0.20161,-0.78375,-0.60537,-0.13861,-0.87704,-0.46742,-0.11072,-0.9064,-0.42238,0.002289,-0.83941,-0.53801,-0.076815,-0.78262,-0.60753,-0.1355,0.22654,-0.95788,-0.1764,-0.72027,-0.58724,0.36921,-0.93783,-0.32951,0.10895,-0.8757,-0.35795,0.32401,-0.67083,-0.33338,0.6624,-0.42225,-0.40968,0.80859,-0.25825,-0.29972,0.91839,-0.41905,-0.14982,0.8955,-0.68322,-0.34587,0.64309,-0.493,-0.48555,0.72188,-0.18067,-0.8887,0.42134,-0.53148,-0.73244,0.42546,-0.51732,-0.52687,0.67434,-0.25974,-0.59157,0.76324,-0.024445,-0.57356,0.81878,-0.34001,0.21216,0.91617,-0.64205,0.3072,0.70238,-0.77358,-0.28709,0.56487,-0.78283,0.25739,0.56645,-0.82446,-0.095584,0.55776,-0.63436,0.1496,0.75838,-0.16562,-0.42665,0.8891,-0.19022,-0.83169,0.52159,-0.51283,-0.43706,0.73888,-0.65911,-0.31022,0.68505,-0.61754,-0.15354,0.77139,-0.64763,0.064119,0.75921,-0.51207,-0.080599,0.85513,-0.46986,-0.20817,0.85781,-0.64065,-0.21332,0.73757,-0.44743,-0.12979,0.88482,-0.48018,-0.081362,0.87338,-0.46394,-0.013672,0.88574,-0.5334,-0.18314,0.82577,-0.53829,-0.072237,0.83962,-0.48881,0.087588,0.86795,-0.54473,0.012085,0.8385,-0.40782,0.11374,0.90591,-0.55715,-0.074587,0.82702,-0.3581,-0.035066,0.93301,-0.50813,0.011505,0.86117,-0.66103,0.066805,0.74734,-0.71566,-0.008515,0.69839,-0.70952,-0.10138,0.69732,-0.80456,-0.036287,0.59273,-0.90729,-0.065157,0.41539,-0.72744,-0.00824,0.68612,-0.88247,-0.19981,0.42576,-0.93945,-0.30512,0.15589,-0.82256,-0.30454,0.48021,-0.94363,-0.004364,0.33094,-0.90695,-0.086428,0.41224,-0.78677,-0.26591,0.55699,-0.6245,-0.60363,0.49556,-0.57588,-0.33802,0.74435,-0.62447,0.059236,0.77877,-0.54277,0.14997,0.82635,-0.35929,-0.088351,0.92901,-0.16687,-0.08768,0.98206,-0.20408,0.17048,0.96399,-0.30812,0.34248,0.88754,-0.19373,0.18708,0.96304,-0.27775,0.24894,0.92782,-0.19898,-0.48955,0.84893,-0.21873,-0.60652,0.76437,-0.063387,-0.71935,0.69173,-0.077303,-0.71264,0.69726,-0.033448,-0.7698,0.63738,-0.012085,-0.83004,0.55751,-0.15189,-0.75396,0.63909,-0.095157,-0.94089,0.32505,-0.33094,-0.80587,0.49092,-0.17899,-0.73275,0.65651,-0.22453,-0.67699,0.70089,-0.16327,-0.43944,0.8833,-0.35069,-0.41469,0.83966,-0.33842,-0.3617,0.86868,-0.46089,-0.29255,0.83783,-0.61571,0.008057,0.7879,-0.67653,-0.27934,0.68136,-0.86718,-0.016968,0.49767,-0.91324,-0.13953,0.38273,-0.79107,-0.40046,0.46239,-0.87616,-0.27561,0.3954,-0.77267,-0.36497,0.51936,-0.88583,-0.30149,0.35264,-0.93097,-0.17185,0.32206,-0.93295,-0.13382,0.33415,-0.92499,-0.034242,0.3784,-0.84719,0.080691,0.5251,-0.60244,0.08771,0.7933,-0.40584,-0.000671,0.91394,-0.26136,-0.078066,0.96207,-0.2628,-0.29914,0.91729,-0.2541,-0.69475,0.67281,-0.17756,-0.60106,0.7792,-0.2063,-0.70968,0.67361,-0.19279,-0.59123,0.78311,-0.16501,-0.28202,0.9451,-0.31449,-0.59032,0.74334,-0.35124,-0.64034,0.68303,-0.12876,-0.62322,0.77133,-0.27183,-0.6263,0.73064,-0.51302,-0.73278,0.447,-0.3683,-0.7593,0.53645,-0.34867,-0.70986,0.61193,-0.63414,-0.64266,0.42991,-0.39021,-0.60503,0.69399,-0.2107,-0.48091,0.85104,-0.58132,-0.18851,0.7915,-0.59313,-0.048311,0.80364,-0.63607,0.007538,0.77157,-0.455,0.44444,0.77163,-0.30747,0.12644,0.94308,-0.13935,-0.099246,0.98523,-0.048463,-0.037233,0.99811,-0.054109,-0.000824,0.9985,-0.40245,0.15513,0.90219,-0.25614,0.22532,0.94,-0.29255,0.3108,0.90429,-0.48198,0.29191,0.82611,-0.4994,0.070528,0.86346,-0.66118,0.058809,0.74789,-0.63076,0.335,0.69991,-0.50371,0.37654,0.77746,-0.21583,0.4236,0.87973,-0.66826,0.24924,0.70092,-0.71841,0.301,0.62709,-0.82806,0.228,0.51213,-0.88962,0.079562,0.44969,-0.67141,-0.13321,0.729,-0.81811,-0.016877,0.57479,-0.95312,0.15958,0.25703,-0.94366,-0.05533,0.32615,-0.72979,-0.050661,0.68178,-0.70876,-0.61351,0.34815,-0.44233,-0.51399,0.73492,-0.03943,-0.95053,0.30802,-0.28086,-0.9187,0.27763,-0.25767,-0.95587,0.141,-0.32722,-0.9415,0.080325,-0.4294,-0.82839,0.3596,-0.73977,-0.46342,0.48778,-0.4467,-0.48454,0.7521,-0.57744,-0.028748,0.81588,-0.044618,-0.44945,0.89218,0.022919,-0.80813,0.58852,0.025056,-0.81686,0.57628,0.50652,-0.73257,0.4547,0.37599,-0.40028,0.83569,0.7055,-0.31547,0.6346,0.39729,0.071017,0.91491,-0.10801,0.071139,0.99158,-0.13459,0.42784,0.89377,-0.67647,0.28031,0.68102,-0.56627,0.46886,0.67782,-0.88183,0.22147,0.41624,-0.94168,0.15424,0.29902,-0.93777,-0.053499,0.34303,-0.62041,-0.71413,0.32414,-0.90213,0.052919,0.42817,-0.67141,0.33519,0.66094,-0.73629,0.081027,0.67177,-0.58751,-0.39576,0.7058,-0.46657,-0.33433,0.81884,-0.50517,0.19553,0.84054,-0.13785,0.49553,0.85757,-0.13999,0.5508,0.82278,0.31422,0.55901,0.7673,0.44523,0.44951,0.77438,0.64663,0.37898,0.66198,0.71862,0.38536,0.57885,0.45711,0.39634,0.79617,0.76949,0.22407,0.59801,0.81283,0.33387,0.47728,0.74789,0.2472,0.61605,0.47356,0.17496,0.86319,0.52565,-0.010651,0.85061,0.67376,0.13584,0.72634,0.83108,0.34226,0.43828,0.84201,0.1287,0.52385,0.67385,-0.58162,0.45561,0.73367,-0.4658,0.49467,0.8514,0.12842,0.50853,0.51051,-0.095462,0.85452,0.57448,0.082827,0.81426,0.30308,-0.00116,0.95294,0.29301,0.15165,0.94397,0.23933,0.36576,0.89938,0.39851,0.44038,0.8045,0.50389,0.42613,0.75131,0.55629,0.21338,0.8031,0.27805,0.27574,0.92013,-0.12705,0.304,0.94415,-0.081057,-0.18067,0.98019,-0.21842,-0.4434,0.86929,-0.19657,-0.12546,0.97241,-0.26731,0.087374,0.95962,-0.40645,0.13587,0.90347,-0.43757,0.12052,0.89105,-0.71249,0.084964,0.69649,-0.43242,0.27821,0.85766,-0.79507,0.16163,0.58458,-0.55306,0.5132,0.65627,-0.90823,-0.037629,0.4167,-0.90896,-0.033937,0.41545,-0.86056,0.006226,0.50929,-0.13831,0.50648,0.85104,-0.12818,0.32072,0.93844,-0.1203,0.21308,0.96957,-0.1113,0.10681,0.98801,-0.094333,-0.064364,0.99344,-0.065798,-0.30107,0.95132,0.12543,-0.40819,0.9042,0.020173,-0.10328,0.99445,0.047884,0.11963,0.99164,0.18277,0.1962,0.96335,0.2075,0.062075,0.97626,0.074892,-0.043641,0.99622,0.026734,-0.2624,0.96457,0.27213,-0.53026,0.80294,0.35163,-0.25056,0.90194,0.50249,-0.28416,0.81652,0.43791,-0.08417,0.89505,0.45149,0.36387,0.81466,0.25291,0.45399,0.85433,0.038301,0.34468,0.93793,0.18805,0.17475,0.96646,0.27854,0.16617,0.94592,0.27146,0.061586,0.96045,0.27912,-0.055422,0.95865,0.32173,-0.12711,0.93823,0.33717,0.006317,0.9414,0.38115,-0.4297,0.81857,0.16718,-0.92938,0.32902,0.41081,-0.88742,0.20893,0.4868,-0.85815,0.163,0.39845,-0.84915,0.34663,0.75564,-0.24161,0.60875,0.45595,-0.27073,0.8478,-0.028748,-0.54833,0.83575,-0.5518,-0.37391,0.74542,-0.79754,-0.40065,0.45097,-0.69872,-0.039674,0.71425,-0.55187,0.031007,0.83334,-0.52318,0.022095,0.85189,-0.40245,-0.5612,0.7232,-0.4398,-0.69954,0.56319,-0.18076,-0.90909,0.37529,-0.7235,-0.044923,0.6888,-0.09415,-0.93594,0.33931,-0.26112,-0.83953,0.47639,-0.040895,-0.90066,0.43254,-0.19199,-0.52989,0.82601,-0.23017,0.032807,0.97256,-0.23337,-0.049989,0.9711,-0.10596,0.049623,0.9931,-0.10291,0.01822,0.99451,-0.022309,-0.58577,0.81014,-0.12351,-0.9067,0.40324,0.049806,-0.95819,0.28175,0.077425,-0.97284,0.21812,0.047914,-0.89941,0.43446,0.2201,-0.87152,0.43815,0.12607,-0.49733,0.85833,0.13382,-0.88275,0.4503,0.35466,-0.48369,0.80013,0.32411,-0.77963,0.53584,0.45009,-0.60845,0.65358,0.55812,-0.18561,0.80871,0.32786,0.10923,0.93838,0.0206,0.058473,0.99805,0.04059,-0.021943,0.99893,0.35728,0.12409,0.92569,0.53603,0.086734,0.83969,0.45726,0.17725,0.87146,0.46962,-0.042238,0.88183,0.43254,-0.34025,0.83493,0.24549,-0.78707,0.56587,0.28108,-0.86178,0.42222,0.21055,-0.90472,0.37028,0.009827,-0.95813,0.28614,0.088321,-0.95422,0.28565,0.044252,-0.98343,-0.17569,0.32627,-0.33305,0.88464,0.4362,-0.19221,0.87906,0.39287,-0.19074,0.89956,0.50035,-0.18335,0.84616,0.38401,-0.089206,0.91897,0.36372,0.020081,0.93127,0.35319,0.10401,0.92975,0.38481,0.021821,0.92273,0.16483,0.018433,0.98615,0.013398,0.25291,0.96738,-0.017792,-0.07239,0.99719,-0.14472,-0.04709,0.98834,-0.053041,0.44023,0.8963,0.081851,0.16636,0.98264,0.19367,0.51091,0.83752,0.45503,0.11933,0.88241,0.41865,0.0553,0.90643,0.65163,-0.511,0.56053,0.35756,-0.52852,0.76992,0.55013,-0.62395,0.55495,0.24094,-0.57378,0.78274,0.12918,-0.44612,0.88556,0.32942,-0.57067,0.75216,0.14768,-0.55635,0.81768,0.12949,-0.25898,0.95715,0.22425,-0.30409,0.92584,0.43214,0.11536,0.89438,0.40239,0.19059,0.89538,0.21821,0.18766,0.95767,0.18824,0.34175,0.92071,0.61385,0.30586,0.72771,0.52776,0.21192,0.8225,0.69195,0.23829,0.68148,0.73617,0.14716,0.66057,0.56938,-0.15177,0.80792,0.33403,-0.21116,0.91858,0.25245,-0.35292,0.90094,0.068941,-0.41566,0.90689,0.13581,-0.56899,0.81103,0.24918,-0.64324,0.72396,0.20618,-0.66744,0.71551,0.094974,-0.60033,0.79406,0.21168,-0.63231,0.7452,0.38142,-0.73293,0.56328,0.18799,-0.69512,0.69384,0.19321,-0.70669,0.68059,0.21531,-0.90905,0.3567,0.16974,-0.72103,0.67174,0.39885,-0.68078,0.61434,0.35505,-0.63781,0.68343,0.12009,-0.45689,0.88134,-0.043367,0.20249,0.9783,0.17533,0.21433,0.96088,-0.042512,-0.089267,0.99509,-0.14667,-0.010285,0.98911,-0.030274,0.1883,0.98163,0.17744,-0.033357,0.98355,0.31367,0.095645,0.94467,0.47194,0.18281,0.86245,0.32606,0.23893,0.91464,0.43211,0.16739,0.88611,0.19178,0.3375,0.92154,0.14994,0.3346,0.93033,0.0318,0.28065,0.95926,0.24546,-0.44749,0.85989,0.17933,-0.56578,0.8048,0.050172,0.37922,0.92392,0.067415,-0.70595,0.70501,0.07831,-0.69671,0.71303,0.067141,-0.82193,0.5656,0.24375,-0.59209,0.76809,0.43278,-0.24894,0.86642,0.74712,-0.24299,0.61864,0.55998,-0.48976,0.6682,0.35273,-0.69051,0.63146,0.059603,-0.76028,0.64681,0.15128,-0.81942,0.55284,0.47563,-0.70412,0.52721,0.62151,-0.47606,0.62215,0.81704,-0.10227,0.5674,0.82781,0.038697,0.55962,0.81884,0.14426,0.55556,0.79605,0.1406,0.58867,0.72283,0.16834,0.67016,0.79583,0.13681,0.58983,0.85525,0.049226,0.51582,0.84002,-0.12479,0.528,0.71099,-0.21305,0.67009,0.69717,-0.11396,0.70776,0.56215,0.028779,0.8265,0.47206,-0.23069,0.85083,0.32347,-0.81478,0.48109,0.54918,0.12094,0.82687,0.56285,0.12384,0.81719,0.55391,-0.051973,0.83093,0.4398,-0.085849,0.89395,0.57854,-0.20548,0.78933,0.63384,-0.2367,0.73632,0.41197,-0.26499,0.87179,0.12507,-0.26048,0.95734,0.53697,-0.2309,0.81137,0.66839,-0.3162,0.67321,0.66106,0.11371,0.74163,0.80526,0.088839,0.5862,0.080305,-0.19658,-0.97719,0.1258,-0.94626,0.29789,0.18979,-0.96854,-0.16092,0.15691,-0.18873,-0.96941,-0.61815,0.38597,0.68471,-0.62542,0.25581,0.73714,-0.52605,0.6444,0.55495,-0.3115,0.70364,0.6386,-0.3527,0.79141,0.49922,-0.1377,0.86328,0.48552,-0.14274,0.71371,0.68572,-0.12705,0.30436,0.94403,0.1012,0.25733,0.961,0.030519,0.73864,0.67336,0.080172,0.83575,0.5432,0.26487,0.72539,0.6353,0.41444,0.41539,0.80972,0.21592,-0.54286,0.81155,-0.57192,-0.60564,0.55321,-0.32554,-0.75991,0.56258,-0.41994,-0.7958,0.43623,-0.26795,-0.64449,0.71609,-0.53768,-0.34831,0.76782,-0.17902,-0.7449,0.64269,-0.090793,-0.8442,0.52824,-0.24256,-0.87277,0.42354,-0.31684,-0.50511,0.80276,-0.4351,0.27332,0.85784,-0.39616,0.27866,0.87484,-0.61162,-0.29719,0.73318,-0.55483,-0.29368,0.77838,-0.51765,-0.28394,0.80706,-0.5826,-0.1905,0.79009,-0.6863,-0.17893,0.70492,-0.82376,-0.26185,0.50282,-0.72085,-0.47813,0.50172,0.10291,-0.90017,0.42314,-0.4854,-0.87414,0.014191,0.45256,-0.75256,-0.47835,-0.77966,-0.43037,0.45482,-0.75854,-0.23774,0.60668,-0.41865,-0.32023,-0.84979,-0.014985,-0.54396,-0.83895,-0.1735,-0.13584,-0.9754,-0.11484,0.45311,-0.884,-0.96939,-0.14884,-0.19523,-0.81103,-0.37739,-0.44694,-0.71306,-0.15033,-0.68477,-0.84207,-0.069063,-0.53493,-0.99356,-0.051881,-0.10056,-0.98068,-0.15024,0.12519,0.13819,0.9436,-0.30082,-0.1243,0.72542,-0.67696,-0.17682,0.31428,-0.93271,-0.98096,-0.057466,-0.18549,-0.89871,-0.30448,-0.31556,-0.8638,-0.14429,0.48268,-0.82073,-0.35707,0.44591,-0.79803,-0.5218,0.30134,-0.85903,-0.17942,0.47941,-0.47008,0.67794,0.56511,-0.25046,0.23206,0.93988,0.29667,0.79998,0.5215,-0.98975,-0.078921,0.11878,-0.088198,0.91052,0.40391,-0.18158,0.96985,-0.16248,-0.83761,0.39674,0.37544,-0.91034,0.41151,0.043458,-0.9762,0.16331,-0.14261,-0.83889,-0.34687,0.41942,-0.86856,-0.40379,0.2873,-0.78057,0.050783,0.62294,-0.33702,-0.005829,-0.94146,-0.17777,-0.085238,-0.98035,-0.32395,0.90432,0.27787,-0.70989,0.63991,0.29414,-0.34135,0.876,0.34065,-0.74792,0.65838,0.084323,-0.24317,0.96969,0.022126,-0.67302,0.71859,-0.17502,-0.40666,0.56142,0.72069,-0.63112,0.7004,0.33326,-0.37126,0.90075,0.22529,-0.28437,0.94717,0.14814,-0.88055,0.46043,-0.11222,-0.31675,0.91143,0.26255,-0.31227,0.92761,0.2049,-0.93234,0.29899,-0.20328,-0.6657,0.62954,-0.40062,-0.17469,0.97107,-0.16269,-0.59355,0.71944,-0.36064,-0.16834,0.9718,-0.16498,-0.63439,0.65456,-0.41118,-0.92883,-0.11841,-0.35099,-0.92721,-0.090365,-0.36345,-0.6812,0.57622,-0.45152,-0.97281,-0.04004,-0.22803,-0.64574,0.65285,-0.39592,-0.95901,-0.125,-0.25416,-0.58303,0.68563,-0.4358,-0.84936,-0.02121,-0.52733,-0.71395,-0.4604,-0.52751,-0.73577,-0.45576,-0.5009,-0.63472,-0.71453,-0.29411,-0.73223,-0.66268,-0.15699,-0.58431,-0.81124,0.021302,-0.75909,-0.65004,0.034455,-0.67583,-0.70293,0.22156,-0.80728,-0.5602,0.18561,-0.8464,-0.38871,0.36396,-0.8558,-0.49123,0.16205,-0.85552,-0.48262,-0.18741,-0.89233,-0.44368,-0.082888,-0.69857,-0.4499,-0.55638,0.22877,-0.90796,-0.35108,0.83178,0.22715,0.50645,0.90539,-0.34349,0.24952,0.7564,0.43638,0.48723,0.86856,0.40043,0.29191,0.74105,0.58635,0.3271,0.84225,0.49739,0.20774,0.82266,0.47471,0.31282,0.76772,0.54506,0.33689,0.73916,0.61165,0.28193,0.64849,0.66506,0.37031,0.74612,0.63411,0.20283,0.66054,0.73284,0.16309,0.78927,0.57402,0.21793,0.3918,0.80746,0.44099,0.19413,0.98068,-0.023133,-0.56249,0.79043,0.24244,0.11338,0.75674,0.64379,-0.618,0.73992,0.26557,0.021455,0.86026,0.50935,-0.66164,0.72765,0.18091,-0.53777,0.73507,0.41279,0.23994,0.66649,0.7058,-0.41838,0.76016,0.49706,-0.92279,0.38154,0.053377,-0.83642,0.50786,0.20603,-0.98505,-0.01941,-0.17112,-0.91977,-0.25712,-0.29643,-0.77316,-0.48231,-0.41176,-0.79205,-0.4572,-0.40443,-0.4207,-0.74779,-0.51357,-0.23197,-0.82937,-0.50823,0.41496,-0.85235,-0.31822,0.46971,-0.82757,-0.30732,0.90329,-0.40422,0.14365,0.90439,-0.41734,0.088595,0.87289,-0.48363,0.06415,0.84259,0.15507,0.5157,0.8984,0.02884,0.43818,0.82019,-0.56783,-0.06943,0.9147,0.03003,0.40294,0.97903,-0.004669,0.20356,0.55178,0.57134,0.6075,0.71145,0.43498,0.5519,0.84927,0.11777,0.51463,0.99918,0.031739,0.025025,0.91989,0.27598,-0.27854,0.95926,-0.079348,0.27107,0.95871,0.23115,0.16553,0.6932,0.55519,-0.45958,0.283,0.55455,-0.7825,0.50279,0.34361,-0.79315,-0.19575,0.11472,-0.97391,0.68114,-0.16752,-0.71267,0.74999,-0.50426,-0.42802,0.19651,-0.61388,-0.76452,0.23521,-0.82256,-0.51768,0.28196,-0.88571,-0.36869,-0.4492,-0.72423,-0.52309,-0.84182,-0.34016,-0.41902,-0.97473,0.20026,-0.098849,-0.76013,0.59359,0.2642,-0.21277,0.79733,0.56478,-0.66121,0.69655,0.27848,-0.14521,0.80392,0.57668,0.074068,0.84872,0.52358,-0.59005,0.78454,0.1905,0.036714,0.58589,-0.80953,0.28239,0.88778,-0.36335,0.72326,-0.63488,0.27158,-0.62431,-0.77464,-0.10089,0.67901,-0.24412,0.69231,0.77413,-0.15491,0.61373,0.91165,0.40684,-0.057863,0.53917,0.62624,-0.5631,-0.082369,0.55507,-0.82769,-0.52623,0.22697,-0.81945,-0.8193,-0.088412,-0.56649,-0.79904,-0.060183,-0.59822,-0.58956,-0.15314,-0.79305,-0.046632,-0.25993,-0.96448,-0.58223,-0.23734,-0.77758,-0.52535,-0.56685,-0.63454,-0.84371,-0.17225,-0.50835,-0.94177,0.296,-0.1594,-0.88177,0.36363,-0.30036,-0.77419,-0.081851,-0.62758,-0.7589,0.075045,-0.64684,0.47111,0.72161,-0.50725,-0.029054,-0.99646,0.078677,0.35246,-0.93268,-0.076357,0.098178,-0.61852,0.77956,-0.55452,-0.70324,0.44487,-0.5258,-0.66524,0.53002,0.29542,-0.5164,0.80373,0.13758,-0.57946,0.80328,-0.455,-0.64742,0.61138,-0.91421,-0.39967,0.066744,-0.91632,-0.39979,-0.022523,-0.88626,-0.45125,-0.10447,-0.87805,0.042238,-0.4767,-0.9031,-0.096957,-0.41832,-0.93808,-0.1088,-0.32881,-0.81045,0.17664,-0.55849,-0.67061,0.24604,-0.69979,-0.20634,0.58138,-0.78701,0.56548,0.63186,-0.53002,0.94635,0.27601,0.16791,0.72402,-0.20627,0.65819,0.40715,0.63802,0.65352,0.33946,0.63546,0.69347,0.77523,0.27198,0.57005,0.69973,0.46843,0.53938,0.72042,0.30665,0.622,0.83725,0.33457,0.43251,0.93957,0.31162,0.14164,0.86801,0.42198,0.26167,0.93896,0.26353,0.22108,0.91412,0.34352,0.21522,0.85037,0.42671,0.30784,0.85968,0.38423,0.33659,0.92938,0.25483,0.26692,0.90759,0.16263,0.38704,0.71383,0.35832,0.60164,-0.32966,0.79913,0.50267,-0.96551,0.18842,-0.17957,-0.87988,-0.47371,-0.037324,-0.75631,-0.44056,-0.48357,-0.82189,-0.56035,0.10227,-0.004364,-0.8526,-0.52248,0.89911,0.009064,0.43757,0.86868,-0.49318,0.046175,0.87289,0.25221,0.41762,0.75457,0.23881,0.61119,-0.1604,0.65294,0.7402,-0.99155,0.11976,-0.049379,-0.74416,-0.66674,0.040437,-0.75771,-0.41154,-0.50642,-0.12064,-0.95532,-0.26978,-0.00882,-0.77133,-0.63634,0.85766,-0.51058,-0.060701,0.92196,-0.38096,0.069491,0.94122,0.24522,0.23231,0.97171,0.18705,0.14408,0.96735,0.16477,0.19245,0.94409,0.27799,0.17713,0.99603,0.03415,-0.082003,0.95032,-0.29603,0.096042,0.93173,-0.29682,0.20908,0.97076,-0.12143,0.20695,0.6552,-0.66939,-0.35011,0.55205,-0.7737,-0.31077,0.52623,-0.78878,-0.31755,0.71227,-0.51973,-0.47169,0.7387,-0.54521,-0.39625,0.99972,-0.021363,0.007935,0.8692,-0.48714,-0.084506,0.92074,-0.3874,-0.046175,-0.02356,-0.99921,0.03177,-0.75329,-0.60976,0.24638,-0.8019,-0.59691,-0.024628,0.043794,-0.96884,-0.24366,-0.074892,-0.83654,-0.54271,-0.78423,-0.54726,-0.29231,-0.73724,-0.42494,-0.52522,-0.093844,-0.72249,-0.68493,-0.29429,-0.79495,-0.5305,-0.71224,-0.46931,-0.52193,-0.74584,-0.44688,-0.49394,-0.85012,-0.26652,-0.45409,-0.82461,-0.29682,-0.48149,-0.94729,0.10443,-0.3028,-0.88031,-0.027314,-0.47359,-0.73971,0.64937,-0.17627,-0.94101,0.14817,-0.30415,-0.95892,0.067568,-0.2754,-0.86761,-0.28144,-0.40986,-0.69286,-0.48579,-0.53282,-0.24546,-0.8215,-0.51463,-0.03943,-0.78329,-0.62038,0.030793,0.97949,-0.19907,-0.08005,0.98206,-0.1706,-0.18741,0.95621,-0.22477,-0.11359,0.98865,-0.098148,0.38859,0.87494,0.28886,0.2342,0.91583,0.32615,0.39637,0.90069,0.17777,0.6737,0.71825,0.17374,0.73714,0.49663,0.4582,0.56694,0.60146,0.56282,0.32499,0.57598,0.75005,0.57433,0.28477,0.76748,0.77645,0.31803,0.54396,0.2971,0.95157,0.078768,0.42183,0.90323,0.078738,0.61345,0.69863,0.36811,0.46202,0.79583,0.39134,-0.065493,0.83523,0.54595,-0.25538,0.92883,0.26835,0.27348,0.94495,0.17957,0.18592,0.88098,0.43507,0.032105,0.81713,0.57549,-0.37641,0.78356,0.49425,-0.70846,0.55721,0.43309,-0.8551,0.32044,0.40751,-0.82571,0.30668,0.4734,-0.65502,0.74499,0.12607,-0.63958,0.73504,0.22498,-0.99078,0.11148,-0.076632,-0.93414,-0.33494,-0.12308,-0.89718,-0.37605,-0.23145,-0.77639,-0.42979,-0.46092,-0.42146,-0.9039,-0.072665,-0.17667,-0.62358,-0.7615,0.37678,-0.80993,-0.44942,0.1771,-0.966,0.1883,0.70354,-0.61675,0.35295,0.84426,-0.27607,-0.45933,0.99231,0.068636,0.10272,0.68981,-0.12149,0.71371,0.83126,0.26103,0.49074,0.27052,-0.4637,0.84365,-0.32655,-0.40953,0.85183,0.36552,-0.25916,-0.89395,-0.74908,-0.66127,0.03943,-0.61785,-0.73684,0.27433,-0.9295,-0.25806,-0.26341,-0.72512,-0.68719,0.043733,-0.10813,-0.85879,0.50072,-0.00766,-0.43016,0.90271,-0.44871,0.17219,0.87689,-0.9685,-0.20005,0.14802,-0.99097,-0.13389,-0.004242,-0.90594,-0.41435,-0.086825,-0.91745,-0.38569,0.097415,-0.94427,0.30979,-0.11121,-0.96292,0.25919,-0.074557,-0.80111,-0.55724,-0.2183,-0.026429,-0.91531,-0.40184,0.88699,-0.43904,0.14301,0.6603,0.42482,0.61925,0.76986,0.29276,0.56706,0.81686,0.50478,0.27912,0.76345,0.59426,0.25291,0.24513,0.92245,0.29826,0.37596,0.62075,0.68798,-0.82098,0.5504,0.15165,-0.96445,0.063997,-0.25633,-0.77288,-0.57701,-0.26399,-0.002533,-0.98663,-0.16285,-0.67055,-0.52947,-0.51961,0.1503,-0.95541,-0.25407,0.87585,-0.35658,0.32508,0.89782,-0.076968,0.43349,0.58907,0.54955,0.5924,0.71749,0.55876,0.41581,0.02707,0.94876,0.3148,-0.26725,0.81793,0.50945,-0.13364,0.863,0.48717,-0.22474,0.78665,0.575,-0.97211,0.23194,-0.033937,-0.78668,-0.30073,-0.53911,-0.14634,-0.88464,-0.4427,0.81631,-0.53087,0.22751,0.71868,-0.53288,0.44664,0.54918,0.22785,0.80401,0.39332,0.07416,0.91638,-0.19541,0.63042,0.75121,0.38582,0.067934,0.92004,-0.35084,0.76238,0.54372,-0.72991,0.58003,-0.36155,0.69784,0.39906,0.59474,-0.39289,-0.12134,-0.91153,0.33232,-0.72683,-0.60103,0.75942,-0.62786,0.17029,0.61144,-0.7242,0.3188,0.065737,-0.21003,0.97546,-0.42949,0.60323,0.67202,-0.59218,0.49596,0.63506,-0.80825,0.51387,-0.28742,-0.35862,0.75774,-0.54512,-0.14325,0.14878,-0.97842,-0.60384,-0.29341,-0.74111,0.18052,-0.75857,-0.62606,0.45909,-0.29646,-0.83743,0.42854,-0.83041,0.35597,-0.13651,-0.25959,0.95599,-0.46593,0.489,0.73739,-0.61928,0.68053,-0.39155,-0.15,0.14615,-0.97781,0.053865,0.30402,-0.95111,0.37816,-0.5587,-0.73809,0.57735,-0.75741,0.30488,0.065554,-0.28922,0.95498,0.078402,-0.20432,0.97574,-0.36546,-0.059358,0.92889,-0.73431,0.55635,0.38887,-0.79278,0.50404,-0.34263,-0.30879,0.009705,-0.95108,0.1876,-0.70797,-0.68084,0.43629,-0.8995,-0.02234,0.094119,-0.63109,0.76995,-0.29777,-0.47008,0.83084,-0.13303,-0.13938,0.98123,-0.35078,-0.01355,0.93634,-0.95425,0.18772,0.2327,-0.51079,-0.14377,0.84756,-0.98581,-0.089084,-0.14225,-0.77554,0.067476,0.62764,-0.93701,0.1933,-0.29084,-0.6751,-0.37574,-0.63482,-0.41087,-0.086795,-0.90753,-0.35548,-0.86203,-0.36119,-0.12073,-0.81146,-0.57176,0.001953,-0.99472,-0.10257,0.14148,-0.62792,0.76528,0.12442,-0.16678,0.97809,0.33711,-0.72091,0.60549,0.49281,-0.60482,0.62554,-0.043428,-0.29685,0.95392,-0.43052,0.23575,0.87121,-0.28037,0.35636,0.89126,-0.49574,-0.00586,0.8684,-0.80575,-0.094943,0.58458,-0.58586,-0.20569,0.78384,-0.51512,-0.58998,0.62172,-0.1348,-0.76806,0.62596,-0.13575,-0.92737,0.34858,0.094455,-0.7423,0.66335,0.033998,-0.93863,0.34318,-0.042238,-0.72784,0.68444,0.22632,-0.58892,0.77584,-0.12653,-0.35655,0.92566,-0.27442,-0.45549,0.84686,0.089236,-0.41526,0.90527,0.22828,-0.70824,-0.66799,-0.7673,0.54729,-0.33415,-0.37242,0.87036,0.32209,-0.95517,0.27448,-0.11072,-0.58541,-0.45878,-0.66842,0.20441,-0.69411,-0.69021,0.75741,-0.62023,0.20399,0.35829,-0.66073,-0.65954,0.66329,-0.46181,0.58886,0.4489,0.31581,0.8359,0.28578,0.24085,0.92752,-0.40724,0.64385,0.64775,-0.10279,0.69015,0.7163,-0.85708,0.41887,-0.29984,-0.68664,0.49718,-0.53035,-0.50578,0.77755,0.37358,0.065584,0.84191,0.53557,0.59166,0.46522,0.65838,-0.74422,0.34947,-0.56917,-0.18094,-0.057405,-0.98181,-0.46678,-0.34291,-0.81515,0.29398,-0.845,-0.44664,0.78771,-0.30027,0.53786,0.4185,0.20353,0.8851,0.25071,0.12201,0.96033,-0.56676,0.71273,0.41322,-0.62862,0.49022,-0.60369,-0.41331,-0.28437,-0.86502,0.34599,-0.58855,-0.73064,0.69332,-0.67812,0.24381,0.39964,-0.65313,-0.64318,-0.083834,0.040407,-0.99564,-0.68056,0.54015,-0.49498,-0.35905,-0.21314,-0.90863,0.3072,-0.75234,-0.58272,0.52861,-0.61617,0.58382,0.73217,-0.55382,0.39643,0.29463,0.059755,0.95373,0.073183,0.079073,0.99417,-0.39119,0.67714,0.62322,-0.54469,0.52458,0.65429,-0.78494,0.451,-0.42476,-0.89337,0.31446,-0.32087,-0.46876,-0.31718,-0.8244,0.17225,-0.86221,-0.4763,0.55376,-0.81692,0.16098,0.30378,-0.34513,0.88803,0.25507,0.13102,0.95798,-0.20927,0.21509,0.95389,-0.72603,0.59832,0.33891,-0.9877,0.015625,-0.1554,-0.71731,-0.59667,-0.35975,-0.11261,-0.95285,-0.28175,0.10257,-0.97293,0.20707,0.34098,-0.34025,0.87631,-0.11136,-0.20948,0.97144,0.29002,-0.1012,0.95163,-0.19373,0.25181,0.94818,0.031343,0.17728,0.98364,-0.92309,0.15687,0.35105,-0.97079,-0.22135,0.09241,-0.53142,-0.41078,-0.74081,-0.30699,-0.95169,-0.002228,0.19587,-0.77334,0.60295,0.023011,-0.77578,0.63054,0.28279,-0.47829,0.83142,-0.35756,0.22388,0.90664,-0.66695,0.18097,0.72277,-0.6885,0.02295,0.72484,-0.3105,0.4688,0.8269,-0.34663,0.084811,0.93414,-0.16755,0.60979,0.77462,0.29606,0.1767,0.93866,0.13782,0.027619,0.99005,0.055696,-0.046663,0.99735,0.52333,-0.45012,0.7235,0.67586,-0.3101,0.66857,0.1583,-0.47441,0.86593,-0.61354,-0.47102,0.63375,-0.55513,-0.62813,0.54518,-0.87075,-0.44456,0.21009,-0.80618,-0.53731,0.2476,-0.72036,-0.5284,0.44923,0.89438,0.083926,0.43934,0.82531,0.12439,0.55074,0.65661,0.51839,0.54781,-0.005005,0.88595,0.46373,0.060976,0.91668,0.39485,0.19019,0.56551,0.80248,0.13193,0.53075,0.83715,-0.40748,0.5548,0.72533,-0.024598,0.71966,0.69387,0.29774,-0.16843,0.93963,0.050264,-0.89352,0.44615,0.36573,0.023743,0.93039,-0.087344,-0.70247,0.70629,-0.83474,-0.27161,0.47893,-0.72292,-0.40458,0.56005,-0.6798,0.58385,0.4438,-0.67003,-0.70895,0.21998,0.6003,-0.38337,0.70186,-0.058168,0.73156,0.67928,0.7578,0.24018,0.60662,-0.089846,0.69246,0.71581,-0.897,0.05298,0.43877,-0.82592,-0.50877,-0.24277,-0.083834,-0.9844,-0.15455,0.85784,-0.5136,0.016938,0.68355,0.11856,0.72018,-0.21833,0.75707,0.61574,-0.76656,0.64205,-0.01062,-0.78524,-0.61916,0.000671,-0.26713,0.33537,-0.90341,0.24366,-0.60152,-0.76077,0.8327,-0.52788,-0.16709,0.20255,-0.46596,-0.86129,-0.73428,-0.22221,-0.64144,0.082247,-0.81368,-0.57543,0.72747,-0.66421,0.172,0.89319,-0.34339,0.29023,0.56954,-0.026246,0.82153,-0.20142,0.47398,0.85717,0.14597,0.54295,0.82696,-0.90823,0.39592,0.13538,-0.73458,0.65773,-0.16657,-0.76476,-0.29707,-0.5717,0.069735,-0.49025,-0.86877,0.69234,-0.71331,-0.10868,0.30061,-0.36613,-0.88064,-0.20463,0.38383,-0.90042,-0.79632,0.55461,-0.24131,-0.40867,0.60122,0.68664,-0.65667,0.72701,-0.20042,-0.35536,0.24461,-0.90213,0.22721,-0.45497,-0.86102,0.51396,-0.80276,0.30232,0.7073,-0.69924,0.10367,0.35749,-0.31526,0.87906,0.14911,-0.34016,0.92846,-0.29435,0.37761,0.87789,0.3278,-0.27253,0.90457,-0.1868,-0.22089,0.95721,-0.67934,0.44591,0.58278,-0.79577,0.56593,-0.21543,-0.75265,0.63301,-0.181,-0.45943,0.1337,-0.87808,-0.4127,0.25568,0.87423,0.48698,-0.11454,0.86584,0.61327,0.04059,0.78878,0.14124,-0.48631,-0.86227,0.47987,-0.84713,-0.22813,0.26603,-0.72195,0.63872,-0.13392,-0.61635,0.77596,0.050478,-0.28367,0.95758,-0.17911,-0.18485,0.96628,-0.9082,0.027833,0.41755,-0.96655,0.19752,-0.16352,-0.70763,-0.2299,-0.66808,-0.97894,-0.20304,0.019959,-0.58882,-0.11209,-0.80041,-0.45824,-0.7264,-0.51213,-0.17289,-0.68236,-0.71023,0.005066,-0.974,-0.22648,0.11038,-0.97064,0.2136,0.31727,-0.28181,0.90548,0.47414,-0.75771,0.44835,0.64513,-0.61306,0.45595,0.142,-0.43358,0.88983,-0.25898,0.05649,0.9642,-0.095523,0.20734,0.97357,-0.34047,-0.32017,0.88403,-0.64711,-0.1348,0.75033,-0.32514,-0.20484,0.92319,0.051088,-0.50087,0.86398,0.22391,-0.81454,0.53511,0.3003,-0.71773,0.62819,0.10788,-0.81594,0.56792,0.2758,-0.53252,0.80019,0.9975,-0.064486,-0.028687,0.72472,0.33204,0.60372,0.21897,0.89914,0.37886,-0.66613,0.22059,0.71242,-0.81402,-0.56987,-0.11213,0.2306,-0.92755,0.29402,0.5511,0.81985,0.15525,0.54366,0.12448,0.83001,0.48305,0.073244,0.87249,0.82351,-0.40803,0.39405,0.34758,-0.078555,0.93432,0.055025,0.65841,0.75063,0.41633,-0.30928,-0.85498,0.45552,-0.79476,0.40101,0.26557,-0.05121,0.96271,-0.54759,0.32359,0.7716,-0.072848,0.5548,0.82876,-0.88064,0.46159,-0.10651,-0.52184,0.72497,-0.44954,0.78637,0.61461,0.061892,-0.56963,-0.15168,-0.80773,0.14454,-0.76632,-0.62596,0.80844,-0.48793,0.32911,0.45314,-0.089175,0.88693,0.37071,-0.06354,0.92654,-0.43742,0.69872,0.56606,-0.68728,0.57085,-0.44914,-0.6382,-0.15363,-0.75436,0.10855,-0.37715,-0.91977,0.70547,-0.7087,0.004425,0.33592,-0.43406,-0.83587,-0.20371,0.30854,-0.92911,-0.58495,0.74245,-0.32637,-0.2313,0.22629,-0.94617,0.33973,-0.50185,-0.7954,0.5255,-0.76543,0.37135,0.66594,-0.7134,0.21802,0.25733,-0.28175,0.92431,0.0936,-0.1901,0.97726,-0.35874,0.49117,0.79373,0.16135,-0.2551,0.95334,-0.3155,-0.12522,0.94061,-0.71319,0.51982,0.4702,-0.78845,0.53081,-0.31077,-0.63094,0.71239,-0.3072,-0.45637,0.42125,0.78372,-0.33219,0.10224,-0.93762,0.16413,-0.6064,-0.77801,0.45872,-0.88113,-0.11469,0.15735,-0.68978,0.70669,-0.26441,-0.55092,0.79153,-0.079409,-0.20484,0.97555,-0.30494,-0.0918,0.9479,-0.94858,0.11795,0.29374,-0.94623,0.15857,-0.2819,-0.98068,-0.15403,-0.12049,-0.68203,-0.3101,-0.66228,-0.46223,-0.031129,-0.8862,-0.41429,-0.81787,-0.39927,-0.18912,-0.73476,-0.65139,-0.017335,-0.98535,-0.16947,0.19095,-0.68633,0.70174,-0.46184,-0.22446,0.85806,-0.7405,-0.029817,0.67138,-0.77514,-0.20026,0.59917,0.11625,-0.7825,0.61165,-0.14704,-0.94732,0.28443,0.039186,-0.95871,0.28163,0.29041,-0.63082,0.7195,0.38462,-0.7438,0.54659,0.56819,-0.60152,0.56148,0.20057,-0.2212,0.95437,0.012665,-0.37074,0.92865,-0.36546,0.15479,0.91784,-0.18973,0.30409,0.93353,-0.44237,-0.11322,0.88962,-0.53957,-0.31932,0.77902,-0.49321,-0.65569,0.57161,-0.083132,-0.4384,0.89489,0.001801,-0.77834,0.6278,0.15629,-0.4857,0.86001,-0.29157,0.056734,0.95483,-0.78552,-0.60613,-0.12448,-0.40825,-0.56621,-0.71603,-0.81399,-0.072359,-0.57631,-0.12961,0.33586,0.93292,-0.44411,-0.79534,-0.41249,0.049593,-0.53612,0.84265,-0.097995,-0.17887,0.97897,-0.35206,-0.39561,0.84823,-0.44377,0.008057,0.89608,-0.87637,-0.32453,-0.35581,-0.7185,-0.66582,0.20103,0.42851,-0.2808,0.85876,-0.29765,-0.21299,0.9306,-0.42973,-0.75164,0.50035,0.27891,-0.58379,0.76247,0.3957,-0.65905,0.63955,-0.10157,-0.10669,0.98907,-0.67986,-0.28931,0.67382,-0.89978,-0.090548,-0.4268,-0.81875,-0.49019,-0.29884,-0.37959,-0.71966,0.58138,-0.062075,-0.96997,0.23508,-0.014008,-0.85372,0.52049,-0.10794,-0.60176,0.79131,-0.42543,-0.39799,0.81274,-0.37657,-0.85061,-0.36689,-0.22504,-0.013245,0.97424,-0.84857,-0.077181,-0.52336,-0.78158,-0.60518,-0.15116,-0.13053,-0.80816,0.5743,-0.23386,-0.53337,0.81289,-0.46114,-0.52821,-0.71294,-0.7897,-0.24827,0.56096,-0.13462,-0.29862,0.94482,-0.030488,-0.26029,0.96503,-0.811,-0.16852,0.5602,-0.99994,0.002441,0.009033,-0.7376,-0.053163,0.67312,-0.99731,0.044618,0.057619,-0.8207,-0.05707,0.56847,-0.99927,-0.023103,-0.029908,-0.79257,-0.031983,0.60894,-0.99753,-0.009949,0.06946,-0.86316,0.059114,0.50142,-0.9776,0.082858,-0.19337,-0.96969,0.24342,-0.020112,-0.82208,0.17444,0.54195,-0.96429,0.26276,0.032929,-0.76553,0.16211,0.62261,-0.81137,0.22135,0.54097,-0.99683,-0.064699,0.045961,-0.98444,0.10483,0.1409,-0.89273,-0.44896,-0.037965,-0.69158,-0.61772,-0.37428,0.75204,-0.58931,-0.29508,0.42427,-0.58696,-0.68951,-0.66356,-0.74059,-0.10569,0.77459,-0.52025,-0.3596,0.67391,-0.71853,0.17176,-0.022884,-0.99974,0.001915,-0.022885,-0.99974,0.001912,0.67333,0.19785,0.71233,0.42753,-0.60967,0.66741,0.97061,0.16568,0.17441,0.97088,0.085177,-0.22382,0.92907,0.077486,-0.36158,0.91421,-0.11493,-0.3885,0.46809,-0.063417,-0.88138,0.9725,0.1359,-0.189,0.4395,0.37864,-0.81451,-0.39708,0.47319,-0.78637,-0.020753,0.43269,-0.90127,0.45561,0.28394,-0.84365,0.012818,0.14856,-0.9888,0.64312,-0.001831,-0.76574,-0.045198,-0.10492,-0.99344,0.7597,-0.17121,-0.62731,0.013611,-0.085879,-0.99618,0.70449,-0.13215,-0.69726,0.98669,-0.14988,-0.062624,0.80044,0.045656,-0.59764,0.98743,-0.066591,0.14331,0.99881,0.03766,0.030183,0.6433,0.22712,-0.73113,-0.019684,0.28748,-0.95758,0.00998,0.087069,-0.99612,-0.79275,0.089297,-0.60295,-0.67235,0.23139,-0.70312,-0.61858,0.22352,-0.75323,0.016968,0.35716,-0.93387,-0.64318,0.08179,-0.76131,0.079165,0.2194,-0.97241,-0.67357,-0.028382,-0.73855,0.10459,0.022645,-0.99423,0.081149,-0.12894,-0.98831,0.73449,-0.036531,-0.6776,0.70012,-0.27531,-0.65877,0.003601,-0.24891,-0.9685,0.61989,-0.34815,-0.70321,0.035157,-0.24165,-0.96969,0.71606,-0.25883,-0.64824,0.040712,-0.13288,-0.99026,0.73415,-0.14744,-0.66274,0.039521,-0.054262,-0.99774,0.7401,-0.06122,-0.66967,0.15146,-0.022828,-0.98819,0.84957,0.013398,-0.52727,0.99863,-0.022004,0.047304,0.98816,0.052065,0.14414,0.71648,0.033418,0.69677,0.59746,0.079836,0.79788,-0.039125,0.071993,0.99661,-0.18024,0.093326,0.97916,-0.7817,0.08182,0.61821,-0.87454,0.10343,0.47377,-0.99759,0.058748,-0.036348,-0.99945,0.016205,-0.028138,-0.69851,-0.068941,-0.71224,-0.70113,-0.13956,-0.69918,-0.69326,0.004303,-0.72066,-0.54347,0.01886,-0.83917,-0.98798,0.078372,-0.13318,-0.76183,-0.11463,-0.63753,-0.67309,-0.11951,-0.72979,-0.98791,-0.045351,-0.14805,-0.99597,-0.087771,0.017243,-0.97861,-0.067598,-0.19422,-0.70336,-0.040956,-0.70965,-0.82934,-0.040681,-0.55721,-0.57811,0.078127,-0.81219,-0.60289,0.378,-0.70254,-0.75396,-0.10498,-0.64843,-0.6509,-0.32981,-0.68374,0.16547,-0.301,-0.93915,0.56063,-0.24195,-0.79192,0.86059,-0.13904,0.48991,0.18984,-0.01023,0.98176,0.19009,-0.01059,0.98171,-0.64687,-0.22651,-0.72814,-0.6216,-0.15091,0.76864,-0.66771,-0.68401,-0.29368,0.43837,-0.40736,-0.80117,0.44411,-0.85696,0.26148,0.18945,-0.012767,0.98181,0.18977,-0.012976,0.98174,-0.27186,-0.47435,0.83727,-0.022885,-0.99974,0.001919,-0.022884,-0.99974,0.001919,-0.73852,-0.155,0.65612,-0.004089,-0.1521,0.98834,0.70901,-0.15424,0.68807,0.73327,-0.17744,0.65633,0.62429,-0.17551,0.76119,0.007935,-0.1655,0.98618,-0.084689,-0.098575,0.99148,-0.072237,-0.036256,0.9967,-0.16788,0.065828,0.98358,0.17222,0.15427,0.9729,0.096438,0.27451,0.95673,0.11307,0.5771,0.80877,-0.66866,0.49654,0.55345,-0.64214,0.62011,0.45064,-0.95904,0.1699,0.22651,-0.83145,0.12565,0.54119,-0.57836,-0.70788,0.40541,-0.26618,0.10703,0.95795,-0.23301,-0.53349,0.81304,-0.022882,-0.99974,0.001906,-0.21351,0.63082,0.74593,-0.65731,0.60207,0.45323,0.11393,0.91385,0.38969,0.13291,0.74435,0.65441,0.85296,0.5045,0.13373,0.81774,0.52925,0.22605,0.92074,0.32209,0.22007,0.86081,0.20695,0.46489,0.90875,0.035096,0.41585,0.95892,0.069918,-0.27485,0.99313,-0.098605,-0.062807,0.97458,-0.17377,0.14118,0.76553,-0.1561,0.62413,0.66912,-0.10916,0.73507,0.99057,0.096072,-0.097629,0.74352,0.3075,-0.59377,0.63036,0.31742,-0.7084,0.99115,-0.13056,0.02295,0.96655,-0.25544,-0.021912,0.96597,-0.25834,-0.010437,0.98276,-0.17521,0.058992,0.9928,-0.10575,0.05591,0.72097,-0.045503,0.69143,-0.034333,0.029511,0.99896,-0.78234,0.046571,0.62108,-0.99915,0.015259,-0.038118,-0.9997,0.010437,-0.022217,-0.8121,-0.048708,0.58147,-0.70318,-0.097507,0.70428,-0.004517,-0.13083,0.99136,-0.007752,-0.082308,0.99655,0.037416,-0.056154,0.99771,-0.70608,0.028291,0.70754,-0.78317,0.051912,0.61962,-0.024873,0.003052,0.99966,0.71126,-0.08829,0.69735,0.76025,-0.16724,0.6277,0.70345,-0.1966,0.68294,0.71563,-0.2172,0.66381,0.63362,-0.13745,0.76131,0.76873,-0.061342,0.63662,0.81512,0.55358,0.17063,0.60674,0.63085,0.4836,-0.58147,-0.077731,0.80981,-0.19138,-0.27418,0.94241,-0.10163,-0.094821,0.99026,-0.57793,-0.14646,0.80279,-0.84283,-0.2718,0.46446,-0.78976,-0.42332,0.44389,-0.55696,-0.32035,0.76623,-0.80166,-0.56676,0.18992,-0.47374,-0.60494,0.63997,-0.18964,-0.42125,0.88687,0.033662,-0.56444,0.82476,0.065462,-0.51097,0.85708,0.45793,-0.83673,0.30021,-0.42872,-0.81307,-0.39378,-0.84484,-0.50926,0.16382,-0.59725,-0.73147,-0.32893,-0.91867,-0.082675,0.38621,-0.5685,0.1915,0.80007,-0.082064,0.1713,0.98178,-0.23124,-0.081149,0.96948,-0.27558,-0.16587,0.94684,-0.22819,-0.41771,0.87945,0.4543,-0.75396,0.47441,-0.85934,-0.07062,0.50645,-0.90899,0.19269,0.36952,-0.79302,-0.2656,0.54817,-0.83154,-0.16202,0.53127,-0.63686,-0.043245,0.76974,-0.96054,-0.15543,-0.2306,-0.75951,-0.22153,-0.61156,-0.32957,-0.56743,-0.75457,-0.72097,-0.11032,-0.68407,-0.078219,-0.29054,-0.95364,-0.62731,0.14188,-0.76571,-0.057527,0.33219,-0.94144,0.57134,0.11908,-0.81201,0.519,-0.39759,-0.75665,0.9183,-0.32173,-0.23063,0.93173,0.25568,-0.25782,0.53041,0.34303,-0.7752,-0.14307,0.12211,-0.98215,-0.74297,0.064791,-0.66616,-0.11435,-0.41279,-0.90359,0.52226,-0.43199,-0.73525,0.54778,-0.58797,-0.59514,0.91189,-0.39326,-0.11737,0.89502,-0.44533,0.023896,0.61428,-0.76281,-0.20182,0.78585,-0.60253,0.13907,0.67623,-0.074862,0.73284,0.83685,-0.081179,0.54134,0.15885,0.52492,0.83618,0.12461,0.38179,0.9158,-0.54512,0.46519,0.69741,-0.52846,0.61763,0.58242,-0.87072,0.24451,0.42662,-0.87909,0.36952,0.301,-0.8619,0.092959,0.4984,-0.93902,0.26548,0.21836,-0.80099,0.14683,0.58034,-0.93301,0.35432,-0.062441,-0.87182,0.39244,0.29307,-0.85394,0.43281,-0.28883,-0.85992,0.28983,-0.42012,-0.88278,0.29649,-0.36439,-0.84304,-0.035585,-0.53664,-0.9002,0.032411,-0.43425,-0.9404,-0.09067,-0.32774,-0.30366,-0.24854,-0.91977,-0.17701,-0.24094,-0.95422,0.70788,-0.27866,-0.64901,0.85656,-0.29209,-0.42537,0.93127,0.008728,0.36415,0.7615,-0.37095,0.53148,0.79202,-0.32151,0.51894,0.59465,-0.69152,0.41005,0.68493,-0.52812,0.50191,0.41063,0.1156,0.90442,-0.68389,0.14277,0.71544,-0.81643,-0.008393,-0.57735,-0.9176,-0.15543,-0.36583,-0.94543,-0.017731,0.32524,-0.88018,-0.31358,-0.35624,-0.36284,-0.288,-0.88623,-0.076876,-0.24409,-0.96667,-0.74096,0.058504,-0.66897,-0.64098,-0.043184,-0.76632,-0.68291,0.23292,-0.69234,-0.7553,0.061861,-0.65243,-0.8768,-0.17423,-0.44813,-0.23295,-0.31461,-0.92016,-0.875,-0.35432,-0.32981,-0.16276,-0.61049,-0.77508,0.65252,-0.74538,-0.1363,0.88144,-0.17191,-0.43983,0.81411,-0.27061,0.51375,0.91934,-0.041017,0.39131,0.84658,-0.38243,-0.3701,0.74407,-0.55446,0.37269,0.71075,-0.5045,-0.49016,0.55458,-0.73223,0.39525,0.742,-0.52943,0.41124,0.79263,-0.30461,-0.52812,0.040193,0.064486,-0.9971,0.23368,0.030091,-0.97183,0.90634,-0.17121,-0.38624,0.21793,0.004028,-0.97595,0.89917,-0.11701,-0.42164,0.27366,-0.3014,-0.91336,0.84674,-0.37886,-0.37342,0.76037,-0.47182,-0.4463,0.93481,-0.3246,0.14405,0.93725,-0.34541,0.046663,0.67357,-0.39717,-0.62331,0.72222,-0.51698,-0.45943,0.89581,-0.41157,0.16764,0.81912,-0.51421,-0.25419,0.88479,-0.41191,0.21775,0.83642,-0.49974,-0.22498,0.89703,-0.32698,0.29725,0.92111,-0.37104,-0.1178,0.91662,-0.15238,0.36952,0.93091,-0.10376,0.35017,0.98114,-0.19092,0.029054,0.8956,-0.13346,0.42433,0.96371,-0.26325,0.043825,0.94296,-0.28718,0.16819,0.83331,-0.21513,-0.5092,0.9584,-0.22864,0.17081,0.93194,-0.13367,-0.33705,0.32029,0.026551,-0.94693,0.63256,0.015381,-0.77435,0.97952,-0.043245,-0.19648,0.71367,0.08243,-0.69558,-0.005341,0.087924,-0.99609,-0.19095,0.097415,-0.97674,-0.4948,0.10965,-0.86203,0.17609,0.051607,-0.983,0.034455,-0.10965,-0.99335,0.82928,-0.26899,-0.48982,0.58821,-0.3647,-0.72176,0.4261,-0.46919,-0.77346,0.32301,-0.51268,-0.79546,0.19025,-0.4608,-0.86685,0.14313,-0.42155,-0.89541,0.024079,-0.25245,-0.96728,0.12857,-0.33509,-0.93335,-0.48891,-0.029145,-0.87182,-0.59972,0.098148,-0.79412,-0.472,0.099979,-0.87588,-0.64492,0.22993,-0.72881,-0.59181,0.26588,-0.76092,-0.066012,0.099216,-0.99286,0.00412,-0.046754,-0.99887,-0.66842,0.22889,-0.70766,-0.68816,0.28764,-0.66607,-0.69991,0.33824,-0.62902,-0.81384,0.21461,-0.53996,-0.80062,0.25352,-0.54283,-0.79366,0.22431,-0.56548,-0.7712,0.39412,-0.49986,-0.81289,0.32154,-0.48558,-0.82449,0.18201,-0.53578,-0.90399,0.25034,-0.34654,-0.86642,0.3509,-0.35514,-0.9353,0.34367,-0.084109,-0.63405,0.6295,0.44905,0.0665,0.61034,0.7893,0.094943,0.45579,0.88498,-0.23951,0.40144,0.884,-0.82873,0.54338,0.13376,-0.7691,0.46596,0.43742,-0.93759,0.26292,-0.22745,-0.89074,0.25117,-0.37877,-0.6057,-0.042085,-0.79455,-0.71929,0.041597,-0.69344,-0.55983,-0.15641,-0.81368,-0.51189,-0.13373,-0.84857,-0.45564,-0.20472,-0.86627,-0.32884,-0.24982,-0.91073,-0.14237,-0.21897,-0.96527,-0.76571,0.16523,-0.62157,-0.84246,0.12595,-0.52379,-0.87417,0.066622,-0.48097,-0.92648,0.15393,-0.34339,-0.96606,0.16593,-0.19788,-0.94907,0.29875,-0.099979,-0.64327,0.46703,0.60665,-0.076571,0.37303,0.92465,0.62761,-0.003632,0.7785,0.78704,0.20182,0.5829,0.76913,0.30302,0.56264,0.98965,-0.13431,0.049928,0.95554,-0.14686,0.25559,0.87652,-0.2204,0.4279,0.68587,-0.035554,0.72683,0.89596,-0.2559,0.3629,0.76174,-0.087344,0.64193,0.89666,-0.28391,0.33961,0.8468,-0.30885,0.433,0.4283,0.066805,0.90112,0.72118,-0.19315,0.66524,0.21769,0.13202,0.96704,-0.29676,0.32902,0.89645,-0.15427,0.30549,0.9396,-0.83691,0.33299,0.43437,-0.86779,0.35285,0.34983,0.075594,0.33653,0.93863,-0.88965,0.36018,0.28068,-0.49516,0.36906,0.78649,0.10663,0.18903,0.97613,0.60433,-0.041231,0.79565,0.61031,0.076662,0.78841,0.60027,0.19831,0.77477,0.54918,-0.013367,0.83557,0.82583,-0.27287,0.49345,0.69979,-0.23826,0.67339,0.94726,-0.11823,0.29774,0.99994,0.004761,0.006684,0.92258,-0.073183,0.3788,0.62819,-0.097629,0.77187,0.68068,-0.1446,0.71813,0.006806,-0.13886,0.99026,-0.093356,-0.095798,0.991,-0.66723,-0.058565,0.74252,-0.78356,-0.04004,0.61998,-0.99197,0.041932,0.11905,-0.99817,0.048891,0.035127,-0.62874,-0.094119,0.77184,-0.98172,0.039125,0.18613,-0.9198,0.14756,0.36357,-0.46715,0.043794,0.88308,-0.15494,0.38179,0.91116,-0.73791,0.47408,0.4803,-0.94458,0.27561,-0.17826,-0.62081,0.5273,0.58007,-0.91101,0.40138,-0.094485,-0.91922,0.37614,0.11618,-0.54665,0.38429,0.74395,0.016968,0.29176,0.95633,0.034913,0.4229,0.90548,0.18439,-0.15067,0.97122,0.071871,-0.20826,0.9754,-0.71157,0.13889,-0.68871,-0.94458,0.08124,-0.31803,-0.83178,0.10111,-0.54579,-0.62993,0.10846,-0.76901,-0.044374,0.10462,-0.9935,-0.80883,0.11808,-0.57604,0.96469,-0.21293,0.15482,0.94174,-0.12381,0.31266,0.86895,-0.2895,0.40132,0.84304,-0.46974,0.26182,0.90646,-0.40696,-0.11252,0.74432,-0.66146,0.091586,0.4962,-0.86547,0.068606,0.3361,-0.92041,-0.19962,-0.18943,-0.86218,-0.46983,-0.86383,-0.12024,-0.48918,-0.93027,0.22083,0.29295,-0.9989,0.035524,-0.029847,-0.99249,0.034181,0.11719,-0.58214,0.057466,0.81103,-0.58532,-0.009827,0.81072,0.17902,0.003021,0.98382,-0.30046,-0.27369,0.91366,-0.47328,-0.60122,0.64382,0.47935,-0.17881,0.85919,0.79806,-0.25523,0.54582,0.85376,-0.15821,0.49599,0.79324,-0.60353,0.080477,0.92541,0.029847,0.37776,0.98532,-0.037477,-0.16645,0.83923,-0.026612,0.54311,0.71865,-0.027863,0.69478,0.6578,-0.021271,0.75286,0.02765,0.29499,0.95508,-0.48265,0.37605,0.79095,-0.86975,0.11292,0.48033,-0.74123,-0.24277,0.62575,-0.049165,-0.061251,0.99689,-0.86911,0.25501,0.42378,-0.92813,0.13852,-0.34547,-0.95126,-0.045534,-0.30491,-0.24284,-0.22861,-0.94272,-0.49312,-0.13031,-0.8601,0.7864,-0.29548,-0.54241,0.84256,-0.31251,-0.43861,0.91696,-0.040468,0.39686,0.87481,-0.23719,0.42238,0.63418,-0.43892,0.63649,0.70141,-0.39686,0.592,0.56044,-0.6578,0.50316,0.27775,-0.86728,0.4131,0.28986,-0.94195,0.16935,0.16242,-0.9696,-0.18284,0.61684,-0.78265,0.083071,0.25932,0.11078,0.95938,-0.73757,0.06241,0.67235,-0.81796,0.15854,0.55297,-0.92111,-0.09241,-0.37816,-0.13453,-0.39299,-0.90963,0.9049,-0.15253,-0.39726,0.82098,-0.32176,0.4716,0.26328,0.048219,0.9635,-0.78182,-0.001373,0.62346,-0.86917,-0.41691,-0.26582,-0.22135,-0.55794,-0.79977,0.69353,0.090243,-0.71471,0.77273,0.62297,0.12149,0.82629,0.31196,0.46895,0.22947,0.06473,0.97113,-0.80157,-0.20029,0.56334,-0.78906,-0.58638,-0.18308,-0.7893,-0.58422,-0.18882,-0.70159,0.000793,0.71255,-0.6664,-0.19034,0.72085,-0.55156,-0.83398,-0.014374,-0.007416,-0.58895,-0.8081,0.12159,-0.72411,-0.67885,-0.41777,-0.89431,0.1601,-0.46391,-0.88498,-0.039277,-0.61947,-0.29811,0.72619,-0.50954,-0.23942,0.82644,0.053896,0.62358,0.77987,0.02591,0.82513,0.56432,0.14454,0.46135,0.87533,0.16736,0.4583,0.87286,0.089663,0.60387,0.79199,0.89007,0.34059,0.30284,0.79803,0.08121,-0.59706,-0.007019,-0.42055,-0.90722,0.79272,0.073977,-0.60503,0.57106,0.82043,0.027528,0.42091,0.90494,-0.062044,0.57152,0.4911,-0.65737,0.69863,0.24015,-0.67394,0.60854,0.79138,0.057955,0.73843,0.65569,0.15732,0.83346,0.070376,-0.54802,0.91195,0.11005,0.39518,0.19492,0.44401,0.87454,-0.33308,-0.039399,0.94205,-0.43565,-0.77871,0.45137,-0.54244,-0.83999,-0.011689,-0.13312,-0.9671,0.21671,-0.5081,-0.83493,0.21131,-0.4752,-0.75576,0.45051,0.079562,-0.19547,0.97745,-0.27668,-0.79797,0.53539,-0.56111,-0.55104,0.6176,-0.71017,-0.4644,0.5291,-0.58559,-0.8095,-0.041688,-0.38115,-0.71548,0.58547,-0.42219,-0.90439,0.0618,-0.060121,-0.85681,-0.51207,0.006897,-0.95798,-0.28666,-0.33351,-0.93594,0.11283,0.13486,-0.98709,-0.086215,-0.16172,-0.96597,0.20173,0.16392,-0.92508,0.34254,-0.02295,-0.60945,0.79247,-0.16437,-0.79681,0.58141,0.51094,-0.10584,0.85305,-0.16672,-0.53178,0.83029,0.40764,0.18332,0.89453,0.80822,0.54521,0.22245,0.42161,-0.88699,-0.18821,0.36842,-0.86032,-0.35221,-0.21833,-0.9183,-0.33018,-0.20435,-0.76745,-0.60765,0.71065,-0.57454,-0.40602,0.9324,-0.35688,-0.056581,0.94925,-0.12989,-0.28632,0.42601,-0.49275,-0.75872,-0.15516,-0.9509,-0.26768,0.032929,-0.98889,-0.14484,-0.13443,-0.96515,-0.22437,0.067202,-0.61516,-0.78548,-0.36277,-0.92459,-0.11612,0.72741,-0.59288,0.34547,0.63805,-0.51485,0.57253,0.9028,-0.078829,0.42271,0.85662,-0.2035,0.47404,0.11383,-0.19968,0.9732,-0.6801,-0.033937,0.73229,-0.79128,-0.55705,-0.25202,-0.6281,-0.32759,0.70577,-0.10614,0.77645,0.62114,-0.25507,0.77251,0.58147,-0.030824,0.96765,-0.25037,0.39497,-0.83041,0.39289,0.3766,0.45741,-0.80557,0.50581,0.46925,-0.72381,0.07947,-0.4055,-0.91061,-0.039796,-0.69042,-0.72228,0.92096,-0.22276,-0.31962,0.86694,0.3795,0.32304,0.30259,0.055757,0.95148,-0.68401,-0.3437,0.64339,-0.6718,-0.73986,-0.035524,-0.59227,-0.78454,-0.18345,0.76339,-0.52016,-0.38292,0.87701,-0.17905,-0.44578,-0.80221,0.041108,0.5956,-0.77291,-0.20969,0.5988,-0.69906,-0.70733,-0.10468,-0.16822,-0.3538,-0.92004,-0.25428,-0.009278,-0.96707,0.26383,0.45775,-0.84899,0.041078,-0.73601,-0.67568,0.95379,-0.28117,-0.10581,0.87377,0.44835,0.18833,-0.32008,0.86596,-0.38417,-0.22135,-0.95111,0.21534,0.14014,-0.36943,0.91861,0.38752,0.13962,0.91119,-0.52236,0.36854,0.76894,-0.66045,0.012513,0.75075,-0.49147,-0.32643,0.80737,-0.1511,0.76412,0.62706,0.5631,0.005921,0.82635,-0.51576,-0.48659,0.7051,-0.49791,-0.86435,0.070589,-0.28889,-0.83636,-0.46583,-0.5262,-0.8461,0.084719,-0.23905,-0.94345,0.22962,0.045808,-0.65941,-0.75036,-0.63942,-0.71252,-0.28886,0.31794,-0.84286,-0.43413,-0.52586,0.33726,-0.78082,0.25147,0.29392,-0.92212,0.21012,-0.75417,-0.62212,0.32514,0.33521,-0.88424,0.14017,0.94272,-0.30262,-0.008698,0.94015,-0.34056,-0.93652,0.15479,-0.31452,0.37751,-0.8377,0.39457,0.073977,-0.082675,0.99381,-0.34562,-0.21076,0.91436,0.17014,-0.1604,0.97226,-0.28309,0.83416,0.47325,-0.11649,0.81475,0.56795,-0.10846,-0.28263,0.95306,0.31892,-0.83932,0.44023,0.1829,-0.93982,0.28852,0.047121,-0.93603,0.34864,0.27988,-0.64507,0.71099,0.58318,-0.70403,0.40519,0.20585,-0.8106,0.54817,-0.009247,0.15519,0.98782,0.24564,-0.64727,0.72155,-0.040864,0.83657,0.54628,0.58058,0.80203,-0.14008,0.661,0.34019,-0.66881,0.85604,0.35386,-0.37675,0.4185,0.86898,-0.26392,0.69506,0.48412,0.53148,0.35807,0.7561,0.54775,0.45802,0.24641,0.85409,0.44136,-0.54503,0.71282,0.44859,-0.19794,0.87152,0.08594,-0.4969,0.86352,-0.12448,-0.54177,0.83123,0.060183,-0.93408,0.35191,0.28156,-0.87726,0.38871,0.33549,-0.53008,0.77871,0.38649,-0.83093,0.40016,0.56002,-0.82562,-0.068422,0.37577,-0.88842,-0.26359,0.16132,-0.9379,-0.30708,0.45912,-0.88821,0.015564,0.29307,-0.93445,0.20219,0.43672,-0.8995,-0.010498,0.81002,-0.21406,-0.54588,0.75292,-0.58803,-0.29545,0.44206,-0.44014,-0.78155,0.62551,-0.77966,0.029054,-0.16257,-0.59941,-0.78372,-0.35804,-0.93295,0.037446,0.44426,-0.68136,-0.58168,-0.36924,-0.5938,-0.71483,0.46065,-0.8052,0.37333,-0.89001,0.069979,0.45048,-0.76321,-0.20524,0.61266,-0.23038,-0.39314,0.89013,-0.65883,0.66991,0.34217,-0.82482,0.36201,-0.43422,-0.33982,0.51787,-0.78503,0.26606,-0.74618,-0.61022,0.36164,0.42885,-0.82781,0.010956,0.98688,-0.16105,-0.29658,0.70595,0.64312,-0.31806,-0.41557,0.85211,0.066775,-0.94437,0.322,0.10837,-0.98578,0.12827,0.044923,-0.97607,0.21268,0.15113,-0.74889,0.64519,0.51643,-0.76602,0.38273,0.45796,-0.88659,-0.064394,0.26121,-0.96149,0.08533,0.43855,-0.89392,-0.092563,0.79461,-0.54631,-0.26475,0.41572,-0.83981,-0.34907,0.34199,-0.92828,-0.14591,0.56807,-0.81576,-0.10859,0.87069,-0.48091,-0.10276,0.95425,0.2598,-0.1478,0.65917,0.73727,0.14789,0.33732,0.94067,-0.036439,0.8019,0.42637,-0.41844,0.53414,0.44746,-0.71725,0.5659,-0.31846,-0.76046,0.89099,-0.13447,-0.43361,0.61577,-0.7879,0.000183,0.30268,-0.63619,-0.70965,0.1659,0.97891,-0.11893,-0.066713,0.70727,0.70376,-0.17634,-0.006714,0.98428,0.11893,-0.75362,0.64641,0.10968,-0.89111,0.44032,-0.067751,-0.62429,0.77822,-0.27918,-0.65865,0.69869,-0.00235,-0.98126,0.19257,0.29173,0.11194,0.94989,0.31001,-0.65712,0.68706,0.3235,0.62477,0.71059,0.58992,0.40962,0.69579,0.28358,-0.3314,0.89984,0.20023,-0.65136,0.73183,0.21799,-0.93439,0.28172,0.32453,-0.88962,0.32127,0.73614,-0.52138,0.43153,0.70843,-0.70208,0.071902,0.45454,-0.30525,0.83676,0.20447,-0.87338,-0.442,0.77541,-0.62215,-0.10773,-0.27848,-0.76189,0.58476,-0.84457,-0.53017,-0.074587,-0.94437,0.053529,0.3245,-0.89639,0.21625,0.38685,-0.5587,0.20423,0.8038,-0.57286,-0.07178,0.81649,0.32386,-0.02823,0.94565,0.005097,0.20084,0.97958,-0.086245,0.24601,0.96539,-0.5522,0.2819,0.78457,-0.61776,0.27552,0.73647,0.45045,0.005219,0.89276,-0.69015,0.11734,0.71407,-0.95566,0.10477,0.27512,-0.92691,-0.083834,-0.36576,-0.90558,-0.28462,-0.31446,0.061495,-0.29524,-0.95343,0.89151,0.11402,-0.43834,0.92709,0.075137,0.3672,0.16672,0.02707,0.98563,-0.62896,0.048952,0.77587,-0.76543,-0.19337,0.61376,-0.89718,-0.38328,-0.21934,-0.28513,-0.47743,-0.83108,-0.87667,-0.31944,-0.35963,-0.38469,-0.2909,-0.87597,0.7911,-0.12601,-0.59853,0.81463,0.12925,-0.56536,0.92285,0.17447,0.3433,0.81295,0.53835,0.22196,0.37162,0.3708,0.8511,0.23597,0.41404,0.87912,0.15674,0.18415,0.97031,-0.93878,-0.086398,0.33344,-0.82556,-0.51177,-0.23771,0.085177,-0.36509,-0.92706,0.79614,0.27827,-0.53731,0.89712,0.31901,0.30555,0.25129,0.54164,0.80215,-0.60863,-0.029878,0.79287,-0.66341,-0.30671,0.68246,0.16886,0.45567,0.87396,0.68398,0.71584,0.14029,0.77468,0.17295,-0.6082,-0.14795,-0.61391,-0.77535,0.82717,0.024903,-0.56136,0.88144,0.36079,0.3047,0.20707,0.30302,0.9302,-0.78311,-0.13303,0.60747,-0.77551,-0.62459,-0.091647,-0.79122,-0.52794,-0.30848,-0.10782,-0.36781,-0.92361,-0.83959,-0.48543,-0.24369,-0.4937,-0.72268,-0.48372,0.26716,-0.4329,-0.8609,0.85507,-0.1655,-0.49135,0.91299,0.19901,0.35612,0.24274,0.11264,0.9635,-0.44243,-0.093936,0.89184,-0.77792,-0.58672,0.22489,-0.54262,-0.83853,-0.049196,-0.8356,-0.549,-0.018525,-0.80184,-0.55473,0.2219,-0.12592,-0.44362,0.88729,-0.64763,-0.70324,0.29319,-0.86502,-0.42701,-0.26338,-0.82131,-0.36979,0.43434,-0.91012,-0.19541,0.36534,-0.76907,-0.61238,-0.18296,-0.35783,-0.59398,-0.72048,-0.36143,-0.77218,-0.52254,-0.70684,-0.69363,-0.13874,0.81429,-0.3806,0.43822,0.9263,0.061739,0.37165,0.68938,-0.71465,-0.11814,0.30854,-0.52263,0.79473,0.33476,-0.21558,0.91729,0.84402,-0.45723,-0.28022,0.44813,-0.72695,-0.52025,-0.50246,-0.69506,-0.51418,-0.36351,-0.83944,-0.40391,0.012177,-0.83508,-0.54997,0.035707,-0.918,-0.39494,-0.69335,-0.6158,-0.37416,-0.44105,-0.41569,-0.79537,-0.4723,-0.59795,0.64757,-0.36808,-0.7083,0.60231,-0.71172,-0.59694,0.37022,0.26798,-0.87091,-0.41188,0.4319,-0.65017,-0.62508,-0.81371,0.17075,-0.55556,-0.7889,0.12885,-0.60085,-0.845,0.33305,-0.41838,-0.85708,0.45833,-0.23521,-0.77566,-0.42067,0.47044,-0.071078,-0.99536,0.064455,0.57509,-0.80413,-0.15033,-0.052797,-0.77764,-0.62645,-0.5349,-0.047548,0.84356,-0.55501,-0.71252,0.42924,0.76543,-0.4272,0.48122,0.72863,0.25452,0.63582,0.9939,0.091586,0.061068,0.13971,-0.67489,0.72454,0.59502,-0.18363,0.7824,0.55675,-0.72503,0.40532,0.55034,-0.46947,0.69042,0.80343,-0.46318,0.37404,0.85678,0.50694,0.094333,0.56365,0.80151,0.19953,0.91583,0.1569,-0.36961,0.84661,-0.5034,-0.17255,0.72207,-0.68981,0.052248,0.33576,-0.94119,-0.037202,0.7532,0.64171,-0.14435,0.010804,-0.77944,0.62636,0.48509,-0.79086,0.37306,0.90436,0.23481,0.35633,0.50951,0.7481,0.42509,0.43446,-0.58144,0.68783,-0.86035,-0.46837,0.20093,-0.57137,-0.81918,-0.049684,-0.27708,-0.90127,-0.33296,-0.27491,-0.95572,0.1048,0.45537,-0.80755,0.37474,0.91821,-0.38136,0.10697,-0.54582,-0.61489,-0.56914,-0.54488,-0.75674,0.36113,0.67751,-0.25169,0.69106,0.65126,-0.41713,0.63387,0.63677,-0.48268,0.60122,-0.093142,-0.66753,0.7387,0.96002,-0.042848,0.2765,0.99783,-0.01413,0.063997,0.80294,0.48973,-0.3397,0.7625,0.50581,-0.40333,0.21934,0.66741,-0.7116,0.23002,0.49587,-0.83737,0.91629,0.29646,-0.26923,0.94247,-0.031343,0.33274,0.55495,-0.3567,0.75149,-0.24457,-0.55968,0.79177,-0.77987,-0.43739,0.44771,-0.81777,-0.38588,0.42695,-0.9747,0.073305,-0.21113,-0.98248,-0.089267,-0.16352,-0.88214,-0.37712,0.28205,-0.15738,-0.50514,0.84854,-0.79019,-0.42131,0.44502,-0.96103,-0.18436,-0.20582,-0.89325,-0.26206,0.36525,-0.16471,-0.45106,0.87713,-0.048891,-0.3011,0.95233,-0.38176,-0.20722,0.90069,-0.97903,-0.043733,0.19883,-0.93826,0.047426,0.3426,-0.32606,-0.22233,0.91882,-0.95676,0.23072,0.17704,-0.31797,0.023347,0.94778,-0.87579,0.36326,0.31779,-0.31095,0.2349,0.9209,-0.88174,0.42091,0.21293,-0.20103,0.66436,0.71984,-0.83636,0.50063,0.22321,-0.89749,0.29691,-0.32603,-0.98321,0.18186,0.013123,-0.66222,-0.15393,-0.7333,-0.7018,-0.6339,-0.32493,0.69936,-0.62905,-0.33931,0.4525,-0.87371,0.17841,0.69906,-0.21604,0.6816,0.88446,-0.063387,0.46223,0.78604,-0.34434,-0.51335,0.91968,-0.097537,0.38032,0.89947,-0.42274,-0.11048,0.96237,-0.17463,0.20817,0.88421,0.22181,-0.41099,0.91171,0.12677,0.39073,0.54784,0.7803,-0.30164,-0.24738,0.50316,-0.828,0.067843,0.33537,-0.93963,0.80514,0.080447,-0.58757,0.80612,0.18964,-0.5605,-0.35285,0.33348,-0.8742,-0.22352,0.19511,-0.95495,0.75066,-0.4359,-0.49641,0.4373,-0.63887,0.63292,-0.40758,-0.57442,0.70987,-0.40737,-0.57419,0.71018,-0.94131,-0.3184,0.11191,-0.63445,-0.22059,-0.74078,-0.44804,-0.79559,-0.4077,0.072323,-0.80057,-0.59485,0.072323,-0.80057,-0.59485,0.097903,-0.90344,0.41737,-0.40716,-0.57637,0.70853,-0.40687,-0.57627,0.70878,-0.7937,0.223,-0.5659,-0.82727,0.36284,-0.42888,-0.23154,-0.03534,-0.97217,-0.90609,0.30897,-0.28892,-0.86523,0.23127,-0.44481,-0.9364,-0.010132,-0.35072,-0.55489,0.13154,-0.82144,-0.92212,-0.076235,-0.37925,-0.62206,0.33024,-0.70989,-0.48677,0.19504,-0.85144,0.2447,0.33482,-0.90994,0.30424,0.30888,-0.90109,0.86517,0.22568,-0.44777,0.96753,-0.04825,0.24805,0.65661,-0.31535,0.68511,0.60772,-0.31245,0.73009,0.7084,-0.18403,0.68139,0.65007,-0.091647,0.7543,0.56926,-0.21781,0.79275,0.64266,-0.19334,0.74133,0.49925,0.000916,0.86642,0.51347,0.22297,0.82861,0.5537,0.29878,0.77724,0.070925,0.26783,0.96084,-0.69137,0.4843,0.53612,-0.82537,-0.012421,0.56441,-0.59883,-0.75716,0.2609,0.016999,-0.8363,0.54799,0.048891,-0.3152,0.94775,0.92984,0.15363,0.33427,0.76843,0.55104,-0.32536,0.99136,0.07889,0.10462,0.76586,0.33097,-0.55126,0.24268,0.46312,-0.85241,0.94559,0.15357,-0.28678,0.94482,-0.085116,0.31623,-0.4174,0.3072,-0.85519,-0.2425,0.59334,-0.76754,0.23325,0.75573,-0.61187,-0.25437,0.77096,-0.58382,-0.46654,0.54051,-0.7001,-0.60051,0.53353,-0.59554,-0.94729,0.15406,-0.2808,-0.85903,-0.38969,0.33192,-0.21708,-0.61891,0.75484,0.54564,-0.39119,0.74108,-0.2693,-0.45915,0.84652,-0.28217,-0.36137,0.88867,-0.85458,-0.34895,0.38456,-0.962,-0.095584,-0.25572,-0.86383,-0.33937,0.37229,-0.29112,-0.22321,0.93027,-0.86511,-0.26643,0.42494,-0.90695,-0.3028,-0.29273,-0.54268,0.095614,-0.83447,-0.46736,0.5847,-0.66304,0.17103,0.70888,-0.68422,0.80456,0.37461,-0.46074,0.15339,0.60704,-0.77969,0.18082,0.19837,-0.96329,0.86108,0.090091,-0.50041,0.21369,-0.13861,-0.96698,0.85751,-0.13242,-0.49708,0.98254,-0.098758,0.15745,0.96106,-0.013459,0.27598,0.91424,-0.05118,-0.4019,0.96777,-0.002167,0.25169,0.87414,-0.066927,-0.48097,0.96521,-0.002472,0.26139,0.87435,0.004791,-0.48524,0.97302,0.031159,0.22849,0.85449,0.080782,-0.51311,0.24686,-0.007691,-0.96899,0.2479,-0.11826,-0.96152,0.27787,-0.12632,-0.95224,-0.47352,-0.29542,-0.82974,-0.91922,-0.25928,-0.29621,-0.90194,-0.22037,0.37132,-0.33082,-0.15027,0.93164,-0.88037,-0.1619,0.44572,-0.95798,-0.15668,-0.24021,-0.49315,-0.15799,-0.85546,-0.3791,-0.24311,-0.89282,-0.51106,-0.047548,-0.85821,-0.96548,-0.089938,-0.24436,-0.88821,-0.11527,0.44468,-0.26286,-0.12189,0.95709,0.47258,-0.059542,0.87924,0.61675,-0.13569,0.77535,0.48906,-0.26441,0.8312,0.95978,-0.1157,0.25568,0.57173,-0.042879,0.81927,0.57064,-0.048341,0.81976,0.59581,-0.023316,0.80276,0.77798,0.032228,0.6274,0.99243,0.11225,0.049623,0.67858,0.13166,-0.72259,0.22013,0.057466,-0.97375,-0.54238,0.021729,-0.83984,-0.97629,-0.023072,-0.21509,-0.8721,-0.0365,0.48793,-0.25398,-0.095798,0.96243,-0.21958,-0.053713,0.97409,-0.72701,0.028779,0.686,-0.99713,0.071688,-0.023133,-0.74499,0.084994,-0.66161,0.021302,0.11133,-0.99353,0.006104,-0.003388,0.99997,-0.22114,0.8175,-0.53175,-0.1099,0.49879,-0.85971,-0.40458,0.75256,-0.51955,-0.004669,0.55541,-0.83154,0.068361,0.93701,-0.34251,-0.34568,0.9245,-0.16056,-0.52385,0.84011,-0.14042,-0.39332,0.89297,0.21879,-0.39207,0.91702,0.072878,-0.62282,0.67617,-0.39348,-0.56853,0.4358,-0.69768,-0.3527,0.4004,-0.8457,-0.35276,0.11518,-0.92859,0.01352,0.16199,-0.98669,0.20005,0.21155,-0.95666,0.36393,0.68185,-0.63451,0.60576,0.39235,-0.69213,0.55476,0.73681,-0.38639,0.5378,0.8395,-0.077151,0.85666,0.4727,-0.20661,0.90765,0.38084,0.1763,0.51015,0.78878,0.34285,0.18393,0.96451,0.18934,0.062349,0.99725,-0.039521,-0.30787,0.94989,-0.053591,-0.75359,0.62053,-0.2168,-0.82455,0.4427,-0.35228,-0.56108,0.80807,0.17942,-0.51247,0.85092,-0.11521,-0.55766,0.82925,0.036103,-0.75689,0.63653,-0.14802,-0.87143,0.48027,-0.099521,-0.83203,0.36335,-0.41914,-0.93838,0.2761,-0.20777,-0.80731,0.087985,-0.58348,-0.91629,0.11438,-0.38377,-0.91784,-0.079043,-0.38896,-0.64727,-0.12412,-0.75207,-0.86145,-0.1699,-0.47853,-0.57936,-0.18955,-0.79269,-0.41618,-0.16086,-0.89489,-0.43294,-0.063417,-0.89917,-0.1012,-0.068972,-0.99246,0.060945,-0.13111,-0.98947,-0.32829,-0.13822,-0.93439,-0.25019,-0.16987,-0.95315,-0.3162,-0.17112,-0.9331,-0.18622,-0.076876,-0.97946,0.051759,-0.078372,-0.99557,0.26972,-0.11618,-0.95587,0.15348,-0.11405,-0.98154,0.23228,-0.047578,-0.97147,0.60949,0.079287,-0.78878,0.45863,-0.020875,-0.88836,0.81472,0.16318,-0.55638,0.7684,0.37782,-0.51646,0.8909,0.23069,-0.39122,0.98615,0.16547,-0.010895,0.79556,-0.076479,0.601,0.30741,-0.16861,0.93649,0.61248,-0.037385,0.78958,0.89447,0.028901,0.44615,0.94638,0.1475,0.28739,0.95636,0.10935,-0.27082,0.88723,0.10724,-0.44859,0.74606,0.046663,-0.66421,0.26423,0.043428,-0.96347,0.70098,0.14469,-0.69832,0.89135,0.1645,-0.42238,0.90832,0.18589,-0.37465,0.97742,0.099155,0.18647,0.57659,-0.060488,0.81478,0.13376,-0.2172,0.96689,0.10785,-0.40812,0.90652,0.41063,-0.31935,0.85403,0.046571,-0.50392,0.86245,0.24598,-0.40797,0.87921,0.027894,-0.54817,0.83587,0.24903,-0.36461,0.89721,0.91098,0.37184,0.17838,0.96463,0.081576,0.25059,0.8623,0.31553,-0.39601,0.85751,0.33387,-0.39137,0.56435,0.36064,-0.74258,0.88815,0.43507,-0.14786,0.43019,0.5735,-0.6971,0.7575,0.55745,-0.3397,0.34715,0.62197,-0.70186,-0.011505,0.48521,-0.87429,-0.12394,0.46895,-0.87448,-0.38121,0.3397,-0.8598,-0.14505,0.50029,-0.8536,0.10636,0.2646,-0.95846,0.10144,0.30598,-0.94659,-0.043245,0.001068,-0.99905,0.17386,-0.020051,-0.98456,0.14844,0.25233,-0.95617,0.39641,0.49599,-0.77251,0.003357,0.50743,-0.86166,0.3614,0.62554,-0.6914,-0.10736,0.56954,-0.8149,-0.4145,0.44374,-0.79452,-0.28538,0.3874,-0.87661,0.19349,0.24412,-0.95022,0.17942,-0.010529,-0.9837,0.44639,0.046236,-0.89361,0.2725,0.21,-0.93893,0.59523,0.3618,-0.71746,0.38072,0.472,-0.79513,-0.2999,0.19175,-0.93448,-0.2891,0.45216,-0.84374,0.24067,0.55251,-0.79797,0.67022,0.45726,-0.58452,-0.56432,0.4232,-0.70879,-0.16025,0.44758,-0.87973,-0.11585,0.21629,-0.96942,-0.27482,-0.097507,-0.95651,-0.12461,-0.059786,-0.99039,-0.058565,-0.021577,-0.99805,0.14124,0.28556,-0.94787,0.011902,0.51772,-0.85543,0.45857,0.53902,-0.70647,-0.1214,0.68053,-0.72256,-0.037812,0.50594,-0.86172,-0.32469,0.70098,-0.63494,-0.22675,0.21894,-0.949,-0.40162,-0.041169,-0.91485,-0.14405,0.27082,-0.95178,0.037355,0.50377,-0.863,0.48637,0.42634,-0.76263,-0.099094,0.67528,-0.73083,-0.4041,0.56368,-0.72036,-0.39344,0.67895,-0.6198,-0.77077,0.44536,-0.45555,-0.85537,0.45366,-0.24998,-0.98025,0.18094,-0.079592,-0.67424,0.46638,-0.57256,-0.79989,0.27711,-0.5323,-0.99353,0.10941,-0.02942,-0.94375,0.33058,0.005005,-0.42067,0.60485,-0.67614,-0.88763,-0.10654,0.44804,-0.31736,-0.51195,0.79821,-0.1677,-0.65896,0.73324,-0.033601,-0.72634,0.68648,-0.10117,-0.62004,0.77798,-0.15421,-0.46232,0.87316,-0.48412,-0.35377,0.80029,-0.6548,-0.22053,0.72289,-0.30949,-0.34849,0.88473,-0.66054,-0.22413,0.71654,-0.82974,-0.18219,0.52754,-0.99234,-0.1196,0.030305,-0.93411,-0.030488,-0.35563,-0.95471,-0.15244,-0.25547,-0.93509,-0.036561,-0.35249,-0.92401,-0.036897,-0.38054,-0.80187,0.23917,-0.5475,-0.49645,0.28349,-0.82046,-0.57277,-0.012207,-0.81961,-0.99332,-0.07651,-0.086337,-0.93081,-0.18998,0.31217,-0.90005,-0.20109,0.38661,-0.98065,-0.030732,0.19321,-0.92404,-0.11936,0.36311,-0.98147,0.13443,-0.13636,-0.96689,0.25123,-0.044282,-0.98743,0.10965,-0.11368,-0.85962,0.51067,-0.015412,-0.98151,0.16721,0.093142,-0.80477,-0.095035,-0.58586,-0.39018,-0.19468,-0.8999,-0.17829,-0.14103,-0.97379,-0.86294,-0.17109,-0.47539,-0.72015,-0.16849,-0.67302,-0.33628,-0.066317,-0.93939,-0.80193,-0.15479,-0.57698,-0.41243,-0.082217,-0.90725,-0.79379,-0.15595,-0.58785,-0.25214,-0.10343,-0.96213,-0.62114,-0.11499,-0.77517,-0.16916,-0.13196,-0.97668,-0.98447,-0.17551,0.000244,-0.97656,-0.20783,-0.055422,-0.97568,-0.18009,0.12491,-0.96985,-0.19687,-0.14356,-0.94955,-0.19337,-0.24686,-0.97549,-0.21613,-0.041017,-0.92642,-0.18979,0.32505,-0.92911,-0.11094,0.35276,-0.92389,-0.048647,0.37953,-0.89749,-0.058779,0.43709,-0.82412,-0.092502,0.55876,-0.75869,-0.11954,0.64037,-0.48698,-0.078188,0.86987,-0.64254,-0.098849,0.75982,-0.76782,-0.15467,0.62169,-0.93615,-0.19101,0.29508,-0.9819,-0.17097,-0.081362,-0.99542,-0.08948,-0.033143,-0.96619,-0.094699,0.23972,-0.78814,-0.16785,0.59212,-0.67861,-0.15998,0.71682,-0.75643,-0.1521,0.6361,-0.75738,-0.10883,0.64382,-0.75308,-0.092044,0.65145,-0.73562,-0.097232,0.67034,-0.70211,-0.15641,0.69463,-0.65593,-0.10843,0.74697,-0.81869,-0.074435,0.56935,-0.9667,0.017792,0.25526,-0.83804,0.016114,0.54534,-0.6686,-0.045167,0.74221,-0.67211,0.056887,0.73824,-0.80587,0.10508,0.58263,-0.95883,0.11057,0.26151,-0.99585,0.006439,0.090609,-0.89434,0.42085,0.15171,-0.86215,0.32249,0.3907,-0.71679,0.16828,0.67666,-0.64348,0.11405,0.75689,-0.58769,0.19834,0.78439,-0.51552,0.49794,0.69732,-0.4276,0.74593,0.5106,-0.71963,0.55824,0.41285,-0.67129,0.71041,0.21125,-0.77908,0.60741,0.15503,-0.69863,0.56935,0.43321,-0.73186,0.30985,0.60689,-0.64831,0.43672,0.62365,-0.42091,0.26582,0.86724,-0.37251,0.18052,0.91028,-0.082247,0.30195,0.94974,-0.33036,0.53279,0.77908,-0.26795,0.78469,0.55892,-0.32701,0.8934,0.30802,-0.23231,0.96237,0.14081,-0.76733,0.63753,-0.068545,-0.62789,0.77828,-0.003235,-0.43614,0.8923,0.11643,-0.51042,0.81863,0.26313,0.15928,0.9252,0.34437,0.14118,0.92144,0.36189,0.081576,0.74319,0.66405,0.020081,0.58739,0.80902,0.41823,0.47337,0.7752,0.39695,0.18638,0.89868,-0.011078,0.11133,0.99371,0.24748,0.083743,0.96524,0.45335,0.019013,0.89111,0.52876,0.020325,0.84851,0.58211,-0.027863,0.81262,0.58348,-0.051637,0.81045,0.55596,-0.084902,0.82684,0.51952,-0.088046,0.84988,0.51991,-0.089236,0.84951,0.69292,0.27751,0.66543,0.66796,0.18332,0.72124,0.70333,0.14283,0.69634,0.64449,-0.04413,0.76333,0.52855,-0.14093,0.83709,0.82745,-0.084841,0.55504,0.9508,0.15519,0.26808,0.93231,-0.18784,0.309,0.73775,-0.25852,0.62355,0.92602,0.18134,0.331,0.96506,0.047639,0.25758,0.53404,0.041871,0.84439,0.10288,-0.013337,0.9946,0.4171,0.01706,0.90869,0.090762,0.02121,0.99564,0.41047,0.059023,0.90994,0.21613,0.044923,0.97531,0.26951,0.043519,0.962,0.40797,0.098331,0.90765,0.99051,0.074068,0.11551,0.9183,0.14341,0.36891,0.64003,0.094333,0.7625,0.81857,0.066164,-0.57054,0.99991,-0.007721,0.00882,0.99417,0.021119,0.10565,0.96982,-0.060701,0.23603,0.85354,-0.020264,0.52062,0.48268,-0.01587,0.87564,0.92874,0.025391,0.36979,0.86975,0.026887,-0.49269,0.9342,-0.027802,-0.3556,0.5956,-0.005554,-0.80322,0.46925,0.093875,-0.87805,0.73214,0.12244,-0.67,0.44176,0.13913,-0.88626,0.79678,0.01001,-0.60418,0.9498,-0.011414,-0.31263,0.70373,-0.008789,-0.71038,0.91971,0.024903,-0.39174,0.98935,0.022309,0.14377,0.96539,0.14347,0.21778,0.96689,0.12433,-0.22279,0.87359,0.34727,0.34086,0.88089,0.44945,0.1482,0.59578,0.72143,0.35285,0.55544,0.74325,0.37284,0.68667,-0.027863,-0.7264,0.50746,0.60186,0.61663,0.98209,0.1409,0.12497,0.98935,-0.012391,0.14493,0.94613,-0.060945,0.31791,-0.96136,0.021699,-0.27439,0.92663,0.07712,0.36793,0.95654,0.25388,0.14325,0.64971,0.54653,-0.52834,0.50932,0.69643,-0.50551,0.81216,0.46333,0.35453,-0.38664,0.033113,-0.9216,-0.51332,0.1446,-0.84591,-0.98834,-0.1521,-0.000519,-0.99298,-0.11588,-0.023072,-0.9953,-0.067446,-0.069277,-0.97494,-0.21116,0.069582,-0.99673,-0.043123,-0.067904,0.6444,-0.21363,-0.73418,0.84842,-0.14304,-0.5096,0.58254,-0.30161,-0.75472,0.8695,-0.094272,-0.48482,0.62911,-0.02411,-0.77694,0.85031,-0.012238,-0.52611,0.70617,0.024628,-0.70757,0.17963,0.002503,-0.9837,0.15168,-0.051332,-0.98709,0.18006,-0.35173,-0.91861,0.17331,-0.43693,-0.88263,0.43013,0.049471,-0.90139,0.70687,0.11243,-0.69832,0.40498,0.41462,-0.81488,0.13947,0.34971,-0.92639,0.29057,0.56035,-0.7756,-0.21717,0.54015,-0.81304,0.21403,0.79873,-0.5623,-0.2649,0.68499,-0.67864,-0.23911,0.76806,-0.59404,0.24143,0.85382,-0.46116,-0.62908,0.43526,-0.644,-0.5519,0.57735,-0.60167,-0.64635,0.27946,-0.70998,0.14756,-0.067843,-0.98669,0.14939,0.30402,-0.94085,0.14679,0.51863,-0.84228,0.096957,0.64272,-0.75991,0.091525,0.78344,-0.61467,-0.080355,0.80389,-0.58928,0.099246,0.86316,-0.49501,-0.16514,0.84826,-0.50313,-0.33039,0.7658,-0.55165,-0.026673,0.80373,-0.59435,0.08536,0.58666,-0.80529,-0.28352,0.77758,-0.56117,-0.087924,0.88769,-0.45195,0.15046,0.87194,-0.46586,-0.56502,0.72713,-0.38981,-0.16791,0.75692,-0.63152,-0.25162,0.59273,-0.76507,-0.14264,0.37068,-0.91772,-0.13511,-0.082339,-0.9874,-0.215,-0.42183,-0.88079,-0.33879,-0.42445,-0.83966,-0.39067,-0.14521,-0.90899,-0.30082,-0.007935,-0.95364,-0.72805,-0.11753,-0.67534,-0.6989,-0.24085,-0.67339,-0.58058,-0.33042,-0.7441,-0.35853,-0.29893,-0.88433,-0.24238,0.11307,-0.96356,-0.24741,0.42769,-0.86938,-0.071108,0.4232,-0.90323,-0.25837,0.56517,-0.78344,0.076785,0.80319,-0.59075,0.39833,0.77715,-0.48714,0.1641,0.85177,-0.49751,-0.024079,0.8514,-0.52394,-0.020478,0.79696,-0.60366,0.08768,0.55977,-0.82397,-0.004517,0.6209,-0.78384,0.56905,0.59484,-0.56771,0.17951,0.81457,-0.55156,-0.24571,0.85391,-0.45872,-0.22831,0.85608,-0.46364,0.055483,0.83044,-0.55431,0.50884,0.67302,-0.5367,-0.41636,0.57891,-0.70104,0.8478,0.024842,-0.52971,-0.4066,0.35289,-0.84268,-0.41685,0.41307,-0.80966,-0.23383,0.48103,-0.84491,-0.36299,0.57421,-0.73382,-0.39445,0.59441,-0.70074,-0.32176,0.64754,-0.69073,-0.2212,0.65505,-0.72243,-0.067476,0.46992,-0.88009,0.11628,0.55061,-0.82659,0.034181,0.78805,-0.61464,0.079257,0.79431,-0.60228,-0.035585,0.90307,-0.42796,-0.096957,0.91275,-0.3968,0.12333,0.51994,-0.84521,0.098148,0.50645,-0.85662,0.05652,0.59578,-0.80111,0.10184,0.78011,-0.61724,0.072726,0.84408,-0.53121,0.040712,0.89602,-0.44209,0.013398,0.87585,-0.48231,-0.015625,0.47038,-0.88232,0.000427,0.58248,-0.81283,0.005371,0.77084,-0.63698,0.010041,0.84231,-0.53887,0.009186,0.90298,-0.42955,0.003113,0.9057,-0.42384,0.36216,0.44371,-0.8197,0.44761,0.5031,-0.73922,0.024384,0.76779,-0.64022,0.028565,0.841,-0.54024,0.03827,0.8967,-0.44096,0.034211,0.89978,-0.43495,0.61425,0.35801,-0.70318,0.558,0.48787,-0.67126,0.68667,0.40748,-0.60198,0.67537,0.46184,-0.57491,0.63991,0.5378,-0.54885,0.50975,0.73971,-0.43925,0.73846,0.22904,-0.63414,0.43962,0.35429,-0.82534,0.93454,0.25367,-0.24946,0.59362,0.26533,-0.75973,0.91794,0.36863,0.14652,0.22401,-0.043947,-0.97357,-0.085696,-0.12021,-0.98901,-0.068667,-0.24595,-0.96683,0.13538,-0.077029,-0.98776,0.17133,-0.14447,-0.97455,0.23887,-0.081729,-0.96759,0.30372,-0.19953,-0.93161,-0.26762,-0.016907,-0.96335,-0.74074,0.14447,-0.65603,-0.95126,0.022797,-0.3075,-0.65285,0.026368,-0.75701,-0.16782,0.23853,-0.95651,0.14383,0.26496,-0.95346,0.11701,0.28895,-0.95013,-0.051759,0.27717,-0.95941,-0.99713,0.055452,-0.050874,0.97467,0.057039,0.21619,0.98288,0.043336,0.17899,0.97137,0.005768,0.23747,0.97226,0.15857,0.17188,0.95361,0.084017,0.28904],

    "colors": [],

    "uvs": [[0.38989,0.67902,0.36125,0.67902,0.36125,0.64335,0.38989,0.71152,0.41728,0.67902,0.41728,0.71152,0.46283,0.67902,0.46283,0.71152,0.49774,0.67902,0.46283,0.64335,0.41728,0.64335,0.38989,0.64335,0.36125,0.60855,0.33212,0.60855,0.33212,0.64335,0.33212,0.67902,0.30083,0.67902,0.30083,0.71152,0.26879,0.71152,0.30083,0.74519,0.26879,0.74519,0.23675,0.74519,0.23752,0.76817,0.20546,0.74519,0.20739,0.76817,0.21193,0.78888,0.17809,0.79332,0.17634,0.76817,0.1477,0.76817,0.17634,0.74519,0.1477,0.74519,0.1203,0.76817,0.1203,0.74519,0.074757,0.76817,0.074757,0.74519,0.03985,0.76817,0.075062,0.78843,0.03985,0.78813,0.074537,0.80687,0.03985,0.80488,0.074782,0.8331,0.03985,0.83146,0.077997,0.87356,0.03985,0.8731,0.070557,0.90787,0.038695,0.90994,0.069402,0.94454,0.046275,0.9554,0.023319,0.95817,0.005547,0.91053,0.005547,0.95785,0.005547,0.97226,0.53204,0.97226,0.51427,0.95817,0.53204,0.95785,0.51762,0.97255,0.53204,0.98554,0.51873,0.98547,0.52005,0.99755,0.50673,0.99755,0.53204,0.99755,0.005547,0.99755,0.005547,0.98554,0.01754,0.99755,0.018857,0.98547,0.019966,0.97255,0.034968,0.97353,0.049659,0.97961,0.072523,0.97858,0.087388,0.94377,0.088928,0.90787,0.094496,0.87863,0.09426,0.84593,0.1203,0.82869,0.1203,0.81092,0.1203,0.79298,0.14662,0.79469,0.17296,0.8143,0.19738,0.80895,0.21805,0.80482,0.23928,0.78619,0.26879,0.76817,0.30006,0.76817,0.33212,0.74519,0.33212,0.71152,0.36125,0.71152,0.36125,0.74519,0.36125,0.76817,0.3302,0.76817,0.32565,0.78888,0.29831,0.78619,0.26879,0.78698,0.24168,0.80437,0.24359,0.81669,0.26879,0.81906,0.26879,0.83569,0.24362,0.8348,0.22285,0.83405,0.22028,0.81464,0.20634,0.83556,0.20166,0.81924,0.16727,0.83569,0.1478,0.83337,0.14809,0.81331,0.1203,0.84859,0.14627,0.85467,0.16649,0.8592,0.18644,0.856,0.18485,0.83581,0.20723,0.85277,0.22343,0.85042,0.2427,0.85205,0.26062,0.85258,0.26879,0.85287,0.27697,0.85258,0.29488,0.85205,0.29396,0.8348,0.29399,0.81669,0.2959,0.80437,0.31954,0.80482,0.31731,0.81464,0.33592,0.81924,0.33125,0.83556,0.31473,0.83405,0.31416,0.85042,0.33036,0.85277,0.35114,0.856,0.35274,0.83581,0.37032,0.83569,0.37109,0.8592,0.34388,0.86802,0.35676,0.88268,0.3834,0.86831,0.3784,0.89041,0.58176,0.83351,0.55413,0.82297,0.55413,0.80198,0.55413,0.83712,0.55413,0.85837,0.58176,0.85837,0.60462,0.83351,0.58176,0.805,0.55413,0.7917,0.39132,0.85467,0.38979,0.83337,0.36463,0.8143,0.3402,0.80895,0.26879,0.80839,0.3595,0.79332,0.38989,0.76817,0.39097,0.79469,0.3895,0.81331,0.41728,0.82869,0.41728,0.84859,0.44333,0.84593,0.43339,0.86193,0.55413,0.96507,0.58176,0.98682,0.55413,0.98682,0.58176,0.96507,0.60462,0.96507,0.60462,0.98682,0.63512,0.98682,0.63512,0.77539,0.63512,0.80381,0.60462,0.77539,0.57817,0.36562,0.58959,0.35466,0.59356,0.36492,0.57903,0.3501,0.56934,0.35526,0.60462,0.85837,0.63512,0.83351,0.63512,0.85837,0.60462,0.88174,0.58176,0.88174,0.58176,0.90689,0.55413,0.90689,0.55413,0.92607,0.58176,0.92607,0.60462,0.90689,0.63512,0.88174,0.56294,0.36461,0.56617,0.37537,0.57401,0.38113,0.58355,0.38051,0.59041,0.37476,0.63512,0.96507,0.60462,0.94577,0.63512,0.94577,0.60462,0.92607,0.63512,0.92607,0.58176,0.94577,0.55413,0.94577,0.44866,0.90787,0.43417,0.90787,0.43417,0.8801,0.43417,0.94377,0.4502,0.94377,0.46703,0.90787,0.44309,0.87863,0.45959,0.87356,0.49774,0.8731,0.49774,0.83146,0.4628,0.8331,0.46305,0.80687,0.41728,0.81092,0.41728,0.79298,0.41728,0.76817,0.38989,0.74519,0.41728,0.74519,0.46283,0.76817,0.46252,0.78843,0.49774,0.78813,0.49774,0.76817,0.46283,0.74519,0.49774,0.74519,0.49774,0.71152,0.53204,0.67902,0.49774,0.64335,0.46283,0.60855,0.41728,0.60855,0.38989,0.60855,0.36125,0.57676,0.33212,0.57676,0.30083,0.57676,0.30083,0.60855,0.30083,0.64335,0.26879,0.64335,0.26879,0.67902,0.23675,0.67902,0.23675,0.71152,0.20546,0.71152,0.17634,0.71152,0.17634,0.67902,0.20546,0.67902,0.17634,0.64335,0.20546,0.64335,0.20546,0.60855,0.17634,0.60855,0.20546,0.57676,0.17634,0.57676,0.20546,0.54377,0.17634,0.54377,0.17634,0.5016,0.20546,0.5016,0.20546,0.46019,0.17634,0.46019,0.1477,0.46019,0.1477,0.5016,0.1477,0.54377,0.1477,0.57676,0.1477,0.60855,0.1477,0.64335,0.1477,0.67902,0.1477,0.71152,0.1203,0.71152,0.1203,0.67902,0.1203,0.64335,0.1203,0.60855,0.1203,0.57676,0.1203,0.54377,0.1203,0.5016,0.1203,0.46019,0.074757,0.5016,0.074757,0.46019,0.03985,0.46019,0.03985,0.5016,0.02164,0.46019,0.021448,0.5016,0.005547,0.5016,0.021634,0.54377,0.005547,0.54377,0.005547,0.57676,0.53204,0.57676,0.51723,0.57676,0.53204,0.54377,0.53204,0.60855,0.49774,0.57676,0.49774,0.60855,0.53204,0.64335,0.46283,0.57676,0.41728,0.57676,0.38989,0.57676,0.36125,0.54377,0.33212,0.54377,0.30083,0.54377,0.28427,0.54377,0.2853,0.57676,0.26879,0.60855,0.23675,0.64335,0.23675,0.60855,0.23675,0.57676,0.23675,0.54377,0.23675,0.5016,0.23675,0.46019,0.25529,0.46019,0.25486,0.5016,0.25418,0.54377,0.25332,0.57676,0.26879,0.57676,0.26879,0.54377,0.26879,0.5016,0.26879,0.46019,0.28281,0.46019,0.28341,0.5016,0.30083,0.5016,0.30083,0.46019,0.33212,0.5016,0.33212,0.46019,0.36125,0.5016,0.38989,0.54377,0.41728,0.54377,0.38989,0.5016,0.38989,0.46019,0.36125,0.46019,0.41728,0.5016,0.46283,0.5016,0.46283,0.54377,0.49774,0.54377,0.49774,0.5016,0.49774,0.46019,0.46283,0.46019,0.41728,0.46019,0.51656,0.46019,0.51682,0.5016,0.51702,0.54377,0.53204,0.5016,0.53204,0.46019,0.005547,0.46019,0.005547,0.67902,0.005547,0.64335,0.03985,0.64335,0.03985,0.60855,0.005547,0.60855,0.03985,0.57676,0.021885,0.57676,0.03985,0.54377,0.074757,0.54377,0.074757,0.57676,0.074757,0.60855,0.074757,0.64335,0.074757,0.67902,0.074757,0.71152,0.03985,0.74519,0.03985,0.71152,0.005547,0.74519,0.005547,0.71152,0.53204,0.74519,0.53204,0.71152,0.53204,0.76817,0.53204,0.7878,0.53204,0.80462,0.49774,0.80488,0.53204,0.83166,0.53204,0.87337,0.005547,0.87337,0.005547,0.83166,0.49889,0.90994,0.53204,0.91053,0.46818,0.94454,0.46506,0.97858,0.49131,0.9554,0.50262,0.97353,0.50482,0.98748,0.49584,0.99755,0.030854,0.99755,0.032761,0.98748,0.045009,0.98337,0.22385,0.98274,0.21815,0.9794,0.21961,0.95988,0.19263,0.97704,0.19828,0.9542,0.17723,0.97704,0.087388,0.97858,0.10342,0.94377,0.10342,0.90787,0.10342,0.8801,0.1042,0.86193,0.55413,0.71548,0.55413,0.73478,0.58176,0.71548,0.58176,0.73478,0.58176,0.75653,0.55413,0.75653,0.58176,0.5451,0.55413,0.5451,0.58176,0.56537,0.55413,0.56141,0.58176,0.57471,0.60462,0.57352,0.60462,0.60322,0.58176,0.60322,0.58176,0.62808,0.60462,0.62808,0.63512,0.60322,0.63512,0.62808,0.63512,0.57352,0.60462,0.5451,0.60462,0.73478,0.60462,0.75653,0.60462,0.71548,0.63512,0.73478,0.63512,0.75653,0.63512,0.5451,0.63512,0.65145,0.60462,0.65145,0.58176,0.65145,0.55413,0.62808,0.55413,0.60683,0.55413,0.59268,0.55413,0.57169,0.15543,0.86831,0.18082,0.88268,0.1937,0.86802,0.20772,0.87017,0.20403,0.89593,0.22303,0.86919,0.23977,0.87015,0.25498,0.86984,0.26879,0.87102,0.2826,0.86984,0.29782,0.87015,0.31456,0.86919,0.32987,0.87017,0.33355,0.89593,0.33575,0.92002,0.3167,0.9185,0.31609,0.8965,0.3015,0.89597,0.30054,0.91322,0.31798,0.95988,0.29625,0.94333,0.29175,0.96515,0.28341,0.93686,0.2806,0.96165,0.28871,0.98166,0.27748,0.98027,0.27653,0.99562,0.26879,0.99562,0.28654,0.99562,0.30011,0.98422,0.30539,0.97307,0.31373,0.98274,0.31943,0.9794,0.48793,0.97961,0.49258,0.98337,0.34496,0.97704,0.33931,0.9542,0.35677,0.91648,0.3784,0.91524,0.35961,0.9529,0.3784,0.95178,0.3784,0.97704,0.36036,0.97704,0.43417,0.97858,0.4502,0.97858,0.55413,0.88174,0.49528,0.98952,0.30745,0.98924,0.30555,0.9958,0.29635,0.99562,0.04174,0.99755,0.042303,0.98952,0.23748,0.98422,0.23014,0.98924,0.2322,0.97307,0.24583,0.96515,0.24887,0.98166,0.25699,0.96165,0.25418,0.93686,0.24133,0.94333,0.23704,0.91322,0.22088,0.9185,0.20184,0.92002,0.18082,0.91648,0.17798,0.9529,0.16044,0.97704,0.10342,0.97858,0.55413,0.6766,0.55413,0.65145,0.58176,0.6766,0.60462,0.6766,0.63512,0.6766,0.63512,0.69578,0.60462,0.69578,0.58176,0.69578,0.55413,0.69578,0.63512,0.71548,0.16044,0.95178,0.16044,0.91524,0.16044,0.89041,0.2215,0.8965,0.23609,0.89597,0.25091,0.88743,0.25227,0.90907,0.26879,0.93526,0.26879,0.90785,0.28531,0.90907,0.28667,0.88743,0.26879,0.96213,0.2601,0.98027,0.26105,0.99562,0.25105,0.99562,0.24123,0.99562,0.23204,0.9958,0.26879,0.97965,0.005547,0.80462,0.005547,0.7878,0.005547,0.76817,0.03985,0.67902,0.63512,0.90689,0.60462,0.80381,0.58176,0.79566,0.58176,0.77539,0.84695,0.27226,0.83194,0.33412,0.78106,0.27983,0.86366,0.32372,0.89718,0.26366,0.7659,0.34538,0.71176,0.27276,0.79088,0.39837,0.81127,0.44913,0.85615,0.39978,0.86226,0.47701,0.8187,0.50219,0.8374,0.57031,0.92946,0.52965,0.90325,0.4549,0.87918,0.38889,0.91907,0.37373,0.90208,0.31014,0.84694,0.27226,0.51209,0.22848,0.40513,0.24889,0.40513,0.21099,0.49015,0.25605,0.40513,0.26807,0.48888,0.29492,0.44817,0.29314,0.45517,0.30358,0.48815,0.30632,0.51392,0.31174,0.55058,0.30837,0.55022,0.32122,0.60108,0.33744,0.59339,0.35498,0.63158,0.3568,0.61845,0.39982,0.66275,0.37863,0.69176,0.42413,0.62637,0.44004,0.70562,0.48546,0.72311,0.45436,0.72351,0.49086,0.88598,0.83418,0.85811,0.84447,0.86292,0.81207,0.87899,0.84726,0.91471,0.84062,0.9226,0.82592,0.88911,0.8088,0.88224,0.79399,0.89016,0.78285,0.90643,0.79231,0.90355,0.7971,0.93681,0.82612,0.95228,0.85148,0.93322,0.85624,0.94931,0.88657,0.91772,0.88469,0.91467,0.93381,0.88435,0.89535,0.87533,0.92707,0.90399,0.95618,0.93552,0.94162,0.94873,0.95764,0.92534,0.97146,0.95198,0.96178,0.97155,0.93788,0.97429,0.97794,0.97652,0.89927,0.96739,0.93453,0.94566,0.9185,0.97164,0.89818,0.96027,0.87822,0.96184,0.85424,0.94489,0.82528,0.95713,0.79941,0.74604,0.44585,0.73764,0.44521,0.70701,0.42035,0.67292,0.36849,0.64819,0.3401,0.6004,0.31364,0.55305,0.27962,0.51209,0.22848,0.57004,0.24157,0.6714,0.32382,0.61406,0.25151,0.72661,0.32916,0.73783,0.37565,0.7484,0.43148,0.75581,0.49542,0.76479,0.53271,0.77723,0.59563,0.85603,0.64266,0.94539,0.60122,0.99125,0.57495,0.97096,0.50454,0.94471,0.43472,0.24021,0.24157,0.2572,0.27962,0.19619,0.25151,0.29816,0.22848,0.24021,0.24157,0.3201,0.25605,0.32138,0.29492,0.36208,0.29314,0.40513,0.27914,0.43088,0.29436,0.45759,0.3166,0.42999,0.3122,0.42716,0.33887,0.40513,0.33946,0.40513,0.35865,0.3831,0.33887,0.38668,0.3573,0.40513,0.36322,0.42357,0.3573,0.42017,0.36245,0.4432,0.36127,0.44288,0.37142,0.42821,0.37463,0.43997,0.37913,0.455,0.3766,0.45407,0.38447,0.46496,0.38878,0.45275,0.3906,0.45107,0.39393,0.45898,0.39189,0.46455,0.39279,0.47226,0.39376,0.47161,0.38166,0.4783,0.37447,0.4597,0.36979,0.47757,0.34754,0.45313,0.34182,0.48342,0.32538,0.50773,0.33648,0.53801,0.34918,0.56586,0.36714,0.58241,0.40609,0.58349,0.44449,0.6393,0.48624,0.56498,0.48688,0.57661,0.51536,0.58608,0.53901,0.64716,0.5421,0.59761,0.56233,0.6572,0.59601,0.60536,0.59915,0.65083,0.63963,0.69144,0.59576,0.68851,0.64146,0.7281,0.64554,0.7278,0.70769,0.78818,0.67118,0.75131,0.57846,0.74091,0.5913,0.72635,0.57949,0.71041,0.54426,0.73146,0.54224,0.84903,0.92659,0.85258,0.89601,0.86162,0.94386,0.87752,0.95693,0.89603,0.9699,0.92785,0.9735,0.89334,0.99562,0.75937,0.56269,0.98733,0.90338,0.97001,0.87747,0.98545,0.8604,0.71745,0.40965,0.62843,0.2995,0.61406,0.25151,0.61406,0.25151,0.57004,0.24157,0.8962,0.97526,0.87516,0.9626,0.85711,0.97738,0.87356,0.87735,0.8686,0.8552,0.88396,0.87351,0.68159,0.71523,0.6568,0.68203,0.61502,0.76789,0.65359,0.81854,0.58501,0.83469,0.50984,0.81239,0.51396,0.85835,0.54422,0.90137,0.61963,0.85615,0.40513,0.88027,0.40513,0.93562,0.26603,0.90137,0.29629,0.85835,0.22525,0.83469,0.19062,0.85615,0.15666,0.81854,0.19523,0.76789,0.12866,0.71523,0.15346,0.68203,0.12174,0.64146,0.15942,0.63963,0.11882,0.59576,0.15305,0.59601,0.1631,0.5421,0.099845,0.54426,0.10463,0.48546,0.078793,0.54224,0.086743,0.49086,0.05444,0.49542,0.061851,0.43148,0.064216,0.44585,0.098493,0.27276,0.13886,0.32382,0.083648,0.32916,0.18182,0.2995,0.20985,0.31364,0.25967,0.30837,0.29633,0.31174,0.32211,0.30632,0.35508,0.30358,0.32683,0.32538,0.35267,0.3166,0.37938,0.29436,0.40513,0.288,0.40513,0.31483,0.38026,0.3122,0.35713,0.34182,0.33269,0.34754,0.30252,0.33648,0.26003,0.32122,0.20917,0.33744,0.21686,0.35498,0.27225,0.34918,0.3149,0.35927,0.35055,0.36979,0.33196,0.37447,0.31763,0.38631,0.28534,0.38831,0.28138,0.40534,0.22784,0.40609,0.24439,0.36714,0.19181,0.39982,0.17867,0.3568,0.16206,0.3401,0.13733,0.36849,0.1475,0.37863,0.1185,0.42413,0.10324,0.42035,0.0928,0.40965,0.072426,0.37565,0.072614,0.44521,0.087139,0.45436,0.18388,0.44004,0.22676,0.44449,0.27914,0.42876,0.32897,0.39775,0.33276,0.38673,0.33864,0.38166,0.35525,0.3766,0.36706,0.36127,0.39008,0.36245,0.36738,0.37142,0.38205,0.37463,0.39335,0.37291,0.40527,0.37504,0.39166,0.3865,0.3744,0.38782,0.37028,0.37913,0.35751,0.3906,0.35618,0.38447,0.34529,0.38878,0.33799,0.39376,0.34077,0.39739,0.33711,0.40328,0.35583,0.41471,0.35103,0.4316,0.37035,0.43275,0.36221,0.45451,0.34288,0.45342,0.35387,0.47589,0.33089,0.47376,0.34153,0.50346,0.33078,0.50803,0.31949,0.47359,0.29516,0.50661,0.31635,0.53179,0.28133,0.53243,0.3116,0.55701,0.27849,0.5586,0.28641,0.57166,0.27686,0.57408,0.26655,0.58109,0.25921,0.56321,0.25586,0.59034,0.24554,0.57235,0.22418,0.53901,0.26016,0.53141,0.23364,0.51536,0.17095,0.48624,0.24527,0.48688,0.21265,0.56233,0.22432,0.58359,0.24543,0.59508,0.25701,0.60014,0.26327,0.59478,0.27004,0.58708,0.27881,0.58059,0.28807,0.57695,0.31254,0.57681,0.31376,0.57995,0.2905,0.58172,0.31287,0.58865,0.28569,0.59137,0.30405,0.60589,0.28341,0.60363,0.28144,0.60548,0.29145,0.60948,0.27897,0.61121,0.29016,0.61239,0.31614,0.60893,0.31653,0.61108,0.33548,0.60325,0.31669,0.61386,0.33698,0.60591,0.31521,0.62219,0.29028,0.62339,0.32497,0.63828,0.29267,0.63794,0.29082,0.65301,0.27334,0.63665,0.26861,0.64663,0.24956,0.63316,0.25765,0.61275,0.24461,0.62101,0.2449,0.60361,0.22465,0.61043,0.20489,0.59915,0.20162,0.64582,0.2324,0.66189,0.26033,0.67571,0.29279,0.68574,0.32873,0.65626,0.35164,0.64697,0.34417,0.63902,0.34485,0.62831,0.34001,0.61415,0.35881,0.61508,0.36435,0.62878,0.36542,0.63553,0.3733,0.61643,0.36634,0.60489,0.35332,0.60652,0.33983,0.59934,0.33779,0.59881,0.33361,0.60167,0.3311,0.59728,0.34324,0.59036,0.34601,0.59219,0.36012,0.59933,0.36355,0.58902,0.35484,0.58345,0.3451,0.58376,0.34343,0.57951,0.33772,0.5829,0.33808,0.58434,0.33187,0.58109,0.33221,0.58313,0.33922,0.58844,0.30915,0.56913,0.33633,0.56663,0.34592,0.54424,0.3392,0.52647,0.36194,0.52662,0.36619,0.55494,0.34575,0.57264,0.33488,0.57276,0.36516,0.58132,0.37665,0.559,0.38055,0.53393,0.36905,0.50728,0.35931,0.51097,0.35852,0.50044,0.36472,0.49587,0.36273,0.48261,0.35354,0.49192,0.36392,0.47172,0.36653,0.45734,0.37031,0.47026,0.37701,0.46197,0.38232,0.47514,0.39277,0.47482,0.39731,0.46976,0.39559,0.48298,0.40049,0.48184,0.39885,0.49391,0.40513,0.48035,0.40513,0.46784,0.40513,0.45516,0.41294,0.46976,0.40976,0.48184,0.41466,0.48298,0.4114,0.49391,0.40513,0.49407,0.40513,0.50361,0.3999,0.50198,0.39433,0.54612,0.39571,0.51153,0.37985,0.50473,0.37657,0.48664,0.37963,0.47696,0.39094,0.49254,0.3908,0.56882,0.38101,0.5868,0.37245,0.59532,0.38132,0.60259,0.3868,0.58896,0.40513,0.57098,0.40513,0.55045,0.41592,0.54612,0.41945,0.56882,0.42971,0.53393,0.41455,0.51153,0.41035,0.50198,0.41931,0.49254,0.4304,0.50473,0.4412,0.50728,0.44831,0.52662,0.45094,0.51097,0.45173,0.50044,0.44553,0.49587,0.43368,0.48664,0.43062,0.47696,0.44633,0.47172,0.44753,0.48261,0.45639,0.47589,0.45671,0.49192,0.46873,0.50346,0.47105,0.52647,0.46433,0.54424,0.44407,0.55494,0.4336,0.559,0.42925,0.5868,0.42345,0.58896,0.40513,0.58895,0.40513,0.60594,0.38222,0.62345,0.3725,0.6536,0.35977,0.67917,0.33404,0.6865,0.32513,0.71692,0.28612,0.71004,0.3156,0.77915,0.24968,0.75939,0.30042,0.81239,0.21517,0.72844,0.20975,0.68719,0.23722,0.69524,0.40513,0.83585,0.40513,0.79776,0.40513,0.72375,0.40513,0.67929,0.40513,0.65589,0.40513,0.6245,0.42803,0.62345,0.43775,0.6536,0.45049,0.67917,0.47621,0.6865,0.48153,0.65626,0.45861,0.64697,0.44483,0.63553,0.43695,0.61643,0.42893,0.60259,0.43781,0.59532,0.44671,0.58902,0.44509,0.58132,0.4645,0.57264,0.47392,0.56663,0.49866,0.55701,0.4939,0.53179,0.47947,0.50803,0.47936,0.47376,0.46737,0.45342,0.44804,0.45451,0.44373,0.45734,0.43995,0.47026,0.42794,0.47514,0.41749,0.47482,0.43325,0.46197,0.41863,0.45249,0.42011,0.44569,0.40513,0.44498,0.39014,0.44569,0.39162,0.45249,0.37358,0.44939,0.3913,0.43133,0.38405,0.42311,0.38692,0.40789,0.35924,0.40557,0.35573,0.39838,0.35933,0.39493,0.36973,0.39752,0.36939,0.40092,0.38328,0.40401,0.39848,0.40821,0.39886,0.42252,0.39915,0.4313,0.40513,0.43334,0.40513,0.42399,0.40513,0.40703,0.39768,0.40283,0.39337,0.39899,0.40513,0.40017,0.40513,0.40272,0.41258,0.40283,0.41178,0.40821,0.42697,0.40401,0.42334,0.40789,0.44087,0.40092,0.45102,0.40557,0.45442,0.41471,0.4262,0.42311,0.4114,0.42252,0.4111,0.4313,0.41896,0.43133,0.43667,0.44939,0.4399,0.43275,0.45922,0.4316,0.47315,0.40328,0.46948,0.39739,0.45452,0.39838,0.44052,0.39752,0.43003,0.39879,0.41689,0.39899,0.45093,0.39493,0.46542,0.39449,0.48128,0.39775,0.47864,0.42561,0.48057,0.45021,0.52815,0.4601,0.49077,0.47359,0.51509,0.50661,0.52892,0.53243,0.53177,0.5586,0.52384,0.57166,0.50111,0.56913,0.49771,0.57681,0.47838,0.58109,0.47537,0.57276,0.47254,0.5829,0.46682,0.57951,0.46515,0.58376,0.45541,0.58345,0.46702,0.59036,0.46425,0.59219,0.47247,0.59881,0.47043,0.59934,0.45014,0.59933,0.44392,0.60489,0.4459,0.62878,0.46608,0.63902,0.48528,0.63828,0.51944,0.65301,0.51746,0.68574,0.48512,0.71692,0.49465,0.77915,0.56058,0.75939,0.52413,0.71004,0.54992,0.67571,0.54165,0.64663,0.53692,0.63665,0.51758,0.63794,0.51997,0.62339,0.49504,0.62219,0.47024,0.61415,0.46541,0.62831,0.45144,0.61508,0.45693,0.60652,0.47328,0.60591,0.47477,0.60325,0.49357,0.61386,0.52011,0.61399,0.49372,0.61108,0.49411,0.60893,0.47665,0.60167,0.47915,0.59728,0.5062,0.60589,0.49738,0.58865,0.47103,0.58844,0.47218,0.58434,0.47804,0.58313,0.49649,0.57995,0.52219,0.57695,0.53339,0.57408,0.5437,0.58109,0.53144,0.58059,0.54022,0.58708,0.53358,0.59051,0.52726,0.58508,0.52456,0.59137,0.54074,0.59736,0.52684,0.60363,0.51976,0.58172,0.52882,0.60548,0.5188,0.60948,0.52009,0.61239,0.53107,0.61227,0.53655,0.61491,0.55261,0.61275,0.55003,0.60762,0.54414,0.60695,0.53129,0.61121,0.54044,0.60215,0.55125,0.60232,0.55324,0.60014,0.56564,0.62101,0.56069,0.63316,0.57785,0.66189,0.6005,0.68719,0.57304,0.69524,0.59508,0.72844,0.60863,0.64582,0.58561,0.61043,0.56535,0.60361,0.56482,0.59508,0.55439,0.59034,0.54699,0.59478,0.54872,0.59908,0.55104,0.56321,0.5501,0.53141,0.54311,0.51379,0.52528,0.48772,0.53111,0.42876,0.52888,0.40534,0.49262,0.38631,0.4775,0.38673,0.49536,0.35927,0.52491,0.38831,0.56471,0.57235,0.58594,0.58359,0.38023,0.39879,0.34484,0.39449,0.34571,0.39279,0.35128,0.39189,0.35918,0.39393,0.37193,0.39391,0.38954,0.39446,0.38107,0.39782,0.40513,0.39846,0.40513,0.39362,0.40513,0.38862,0.4186,0.3865,0.42071,0.39446,0.42919,0.39782,0.43832,0.39391,0.43586,0.38782,0.41691,0.37291,0.26023,0.60762,0.26612,0.60695,0.25901,0.60232,0.27919,0.61227,0.2737,0.61491,0.29014,0.61399,0.26981,0.60215,0.26154,0.59908,0.26952,0.59736,0.27668,0.59051,0.28299,0.58508,0.2821,0.4601,0.33161,0.42561,0.32969,0.45021,0.28498,0.48772,0.26714,0.51379,0.033023,0.59563,0.045458,0.53271,0.050872,0.56269,0.78781,0.67118,0.77686,0.59563,0.72773,0.64554,0.058947,0.57846,0.082153,0.64554,0.083907,0.57949,0.069348,0.5913,0.082457,0.70769,0.72743,0.70769,0.40513,0.21099,0.29816,0.22848,1.944,110.73,1.5421,110.98,1.4565,110.9,2.6494,99.926,2.6772,100.19,2.3882,99.777,0.84284,0.1788,0.83744,0.18309,0.83689,0.17924,0.84276,0.18339,0.85088,0.17828,0.85017,0.18317,0.85151,0.17821,0.85154,0.18454,0.85074,0.18364,0.85264,0.17811,0.85283,0.18607,0.85394,0.17807,0.86086,0.17823,0.86097,0.18428,0.86661,0.18489,0.86732,0.17847,0.87203,0.18501,0.87221,0.17853,0.88957,0.18638,0.87248,0.19466,0.88819,0.19719,0.90509,0.18828,0.90178,0.20055,0.92187,0.18907,0.91912,0.20643,0.93586,0.18504,0.93902,0.19992,0.93954,0.21364,0.95034,0.21935,0.93072,0.22449,0.93833,0.2311,0.92005,0.23668,0.92324,0.24471,0.90913,0.24008,0.90783,0.25896,0.89959,0.23646,0.88943,0.24444,0.88766,0.26178,0.89502,0.27147,0.87973,0.26771,0.88306,0.27323,0.8885,0.28577,0.88128,0.29196,0.90132,0.087781,0.89484,0.097158,0.88865,0.082814,0.90169,0.10169,0.90075,0.11351,0.91159,0.10811,0.92655,0.11636,0.91904,0.12846,0.93424,0.13744,0.91002,0.1419,0.92446,0.14932,0.94902,0.14648,0.95591,0.13493,0.96196,0.161,0.94122,0.15938,0.95949,0.17886,0.6321,0.46256,0.62171,0.48026,0.62171,0.46256,0.6321,0.48026,0.64348,0.46256,0.64348,0.48026,0.66202,0.48026,0.66202,0.46256,0.71057,0.48026,0.66202,0.4976,0.71057,0.4976,0.71057,0.51484,0.66202,0.51484,0.66202,0.52876,0.71057,0.52876,0.71057,0.38576,0.66202,0.37071,0.71058,0.37071,0.66202,0.38576,0.71057,0.40487,0.66202,0.40487,0.66202,0.4212,0.71057,0.4212,0.75934,0.4212,0.71057,0.44214,0.75934,0.44214,0.7839,0.4212,0.7839,0.44214,0.81273,0.44214,0.7839,0.46256,0.81273,0.46256,0.82771,0.46256,0.82771,0.44214,0.84261,0.44214,0.84261,0.46256,0.88603,0.46257,0.88603,0.44214,0.88603,0.4212,0.84261,0.4212,0.84261,0.40487,0.82771,0.4212,0.81273,0.4212,0.81273,0.40487,0.7839,0.40487,0.75934,0.40487,0.75934,0.38576,0.75934,0.37071,0.75934,0.52876,0.75934,0.51484,0.75934,0.49761,0.75934,0.48026,0.7839,0.49761,0.7839,0.48026,0.81273,0.48026,0.81273,0.49761,0.82771,0.49761,0.82771,0.48026,0.84261,0.48026,0.88603,0.48026,0.93233,0.48026,0.93233,0.46257,0.93233,0.44214,0.93233,0.4212,0.88603,0.40487,0.88603,0.38576,0.84261,0.38576,0.82771,0.38576,0.82771,0.40487,0.81273,0.38576,0.7839,0.38576,0.7839,0.37071,0.7839,0.52876,0.7839,0.51484,0.81273,0.51484,0.81273,0.52876,0.81273,0.37071,0.82771,0.37071,0.82771,0.52876,0.82771,0.51484,0.84261,0.51484,0.84261,0.49761,0.88603,0.49761,0.88603,0.51484,0.93233,0.51484,0.93233,0.49761,0.99301,0.49761,0.99301,0.51484,0.99301,0.52876,0.93233,0.52876,0.88603,0.52876,0.84261,0.52876,0.84261,0.37071,0.88603,0.37072,0.93233,0.38576,0.93233,0.37072,0.99301,0.37072,0.99301,0.38576,0.99301,0.40488,0.93233,0.40487,0.99301,0.42121,0.99301,0.44214,0.99301,0.46257,0.99301,0.48026,0.75934,0.46256,0.71057,0.46256,0.66202,0.44214,0.64348,0.44214,0.6321,0.44214,0.62171,0.44214,0.97251,0.1415,0.96255,0.12573,0.9422,0.12628,0.93483,0.10418,0.92315,0.095344,0.91176,0.09716,0.91492,0.087812,0.92682,0.082493,0.90924,0.081065,0.90113,0.067913,0.89385,0.073995,0.89128,0.081386,0.88593,0.075977,0.90715,0.2757,0.8909,0.28725,0.89824,0.28797,0.91941,0.28369,0.90555,0.29459,0.91649,0.29767,0.91097,0.30371,0.9198,0.071913,0.9085,0.062014,0.92972,0.065262,0.92384,0.053461,0.91721,0.056528,0.91394,0.065376,0.91051,0.058077,0.9285,0.2871,0.91718,0.30134,0.92334,0.30302,0.93822,0.29109,0.929,0.30668,0.94576,0.30397,0.93848,0.31389,0.93844,0.062285,0.93046,0.050276,0.93163,0.073127,0.93851,0.080828,0.94407,0.091947,0.95008,0.11583,0.96982,0.11432,0.98338,0.12493,0.6321,0.4212,0.62171,0.4212,0.64348,0.4212,0.64348,0.40487,0.6321,0.40487,0.62171,0.40487,0.9937,0.11412,0.98069,0.10116,0.96929,0.091449,0.95881,0.10378,0.95513,0.081387,0.94324,0.070429,0.94161,0.28024,0.95307,0.29377,0.92762,0.2711,0.93747,0.25556,0.95021,0.26926,0.96088,0.25574,0.94966,0.24241,0.95973,0.23116,0.96984,0.24462,0.98461,0.25778,0.97471,0.26999,0.9624,0.28504,0.99485,0.24226,0.98444,0.22868,0.97842,0.21666,0.62171,0.38576,0.62171,0.37071,0.6321,0.37071,0.6321,0.52876,0.62171,0.52876,0.6321,0.51484,0.62171,0.51484,0.972,0.20564,0.96306,0.19282,0.95166,0.197,0.94922,0.18037,0.62171,0.4976,0.6321,0.4976,0.64348,0.4976,0.64348,0.51484,0.64348,0.52876,0.64348,0.37071,0.6321,0.38576,0.64348,0.38576,0.92698,0.16548,0.91505,0.16986,0.90328,0.17355,0.88944,0.17751,0.88968,0.16877,0.8994,0.16489,0.90724,0.16075,0.91746,0.15593,0.90604,0.14913,0.90289,0.15558,0.89062,0.15232,0.88714,0.15851,0.87192,0.16333,0.87197,0.17232,0.86643,0.17218,0.86064,0.17212,0.85241,0.17,0.85128,0.17177,0.85042,0.17292,0.84985,0.17351,0.84242,0.17423,0.83724,0.17541,0.83605,0.17931,0.83657,0.18235,0.83625,0.1838,0.83545,0.18265,0.84253,0.18438,0.84225,0.18481,0.84205,0.1866,0.84303,0.1903,0.84965,0.19278,0.86152,0.19417,0.84501,0.19695,0.86129,0.20053,0.85993,0.20605,0.84397,0.2017,0.84128,0.20611,0.85709,0.21122,0.85356,0.21712,0.86084,0.21348,0.85718,0.21909,0.86485,0.21402,0.86782,0.20871,0.86436,0.20744,0.86596,0.20054,0.8697,0.20262,0.8665,0.19345,0.88471,0.20647,0.88163,0.21448,0.87624,0.22347,0.86134,0.22098,0.86831,0.22712,0.87577,0.23089,0.88229,0.23508,0.88679,0.22925,0.87109,0.24059,0.87547,0.25078,0.87356,0.26416,0.85374,0.27492,0.85802,0.28166,0.86139,0.28869,0.86337,0.30165,0.88389,0.090971,0.86893,0.07149,0.88726,0.10616,0.89043,0.12001,0.90124,0.12555,0.89034,0.13345,0.89019,0.14432,0.8716,0.14067,0.88162,0.14782,0.86845,0.23025,0.86605,0.23367,0.858,0.23556,0.863,0.24371,0.86529,0.25227,0.84183,0.2504,0.84441,0.25729,0.8628,0.26405,0.8429,0.27102,0.87648,0.10668,0.8737,0.11661,0.8505,0.10276,0.88155,0.11793,0.87774,0.12956,0.86994,0.26127,0.8751,0.10491,0.87882,0.099218,0.87156,0.10365,0.85975,0.08581,0.85524,0.098653,0.85679,0.084183,0.85036,0.093684,0.84947,0.2782,0.85301,0.28449,0.85605,0.29126,0.86069,0.3037,0.8573,0.30431,0.86167,0.076748,0.86267,0.0678,0.86607,0.069389,0.85569,0.073258,0.85426,0.082135,0.84507,0.067069,0.83773,0.072047,0.84428,0.091562,0.86868,0.081232,0.84428,0.28068,0.8476,0.28704,0.85081,0.2932,0.84031,0.31359,0.84548,0.058468,0.8421,0.056281,0.8388,0.063495,0.83509,0.070116,0.83206,0.068728,0.82791,0.080558,0.82264,0.078762,0.82588,0.28977,0.82902,0.29625,0.82093,0.2918,0.83305,0.29425,0.83239,0.3032,0.82735,0.30457,0.83383,0.31638,0.83742,0.31571,0.83809,0.055043,0.83286,0.060881,0.82335,0.065548,0.81643,0.073824,0.81662,0.3018,0.81356,0.29571,0.8248,0.29795,0.82036,0.30753,0.82422,0.31748,0.82852,0.059196,0.82921,0.051164,0.82687,0.058547,0.82288,0.063067,0.81379,0.061225,0.80915,0.067054,0.80837,0.3068,0.80483,0.3021,0.81187,0.3114,0.81316,0.31852,0.82704,0.052562,0.81902,0.047608,0.82523,0.057915,0.82176,0.061672,0.81467,0.059677,0.80722,0.057183,0.80852,0.056037,0.80693,0.055441,0.80839,0.055494,0.80081,0.30845,0.7979,0.31282,0.7976,0.31176,0.80352,0.31138,0.79994,0.31605,0.80343,0.31754,0.80646,0.31411,0.80482,0.31782,0.81862,0.049488,0.811,0.047045,0.8245,0.057638,0.81859,0.051037,0.82448,0.053161,0.81748,0.05498,0.81568,0.058648,0.82145,0.060973,0.80965,0.055449,0.80802,0.054331,0.80912,0.05457,0.80929,0.052111,0.81085,0.050138,0.80986,0.049626,0.81184,0.049801,0.81094,0.049,0.80976,0.048106,0.81143,0.048672,0.81875,0.049998,0.81088,0.052666,0.8101,0.052397,0.82516,0.052857,0.80614,0.061257,0.83712,0.30052,0.83038,0.28717,0.83181,0.084481,0.86992,0.12574,0.86457,0.13627,0.8436,0.1315,0.83976,0.24303,0.83671,0.25192,0.83815,0.25855,0.83984,0.2729,0.83242,0.2588,0.83598,0.27166,0.84436,0.10864,0.84233,0.10039,0.84645,0.10131,0.83674,0.10706,0.83747,0.11562,0.82286,0.11129,0.82081,0.12405,0.83308,0.12837,0.84121,0.11651,0.84452,0.11806,0.85293,0.1117,0.83883,0.12824,0.83444,0.24502,0.83142,0.25244,0.81799,0.2545,0.81944,0.26094,0.81912,0.27347,0.82725,0.10499,0.82579,0.09767,0.82123,0.10368,0.81988,0.1103,0.81666,0.1213,0.8171,0.24782,0.81321,0.25538,0.81214,0.24899,0.81437,0.2623,0.81582,0.27457,0.80946,0.26192,0.80827,0.2559,0.80703,0.2497,0.80101,0.25711,0.80233,0.2633,0.81216,0.27346,0.80283,0.27301,0.8182,0.09634,0.81036,0.10282,0.80902,0.095848,0.81557,0.10318,0.80785,0.10926,0.81654,0.11048,0.80461,0.11848,0.79716,0.11479,0.79919,0.25137,0.7928,0.25949,0.79076,0.25461,0.81147,0.1216,0.82213,0.096691,0.79468,0.26466,0.79346,0.27104,0.80754,0.097603,0.79974,0.095316,0.80888,0.10269,0.80684,0.1073,0.79893,0.10842,0.79264,0.11063,0.78707,0.26236,0.78553,0.25923,0.78902,0.26562,0.78673,0.26842,0.79988,0.097046,0.793,0.097002,0.80735,0.1026,0.80605,0.098348,0.79924,0.10687,0.80554,0.10643,0.79248,0.10686,0.78194,0.26221,0.78193,0.2612,0.7828,0.26545,0.78558,0.2678,0.79345,0.098725,0.79271,0.099548,0.79223,0.098263,0.79439,0.099176,0.79403,0.10467,0.79299,0.10506,0.79238,0.10417,0.7998,0.10572,0.79325,0.10551,0.79175,0.10543,0.80512,0.10593,0.80667,0.10257,0.80026,0.10223,0.79427,0.10208,0.80022,0.098396,0.80557,0.098784,0.79379,0.098285,0.83007,0.24575,0.88891,0.225,0.8906,0.22026,0.89613,0.20956,0.91143,0.21636,0.90475,0.23035,0.86627,0.16398,0.86125,0.162,0.84868,0.16301,0.84202,0.16689,0.84173,0.17088,0.84203,0.17276,0.84221,0.17321,0.83613,0.17494,0.83534,0.17609,0.8352,0.17936,0.83645,0.17627,0.82785,0.19917,0.82824,0.19443,0.82803,0.20043,0.83294,0.19644,0.83205,0.18985,0.8358,0.18637,0.83492,0.18437,0.83662,0.18456,0.8361,0.19157,0.83182,0.20205,0.84182,0.21261,0.83486,0.20888,0.83569,0.17267,0.83529,0.16869,0.83657,0.17419,0.83479,0.17446,0.92069,0.045745,0.91323,0.044959,0.9054,0.049651,0.91803,0.31525,0.91234,0.3128,0.92372,0.31717,0.93131,0.32448,0.92526,0.039854,0.9186,0.040438,0.91268,0.042775,0.90418,0.046094,0.917,0.31836,0.9113,0.31679,0.91568,0.32178,0.92281,0.3209,0.93128,0.32586,0.92089,0.32433,0.91315,0.33096,0.91887,0.33203,0.93008,0.32704,0.92659,0.33659,0.92345,0.035698,0.91649,0.035547,0.91915,0.026302,0.92462,0.03781,0.91151,0.040562,0.90815,0.030725,0.90038,0.034973,0.90237,0.042596,0.90972,0.32088,0.90743,0.32917,0.91254,0.3343,0.91867,0.33572,0.92705,0.33845,0.917,0.33904,0.91178,0.33759,0.90676,0.33315,0.90026,0.031294,0.90789,0.028674,0.89769,0.027819,0.90627,0.33717,0.91082,0.34295,0.91591,0.34374,0.92571,0.34005,0.92235,0.34655,0.91729,0.021845,0.9095,0.019312,0.91381,0.015247,0.9111,0.022403,0.90359,0.020445,0.90882,0.017975,0.90452,0.018876,0.90041,0.014086,0.8967,0.015521,0.89678,0.022669,0.90563,0.34258,0.91028,0.34964,0.90542,0.35005,0.90678,0.026891,0.91314,0.026564,0.91855,0.024052,0.9148,0.031144,0.91512,0.35035,0.91838,0.35268,0.91198,0.014954,0.91041,0.008685,0.90828,0.016928,0.90459,0.01758,0.90165,0.013601,0.89889,0.00902,0.89625,0.010676,0.9103,0.35505,0.90815,0.35879,0.90723,0.35509,0.91126,0.35921,0.91401,0.35775,0.9133,0.35455,0.90643,0.004837,0.90539,0.005907,0.9052,0.004862,0.90804,0.016492,0.90841,0.010358,0.91031,0.014121,0.90566,0.012064,0.90271,0.013402,0.90478,0.017052,0.90018,0.00897,0.89961,0.007871,0.90041,0.008552,0.90112,0.00906,0.90331,0.007938,0.90546,0.006751,0.90925,0.009535,0.90588,0.00595,0.91082,0.014246,0.91483,0.35701,0.89492,0.046717,0.89159,0.055376,0.88234,0.056436,0.87369,0.064273,0.88802,0.30425,0.88265,0.29874,0.89415,0.30805,0.90094,0.31738,0.90027,0.32001,0.89357,0.044482,0.88733,0.049491,0.88119,0.05406,0.87163,0.06158,0.88054,0.30372,0.88578,0.30751,0.89129,0.31196,0.88843,0.31526,0.89782,0.32193,0.89146,0.042198,0.88333,0.044635,0.87915,0.052253,0.86918,0.039362,0.86079,0.048253,0.86801,0.058479,0.88327,0.31048,0.87697,0.30668,0.87506,0.32141,0.88047,0.32495,0.88806,0.33419,0.87742,0.03741,0.88078,0.029961,0.87355,0.032622,0.86806,0.037061,0.85934,0.043512,0.86999,0.31724,0.87228,0.32505,0.86706,0.32139,0.87734,0.3292,0.88741,0.33677,0.87455,0.33275,0.86951,0.32863,0.86349,0.32484,0.86555,0.33428,0.87151,0.33801,0.88488,0.33837,0.87809,0.34493,0.87682,0.025271,0.86628,0.024773,0.8705,0.018138,0.8698,0.028572,0.85952,0.028759,0.86525,0.023689,0.8601,0.02652,0.85296,0.02239,0.84742,0.026138,0.85199,0.034421,0.86578,0.035338,0.85576,0.040053,0.87896,0.027713,0.8596,0.33071,0.86102,0.34172,0.86623,0.34496,0.86999,0.35027,0.86809,0.018572,0.86369,0.011372,0.86411,0.022576,0.85968,0.024929,0.85434,0.021292,0.84898,0.016842,0.84639,0.020204,0.85454,0.34637,0.85366,0.35139,0.85292,0.35055,0.85868,0.34776,0.85736,0.35366,0.86168,0.35355,0.8628,0.3492,0.8631,0.35319,0.86258,0.012936,0.85724,0.008188,0.85061,0.016241,0.84946,0.015104,0.85074,0.015645,0.85087,0.014493,0.85679,0.010987,0.8552,0.010115,0.85638,0.009964,0.85572,0.008719,0.86242,0.013422,0.86183,0.014293,0.86565,0.0182,0.86363,0.022129,0.85891,0.017642,0.85564,0.020648,0.85971,0.024237,0.85187,0.015984,0.85177,0.015027,0.85318,0.012439,0.85435,0.013495,0.857,0.009836,0.86634,0.018146,0.85511,0.33961,-8.461,60.379,-8.2069,60.028,-8.178,60.098,8.8228,60.157,8.6225,59.762,8.8769,60.114,13.984,33.485,13.546,33.496,13.558,33.427,-13.843,35.611,-13.416,35.556,-13.795,35.67,13.732,41.636,13.433,41.596,13.432,41.503,10.591,70.15,10.352,69.962,10.658,70.084,10.597,96.432,10.738,96.325,10.696,96.416,12.362,50.875,12.629,50.494,12.697,50.501,13.275,38.946,13.229,38.919,13.388,38.495,12.961,33.53,13.099,32.858,13.14,32.892,10.274,91.115,10.402,90.998,10.42,91.058,15.043,95.363,14.556,94.945,15.223,95.352,13.854,96.862,13.357,96.495,13.366,96.444,-0.005246,71.137,-0.078272,71.102,-0.16508,70.541,4.3506,98.258,4.5551,97.92,4.6331,97.941,14.941,84.229,14.477,83.901,14.552,83.834,14.952,85.181,14.485,84.776,14.953,85.1,11.537,92.546,11.009,92.179,11.057,92.159,10.781,93.818,10.378,93.334,10.829,93.798,11.28,94.747,10.822,94.291,10.834,94.229,14.309,89.818,13.883,89.284,14.388,89.754,14,96.758,13.844,96.647,13.951,96.668,13.024,85.402,13.11,85.416,13.036,85.632,13.689,53.779,13.669,54.007,13.585,53.986,13.883,66.477,13.788,66.667,13.696,66.613,11.872,80.083,12.01,79.922,12.112,79.932,11.414,52.59,11.312,52.573,11.257,52.479,1.2778,34.954,1.1425,34.942,1.1897,34.884,12.365,46.585,12.305,46.809,12.294,46.562,-8.8505,94.506,-8.9867,94.305,-8.7845,94.448,-8.9043,94.421,-9.1517,94.236,-9.0402,94.219,-11.454,96.624,-11.632,96.456,-11.563,96.401,-11.519,96.763,-11.662,96.489,-11.484,96.657,12.776,94.652,12.849,94.639,12.794,94.763,11.945,85.376,11.991,85.132,12.018,85.361,8.3116,29.876,8.4673,29.886,8.4678,29.949,12.985,96.668,12.427,96.338,12.994,96.617,12.742,96.254,12.128,95.948,12.186,95.921,-1.657,58.302,-1.8128,57.71,-1.7625,57.619,13.402,96.215,13.465,95.939,13.551,95.994,14.073,91.479,14.065,91.25,14.165,91.287,11.401,85.161,11.322,85.096,11.568,84.955,10.66,86.732,10.632,86.656,10.954,86.421,13.75,97.57,14.066,97.281,14.127,97.326,10.313,89.996,10.257,89.944,10.485,89.586,14.328,90.165,14.172,90.143,13.858,89.689,7.518,100.13,7.4706,100.08,7.6798,99.77,12.33,92.019,12.624,91.82,12.67,91.866,8.4381,66.257,8.4165,66.189,8.6857,66.003,14.627,74.902,14.342,74.456,14.651,74.835,9.0951,100.29,8.6439,99.976,8.6875,99.957,-6.3092,98.51,-6.545,98.33,-6.4461,98.319,4.0285,61.068,3.9137,61.11,3.9313,61.046,8.7995,79.671,8.7107,79.652,8.6704,79.565,9.568,96.427,9.7177,96.285,9.8073,96.3,11.94,87.683,11.872,87.62,12.072,87.525,13.928,98.569,13.967,98.378,14.043,98.432,13.965,98.528,13.879,98.486,14.004,98.337,14.194,97.569,14.091,97.438,14.177,97.48,14.296,85.013,14.1,84.459,14.382,84.98,8.925,99.374,8.5567,98.96,8.5732,98.904,8.3554,99.762,8.0312,99.329,8.399,99.744,12.723,93.309,12.866,93.244,12.863,93.302,13.492,94.996,13.51,94.898,13.576,94.907,-9.7959,90.552,-9.9392,90.324,-9.7775,90.455,-9.6593,89.856,-9.8205,89.724,-9.7662,89.672,-6.3297,98.526,-6.4666,98.334,-6.2727,98.476,14.237,65.709,14.087,65.876,14.192,65.66,13.861,74.543,13.755,74.739,13.693,74.693,11.955,86.669,12.097,86.497,12.155,86.573,14.094,94.348,14.144,94.158,14.212,94.193,13.779,92.721,13.887,92.538,13.845,92.729,14.652,73.933,14.351,73.548,14.434,73.511,12.251,97.072,12.343,96.846,12.408,96.905,13.054,98.106,13.034,98.018,13.149,97.881,9.1013,98.3,9.0379,98.239,9.2789,98.116,-0.05092,78.449,-0.3656,78.028,-0.3518,77.938,1.438,80.935,1.3702,80.995,1.0348,80.506,-0.72339,89.372,-0.98112,88.974,-0.90751,88.921,1.3223,96.63,1.1079,96.939,1.2518,96.622,-0.15712,89.902,-0.22744,89.891,-0.42017,89.443,11.952,96.731,11.585,96.351,11.601,96.306,11.021,95.729,10.576,95.396,11.036,95.684,10.655,96.85,10.154,96.541,10.208,96.52,14.392,45.912,14.354,45.956,14.295,45.811,9.192,57.409,9.713,56.998,9.7599,57.023,3.3653,58.796,3.2951,58.825,2.7664,58.511,6.9381,71.071,6.599,70.794,6.5786,70.7,11.445,70.974,11.361,70.917,11.361,70.817,13.258,55.383,12.945,55.283,13.188,55.31,13.023,73.979,12.778,73.958,12.777,73.861,12.086,92.182,12.358,92.2,12.31,92.285,12.823,101.88,13.094,101.91,13.067,101.98,12.867,103.82,12.866,103.75,13.138,103.84,9.073,104.84,9.182,104.86,9.1767,104.92,-5.3913,53.312,-5.3015,53.057,-5.1997,53.014,-5.4793,53.367,-5.5565,53.344,-5.3878,53.112,-13.341,17.656,-13.141,17.451,-13.106,17.523,12.688,96.984,12.431,96.894,12.716,96.922,12.907,92.774,12.645,92.758,12.651,92.68,7.9956,86.982,8.0092,86.915,8.1183,86.93,-13.298,17.634,-13.275,17.526,-13.043,17.389,13.619,74.607,13.307,74.437,13.23,74.369,13.056,104.31,12.988,104.3,12.969,104.16,10.624,64.002,10.576,63.98,10.873,63.622,12.881,52.587,13.034,52.108,13.075,52.164,12.683,103.71,12.619,103.68,12.755,103.59,2.996,100.84,3.6253,100.63,3.0621,100.88,0.98584,86.628,1.2087,86.425,1.2154,86.5,-5.6411,62.352,-5.5676,62.367,-5.7945,62.566,3.6599,23.16,3.6774,23.207,3.5483,23.189,15.122,92.502,14.718,92.268,14.764,92.249,-0.76705,60.733,-0.84166,60.745,-0.85595,60.275,-1.6957,75.419,-1.7168,75.045,-1.6417,75.036,16.864,90.268,16.528,90.074,16.582,90.021,16.883,91.075,16.547,90.825,16.884,91.017,13.785,86.789,13.435,86.528,13.472,86.512,13.153,89.132,12.921,88.772,13.191,89.116,9.9219,82.386,10.002,82.283,10.022,82.328,12.937,95.946,12.974,95.852,13.013,95.923,14.109,96.075,14.161,96.059,14.125,96.153,12.066,74.084,12.107,74.268,12.056,74.287,13.739,73.777,13.801,73.78,13.763,73.964,14.166,37.978,14.177,38.166,14.114,38.161,16.438,50.926,16.297,51.047,16.378,50.877,16.415,52.365,16.336,52.52,16.271,52.483,14.616,71.238,14.417,71.35,14.542,71.229,13.893,77.693,13.843,77.644,14.047,77.541,15.962,91.301,16.031,91.085,16.089,91.125,16.244,89.753,16.217,89.685,16.305,89.534,15.778,92.861,15.667,92.788,15.744,92.796,15.716,93.313,15.641,93.313,15.604,93.241,15.975,93.645,15.619,93.34,15.693,93.341,16.145,94.696,15.842,94.345,16.202,94.646,13.684,90.106,13.406,89.769,13.423,89.722,-3.6783,60.682,-3.6768,60.265,-3.6227,60.215,12.968,42.026,12.873,41.933,12.952,41.954,13.47,43.023,13.398,43.006,13.37,42.934,-14.997,18.236,-14.943,18.175,-14.928,18.275,-5.6679,33.949,-5.7486,33.888,-5.696,33.873,11.027,32.728,11.026,32.919,10.972,32.722,-11.192,91.811,-11.45,91.728,-11.371,91.712,-11.232,91.855,-14.071,95.888,-14.223,95.757,-14.18,95.716,-14.084,95.967,15.896,81.43,15.819,81.421,15.889,81.246,15.968,81.566,15.963,81.381,16.034,81.404,13.107,89.97,13.095,89.915,13.341,89.758,16.111,96.036,16.349,95.828,16.389,95.86,11.833,84.767,11.801,84.727,12.013,84.495,5.98,97.253,5.7303,97.444,5.9269,97.232,-0.86745,75.271,-0.91443,75.238,-0.87379,74.853,16.091,92.954,15.786,92.669,15.799,92.631,15.376,93.466,15.015,93.216,15.39,93.428,17.125,95.899,16.816,95.592,17.254,95.889,16.28,96.354,15.872,95.964,16.448,96.337,15.324,94.708,14.914,94.355,14.929,94.305,0.13614,73.859,0.069894,73.824,0.073586,73.322,5.5073,97.593,5.1915,97.874,5.4357,97.57,11.646,86.543,11.599,86.496,11.859,86.162,15.195,97.072,15.497,96.773,15.551,96.813,11.7,87.616,11.677,87.545,11.984,87.299,15.986,87.304,15.543,86.992,15.987,87.229,13.301,89.324,12.817,89.03,12.863,89.005,12.501,91.347,12.159,90.91,12.548,91.322,9.7835,87.254,9.9008,87.126,9.9226,87.186,13.21,96.052,13.281,96.033,13.228,96.155,11.568,78.951,11.613,79.221,11.542,79.243,13.036,78.983,13.119,78.989,13.058,79.256,13.532,47.543,13.536,47.817,13.454,47.807,15.398,57.72,15.213,57.915,15.315,57.661,15.392,59.225,15.291,59.459,15.203,59.415,13.665,76.612,13.833,76.42,13.929,76.425,13.548,45.234,13.452,45.224,13.403,45.135,0.001862,31.061,-0.12695,31.028,-0.06901,30.984,11.201,42.581,11.182,42.856,11.129,42.567,-10.621,93.316,-10.807,93.097,-10.566,93.264,-10.464,93.65,-10.755,93.445,-10.651,93.431,-12.858,96.494,-13.06,96.288,-13.001,96.238,-12.783,96.609,-12.961,96.301,-12.759,96.507,6.0244,28.599,6.0362,28.663,5.8706,28.613,14.297,94.135,13.76,93.859,13.818,93.83,15.973,86.226,15.531,85.986,15.602,85.914,15.195,92.576,14.8,92.122,15.271,92.509,12.965,92.374,12.568,91.97,12.585,91.908,14.763,95.373,14.616,95.279,14.718,95.29,14.922,85.656,14.922,85.389,15.016,85.419,15.07,92.742,15.032,92.655,15.154,92.431,14.845,93.601,14.936,93.292,15.013,93.34,13.311,80.829,13.241,80.771,13.512,80.594,-1.8925,58.109,-1.9635,57.574,-1.9011,57.498,14.518,94.923,14.037,94.622,14.534,94.873,0.36142,0.28969,0.38772,0.27809,0.38819,0.29153,0.35976,0.2751,0.33,0.26771,0.36,0.23676,0.33218,0.23236,0.36024,0.19892,0.33442,0.19892,0.36434,0.14224,0.34467,0.14224,0.36935,0.087159,0.3495,0.087159,0.60213,0.18099,0.62665,0.17931,0.61306,0.19164,0.61941,0.1621,0.59335,0.17191,0.61311,0.14727,0.60467,0.12677,0.57852,0.15817,0.57905,0.11673,0.56323,0.15334,0.56705,0.11091,0.65802,0.28545,0.62304,0.24769,0.65817,0.25197,0.62284,0.29168,0.58792,0.24341,0.58767,0.2979,0.56059,0.29603,0.55058,0.24423,0.52861,0.28314,0.67904,0.026882,0.65172,0.014087,0.65399,0.005531,0.67385,0.036735,0.70463,0.065625,0.69394,0.074569,0.70903,0.10797,0.69704,0.11407,0.71679,0.14778,0.70323,0.15301,0.7242,0.18116,0.6911,0.16492,0.70901,0.19467,0.72448,0.20949,0.70019,0.21135,0.69585,0.20381,0.69107,0.21744,0.68139,0.2054,0.47818,0.14224,0.44535,0.087159,0.47081,0.087159,0.45468,0.14224,0.4909,0.19729,0.45268,0.14224,0.46798,0.19892,0.44102,0.19892,0.47167,0.22786,0.44395,0.23214,0.44672,0.26647,0.47187,0.25341,0.4909,0.25092,0.4909,0.22631,0.30483,0.22824,0.28544,0.22782,0.28544,0.19881,0.30496,0.25486,0.28544,0.25232,0.30682,0.2703,0.28544,0.27028,0.30903,0.28208,0.28544,0.28001,0.31084,0.29157,0.28544,0.28947,0.28544,0.30371,0.4909,0.30232,0.46521,0.29068,0.4909,0.28814,0.4668,0.30285,0.4909,0.31967,0.4686,0.31967,0.4909,0.34804,0.46719,0.34804,0.4909,0.37277,0.46759,0.37318,0.4909,0.39607,0.46796,0.39607,0.4909,0.43223,0.46853,0.43223,0.44093,0.39607,0.44034,0.43223,0.41209,0.39607,0.41146,0.43223,0.38947,0.39607,0.3893,0.43223,0.36631,0.39607,0.36676,0.43223,0.33768,0.39607,0.33741,0.37277,0.31094,0.37318,0.31133,0.34804,0.28544,0.34804,0.28544,0.37277,0.31058,0.39607,0.28544,0.39607,0.31002,0.43223,0.28544,0.43223,0.33809,0.43223,0.28544,0.31967,0.30877,0.31967,0.30997,0.30376,0.33364,0.3065,0.33429,0.29438,0.33188,0.28568,0.30827,0.19892,0.29847,0.14224,0.31859,0.14224,0.32363,0.087159,0.30412,0.087159,0.69583,0.23038,0.70568,0.22005,0.56963,0.19849,0.58078,0.20568,0.5489,0.18667,0.54433,0.17866,0.73991,0.19965,0.72895,0.17497,0.7484,0.19371,0.74537,0.16297,0.72873,0.14349,0.67051,0.25592,0.67039,0.2822,0.53211,0.16499,0.54914,0.14622,0.50281,0.13551,0.76008,0.1765,0.77529,0.13408,0.78621,0.14411,0.76292,0.11956,0.70471,0.25948,0.70462,0.27925,0.51569,0.12126,0.72001,0.26357,0.71995,0.27578,0.5977,0.20715,0.3621,0.29852,0.38838,0.29985,0.4148,0.29796,0.41507,0.28895,0.41763,0.2744,0.38764,0.23828,0.38756,0.19892,0.38766,0.14224,0.38646,0.087159,0.63924,0.17473,0.63895,0.15268,0.63918,0.13738,0.63772,0.10811,0.60121,0.10732,0.59776,0.08787,0.58339,0.081664,0.57132,0.068711,0.60319,0.039185,0.5935,0.029313,0.62574,0.01405,0.6215,0.005386,0.52872,0.26031,0.62799,0.02429,0.61078,0.045341,0.63688,0.07846,0.6373,0.09311,0.67609,0.086106,0.67536,0.10486,0.67267,0.12315,0.66343,0.14484,0.65978,0.15844,0.67589,0.17984,0.6657,0.19084,0.42309,0.087159,0.43005,0.14224,0.41407,0.19892,0.41597,0.23703,0.44466,0.2846,0.47024,0.26919,0.46727,0.28107,0.4909,0.26904,0.4909,0.27876,0.44233,0.29356,0.44329,0.30596,0.44303,0.31967,0.44171,0.34804,0.44131,0.37277,0.4125,0.37278,0.38957,0.37277,0.36602,0.37278,0.33713,0.34804,0.33437,0.31967,0.36309,0.30842,0.36259,0.30445,0.38852,0.30706,0.38865,0.30991,0.38894,0.31967,0.36492,0.31967,0.36572,0.34804,0.38968,0.34804,0.41293,0.34804,0.41251,0.31967,0.41406,0.30821,0.41442,0.30395,0.40804,0.14224,0.4045,0.087159,0.65229,0.17917,0.66564,0.047109,0.65039,0.022355,0.84284,0.1788,0.83744,0.18309,0.84276,0.18339,0.83689,0.17924,0.83724,0.17541,0.83645,0.17627,0.83605,0.17931,0.83534,0.17609,0.8352,0.17936,0.83657,0.18235,0.83545,0.18265,0.83625,0.1838,0.83492,0.18437,0.83479,0.17446,0.83613,0.17494,0.83569,0.17267,0.84242,0.17423,0.85088,0.17828,0.85017,0.18317,0.84253,0.18438,0.84225,0.18481,0.83662,0.18456,0.8358,0.18637,0.84221,0.17321,0.84985,0.17351,0.85128,0.17177,0.84203,0.17276,0.85042,0.17292,0.84173,0.17088,0.84202,0.16689,0.83529,0.16869,0.84182,0.21261,0.83182,0.20205,0.83486,0.20888,0.84128,0.20611,0.85356,0.21712,0.85709,0.21122,0.85993,0.20605,0.84397,0.2017,0.84501,0.19695,0.86129,0.20053,0.86436,0.20744,0.86084,0.21348,0.85718,0.21909,0.86485,0.21402,0.86782,0.20871,0.88163,0.21448,0.8697,0.20262,0.88471,0.20647,0.8906,0.22026,0.89613,0.20956,0.90178,0.20055,0.91912,0.20643,0.92187,0.18907,0.90509,0.18828,0.91505,0.16986,0.92698,0.16548,0.90724,0.16075,0.91746,0.15593,0.90289,0.15558,0.90604,0.14913,0.89019,0.14432,0.91002,0.1419,0.89034,0.13345,0.90124,0.12555,0.89043,0.12001,0.90075,0.11351,0.88726,0.10616,0.89484,0.097158,0.88389,0.090971,0.88865,0.082814,0.86893,0.07149,0.88306,0.27323,0.86337,0.30165,0.88128,0.29196,0.86139,0.28869,0.87973,0.26771,0.89502,0.27147,0.88766,0.26178,0.90783,0.25896,0.90715,0.2757,0.8909,0.28725,0.89128,0.081386,0.89385,0.073995,0.88593,0.075977,0.90132,0.087781,0.90113,0.067913,0.88234,0.056436,0.89159,0.055376,0.89492,0.046717,0.9085,0.062014,0.90924,0.081065,0.9198,0.071913,0.92682,0.082493,0.92972,0.065262,0.92384,0.053461,0.93046,0.050276,0.92069,0.045745,0.92526,0.039854,0.93848,0.31389,0.92372,0.31717,0.93131,0.32448,0.929,0.30668,0.91803,0.31525,0.92334,0.30302,0.93822,0.29109,0.9285,0.2871,0.94161,0.28024,0.92762,0.2711,0.93747,0.25556,0.95021,0.26926,0.9624,0.28504,0.97471,0.26999,0.96088,0.25574,0.98461,0.25778,0.96984,0.24462,0.99485,0.24226,0.98444,0.22868,0.6321,0.38576,0.62171,0.38576,0.62171,0.40487,0.6321,0.37071,0.64348,0.37071,0.64348,0.38576,0.66202,0.38576,0.66202,0.37071,0.71057,0.38576,0.71058,0.37071,0.75934,0.38576,0.75934,0.37071,0.7839,0.38576,0.7839,0.37071,0.81273,0.37071,0.81273,0.38576,0.82771,0.37071,0.82771,0.38576,0.84261,0.38576,0.84261,0.40487,0.88603,0.38576,0.88603,0.40487,0.88603,0.4212,0.93233,0.4212,0.93233,0.40487,0.99301,0.42121,0.93233,0.44214,0.88603,0.44214,0.84261,0.44214,0.84261,0.4212,0.82771,0.4212,0.82771,0.40487,0.81273,0.40487,0.7839,0.40487,0.75934,0.40487,0.71057,0.40487,0.66202,0.40487,0.64348,0.40487,0.6321,0.40487,0.62171,0.4212,0.98338,0.12493,0.9937,0.11412,0.98069,0.10116,0.96982,0.11432,0.96929,0.091449,0.95881,0.10378,0.95513,0.081387,0.94407,0.091947,0.93851,0.080828,0.94324,0.070429,0.95307,0.29377,0.94576,0.30397,0.93844,0.062285,0.93163,0.073127,0.93483,0.10418,0.92315,0.095344,0.91492,0.087812,0.91176,0.09716,0.90169,0.10169,0.8885,0.28577,0.91159,0.10811,0.92655,0.11636,0.9422,0.12628,0.93424,0.13744,0.91904,0.12846,0.92446,0.14932,0.94122,0.15938,0.93586,0.18504,0.94922,0.18037,0.95949,0.17886,0.96196,0.161,0.6321,0.46256,0.62171,0.46256,0.62171,0.48026,0.6321,0.44214,0.62171,0.44214,0.6321,0.4212,0.64348,0.4212,0.66202,0.4212,0.71057,0.4212,0.75934,0.4212,0.7839,0.4212,0.81273,0.4212,0.81273,0.44214,0.7839,0.44214,0.75934,0.44214,0.71057,0.44214,0.66202,0.44214,0.64348,0.44214,0.64348,0.46256,0.6321,0.48026,0.62171,0.4976,0.96306,0.19282,0.95166,0.197,0.93902,0.19992,0.93954,0.21364,0.95034,0.21935,0.972,0.20564,0.62171,0.51484,0.6321,0.4976,0.6321,0.51484,0.64348,0.4976,0.64348,0.51484,0.66202,0.51484,0.66202,0.4976,0.71057,0.51484,0.71057,0.4976,0.71057,0.48026,0.66202,0.48026,0.66202,0.46256,0.71057,0.46256,0.64348,0.48026,0.75934,0.46256,0.75934,0.48026,0.75934,0.49761,0.75934,0.51484,0.75934,0.52876,0.7839,0.52876,0.7839,0.51484,0.81273,0.51484,0.81273,0.52876,0.82771,0.52876,0.82771,0.51484,0.84261,0.52876,0.84261,0.37071,0.88603,0.37072,0.93233,0.38576,0.99301,0.40488,0.99301,0.38576,0.99301,0.37072,0.93233,0.37072,0.99301,0.52876,0.93233,0.51484,0.93233,0.52876,0.99301,0.51484,0.99301,0.49761,0.93233,0.49761,0.99301,0.48026,0.93233,0.48026,0.88603,0.49761,0.88603,0.48026,0.84261,0.48026,0.84261,0.49761,0.82771,0.49761,0.82771,0.48026,0.82771,0.46256,0.81273,0.48026,0.81273,0.46256,0.7839,0.46256,0.7839,0.48026,0.7839,0.49761,0.81273,0.49761,0.84261,0.51484,0.88603,0.51484,0.88603,0.52876,0.82771,0.44214,0.84261,0.46256,0.88603,0.46257,0.93233,0.46257,0.99301,0.44214,0.99301,0.46257,0.71057,0.52876,0.66202,0.52876,0.64348,0.52876,0.6321,0.52876,0.62171,0.52876,0.97842,0.21666,0.95973,0.23116,0.94966,0.24241,0.93833,0.2311,0.93072,0.22449,0.91143,0.21636,0.90475,0.23035,0.88891,0.225,0.87624,0.22347,0.86134,0.22098,0.87192,0.16333,0.86627,0.16398,0.86643,0.17218,0.86064,0.17212,0.86125,0.162,0.84868,0.16301,0.85241,0.17,0.85264,0.17811,0.85394,0.17807,0.85283,0.18607,0.85154,0.18454,0.85151,0.17821,0.84205,0.1866,0.84303,0.1903,0.84965,0.19278,0.8361,0.19157,0.86152,0.19417,0.86596,0.20054,0.8665,0.19345,0.87248,0.19466,0.88819,0.19719,0.88957,0.18638,0.90328,0.17355,0.8994,0.16489,0.89062,0.15232,0.8716,0.14067,0.87774,0.12956,0.88155,0.11793,0.8737,0.11661,0.87648,0.10668,0.8505,0.10276,0.8628,0.26405,0.84441,0.25729,0.8429,0.27102,0.86529,0.25227,0.84183,0.2504,0.863,0.24371,0.87547,0.25078,0.87109,0.24059,0.88943,0.24444,0.88229,0.23508,0.89959,0.23646,0.88679,0.22925,0.90913,0.24008,0.87356,0.26416,0.8751,0.10491,0.87882,0.099218,0.87156,0.10365,0.85975,0.08581,0.86868,0.081232,0.86607,0.069389,0.86069,0.3037,0.85605,0.29126,0.85802,0.28166,0.85374,0.27492,0.85524,0.098653,0.85679,0.084183,0.86167,0.076748,0.86267,0.0678,0.8573,0.30431,0.85081,0.2932,0.8476,0.28704,0.85301,0.28449,0.84947,0.2782,0.85036,0.093684,0.85426,0.082135,0.85569,0.073258,0.84507,0.067069,0.83773,0.072047,0.83509,0.070116,0.8388,0.063495,0.8421,0.056281,0.83809,0.055043,0.83286,0.060881,0.82852,0.059196,0.82335,0.065548,0.83206,0.068728,0.81643,0.073824,0.82264,0.078762,0.82791,0.080558,0.83181,0.084481,0.84428,0.091562,0.84428,0.28068,0.83038,0.28717,0.83305,0.29425,0.83712,0.30052,0.84031,0.31359,0.83742,0.31571,0.83239,0.3032,0.82902,0.29625,0.82588,0.28977,0.82093,0.2918,0.8248,0.29795,0.82735,0.30457,0.83383,0.31638,0.82036,0.30753,0.81662,0.3018,0.81356,0.29571,0.80837,0.3068,0.81187,0.3114,0.80352,0.31138,0.80483,0.3021,0.80915,0.067054,0.81379,0.061225,0.82288,0.063067,0.82687,0.058547,0.82523,0.057915,0.82176,0.061672,0.81467,0.059677,0.80722,0.057183,0.80852,0.056037,0.81568,0.058648,0.82145,0.060973,0.8245,0.057638,0.80965,0.055449,0.81748,0.05498,0.81859,0.051037,0.81184,0.049801,0.81088,0.052666,0.81085,0.050138,0.8101,0.052397,0.80929,0.052111,0.80802,0.054331,0.80912,0.05457,0.80693,0.055441,0.80839,0.055494,0.80614,0.061257,0.80081,0.30845,0.7979,0.31282,0.79994,0.31605,0.80986,0.049626,0.81094,0.049,0.81875,0.049998,0.82448,0.053161,0.811,0.047045,0.80976,0.048106,0.80646,0.31411,0.80343,0.31754,0.80482,0.31782,0.81316,0.31852,0.81862,0.049488,0.81902,0.047608,0.81143,0.048672,0.82704,0.052562,0.82921,0.051164,0.82516,0.052857,0.82422,0.31748,0.84548,0.058468,0.86994,0.26127,0.92324,0.24471,0.91941,0.28369,0.89824,0.28797,0.88802,0.30425,0.88265,0.29874,0.87369,0.064273,0.88119,0.05406,0.88733,0.049491,0.87915,0.052253,0.86801,0.058479,0.87163,0.06158,0.88327,0.31048,0.88054,0.30372,0.87697,0.30668,0.88578,0.30751,0.89129,0.31196,0.88843,0.31526,0.90027,0.32001,0.89782,0.32193,0.88047,0.32495,0.87506,0.32141,0.86999,0.31724,0.86079,0.048253,0.86918,0.039362,0.88333,0.044635,0.87742,0.03741,0.89146,0.042198,0.89357,0.044482,0.89415,0.30805,0.90094,0.31738,0.90555,0.29459,0.91649,0.29767,0.91097,0.30371,0.91394,0.065376,0.91721,0.056528,0.91323,0.044959,0.9186,0.040438,0.92462,0.03781,0.92281,0.3209,0.93128,0.32586,0.92089,0.32433,0.93008,0.32704,0.91887,0.33203,0.91315,0.33096,0.91568,0.32178,0.917,0.31836,0.91234,0.3128,0.91718,0.30134,0.91051,0.058077,0.9054,0.049651,0.90418,0.046094,0.91268,0.042775,0.91151,0.040562,0.90237,0.042596,0.9113,0.31679,0.90972,0.32088,0.90743,0.32917,0.90038,0.034973,0.90815,0.030725,0.91649,0.035547,0.92345,0.035698,0.91915,0.026302,0.9148,0.031144,0.91314,0.026564,0.91855,0.024052,0.91867,0.33572,0.92705,0.33845,0.92659,0.33659,0.92571,0.34005,0.917,0.33904,0.91591,0.34374,0.92235,0.34655,0.91512,0.35035,0.91028,0.34964,0.91082,0.34295,0.91178,0.33759,0.91254,0.3343,0.90676,0.33315,0.90026,0.031294,0.90789,0.028674,0.90678,0.026891,0.89769,0.027819,0.90627,0.33717,0.90563,0.34258,0.89678,0.022669,0.90359,0.020445,0.9111,0.022403,0.91729,0.021845,0.9095,0.019312,0.90882,0.017975,0.90452,0.018876,0.90828,0.016928,0.90459,0.01758,0.90041,0.014086,0.90165,0.013601,0.8967,0.015521,0.90542,0.35005,0.9103,0.35505,0.9133,0.35455,0.91401,0.35775,0.91126,0.35921,0.90815,0.35879,0.90723,0.35509,0.89625,0.010676,0.89889,0.00902,0.90018,0.00897,0.90041,0.008552,0.89961,0.007871,0.90271,0.013402,0.90478,0.017052,0.90804,0.016492,0.90566,0.012064,0.90112,0.00906,0.90331,0.007938,0.90546,0.006751,0.90841,0.010358,0.91031,0.014121,0.91198,0.014954,0.91082,0.014246,0.90925,0.009535,0.90643,0.004837,0.9052,0.004862,0.90539,0.005907,0.91483,0.35701,0.91838,0.35268,0.91041,0.008685,0.90588,0.00595,0.91381,0.015247,0.88078,0.029961,0.87355,0.032622,0.87896,0.027713,0.88741,0.33677,0.88806,0.33419,0.87734,0.3292,0.87228,0.32505,0.86706,0.32139,0.85934,0.043512,0.86806,0.037061,0.86578,0.035338,0.85576,0.040053,0.86951,0.32863,0.86349,0.32484,0.87455,0.33275,0.88488,0.33837,0.87151,0.33801,0.86555,0.33428,0.8596,0.33071,0.85199,0.034421,0.85952,0.028759,0.8698,0.028572,0.87682,0.025271,0.86628,0.024773,0.86525,0.023689,0.8601,0.02652,0.86411,0.022576,0.86809,0.018572,0.86634,0.018146,0.86258,0.012936,0.85638,0.009964,0.86183,0.014293,0.86242,0.013422,0.85679,0.010987,0.8552,0.010115,0.85572,0.008719,0.86168,0.35355,0.85868,0.34776,0.85736,0.35366,0.8628,0.3492,0.86623,0.34496,0.86999,0.35027,0.8631,0.35319,0.85724,0.008188,0.857,0.009836,0.86369,0.011372,0.8705,0.018138,0.87809,0.34493,0.86102,0.34172,0.85511,0.33961,0.84742,0.026138,0.85296,0.02239,0.85434,0.021292,0.85968,0.024929,0.85564,0.020648,0.85971,0.024237,0.86363,0.022129,0.84898,0.016842,0.85061,0.016241,0.84639,0.020204,0.85454,0.34637,0.85366,0.35139,0.85074,0.015645,0.84946,0.015104,0.85187,0.015984,0.85891,0.017642,0.85435,0.013495,0.85318,0.012439,0.8558,0.010956,0.85087,0.014493,0.86565,0.0182,0.92005,0.23668,0.62171,0.37071,0.87577,0.23089,0.86831,0.22712,0.88714,0.15851,0.88968,0.16877,0.87197,0.17232,0.86732,0.17847,0.86086,0.17823,0.86097,0.18428,0.86661,0.18489,0.87203,0.18501,0.87221,0.17853,0.88944,0.17751,0.86845,0.23025,0.88162,0.14782,0.86605,0.23367,0.858,0.23556,0.86992,0.12574,0.86457,0.13627,0.84452,0.11806,0.85293,0.1117,0.84436,0.10864,0.84645,0.10131,0.83984,0.2729,0.83815,0.25855,0.83671,0.25192,0.83976,0.24303,0.8436,0.1315,0.84121,0.11651,0.83747,0.11562,0.83674,0.10706,0.84233,0.10039,0.82725,0.10499,0.82579,0.09767,0.83598,0.27166,0.81944,0.26094,0.81912,0.27347,0.83242,0.2588,0.81799,0.2545,0.83142,0.25244,0.83444,0.24502,0.83883,0.12824,0.83308,0.12837,0.82081,0.12405,0.82286,0.11129,0.82123,0.10368,0.82213,0.096691,0.81582,0.27457,0.81437,0.2623,0.81321,0.25538,0.8171,0.24782,0.83007,0.24575,0.81214,0.24899,0.81988,0.1103,0.81666,0.1213,0.81654,0.11048,0.81147,0.1216,0.80827,0.2559,0.80703,0.2497,0.80946,0.26192,0.81216,0.27346,0.80233,0.2633,0.80101,0.25711,0.79919,0.25137,0.80461,0.11848,0.80785,0.10926,0.81557,0.10318,0.81036,0.10282,0.8182,0.09634,0.80902,0.095848,0.80888,0.10269,0.80754,0.097603,0.79974,0.095316,0.80283,0.27301,0.79468,0.26466,0.79346,0.27104,0.7928,0.25949,0.79076,0.25461,0.79716,0.11479,0.79893,0.10842,0.80684,0.1073,0.80735,0.1026,0.80554,0.10643,0.79924,0.10687,0.79248,0.10686,0.79325,0.10551,0.80667,0.10257,0.7998,0.10572,0.80512,0.10593,0.80026,0.10223,0.80022,0.098396,0.79439,0.099176,0.79427,0.10208,0.78707,0.26236,0.7828,0.26545,0.78558,0.2678,0.78194,0.26221,0.78553,0.25923,0.79264,0.11063,0.78902,0.26562,0.78673,0.26842,0.793,0.097002,0.79988,0.097046,0.79379,0.098285,0.79223,0.098263,0.79345,0.098725,0.79271,0.099548,0.80605,0.098348,0.80557,0.098784,0.79299,0.10506,0.79175,0.10543,0.79238,0.10417,0.79403,0.10467,0.83294,0.19644,0.83205,0.18985,0.82824,0.19443,0.83105,0.19066,0.82803,0.20043,0.97251,0.1415,0.96255,0.12573,0.95008,0.11583,0.95591,0.13493,0.94902,0.14648,0.83657,0.17419,-13.281,81.907,-12.967,81.744,-12.963,81.847,-4.9018,82.698,-4.8538,82.795,-4.9045,82.892,-6.0623,73.021,-6.0308,73.1,-6.2904,73.208,-24.108,61.043,-24.38,60.948,-24.347,60.87,-23.169,74.542,-23.427,74.468,-23.405,74.365,-22.42,79.665,-22.742,79.507,-22.483,79.575,-21.501,80.735,-21.829,80.685,-21.826,80.583,-24.539,74.775,-24.594,74.68,-24.544,74.582,-24.721,68.966,-24.854,68.903,-24.789,68.866,-24.642,54.816,-24.697,54.866,-24.923,54.677,20.527,75.709,20.827,75.618,20.822,75.706,15.07,74.378,14.78,74.366,14.78,74.277,15.148,74.347,14.783,74.242,15.073,74.254,22.319,29.725,22.638,29.93,22.714,30.008,6.0216,82.273,6.0829,82.171,6.1462,82.206,-3.3921,69.993,-3.6044,70.198,-3.6571,70.148,-24.982,80.808,-25.033,80.148,-24.929,80.137,-25.185,77.232,-25.189,76.753,-25.125,76.671,-17.347,81.583,-17.477,81.049,-17.409,81.078,-24.965,36.991,-25.107,37.056,-25.151,36.997,-13.94,81.057,-13.818,81.537,-13.87,81.561,-14.723,80.664,-14.73,79.937,-14.678,79.913,-25.048,80.854,-25.111,80.798,-25.058,80.127,-21.422,59.112,-21.001,59.011,-20.951,59.078,-20.823,81.164,-20.824,81.088,-20.352,81.059,-15.008,81.061,-14.546,81.073,-14.545,81.149,-14.615,53.961,-14.572,53.892,-14.153,53.976,3.0875,79.546,3.1509,80.217,3.0924,80.273,-18.65,81.546,-18.6,81.038,-18.532,81.008,-21.422,81.067,-21.476,81.045,-21.364,80.561,-20.86,80.797,-20.93,80.047,-20.877,80.069,-15.759,67.223,-16.313,67.292,-15.859,67.13,-2.0357,81.423,-1.9931,80.672,-1.9127,81.483,23.438,37.367,24.006,37.894,23.83,37.866,8.6168,51.366,8.5779,51.992,8.5296,52.003,9.2524,48.405,9.3003,48.393,9.1227,49.003,-18.071,77.872,-18.045,77.795,-17.504,77.643,-1.593,79.387,-1.229,79.51,-1.2326,79.59,-18.155,77.858,-17.66,77.618,-17.613,77.706,-19.676,76.489,-19.719,76.398,-19.066,76.186,-20.03,76.877,-19.473,76.632,-19.376,76.668,13.384,35.482,13.636,35.379,13.641,35.481,-6.6548,-8.3652,-6.6348,-8.4694,-6.4377,-8.4124,-22.366,45.558,-22.52,45.725,-22.467,45.525,-22.178,46.122,-22.37,46.242,-22.24,46.06,-21.651,52.232,-21.682,52.164,-21.482,52.059,-21.934,74.362,-21.906,74.229,-21.854,74.283,-21.904,64.308,-21.953,64.159,-21.895,64.136,5.2223,53.074,5.2615,53.122,5.0877,53.741,-17.566,76.029,-17.691,75.689,-17.629,75.616,3.3409,67.729,3.1535,67.966,3.1411,67.855,3.1797,67.879,3.2339,67.947,3.0336,68.072,-12.33,56.47,-12.559,56.529,-12.567,56.442,-12.277,56.19,-12.21,56.276,-12.506,56.249,15.233,41.448,15.276,41.388,15.321,41.513,-8.5339,28.092,-8.7714,28.067,-8.5536,28.02,-9.9495,17.451,-10.164,17.509,-10.169,17.423,15.664,14.832,15.759,14.778,15.853,14.812,23.269,53.401,22.737,53.099,23.255,53.323,-7.668,59.672,-7.656,59.722,-8.107,60.135,-4.9601,60.65,-5.4423,61.07,-5.4583,61.022,-3.0319,58.47,-3.5428,58.91,-3.0913,58.457,-3.3181,40.953,-3.4094,40.809,-3.3493,40.8,16.697,46.51,17.112,46.529,17.125,46.603,17.181,71.489,17.215,71.417,17.596,71.498,-10.437,66.673,-10.134,66.954,-10.497,66.718,-21.437,64.84,-21.348,64.789,-21.246,64.826,-16.611,54.278,-16.569,54.481,-16.64,54.555,-13.178,56.649,-13.16,56.927,-13.27,56.692,-21.622,49.433,-21.709,49.73,-21.668,49.411,-18.975,63.596,-19.012,63.64,-19.114,63.348,-22.103,77.318,-22.491,77.164,-22.443,77.132,-12.119,14.234,-12.264,13.823,-12.094,14.204,8.4073,16.31,8.6031,15.819,8.6378,15.94,-14.266,13.162,-14.572,12.863,-14.551,12.831,-16.001,18.072,-16.047,18.085,-16.366,17.785,-11.593,81.764,-11.643,81.885,-11.641,81.769,-18.935,80.681,-18.943,80.602,-18.863,80.611,-18.351,72.95,-18.431,72.94,-18.458,72.871,-21.478,79.118,-21.909,78.932,-21.512,79.051,-21.379,77.942,-21.829,77.827,-21.809,77.754,-22.093,77.865,-22.433,77.68,-22.076,77.79,-18.071,47.373,-18.263,47.485,-18.123,47.326,-17.224,52.292,-17.349,52.407,-17.42,52.394,-13.716,63.992,-13.892,64.025,-13.753,63.927,-13.654,64.843,-13.805,64.949,-13.831,64.876,-10.624,74.468,-10.803,74.508,-10.648,74.41,-10.045,78.49,-10.22,78.584,-10.224,78.529,21.423,40.71,21.46,40.901,21.366,40.726,21.535,40.929,-19.859,80.003,-19.786,79.933,-19.781,79.988,16.433,2.3115,16.328,2.0734,16.473,2.2677,16.32,2.1521,0.91786,72.906,0.72484,72.938,0.8907,72.859,-0.53398,67.203,-0.69829,67.286,-0.71346,67.225,-1.4812,50.68,-1.6602,50.706,-1.5087,50.608,-1.7819,49.605,-1.9326,49.704,-1.9473,49.631,-3.5816,27.338,-3.7452,27.374,-3.5503,27.272,-5.8671,20.552,-5.8838,20.485,-5.6817,20.434,7.8754,41.703,8.1553,41.712,7.8562,41.756,-1.9374,2.3088,-2.2371,2.268,-2.2387,2.2169,-19.249,37.935,-19.282,37.955,-19.633,37.73,-19.568,35.432,-19.909,35.157,-19.877,35.135,-18.838,30.929,-19.151,30.586,-18.829,30.882,17.286,48.556,17.646,48.254,17.684,48.317,18.142,53.423,18.16,53.352,18.516,53.139,7.7959,47.056,7.7347,47.109,7.7827,46.984,13.247,68.169,13.154,68.137,13.223,68.094,14.119,62.009,14.042,62.027,14.027,61.975,5.0812,77.565,4.9762,77.494,5.0181,77.47,7.1047,46.187,7.0595,46.313,7.0512,46.237,20.553,46.191,20.528,46.121,20.869,45.967,20.329,44.141,20.64,43.911,20.691,43.934,-18.17,72.144,-18.277,72.065,-18.205,72.075,-5.982,76.91,-6.06,76.661,-6.0064,76.61,-20.832,28.352,-20.878,28.374,-21.3,28.039,-20.969,25.818,-21.374,25.427,-21.33,25.401,-20.185,20.576,-20.525,20.084,-20.164,20.518,10.904,63.845,10.802,63.85,10.794,63.778,3.5508,-15.745,3.4734,-15.812,3.8151,-15.833,-0.3371,75.908,-0.45758,75.789,-0.39888,75.768,9.0407,20.383,9.487,19.865,9.4779,20.031,-22.886,42.406,-23.021,42.798,-22.945,42.376,-12.196,62.9,-11.948,63.188,-11.982,63.254,-21.308,75.46,-21.755,75.238,-21.289,75.361,-21.408,74.77,-21.915,74.59,-21.854,74.546,-10.477,5.1011,-10.523,5.1232,-10.489,4.563,-12.546,2.2431,-12.754,1.7295,-12.712,1.7025,-13.211,75.517,-13.262,75.164,-13.182,75.108,-16.872,78.879,-16.853,78.726,-16.79,78.726,-16.06,7.1602,-16.123,7.157,-16.397,6.662,-21.817,74.981,-22.4,74.836,-22.375,74.738,-21.717,76.573,-22.277,76.335,-21.762,76.485,-5.3842,15.659,-5.6879,15.724,-5.6813,15.634,-4.7545,21.753,-4.9992,21.737,-4.6937,21.681,-5.339,46.913,-5.582,47.001,-5.584,46.903,-5.4358,64.706,-5.6912,64.778,-5.6988,64.695,-4.5542,70.919,-4.8364,70.919,-4.5801,70.851,4.9075,-14.104,5.1769,-14.174,5.1897,-14.099,21.298,33.546,21.373,33.529,21.423,33.804,21.15,34.255,21.283,34.576,21.188,34.533,-21.808,77.128,-21.71,77.038,-21.705,77.112,-20.856,67.502,-20.989,67.389,-20.896,67.408,-19.61,43.009,-19.812,43.154,-19.903,43.127,-17.075,57.945,-16.853,57.833,-16.815,57.924,-17.025,59.196,-17.047,59.096,-16.787,59.076,-14.826,69.959,-14.805,70.039,-15.071,70.066,-14.576,74.771,-14.845,74.87,-14.842,74.797,-20.066,38.901,-20.354,39.031,-20.125,38.833,4.7789,47.049,4.6877,47.198,4.6977,47.096,18.227,44.045,18.586,43.923,18.226,44.118,5.1098,1.7617,4.8024,1.4915,4.8371,1.4355,19.125,50.552,19.563,50.308,19.624,50.348,23.103,65.728,23.296,66.364,23.171,66.271,13.897,74.596,13.897,74.044,13.941,74.582,12.175,75.224,12.154,74.638,12.2,74.672,-16.997,78.632,-17.071,78.582,-16.685,78.136,-15.165,78.627,-14.894,78.24,-14.819,78.289,15.88,65.857,16.127,65.772,16.128,65.859,16.959,60.826,17.159,60.807,16.915,60.903,18.541,41.365,18.715,41.242,18.738,41.331,19.145,39.477,19.357,39.432,19.187,39.562,22.916,-5.41,22.891,-5.6247,22.967,-5.6198,2.1141,-11.838,1.9344,-11.986,2.1334,-11.902,-15.307,76.268,-15.531,76.314,-15.538,76.24,-15.254,76.373,-15.54,76.344,-15.316,76.298,-21.055,58.724,-21.215,58.443,-21.167,58.37,4.6031,7.4502,4.5909,7.2951,4.6429,7.3161,23.306,45.94,23.289,45.844,23.354,45.829,25.049,42.279,25.129,42.33,25.136,42.418,25.38,61.34,25.147,60.807,25.462,61.303,6.508,77.048,6.7082,76.536,6.7634,76.526,4.7588,77.719,5.0118,77.246,4.7925,77.751,3.2955,77.411,3.4144,76.874,3.4471,76.907,18.123,72.439,18.487,72.494,18.49,72.558,19.471,77.817,19.51,77.759,19.837,77.862,25.652,69.435,25.398,68.975,25.68,69.371,25.709,69.62,25.422,69.227,25.506,69.193,-1.403,79.924,-1.3761,79.865,-1.0469,79.954,2.0282,75.878,2.3421,75.888,2.36,75.957,-14.732,78.891,-14.386,78.551,-14.717,78.96,14.366,73.156,14.435,72.635,14.478,72.621,-25.398,49.771,-25.492,49.669,-25.454,49.627,-18.219,78.374,-17.915,77.948,-17.826,77.934,-1.1323,74.645,-1.0906,74.568,-0.93954,74.754,-4.819,71.704,-4.6841,71.813,-4.687,71.903,-12.08,61.352,-12.051,61.542,-12.156,61.404,-12.636,60.993,-12.524,61.145,-12.61,61.183,-22.053,45.978,-22.097,46.165,-22.129,45.979,-24.536,43.428,-24.565,43.632,-24.622,43.599,-4.1719,79.477,-4.368,79.517,-4.1941,79.405,-4.0757,79.369,-4.2999,79.504,-4.2717,79.409,-21.101,74.57,-21.141,74.455,-21.078,74.474,-15.694,70.871,-15.816,70.984,-15.784,70.899,20.447,75.716,20.527,75.626,20.822,75.624,3.0579,60.271,3.0196,60.335,2.8816,60.273,-9.5586,81.101,-9.3301,80.914,-9.3097,81.017,0.35976,0.2751,0.36142,0.28969,0.38772,0.27809,0.33,0.26771,0.33188,0.28568,0.30496,0.25486,0.30682,0.2703,0.28544,0.25232,0.28544,0.22782,0.30483,0.22824,0.33218,0.23236,0.36,0.23676,0.38764,0.23828,0.41763,0.2744,0.41597,0.23703,0.44672,0.26647,0.44395,0.23214,0.41407,0.19892,0.38756,0.19892,0.40804,0.14224,0.43005,0.14224,0.4045,0.087159,0.38766,0.14224,0.38646,0.087159,0.65229,0.17917,0.63895,0.15268,0.63924,0.17473,0.65978,0.15844,0.66343,0.14484,0.63918,0.13738,0.67267,0.12315,0.63772,0.10811,0.67536,0.10486,0.6373,0.09311,0.67609,0.086106,0.63688,0.07846,0.66564,0.047109,0.69394,0.074569,0.67385,0.036735,0.70463,0.065625,0.67904,0.026882,0.58792,0.24341,0.56059,0.29603,0.58767,0.2979,0.55058,0.24423,0.57132,0.068711,0.60319,0.039185,0.5935,0.029313,0.58339,0.081664,0.56705,0.11091,0.57905,0.11673,0.56323,0.15334,0.57852,0.15817,0.5489,0.18667,0.59335,0.17191,0.56963,0.19849,0.73991,0.19965,0.7242,0.18116,0.72448,0.20949,0.72895,0.17497,0.7484,0.19371,0.54433,0.17866,0.53211,0.16499,0.76008,0.1765,0.74537,0.16297,0.77529,0.13408,0.78621,0.14411,0.50281,0.13551,0.54914,0.14622,0.65802,0.28545,0.67051,0.25592,0.65817,0.25197,0.67039,0.2822,0.72873,0.14349,0.71679,0.14778,0.76292,0.11956,0.72001,0.26357,0.70462,0.27925,0.71995,0.27578,0.70471,0.25948,0.51569,0.12126,0.70323,0.15301,0.69704,0.11407,0.70903,0.10797,0.62304,0.24769,0.62284,0.29168,0.6911,0.16492,0.67589,0.17984,0.6657,0.19084,0.42309,0.087159,0.45468,0.14224,0.44102,0.19892,0.47167,0.22786,0.46798,0.19892,0.45268,0.14224,0.4909,0.19729,0.47818,0.14224,0.28544,0.19881,0.30827,0.19892,0.29847,0.14224,0.33442,0.19892,0.36024,0.19892,0.36434,0.14224,0.36935,0.087159,0.62665,0.17931,0.61941,0.1621,0.61311,0.14727,0.60467,0.12677,0.60121,0.10732,0.59776,0.08787,0.61078,0.045341,0.62799,0.02429,0.65039,0.022355,0.65172,0.014087,0.65399,0.005531,0.52861,0.28314,0.52872,0.26031,0.62574,0.01405,0.6215,0.005386,0.60213,0.18099,0.58078,0.20568,0.61306,0.19164,0.5977,0.20715,0.69107,0.21744,0.69583,0.23038,0.70568,0.22005,0.32363,0.087159,0.30412,0.087159,0.31859,0.14224,0.34467,0.14224,0.3495,0.087159,0.47081,0.087159,0.44535,0.087159,0.69585,0.20381,0.68139,0.2054,0.70019,0.21135,0.70901,0.19467,0.4909,0.22631,0.4909,0.25092,0.47187,0.25341,0.47024,0.26919,0.44466,0.2846,0.41507,0.28895,0.38819,0.29153,0.3621,0.29852,0.38838,0.29985,0.38852,0.30706,0.4148,0.29796,0.44233,0.29356,0.41442,0.30395,0.38865,0.30991,0.41406,0.30821,0.44329,0.30596,0.46521,0.29068,0.46727,0.28107,0.4909,0.26904,0.28544,0.27028,0.30903,0.28208,0.28544,0.28001,0.4909,0.27876,0.4909,0.28814,0.28544,0.28947,0.31084,0.29157,0.28544,0.30371,0.30997,0.30376,0.33364,0.3065,0.33437,0.31967,0.30877,0.31967,0.33713,0.34804,0.31133,0.34804,0.33741,0.37277,0.31094,0.37318,0.33768,0.39607,0.31058,0.39607,0.28544,0.37277,0.28544,0.34804,0.28544,0.31967,0.4909,0.31967,0.4909,0.30232,0.4668,0.30285,0.44303,0.31967,0.41251,0.31967,0.38894,0.31967,0.41293,0.34804,0.44171,0.34804,0.46719,0.34804,0.4686,0.31967,0.4909,0.34804,0.4909,0.37277,0.46759,0.37318,0.44131,0.37277,0.4125,0.37278,0.38968,0.34804,0.36492,0.31967,0.36309,0.30842,0.36259,0.30445,0.33429,0.29438,0.36572,0.34804,0.36602,0.37278,0.36631,0.39607,0.36676,0.43223,0.33809,0.43223,0.31002,0.43223,0.28544,0.39607,0.4909,0.39607,0.46796,0.39607,0.44093,0.39607,0.41209,0.39607,0.38957,0.37277,0.38947,0.39607,0.41146,0.43223,0.44034,0.43223,0.46853,0.43223,0.4909,0.43223,0.28544,0.43223,0.3893,0.43223,-2.4631,0.65073,-2.4636,0.56317,-2.3734,0.65073,0.35405,1.9123,0.33377,1.8194,0.37884,1.8185,-2.5504,0.56039,-2.5647,0.69701,-2.6248,0.69705,-2.6126,0.76947,-2.5818,0.76947,-2.4631,0.69826,-2.3742,0.69826,-2.8559,1.6078,-2.7938,1.69,-2.8549,1.69,-2.7937,1.6078,-2.7937,1.5325,-2.8571,1.5325,-2.3725,0.56328,-2.3745,0.4996,-2.4636,0.49975,0.37878,1.75,0.33399,1.7505,-2.6265,0.56063,-2.5501,0.49972,-2.6264,0.49973,-2.6656,0.49973,-2.6656,0.56063,-2.7319,0.5601,-2.732,0.62783,-2.8342,0.55957,-2.8342,0.49887,-2.9778,0.49855,-2.9778,0.55955,-2.9778,0.62864,-2.8342,0.62864,-2.8342,0.62864,-2.8249,0.71872,-2.7321,0.71874,-2.8249,0.78328,-2.7322,0.78358,-2.5981,0.81158,-2.3753,0.7504,-2.4631,0.75017,-2.8195,1.8262,-1.7393,1.814,-1.7393,1.7068,-1.6685,1.8143,-1.6684,1.7059,-1.7396,1.6332,-1.669,1.6332,-1.7396,1.5665,-1.6681,1.5665,-1.7394,1.5245,-1.6682,1.5245,-1.6817,1.478,-1.7393,1.4781,-1.7022,1.4181,-1.7393,1.4181,-1.825,1.4182,-1.8251,1.4781,-2.8559,1.4362,-2.7937,1.3867,-2.7937,1.4362,-2.8557,1.3868,0.5198,1.6831,0.52795,1.5888,0.52574,1.6831,0.51982,1.589,0.49351,1.589,0.49367,1.6831,-2.4636,0.45156,-2.3753,0.39427,-2.3753,0.45152,-2.4636,0.39431,0.37868,1.6708,0.3345,1.5782,0.37869,1.5767,0.33423,1.6713,-2.6264,0.45202,-2.5493,0.39526,-2.5497,0.45186,-2.6265,0.39576,-2.6656,0.45202,-2.7319,0.4517,-2.6638,0.39576,-2.7319,0.49938,-2.8342,0.45113,0.14379,1.7355,0.12436,1.8445,0.091613,1.733,-2.8339,0.45108,-2.945,0.45107,-2.9849,0.45097,-2.9849,0.39276,-2.945,0.39277,-2.834,0.3928,0.091595,1.6429,0.067934,1.6403,0.14379,1.642,-2.8342,0.39279,-2.7317,0.39321,-2.6663,0.34673,-2.7316,0.34469,-2.8342,0.34521,0.14332,1.5216,0.087499,1.5222,0.036129,1.5222,-2.945,0.34524,-2.834,0.34535,-2.9849,0.34501,-2.9849,0.27084,-2.945,0.27106,-2.9849,0.19576,-2.9449,0.19684,-2.9849,0.13325,-2.945,0.13394,-2.834,0.19734,-2.834,0.27112,0.035388,1.4281,0.087552,1.4284,0.14334,1.4279,-2.8342,0.27112,-2.7314,0.27112,-2.8342,0.19787,-2.7312,0.19835,-2.8342,0.13599,-2.7315,0.135,-2.6663,0.19849,-2.6656,0.13447,-2.6301,0.19836,-2.6302,0.13432,-2.63,0.2713,-2.6655,0.27128,-2.63,0.34672,-2.5496,0.34671,-2.5495,0.27135,-2.63,0.19845,-2.5493,0.19956,-2.6302,0.1349,-2.5487,0.13349,0.33447,1.2564,0.33482,1.1478,0.37528,1.1485,0.37531,1.2565,0.3753,1.3745,0.33432,1.3745,0.37537,1.4986,0.33428,1.4984,-2.646,0.39576,0.41799,1.5658,0.40479,1.4877,0.42289,1.4878,0.40472,1.3636,0.4226,1.3636,0.40473,1.2456,0.42267,1.2456,-2.4634,0.27135,-2.4634,0.1996,-2.3753,0.27132,-2.3752,0.19897,-2.4634,0.13333,0.4227,1.1367,0.40474,1.1382,-2.3753,0.13412,0.51979,1.2682,0.49377,1.2678,0.49314,1.1612,0.52007,1.3868,0.49331,1.3868,0.51991,1.5102,0.49335,1.5106,-2.3753,0.34661,-2.4634,0.34686,0.52802,1.5097,0.52827,1.3867,0.52826,1.2681,0.51834,1.1617,0.52793,1.1616,-2.8556,1.2188,-2.8557,1.163,-2.7937,1.2177,-2.7937,1.1633,-2.7937,1.2809,-2.8556,1.2809,-2.8557,1.3453,-2.7937,1.3454,0.61994,1.427,0.59476,1.3087,0.61896,1.3072,0.59214,1.2301,0.61891,1.2303,0.581,1.1435,0.61627,1.1433,-1.825,1.2244,-1.825,1.1715,-1.7391,1.2249,-1.739,1.1709,-1.7016,1.2247,-1.7017,1.1711,-1.6664,1.1717,-1.6657,1.2247,-1.666,1.2721,-1.634,1.2724,-1.634,1.225,-1.6661,1.1713,-1.634,1.1712,-1.4976,1.225,-1.4976,1.1712,-1.4135,1.225,-1.4135,1.1704,-1.3754,1.1703,-1.3755,1.2246,-1.3752,1.2727,-1.4135,1.2729,-1.4976,1.2724,-1.4135,1.3455,-1.375,1.3459,-1.3749,1.4177,-1.4135,1.4177,-1.4976,1.4179,-1.4976,1.3459,-1.6661,1.4181,-1.6339,1.3459,-1.6339,1.4179,-1.666,1.3451,-1.7019,1.3447,-1.7016,1.272,-1.7392,1.2716,-1.825,1.2712,-1.7393,1.3443,-1.8251,1.3441,-1.634,1.4781,-1.4976,1.4784,-1.4135,1.4786,-1.3878,1.4787,-1.4135,1.5247,-1.3849,1.5247,-1.4171,1.5659,-1.4978,1.5656,-1.4973,1.5247,-1.6346,1.5245,-1.6341,1.5673,-1.4968,1.6341,-1.4305,1.6343,-0.62065,1.6254,-0.62063,1.5109,-0.6768,1.511,-0.62065,1.4579,-0.591,1.456,-0.59165,1.3971,-0.62056,1.3973,-0.62047,1.334,-0.59167,1.3344,-0.62047,1.2833,-0.59158,1.2833,-0.62047,1.2106,-0.5915,1.2106,-0.62047,1.1487,-0.59142,1.1486,-0.67641,1.1481,-0.67493,1.2107,0.28536,1.3295,0.27428,1.2501,0.25175,1.3355,0.28156,1.3796,-0.67493,1.2831,-0.67493,1.3337,0.28208,1.53,0.24967,1.3783,-0.67491,1.283,-0.67487,1.2107,-0.73732,1.2831,-0.73638,1.2106,-0.67849,1.148,-0.72975,1.1482,-0.78881,1.1488,-0.79077,1.2105,-0.82173,1.1485,-0.82299,1.2105,-0.79472,1.2834,-0.73762,1.3335,-0.67483,1.3335,0.24345,1.53,0.25992,1.6082,-0.67691,1.3978,-0.73532,1.3977,-0.81262,1.333,-0.82234,1.2834,-0.91107,1.2835,-0.9111,1.2105,-0.82429,1.149,-0.91117,1.1491,-0.91103,1.3335,-0.91095,1.3962,-0.81283,1.3969,-0.73666,1.4584,-0.81258,1.4572,-0.91087,1.4562,-0.91082,1.5108,-0.81262,1.5107,-0.74205,1.5109,-0.67688,1.4577,-0.67493,1.6255,-0.74574,1.6256,-0.81297,1.6256,-0.91065,1.6256,-0.91063,1.6979,-0.81278,1.6977,-0.74706,1.6983,-0.75005,1.7896,-0.67688,1.7901,-1.5107,0.81702,-1.6232,0.81789,-1.5107,0.74158,-1.6232,0.74177,-1.772,0.81779,-1.8546,0.73533,-1.7721,0.73533,-1.8545,0.81767,-0.80675,1.7903,-0.85286,1.7916,-1.9381,0.73533,-1.9389,0.68323,-0.36897,1.7452,-0.37893,1.8146,-0.39423,1.7421,-0.36885,1.6847,-1.8546,0.68326,-1.9389,0.6163,-1.7721,0.68324,-1.5107,0.69096,-1.6232,0.69096,-1.4086,0.69738,-1.4085,0.74141,-2.8541,0.71859,-2.9778,0.78324,-2.9778,0.71857,-2.8541,0.78306,-2.9778,0.8178,-2.8541,0.81707,-2.8249,0.81737,-2.7323,0.81848,-1.4931,1.804,-1.4968,1.7059,-1.4536,1.7066,-0.62066,1.6971,-0.67685,1.697,-0.62065,1.7904,-1.4085,0.81608,-1.38,0.63641,-1.4086,0.63767,-1.5107,0.63535,-1.6232,0.63535,-1.7721,0.61634,-1.8546,0.61638,-1.8546,0.51135,-1.9389,0.51321,-0.39425,1.6847,-0.36861,1.6115,-0.39432,1.6119,-0.39425,1.4579,-0.36854,1.458,-0.39432,1.3976,-0.36877,1.3982,-0.39432,1.3163,-0.36944,1.3153,-0.38444,1.2072,-1.8545,0.45037,-1.939,0.45363,-1.8575,0.35542,-1.9386,0.35499,-1.959,0.35506,-1.9386,0.27196,-1.959,0.27187,-1.9386,0.15797,-1.8575,0.27136,-1.6345,0.51501,-1.6245,0.42804,-1.5529,0.42795,-1.5535,0.36194,-1.6242,0.36201,-1.7479,0.61417,-1.7648,0.54864,-1.7309,0.54828,-1.7311,0.46315,-1.7649,0.46242,-1.731,0.39315,-1.7649,0.39281,-1.7311,0.311,-1.7648,0.31109,-1.6245,0.27688,-1.6245,0.20689,-1.5538,0.20697,-1.5543,0.12474,-1.6223,0.12484,-1.5106,0.12471,-1.5107,0.20767,-1.5534,0.27712,-1.5106,0.27823,-1.4798,0.20769,-1.5106,0.12472,-1.4798,0.1246,-1.4085,0.20853,-1.4085,0.27933,-1.3803,0.28002,-1.3803,0.20875,-1.4085,0.12448,-1.3803,0.12448,-1.3803,0.36128,-1.4085,0.36159,-1.3803,0.42798,-1.4085,0.42804,-1.4798,0.36158,-1.4798,0.42796,-1.4085,0.45308,-1.5107,0.51501,-1.4085,0.51501,-1.5107,0.57168,-1.4085,0.56499,-1.3801,0.56567,-1.3804,0.515,-1.3804,0.45327,-1.6231,0.5717,-1.7721,0.51324,-1.5107,0.42795,-1.5106,0.36162,-1.4798,0.27836,0.51964,1.1611,0.14336,1.1781,0.14339,1.2752,0.089078,1.1785,0.088637,1.2744,0.035784,1.2748,0.087642,1.2745,0.087155,1.1785,0.036548,1.1781,-2.834,0.13453,0.49864,1.7622,0.51181,1.7619,-2.8571,1.4775,-2.7937,1.4774,-1.8251,1.5245,-1.825,1.5665,-1.825,1.6332,0.50153,1.8635,-3.1548,45.448,-4.0871,44.562,-3.4072,44.563,0.11014,2.7159,0.21507,2.7856,0.11808,2.7888,0.22488,2.7116,0.17087,2.8605,1.4498,0.59484,1.611,0.51621,1.4495,0.5161,1.6136,0.59532,1.4502,0.65151,1.6222,0.65085,1.4504,0.71636,1.2947,0.71685,1.2947,0.65163,1.2947,0.59466,1.2947,0.51605,1.4493,0.44468,1.6104,0.44473,1.6129,0.38955,1.4492,0.38949,1.6135,0.33018,1.4745,0.32965,1.6138,0.28605,1.492,0.2826,1.4995,0.23553,1.6156,0.23284,1.4555,0.27132,1.4662,0.23181,1.4495,0.32532,1.296,0.44465,1.2956,0.38943,1.4322,0.32612,1.3032,0.32962,1.4289,0.2708,1.3103,0.27504,1.4143,0.21714,1.3133,0.22273,1.291,0.22411,1.2863,0.26983,1.2931,0.32407,1.1573,0.27786,1.1715,0.23214,1.2849,0.22663,1.1365,0.22832,1.1345,0.2699,1.1508,0.32396,1.1491,0.38946,1.149,0.44465,1.1489,0.5161,1.1488,0.59484,1.1487,0.65151,1.1486,0.71636,-0.39575,0.77637,-0.62351,0.89035,-0.3958,0.88841,-0.62361,0.77837,-0.39565,0.67848,-0.62372,0.68242,-0.39556,0.54243,-0.62372,0.54576,-0.39548,0.41899,-0.62392,0.42226,-0.39543,0.32365,-0.62394,0.32388,-0.50655,0.32015,-0.41115,0.24434,-0.39277,0.24435,-0.41076,0.15918,-0.39175,0.15885,-0.39136,0.070257,-0.41227,0.070621,-0.48523,0.070099,-0.499,0.15928,-0.50788,0.24485,-0.52931,0.24547,-0.5075,0.15917,-0.53604,0.15907,-0.62349,0.15923,-0.62289,0.069216,-0.53605,0.070583,-0.51003,0.070268,-0.62379,0.24641,1.6296,0.71567,0.62899,0.47181,0.62938,0.31082,0.55048,0.31081,0.63045,0.16533,0.55048,0.16502,0.55065,0.047429,0.63157,0.045246,0.55049,0.47181,0.42895,0.3108,0.55048,0.16549,0.42969,0.16543,0.43064,0.044059,0.55179,0.048565,0.42891,0.47181,0.33017,0.47181,0.33016,0.31168,0.42901,0.16538,0.33018,0.16543,0.4292,0.044625,0.33026,0.041836,0.22203,0.47181,0.22204,0.3108,0.22204,0.16548,0.33008,0.16532,0.22202,0.044682,0.33001,0.042418,0.1117,0.47181,0.11162,0.31081,0.11155,0.16562,0.22216,0.16541,0.11156,0.047376,0.22231,0.044385,0.026622,0.47181,0.02596,0.31082,0.025024,0.16533,0.11108,0.16515,0.024205,0.053528,0.11062,0.050836,0.0269,0.61482,0.11181,0.61356,0.027139,0.77755,0.11177,0.77655,0.027181,0.88697,0.11155,0.88688,0.22197,0.77458,0.22192,0.88618,0.33017,0.77393,0.33017,0.88595,0.42901,0.77455,0.42892,0.88618,0.55048,0.77501,0.55048,0.88688,0.62855,0.7775,0.6287,0.61482,0.55049,0.6136,0.42904,0.61347,0.33018,0.61326,0.22198,0.61357,0.62798,0.88697,0.36224,2.7684,0.24593,2.7725,0.25533,2.7095,0.29918,2.8241,0.34671,2.7083]],

    "faces": [42,0,1,2,0,0,1,2,0,1,2,42,0,3,1,0,0,3,1,0,3,1,42,3,0,4,0,3,0,4,3,0,4,42,4,5,3,0,4,5,3,4,5,3,42,6,5,4,0,6,5,4,6,5,4,42,6,7,5,0,6,7,5,6,7,5,42,7,6,8,0,7,6,8,7,6,8,42,6,9,8,0,6,9,8,6,9,8,42,9,6,4,0,9,6,4,9,6,4,42,9,4,10,0,9,4,10,9,4,10,42,4,0,10,0,4,0,10,4,0,10,42,10,0,11,0,10,0,11,10,0,11,42,11,0,2,0,11,0,2,11,0,2,42,11,2,12,0,11,2,12,11,2,12,42,2,13,12,0,2,13,12,2,13,12,42,2,14,13,0,2,14,13,2,14,13,42,15,14,2,0,15,14,2,15,14,2,42,15,16,14,0,15,16,14,15,16,14,42,17,16,15,0,17,16,15,17,16,15,42,17,18,16,0,17,18,16,17,18,16,42,19,18,17,0,19,18,17,19,18,17,42,20,18,19,0,20,18,19,20,18,19,42,20,21,18,0,20,21,18,20,21,18,42,22,21,20,0,22,21,20,22,21,20,42,22,23,21,0,22,23,21,22,23,21,42,22,24,23,0,22,24,23,22,24,23,42,25,24,22,0,25,24,22,25,24,22,42,26,24,25,0,26,24,25,26,24,25,42,26,27,24,0,26,27,24,26,27,24,42,28,27,26,0,28,27,26,28,27,26,42,28,29,27,0,28,29,27,28,29,27,42,28,30,29,0,28,30,29,28,30,29,42,31,30,28,0,31,30,28,31,30,28,42,31,32,30,0,31,32,30,31,32,30,42,33,32,31,0,33,32,31,33,32,31,42,33,34,32,0,33,34,32,33,34,32,42,33,35,34,0,33,35,34,33,35,34,42,36,35,33,0,36,35,33,36,35,33,42,36,37,35,0,36,37,35,36,37,35,42,38,37,36,0,38,37,36,38,37,36,42,38,39,37,0,38,39,37,38,39,37,42,40,39,38,0,40,39,38,40,39,38,42,40,41,39,0,40,41,39,40,41,39,42,42,41,40,0,42,41,40,42,41,40,42,42,43,41,0,42,43,41,42,43,41,42,44,43,42,0,44,43,42,44,43,42,42,44,45,43,0,44,45,43,44,45,43,42,46,45,44,0,46,45,44,46,45,44,42,47,45,46,0,47,45,46,47,45,46,42,48,45,47,0,48,45,47,48,45,47,42,48,49,45,0,48,49,45,48,49,45,42,48,50,49,0,48,50,49,48,50,49,42,51,50,48,0,51,50,48,51,50,48,42,51,52,50,0,52,53,54,51,52,50,42,51,53,52,0,52,55,53,51,53,52,42,54,53,51,0,56,55,52,54,53,51,42,54,55,53,0,56,57,55,54,55,53,42,56,55,54,0,58,57,56,56,55,54,42,55,56,57,0,57,58,59,55,56,57,42,56,54,60,0,58,56,60,56,54,58,42,60,54,61,0,61,62,63,58,54,59,42,61,54,62,0,63,62,64,59,54,60,42,62,54,63,0,64,62,65,60,54,61,42,54,51,63,0,62,51,65,54,51,61,42,63,51,48,0,65,51,48,61,51,48,42,63,48,47,0,65,48,47,61,48,47,42,63,47,64,0,65,47,66,61,47,62,42,64,47,65,0,66,47,67,62,47,63,42,47,66,65,0,47,68,67,47,64,63,42,47,46,66,0,47,46,68,47,46,64,42,46,67,66,0,46,69,68,46,65,64,42,46,44,67,0,46,44,69,46,44,65,42,67,44,68,0,69,44,70,65,44,66,42,44,69,68,0,44,71,70,44,67,66,42,44,42,69,0,44,42,71,44,42,67,42,69,42,70,0,71,42,72,67,42,68,42,42,40,70,0,42,40,72,42,40,68,42,70,40,71,0,72,40,73,68,40,69,42,40,38,71,0,40,38,73,40,38,69,42,38,72,71,0,38,74,73,38,70,69,42,38,36,72,0,38,36,74,38,36,70,42,36,73,72,0,36,75,74,36,71,70,42,36,33,73,0,36,33,75,36,33,71,42,33,31,73,0,33,31,75,33,31,71,42,73,31,28,0,75,31,28,71,31,28,42,73,28,74,0,75,28,76,71,28,72,42,74,28,26,0,76,28,26,72,28,26,42,74,26,75,0,76,26,77,72,26,73,42,75,26,76,0,77,26,78,73,26,74,42,26,25,76,0,26,25,78,26,25,74,42,76,25,77,0,78,25,79,74,25,75,42,77,25,78,0,79,25,80,75,25,76,42,25,22,78,0,25,22,80,25,22,76,42,78,22,79,0,80,22,81,76,22,77,42,22,20,79,0,22,20,81,22,20,77,42,79,20,80,0,81,20,82,77,20,78,42,80,20,19,0,82,20,19,78,20,19,42,80,19,81,0,82,19,83,78,19,79,42,81,19,82,0,83,19,84,79,19,80,42,19,17,82,0,19,17,84,19,17,80,42,82,17,15,0,84,17,15,80,17,15,42,82,15,1,0,84,15,1,80,15,1,42,1,15,2,0,1,15,2,1,15,2,42,83,82,1,0,85,84,1,81,80,1,42,84,82,83,0,86,84,85,82,80,81,42,84,81,82,0,86,83,84,82,79,80,42,85,81,84,0,87,83,86,83,79,82,42,86,81,85,0,88,83,87,84,79,83,42,80,81,86,0,82,83,88,78,79,84,42,87,80,86,0,89,82,88,85,78,84,42,88,80,87,0,90,82,89,86,78,85,42,88,79,80,0,90,81,82,86,77,78,42,89,79,88,0,91,81,90,87,77,86,42,78,79,89,0,80,81,91,76,77,87,42,90,78,89,0,92,80,91,88,76,87,42,77,78,90,0,79,80,92,75,76,88,42,90,91,77,0,92,93,79,88,89,75,42,92,91,90,0,94,93,92,90,89,88,42,93,91,92,0,95,93,94,91,89,90,42,94,91,93,0,96,93,95,92,89,91,42,95,91,94,0,97,93,96,93,89,92,42,95,96,91,0,97,98,93,93,94,89,42,97,96,95,0,99,98,97,95,94,93,42,98,96,97,0,100,98,99,96,94,95,42,77,96,98,0,79,98,100,75,94,96,42,91,96,77,0,93,98,79,89,94,75,42,77,98,76,0,79,100,78,75,96,74,42,75,76,98,0,77,78,100,73,74,96,42,99,75,98,0,101,77,100,97,73,96,42,100,75,99,0,102,77,101,98,73,97,42,101,75,100,0,103,77,102,99,73,98,42,101,74,75,0,103,76,77,99,72,73,42,72,74,101,0,74,76,103,70,72,99,42,72,73,74,0,74,75,76,70,71,72,42,71,72,101,0,73,74,103,69,70,99,42,71,101,100,0,73,103,102,69,99,98,42,71,100,102,0,73,102,104,69,98,100,42,102,100,103,0,104,102,105,100,98,101,42,103,100,104,0,105,102,106,101,98,102,42,100,99,104,0,102,101,106,98,97,102,42,104,99,105,0,106,101,107,102,97,103,42,99,106,105,0,101,108,107,97,104,103,42,99,98,106,0,101,100,108,97,96,104,42,106,98,97,0,108,100,99,104,96,95,42,106,97,105,0,108,99,107,104,95,103,42,105,97,107,0,107,99,109,103,95,105,42,107,97,95,0,109,99,97,105,95,93,42,107,95,108,0,109,97,110,105,93,106,42,108,95,109,0,110,97,111,106,93,107,42,109,95,94,0,111,97,96,107,93,92,42,109,94,93,0,111,96,95,107,92,91,42,109,93,110,0,111,95,112,107,91,108,42,110,93,111,0,112,95,113,108,91,109,42,111,93,112,0,113,95,114,109,91,110,42,112,93,113,0,114,95,115,110,91,111,42,113,93,114,0,115,95,116,111,91,112,42,93,115,114,0,95,117,116,91,113,112,42,93,92,115,0,95,94,117,91,90,113,42,116,115,92,0,118,117,94,114,113,90,42,117,115,116,0,119,117,118,115,113,114,42,117,118,115,0,119,120,117,115,116,113,42,119,118,117,0,121,120,119,117,116,115,42,120,118,119,0,122,120,121,118,116,117,42,121,118,120,0,123,120,122,119,116,118,42,121,115,118,0,123,117,120,119,113,116,42,114,115,121,0,116,117,123,112,113,119,42,113,114,121,0,115,116,123,111,112,119,42,113,121,122,0,115,123,124,111,119,120,42,122,121,123,0,124,123,125,120,119,121,42,123,121,120,0,125,123,122,121,119,118,42,123,120,124,0,125,122,126,121,118,122,42,125,124,120,0,127,126,122,123,122,118,42,126,124,125,0,128,126,127,124,122,123,42,127,124,126,0,129,126,128,125,122,124,42,127,128,124,0,129,130,126,125,126,122,42,127,129,128,0,129,131,130,125,127,126,42,130,129,127,0,132,131,129,128,127,125,42,130,131,129,0,132,133,131,128,129,127,42,132,131,130,0,134,135,136,130,129,128,42,132,133,131,0,134,137,135,130,131,129,42,132,134,133,0,134,138,137,130,132,131,42,134,132,135,0,138,134,139,132,130,133,42,135,132,136,0,139,134,140,133,130,134,42,136,132,137,0,140,134,141,134,130,135,42,132,130,137,0,134,136,141,130,128,135,42,137,130,138,0,141,136,142,135,128,136,42,138,130,127,0,143,132,129,136,128,125,42,138,127,139,0,143,129,144,136,125,137,42,139,127,126,0,144,129,128,137,125,124,42,139,126,140,0,144,128,145,137,124,138,42,126,119,140,0,128,121,145,124,117,138,42,126,125,119,0,128,127,121,124,123,117,42,125,120,119,0,127,122,121,123,118,117,42,140,119,141,0,145,121,146,138,117,139,42,141,119,117,0,146,121,119,139,117,115,42,117,87,141,0,119,89,146,115,85,139,42,117,88,87,0,119,90,89,115,86,85,42,116,88,117,0,118,90,119,114,86,115,42,116,89,88,0,118,91,90,114,87,86,42,142,89,116,0,147,91,118,140,87,114,42,90,89,142,0,92,91,147,88,87,140,42,92,90,142,0,94,92,147,90,88,140,42,92,142,116,0,94,147,118,90,140,114,42,141,87,143,0,146,89,148,139,85,141,42,87,86,143,0,89,88,148,85,84,141,42,143,86,85,0,148,88,87,141,84,83,42,144,143,85,0,149,148,87,142,141,83,42,145,143,144,0,150,148,149,143,141,142,42,145,140,143,0,150,145,148,143,138,141,42,146,140,145,0,151,145,150,144,138,143,42,139,140,146,0,144,145,151,137,138,144,42,147,139,146,0,152,144,151,145,137,144,42,147,148,139,0,152,153,144,145,146,137,42,149,148,147,0,154,153,152,147,146,145,42,150,148,149,0,155,153,154,148,146,147,42,150,151,148,0,156,157,158,148,149,146,42,152,151,150,0,159,157,156,150,149,148,42,153,151,152,0,160,157,159,151,149,150,42,153,154,151,0,160,161,157,151,152,149,42,155,154,153,0,162,161,160,153,152,151,42,155,156,154,0,163,164,165,153,154,152,42,157,156,155,0,166,167,168,155,154,153,42,157,158,156,0,166,169,167,155,156,154,42,159,158,157,0,170,169,166,157,156,155,42,160,158,159,0,171,172,173,158,156,157,42,160,136,158,0,171,140,172,158,134,156,42,135,136,160,0,139,140,171,133,134,158,42,161,135,160,0,174,139,171,159,133,158,42,161,162,135,0,174,175,139,159,160,133,42,163,162,161,0,176,175,174,161,160,159,42,163,164,162,0,176,177,175,161,162,160,42,164,163,165,0,177,176,178,162,161,163,42,163,166,165,0,176,179,178,161,164,163,42,166,163,167,0,179,176,180,164,161,165,42,167,163,161,0,180,176,174,165,161,159,42,167,161,168,0,180,174,181,165,159,166,42,161,159,168,0,174,173,181,159,157,166,42,159,161,160,0,173,174,171,157,159,158,42,168,159,157,0,182,170,166,166,157,155,42,168,157,169,0,182,166,183,166,155,167,42,169,157,170,0,183,166,184,167,155,168,42,170,157,171,0,184,166,185,168,155,169,42,157,172,171,0,166,186,185,155,170,169,42,157,155,172,0,166,168,186,155,153,170,42,172,155,153,0,187,162,160,170,153,151,42,173,172,153,0,188,187,160,171,170,151,42,173,171,172,0,188,189,187,171,169,170,42,174,171,173,0,190,189,188,172,169,171,42,174,170,171,0,190,191,189,172,168,169,42,170,174,167,0,191,190,180,168,172,165,42,174,166,167,0,190,179,180,172,164,165,42,166,174,173,0,179,190,188,164,172,171,42,166,173,175,0,179,188,192,164,171,173,42,175,173,153,0,192,188,160,173,171,151,42,175,153,152,0,192,160,159,173,151,150,42,150,175,152,0,156,192,159,148,173,150,42,176,175,150,0,193,192,156,174,173,148,42,165,175,176,0,178,192,193,163,173,174,42,165,166,175,0,178,179,192,163,164,173,42,177,165,176,0,194,195,196,175,163,174,42,164,165,177,0,197,195,194,162,163,175,42,164,177,178,0,197,194,198,162,175,176,42,178,177,179,0,198,194,199,176,175,177,42,179,177,180,0,199,194,200,177,175,178,42,177,176,180,0,194,196,200,175,174,178,42,180,176,150,0,200,196,155,178,174,148,42,179,180,150,0,199,200,201,177,178,148,42,179,150,181,0,199,201,202,177,148,179,42,150,182,181,0,201,203,202,148,180,179,42,150,183,182,0,201,204,203,148,181,180,42,150,149,183,0,201,154,204,148,147,181,42,183,149,147,0,204,154,152,181,147,145,42,183,147,184,0,204,152,205,181,145,182,42,184,147,185,0,205,152,206,182,145,183,42,147,146,185,0,152,151,206,145,144,183,42,185,146,145,0,206,151,150,183,144,143,42,185,145,186,0,206,150,207,183,143,184,42,186,145,144,0,207,150,149,184,143,142,42,186,144,187,0,207,149,208,184,142,185,42,187,144,188,0,208,149,209,185,142,186,42,144,84,188,0,149,86,209,142,82,186,42,144,85,84,0,149,87,86,142,83,82,42,188,84,83,0,209,86,85,186,82,81,42,3,188,83,0,3,209,85,3,186,81,42,189,188,3,0,210,209,3,187,186,3,42,187,188,189,0,208,209,210,185,186,187,42,190,187,189,0,211,208,210,188,185,187,42,190,186,187,0,211,207,208,188,184,185,42,191,186,190,0,212,207,211,189,184,188,42,191,185,186,0,212,206,207,189,183,184,42,184,185,191,0,205,206,212,182,183,189,42,184,191,192,0,205,212,213,182,189,190,42,192,191,193,0,213,212,214,190,189,191,42,191,190,193,0,212,211,214,189,188,191,42,190,194,193,0,211,215,214,188,192,191,42,190,189,194,0,211,210,215,188,187,192,42,194,189,5,0,215,210,5,192,187,5,42,5,189,3,0,5,210,3,5,187,3,42,7,194,5,0,7,215,5,7,192,5,42,194,7,195,0,215,7,216,192,7,193,42,195,7,196,0,216,7,217,193,7,194,42,7,8,196,0,7,8,217,7,8,194,42,196,8,197,0,217,8,218,194,8,195,42,8,198,197,0,8,219,218,8,196,195,42,8,9,198,0,8,9,219,8,9,196,42,9,199,198,0,9,220,219,9,197,196,42,199,9,200,0,220,9,221,197,9,198,42,9,10,200,0,9,10,221,9,10,198,42,200,10,201,0,221,10,222,198,10,199,42,10,11,201,0,10,11,222,10,11,199,42,201,11,12,0,222,11,12,199,11,12,42,201,12,202,0,222,12,223,199,12,200,42,12,203,202,0,12,224,223,12,201,200,42,12,13,203,0,12,13,224,12,13,201,42,13,204,203,0,13,225,224,13,202,201,42,13,205,204,0,13,226,225,13,203,202,42,14,205,13,0,14,226,13,14,203,13,42,14,206,205,0,14,227,226,14,204,203,42,16,206,14,0,16,227,14,16,204,14,42,16,207,206,0,16,228,227,16,205,204,42,16,208,207,0,16,229,228,16,206,205,42,18,208,16,0,18,229,16,18,206,16,42,18,209,208,0,18,230,229,18,207,206,42,18,210,209,0,18,231,230,18,208,207,42,21,210,18,0,21,231,18,21,208,18,42,21,211,210,0,21,232,231,21,209,208,42,21,23,211,0,21,23,232,21,23,209,42,29,211,23,0,29,232,23,29,209,23,42,212,211,29,0,233,232,29,210,209,29,42,213,211,212,0,234,232,233,211,209,210,42,213,214,211,0,234,235,232,211,212,209,42,215,214,213,0,236,235,234,213,212,211,42,215,216,214,0,236,237,235,213,214,212,42,215,217,216,0,236,238,237,213,215,214,42,218,217,215,0,239,238,236,216,215,213,42,218,219,217,0,239,240,238,216,217,215,42,220,219,218,0,241,240,239,218,217,216,42,220,221,219,0,241,242,240,218,219,217,42,222,221,220,0,243,242,241,220,219,218,42,223,221,222,0,244,242,243,221,219,220,42,223,224,221,0,244,245,242,221,222,219,42,223,225,224,0,244,246,245,221,223,222,42,226,225,223,0,247,246,244,224,223,221,42,227,226,223,0,248,247,244,225,224,221,42,227,223,228,0,248,244,249,225,221,226,42,228,223,229,0,249,244,250,226,221,227,42,229,223,222,0,250,244,243,227,221,220,42,229,222,230,0,250,243,251,227,220,228,42,230,222,220,0,251,243,241,228,220,218,42,230,220,231,0,251,241,252,228,218,229,42,231,220,218,0,252,241,239,229,218,216,42,231,218,232,0,252,239,253,229,216,230,42,232,218,215,0,253,239,236,230,216,213,42,232,215,233,0,253,236,254,230,213,231,42,233,215,213,0,254,236,234,231,213,211,42,233,213,234,0,254,234,255,231,211,232,42,234,213,212,0,255,234,233,232,211,210,42,234,212,30,0,255,233,30,232,210,30,42,30,212,29,0,30,233,29,30,210,29,42,32,234,30,0,32,255,30,32,232,30,42,235,234,32,0,256,255,32,233,232,32,42,236,234,235,0,257,255,256,234,232,233,42,236,233,234,0,257,254,255,234,231,232,42,237,233,236,0,258,254,257,235,231,234,42,237,232,233,0,258,253,254,235,230,231,42,237,231,232,0,258,252,253,235,229,230,42,238,231,237,0,259,252,258,236,229,235,42,238,230,231,0,259,251,252,236,228,229,42,239,230,238,0,260,251,259,237,228,236,42,239,229,230,0,260,250,251,237,227,228,42,240,229,239,0,261,250,260,238,227,237,42,240,228,229,0,261,249,250,238,226,227,42,241,228,240,0,262,249,261,239,226,238,42,241,227,228,0,262,248,249,239,225,226,42,242,227,241,0,263,248,262,240,225,239,42,243,242,241,0,264,263,262,241,240,239,42,243,244,242,0,264,265,263,241,242,240,42,243,245,244,0,264,266,265,241,243,242,42,246,245,243,0,267,266,264,244,243,241,42,246,247,245,0,267,268,266,244,245,243,42,248,247,246,0,269,268,267,246,245,244,42,248,249,247,0,269,270,268,246,247,245,42,250,249,248,0,271,270,269,248,247,246,42,250,251,249,0,271,272,270,248,249,247,42,252,251,250,0,273,272,271,250,249,248,42,252,253,251,0,274,275,276,250,251,249,42,254,253,252,0,277,275,274,252,251,250,42,254,255,253,0,277,278,275,252,253,251,42,254,256,255,0,277,279,278,252,254,253,42,257,256,254,0,280,279,277,255,254,252,42,198,256,257,0,219,279,280,196,254,255,42,198,199,256,0,219,220,279,196,197,254,42,256,199,258,0,279,220,281,254,197,256,42,258,199,259,0,281,220,282,256,197,257,42,199,200,259,0,220,221,282,197,198,257,42,200,260,259,0,221,283,282,198,258,257,42,200,201,260,0,221,222,283,198,199,258,42,201,202,260,0,222,223,283,199,200,258,42,260,202,261,0,283,223,284,258,200,259,42,202,262,261,0,223,285,284,200,260,259,42,202,203,262,0,223,224,285,200,201,260,42,203,263,262,0,224,286,285,201,261,260,42,204,263,203,0,225,286,224,202,261,201,42,204,264,263,0,225,287,286,202,262,261,42,204,265,264,0,225,288,287,202,263,262,42,205,265,204,0,226,288,225,203,263,202,42,205,266,265,0,226,289,288,203,264,263,42,206,266,205,0,227,289,226,204,264,203,42,206,207,266,0,227,228,289,204,205,264,42,207,267,266,0,228,290,289,205,265,264,42,209,267,207,0,230,290,228,207,265,205,42,209,216,267,0,230,237,290,207,214,265,42,209,214,216,0,230,235,237,207,212,214,42,210,214,209,0,231,235,230,208,212,207,42,210,211,214,0,231,232,235,208,209,212,42,267,216,268,0,290,237,291,265,214,266,42,216,217,268,0,237,238,291,214,215,266,42,268,217,269,0,291,238,292,266,215,267,42,217,219,269,0,238,240,292,215,217,267,42,269,219,270,0,292,240,293,267,217,268,42,219,221,270,0,240,242,293,217,219,268,42,270,221,224,0,293,242,245,268,219,222,42,270,224,271,0,293,245,294,268,222,269,42,271,224,272,0,294,245,295,269,222,270,42,224,225,272,0,245,246,295,222,223,270,42,271,272,273,0,294,295,296,269,270,271,42,274,271,273,0,297,294,296,272,269,271,42,270,271,274,0,293,294,297,268,269,272,42,275,270,274,0,298,293,297,273,268,272,42,269,270,275,0,292,293,298,267,268,273,42,276,269,275,0,299,292,298,274,267,273,42,268,269,276,0,291,292,299,266,267,274,42,266,268,276,0,289,291,299,264,266,274,42,267,268,266,0,290,291,289,265,266,264,42,266,276,277,0,289,299,300,264,274,275,42,277,276,278,0,300,299,301,275,274,276,42,276,275,278,0,299,298,301,274,273,276,42,278,275,279,0,301,298,302,276,273,277,42,275,274,279,0,298,297,302,273,272,277,42,279,274,273,0,302,297,296,277,272,271,42,279,273,280,0,302,296,303,277,271,278,42,279,280,281,0,302,303,304,277,278,279,42,282,279,281,0,305,302,304,280,277,279,42,278,279,282,0,301,302,305,276,277,280,42,264,278,282,0,287,301,305,262,276,280,42,277,278,264,0,300,301,287,275,276,262,42,265,277,264,0,288,300,287,263,275,262,42,266,277,265,0,289,300,288,264,275,263,42,263,264,282,0,286,287,305,261,262,280,42,263,282,283,0,286,305,306,261,280,281,42,283,282,284,0,306,305,307,281,280,282,42,282,281,284,0,305,304,307,280,279,282,42,283,284,285,0,306,307,308,281,282,283,42,285,284,286,0,308,307,309,283,282,284,42,287,285,286,0,310,308,309,285,283,284,42,262,285,287,0,285,308,310,260,283,285,42,263,285,262,0,286,308,285,261,283,260,42,263,283,285,0,286,306,308,261,281,283,42,261,262,287,0,284,285,310,259,260,285,42,288,261,287,0,311,284,310,286,259,285,42,260,261,288,0,283,284,311,258,259,286,42,259,260,288,0,282,283,311,257,258,286,42,259,288,289,0,282,311,312,257,286,287,42,289,288,290,0,312,311,313,287,286,288,42,288,287,290,0,311,310,313,286,285,288,42,290,287,291,0,313,310,314,288,285,289,42,291,287,292,0,314,310,315,289,285,290,42,287,286,292,0,310,309,315,285,284,290,42,293,290,291,0,316,313,314,291,288,289,42,289,290,293,0,312,313,316,287,288,291,42,294,289,293,0,317,312,316,292,287,291,42,295,289,294,0,318,312,317,293,287,292,42,258,289,295,0,281,312,318,256,287,293,42,258,259,289,0,281,282,312,256,257,287,42,258,295,296,0,281,318,319,256,293,294,42,296,295,294,0,319,318,317,294,293,292,42,296,294,297,0,319,317,320,294,292,295,42,297,294,298,0,320,317,321,295,292,296,42,294,299,298,0,317,322,321,292,297,296,42,299,294,300,0,322,317,323,297,292,298,42,294,293,300,0,317,316,323,292,291,298,42,300,293,291,0,323,316,314,298,291,289,42,297,298,301,0,320,321,324,295,296,299,42,302,297,301,0,325,320,324,300,295,299,42,296,297,302,0,319,320,325,294,295,300,42,296,302,303,0,319,325,326,294,300,301,42,303,302,249,0,326,325,327,301,300,247,42,249,302,304,0,327,325,328,247,300,302,42,302,301,304,0,325,324,328,300,299,302,42,249,304,247,0,270,329,268,247,302,245,42,251,303,249,0,276,326,327,249,301,247,42,253,303,251,0,275,326,276,251,301,249,42,253,255,303,0,275,278,326,251,253,301,42,255,296,303,0,278,319,326,253,294,301,42,255,258,296,0,278,281,319,253,256,294,42,256,258,255,0,279,281,278,254,256,253,42,208,209,207,0,229,230,228,206,207,205,42,197,198,257,0,218,219,280,195,196,255,42,197,257,305,0,330,331,332,195,255,303,42,257,306,305,0,331,333,332,255,304,303,42,257,254,306,0,331,334,333,255,252,304,42,254,307,306,0,334,335,333,252,305,304,42,254,308,307,0,334,336,335,252,306,305,42,254,252,308,0,334,273,336,252,250,306,42,252,250,308,0,273,271,336,250,248,306,42,308,250,307,0,336,271,335,306,248,305,42,307,250,309,0,335,271,337,305,248,307,42,250,248,309,0,271,269,337,248,246,307,42,309,248,246,0,337,269,267,307,246,244,42,309,246,243,0,337,267,264,307,244,241,42,309,243,310,0,337,264,338,307,241,308,42,243,240,310,0,264,261,338,241,238,308,42,240,243,241,0,261,264,262,238,241,239,42,310,240,311,0,338,261,339,308,238,309,42,311,240,239,0,339,261,260,309,238,237,42,311,239,312,0,339,260,340,309,237,310,42,312,239,238,0,340,260,259,310,237,236,42,312,238,313,0,340,259,341,310,236,311,42,313,238,237,0,341,259,258,311,236,235,42,313,237,236,0,341,258,257,311,235,234,42,313,236,314,0,341,257,342,311,234,312,42,314,236,235,0,342,257,256,312,234,233,42,314,235,315,0,342,256,343,312,233,313,42,315,235,34,0,343,256,34,313,233,34,42,34,235,32,0,34,256,32,34,233,32,42,316,315,34,0,344,343,34,314,313,34,42,316,317,315,0,344,345,343,314,315,313,42,318,317,316,0,346,345,344,316,315,314,42,318,319,317,0,346,347,345,316,317,315,42,318,196,319,0,348,217,349,316,194,317,42,195,196,318,0,216,217,348,193,194,316,42,193,195,318,0,214,216,348,191,193,316,42,193,194,195,0,214,215,216,191,192,193,42,320,193,318,0,350,214,348,318,191,316,42,321,193,320,0,351,214,350,319,191,318,42,321,192,193,0,351,213,214,319,190,191,42,322,192,321,0,352,213,351,320,190,319,42,322,323,192,0,352,353,213,320,321,190,42,324,323,322,0,354,353,352,322,321,320,42,324,182,323,0,354,203,353,322,180,321,42,181,182,324,0,202,203,354,179,180,322,42,181,324,325,0,202,354,355,179,322,323,42,43,325,324,0,43,356,357,43,323,322,42,45,325,43,0,45,356,43,45,323,43,42,45,49,325,0,45,49,356,45,49,323,42,326,325,49,0,358,355,359,324,323,49,42,326,181,325,0,358,202,355,324,179,323,42,179,181,326,0,199,202,358,177,179,324,42,327,179,326,0,360,199,358,325,177,324,42,178,179,327,0,198,199,360,176,177,325,42,178,327,328,0,198,360,361,176,325,326,42,327,329,328,0,360,362,361,325,327,326,42,329,327,326,0,362,360,358,327,325,324,42,52,329,326,0,53,362,358,52,327,324,42,53,329,52,0,55,362,53,53,327,52,42,329,53,330,0,362,55,363,327,53,328,42,53,55,330,0,55,57,363,53,55,328,42,55,331,330,0,57,364,363,55,329,328,42,55,57,331,0,57,59,364,55,57,329,42,331,57,332,0,364,59,365,329,57,330,42,61,62,347,0,63,64,366,59,60,331,42,347,62,348,0,366,64,367,331,60,332,42,62,64,348,0,64,66,367,60,62,332,42,62,63,64,0,64,65,66,60,61,62,42,64,349,348,0,66,368,367,62,333,332,42,64,65,349,0,66,67,368,62,63,333,42,349,65,350,0,369,370,371,333,63,334,42,65,66,350,0,370,372,371,63,64,334,42,350,66,351,0,371,372,373,334,64,335,42,351,66,352,0,373,372,374,335,64,336,42,66,67,352,0,68,69,375,64,65,336,42,67,353,352,0,69,376,375,65,337,336,42,67,68,353,0,69,70,376,65,66,337,42,353,68,354,0,376,70,377,337,66,338,42,68,355,354,0,70,378,377,66,339,338,42,68,69,355,0,70,71,378,66,67,339,42,356,355,69,0,379,378,71,340,339,67,42,355,356,357,0,380,381,382,339,340,341,42,357,356,358,0,382,381,383,341,340,342,42,356,359,358,0,381,384,383,340,343,342,42,356,102,359,0,381,385,384,340,100,343,42,70,102,356,0,72,104,379,68,100,340,42,70,71,102,0,72,73,104,68,69,100,42,69,70,356,0,71,72,379,67,68,340,42,359,102,360,0,386,387,388,343,100,344,42,102,103,360,0,387,389,388,100,101,344,42,361,360,103,0,390,388,389,345,344,101,42,361,362,360,0,390,391,388,345,346,344,42,361,363,362,0,390,392,391,345,347,346,42,364,363,361,0,393,392,390,348,347,345,42,365,363,364,0,394,392,393,349,347,348,42,366,363,365,0,395,392,394,350,347,349,42,366,367,363,0,395,396,392,350,351,347,42,368,367,366,0,397,396,395,352,351,350,42,369,367,368,0,166,169,170,353,351,352,42,370,367,369,0,167,169,166,354,351,353,42,362,367,370,0,391,396,398,346,351,354,42,362,363,367,0,391,392,396,346,347,351,42,371,362,370,0,399,391,398,355,346,354,42,359,362,371,0,386,391,399,343,346,355,42,359,360,362,0,386,388,391,343,344,346,42,372,359,371,0,400,384,401,356,343,355,42,372,358,359,0,400,383,384,356,342,343,42,357,358,372,0,382,383,400,341,342,356,42,357,372,373,0,382,400,402,341,356,357,42,373,372,374,0,402,400,403,357,356,358,42,374,372,375,0,403,400,404,358,356,359,42,372,371,375,0,400,401,404,356,355,359,42,375,371,370,0,405,399,398,359,355,354,42,375,370,369,0,168,167,166,359,354,353,42,374,375,369,0,186,168,166,358,359,353,42,374,369,376,0,186,166,185,358,353,360,42,376,369,377,0,185,166,184,360,353,361,42,377,369,378,0,184,166,183,361,353,362,42,369,379,378,0,166,182,183,353,363,362,42,369,368,379,0,166,170,182,353,352,363,42,379,368,380,0,406,397,407,363,352,364,42,380,368,366,0,407,397,395,364,352,350,42,380,366,365,0,407,395,394,364,350,349,42,380,365,381,0,407,394,408,364,349,365,42,381,365,382,0,408,394,409,365,349,366,42,365,364,382,0,394,393,409,349,348,366,42,382,364,383,0,409,393,410,366,348,367,42,364,384,383,0,393,411,410,348,368,367,42,384,364,385,0,411,393,412,368,348,369,42,361,385,364,0,390,412,393,345,369,348,42,103,385,361,0,389,412,390,101,369,345,42,103,104,385,0,105,106,413,101,102,369,42,385,104,386,0,413,106,414,369,102,370,42,104,387,386,0,106,415,414,102,371,370,42,104,105,387,0,106,107,415,102,103,371,42,105,107,387,0,107,109,415,103,105,371,42,388,387,107,0,416,415,109,372,371,105,42,388,386,387,0,416,414,415,372,370,371,42,386,388,389,0,414,416,417,370,372,373,42,389,388,390,0,417,416,418,373,372,374,42,388,107,390,0,416,109,418,372,105,374,42,390,107,108,0,418,109,110,374,105,106,42,390,108,109,0,418,110,111,374,106,107,42,390,109,391,0,418,111,419,374,107,375,42,391,109,392,0,419,111,420,375,107,376,42,392,109,110,0,420,111,112,376,107,108,42,392,110,111,0,420,112,113,376,108,109,42,392,111,393,0,420,113,421,376,109,377,42,393,111,394,0,421,113,422,377,109,378,42,394,111,112,0,422,113,114,378,109,110,42,394,112,113,0,422,114,115,378,110,111,42,394,113,395,0,422,115,423,378,111,379,42,395,113,396,0,423,115,424,379,111,380,42,396,113,122,0,424,115,124,380,111,120,42,396,122,123,0,424,124,125,380,120,121,42,396,123,397,0,424,125,425,380,121,381,42,397,123,128,0,425,125,130,381,121,126,42,128,123,124,0,130,125,126,126,121,122,42,129,397,128,0,131,425,130,127,381,126,42,129,398,397,0,131,426,425,127,382,381,42,399,398,129,0,427,426,131,383,382,127,42,400,398,399,0,428,426,427,384,382,383,42,400,401,398,0,428,429,426,384,385,382,42,400,402,401,0,428,430,429,384,386,385,42,400,403,402,0,428,431,430,384,387,386,42,404,403,400,0,432,431,428,388,387,384,42,404,405,403,0,432,433,431,388,389,387,42,406,405,404,0,434,433,432,390,389,388,42,406,407,405,0,434,435,433,390,391,389,42,406,408,407,0,434,436,435,390,392,391,42,409,408,406,0,437,436,434,393,392,390,42,409,410,408,0,437,438,436,393,394,392,42,411,410,409,0,439,438,437,395,394,393,42,411,412,410,0,439,440,438,395,396,394,42,470,411,409,0,441,439,437,397,395,393,42,470,409,471,0,441,437,442,397,393,398,42,471,409,406,0,442,437,434,398,393,390,42,471,406,472,0,442,434,443,398,390,399,42,472,406,404,0,443,434,432,399,390,388,42,404,473,472,0,432,444,443,388,400,399,42,474,473,404,0,445,444,432,401,400,388,42,474,330,473,0,446,363,447,401,328,400,42,474,329,330,0,446,362,363,401,327,328,42,328,329,474,0,361,362,446,326,327,401,42,328,474,404,0,448,445,432,326,401,388,42,328,404,475,0,448,432,449,326,388,402,42,404,399,475,0,432,427,449,388,383,402,42,404,400,399,0,432,428,427,388,384,383,42,475,399,476,0,449,427,450,402,383,403,42,399,129,476,0,427,131,450,383,127,403,42,131,476,129,0,133,450,131,129,403,127,42,133,476,131,0,451,450,133,131,403,129,42,133,477,476,0,451,452,450,131,404,403,42,477,133,134,0,452,451,453,404,131,132,42,478,477,134,0,454,452,453,405,404,132,42,478,479,477,0,454,455,452,405,406,404,42,478,164,479,0,456,197,457,405,162,406,42,164,478,162,0,177,458,175,162,405,160,42,162,478,134,0,175,458,138,160,405,132,42,162,134,135,0,175,138,139,160,132,133,42,164,178,479,0,197,198,457,162,176,406,42,479,178,328,0,457,198,361,406,176,326,42,479,328,475,0,455,448,449,406,326,402,42,479,475,477,0,455,449,452,406,402,404,42,475,476,477,0,449,450,452,402,403,404,42,330,331,473,0,363,364,447,328,329,400,42,331,480,473,0,364,459,447,329,407,400,42,331,332,480,0,364,365,459,329,330,407,42,480,332,481,0,460,461,462,407,330,408,42,348,501,347,0,367,463,366,332,409,331,42,348,502,501,0,367,464,463,332,410,409,42,348,349,502,0,367,368,464,332,333,410,42,349,503,502,0,369,465,466,333,411,410,42,349,504,503,0,369,467,465,333,412,411,42,504,349,350,0,467,369,371,412,333,334,42,505,504,350,0,468,467,371,413,412,334,42,504,505,503,0,467,468,465,412,413,411,42,503,505,506,0,465,468,469,411,413,414,42,506,505,507,0,469,468,470,414,413,415,42,505,508,507,0,468,471,470,413,416,415,42,505,509,508,0,468,472,471,413,417,416,42,350,509,505,0,371,472,468,334,417,413,42,350,510,509,0,371,473,472,334,418,417,42,350,511,510,0,371,474,473,334,419,418,42,350,512,511,0,371,475,474,334,420,419,42,350,351,512,0,371,373,475,334,335,420,42,512,351,513,0,475,373,476,420,335,421,42,351,514,513,0,373,477,476,335,422,421,42,351,352,514,0,373,374,477,335,336,422,42,352,515,514,0,374,478,477,336,423,422,42,352,353,515,0,375,376,479,336,337,423,42,353,381,515,0,480,408,481,337,365,423,42,516,381,353,0,482,408,480,424,365,337,42,516,380,381,0,482,407,408,424,364,365,42,517,380,516,0,483,407,482,425,364,424,42,517,379,380,0,483,406,407,425,363,364,42,378,379,517,0,484,406,483,362,363,425,42,517,377,378,0,483,485,484,425,361,362,42,517,518,377,0,483,486,485,425,426,361,42,519,518,517,0,487,486,483,427,426,425,42,519,373,518,0,487,402,486,427,357,426,42,519,357,373,0,487,382,402,427,341,357,42,354,357,519,0,488,382,487,338,341,427,42,354,355,357,0,488,380,382,338,339,341,42,354,519,516,0,488,487,482,338,427,424,42,516,519,517,0,482,487,483,424,427,425,42,353,354,516,0,480,488,482,337,338,424,42,518,373,376,0,486,402,489,426,357,360,42,376,373,374,0,489,402,403,360,357,358,42,518,376,377,0,486,489,485,426,360,361,42,381,382,515,0,408,409,481,365,366,423,42,514,515,382,0,477,478,490,422,423,366,42,514,382,383,0,477,490,491,422,366,367,42,514,383,513,0,477,491,476,422,367,421,42,513,383,384,0,476,491,492,421,367,368,42,384,386,513,0,492,414,476,368,370,421,42,385,386,384,0,413,414,492,369,370,368,42,512,513,386,0,475,476,414,420,421,370,42,512,386,389,0,475,414,417,420,370,373,42,512,389,511,0,475,417,474,420,373,419,42,511,389,520,0,474,417,493,419,373,428,42,520,389,390,0,493,417,418,428,373,374,42,520,390,521,0,493,418,494,428,374,429,42,521,390,391,0,494,418,419,429,374,375,42,521,391,392,0,494,419,420,429,375,376,42,521,392,522,0,494,420,495,429,376,430,42,523,522,392,0,496,495,420,431,430,376,42,523,521,522,0,496,494,495,431,429,430,42,510,521,523,0,473,494,496,418,429,431,42,511,521,510,0,474,494,473,419,429,418,42,511,520,521,0,474,493,494,419,428,429,42,509,510,523,0,472,473,496,417,418,431,42,509,523,508,0,472,496,471,417,431,416,42,508,523,524,0,471,496,497,416,431,432,42,524,523,525,0,497,496,498,432,431,433,42,523,393,525,0,496,421,498,431,377,433,42,523,392,393,0,496,420,421,431,376,377,42,526,525,393,0,499,498,421,434,433,377,42,524,525,526,0,497,498,499,432,433,434,42,524,526,407,0,497,499,435,432,434,391,42,405,407,526,0,433,435,499,389,391,434,42,405,526,403,0,433,499,431,389,434,387,42,403,526,402,0,431,499,430,387,434,386,42,526,527,402,0,499,500,430,434,435,386,42,526,394,527,0,499,422,500,434,378,435,42,526,393,394,0,499,421,422,434,377,378,42,402,527,394,0,430,500,422,386,435,378,42,402,394,395,0,430,422,423,386,378,379,42,402,395,396,0,430,423,424,386,379,380,42,402,396,401,0,430,424,429,386,380,385,42,401,396,398,0,429,424,426,385,380,382,42,398,396,397,0,426,424,425,382,380,381,42,408,524,407,0,436,497,435,392,432,391,42,528,524,408,0,501,497,436,436,432,392,42,507,524,528,0,470,497,501,415,432,436,42,507,508,524,0,470,471,497,415,416,432,42,529,507,528,0,502,470,501,437,415,436,42,506,507,529,0,469,470,502,414,415,437,42,530,506,529,0,503,469,502,438,414,437,42,531,506,530,0,504,469,503,439,414,438,42,503,506,531,0,465,469,504,411,414,439,42,503,531,532,0,465,504,505,411,439,440,42,481,470,471,0,462,441,442,408,397,398,42,480,481,471,0,460,462,442,407,408,398,42,473,480,471,0,444,460,442,400,407,398,42,473,471,472,0,444,442,443,400,398,399,42,502,532,501,0,466,505,506,410,440,409,42,502,503,532,0,466,465,505,410,411,440,42,530,529,412,0,503,502,440,438,437,396,42,412,529,1145,0,440,502,507,396,437,441,42,529,528,1145,0,502,501,507,437,436,441,42,410,1145,528,0,438,507,501,394,441,436,42,412,1145,410,0,440,507,438,396,441,394,42,410,528,408,0,438,501,436,394,436,392,42,52,326,49,0,53,358,359,52,324,49,42,50,52,49,0,54,53,359,50,52,49,42,43,324,41,0,43,357,41,43,322,41,42,41,324,39,0,41,357,39,41,322,39,42,324,322,39,0,357,508,39,322,320,39,42,39,322,37,0,39,508,37,39,320,37,42,322,321,37,0,508,509,37,320,319,37,42,37,321,35,0,37,509,35,37,319,35,42,321,320,35,0,509,510,35,319,318,35,42,35,320,318,0,35,510,346,35,318,316,42,35,318,316,0,35,346,344,35,316,314,42,35,316,34,0,35,344,34,35,314,34,42,183,323,182,0,204,353,203,181,321,180,42,183,184,323,0,204,205,353,181,182,321,42,184,192,323,0,205,213,353,182,190,321,42,196,197,319,0,217,218,349,194,195,317,42,319,197,317,0,347,330,345,317,195,315,42,317,197,1146,0,345,330,511,315,195,442,42,197,305,1146,0,330,332,511,195,303,442,42,1146,305,313,0,511,332,341,442,303,311,42,305,312,313,0,332,340,341,303,310,311,42,305,306,312,0,332,333,340,303,304,310,42,306,311,312,0,333,339,340,304,309,310,42,306,307,311,0,333,335,339,304,305,309,42,307,309,311,0,335,337,339,305,307,309,42,311,309,310,0,339,337,338,309,307,308,42,1146,313,314,0,511,341,342,442,311,312,42,315,1146,314,0,343,511,342,313,442,312,42,317,1146,315,0,345,511,343,315,442,313,42,29,23,27,0,29,23,27,29,23,27,42,27,23,24,0,27,23,24,27,23,24,42,3,83,1,0,3,85,1,3,81,1,42,170,167,169,0,191,180,512,168,165,167,42,169,167,168,0,512,180,181,167,165,166,42,136,1147,158,0,140,513,172,134,443,156,42,136,137,1147,0,140,141,513,134,135,443,42,1147,137,148,0,513,141,514,443,135,146,42,148,137,138,0,514,141,142,146,135,136,42,148,138,139,0,153,143,144,146,136,137,42,151,1147,148,0,515,513,514,149,443,146,42,154,1147,151,0,165,513,515,152,443,149,42,156,1147,154,0,164,513,165,154,443,152,42,158,1147,156,0,172,513,164,156,443,154,42,140,141,143,0,145,146,148,138,139,141,42,56,58,57,1,516,517,518,56,444,57,42,58,56,59,1,517,516,519,444,56,445,42,59,56,60,1,519,516,520,445,56,58,42,57,333,332,1,518,521,522,57,446,330,42,58,333,57,1,517,521,518,444,446,57,42,58,334,333,1,517,523,521,444,447,446,42,58,335,334,1,517,524,523,444,448,447,42,336,335,58,1,525,524,517,449,448,444,42,337,335,336,1,526,524,525,450,448,449,42,337,338,335,1,526,527,524,450,451,448,42,337,339,338,1,526,528,527,450,452,451,42,339,337,340,1,528,526,529,452,450,453,42,340,337,341,1,529,526,530,453,450,454,42,337,336,341,1,526,525,530,450,449,454,42,341,336,342,1,530,525,531,454,449,455,42,336,58,342,1,525,517,531,449,444,455,42,342,58,59,1,531,517,519,455,444,445,42,342,59,343,1,531,519,532,455,445,456,42,343,59,344,1,532,519,533,456,445,457,42,59,60,344,1,519,520,533,445,58,457,42,344,60,345,1,533,520,519,457,58,458,42,345,60,61,1,519,520,534,458,58,59,42,345,61,346,1,519,534,517,458,59,459,42,346,61,347,1,517,534,518,459,59,331,42,411,413,412,1,535,536,537,395,460,396,42,414,413,411,1,538,536,535,461,460,395,42,414,415,413,1,538,539,536,461,462,460,42,416,415,414,1,540,539,538,463,462,461,42,416,417,415,1,540,541,539,463,464,462,42,416,418,417,1,540,542,541,463,465,464,42,416,419,418,1,540,543,542,463,466,465,42,416,420,419,1,540,544,543,463,467,466,42,421,420,416,1,545,544,540,468,467,463,42,421,422,420,1,545,546,544,468,469,467,42,423,422,421,1,547,546,545,470,469,468,42,423,424,422,1,547,548,546,470,471,469,42,425,424,423,1,549,548,547,472,471,470,42,425,426,424,1,549,550,548,472,473,471,42,427,426,425,1,551,550,549,474,473,472,42,428,426,427,1,552,550,551,475,473,474,42,428,429,426,1,552,553,550,475,476,473,42,428,430,429,1,552,554,553,475,477,476,42,431,430,428,1,555,554,552,478,477,475,42,431,432,430,1,555,556,554,478,479,477,42,433,432,431,1,557,558,559,480,479,478,42,433,434,432,1,557,560,558,480,481,479,42,434,433,435,1,560,557,561,481,480,482,42,435,433,436,1,561,557,562,482,480,483,42,433,437,436,1,557,563,562,480,484,483,42,437,433,431,1,563,557,559,484,480,478,42,431,438,437,1,559,564,563,478,485,484,42,439,438,431,1,565,564,559,486,485,478,42,440,438,439,1,566,564,565,487,485,486,42,441,438,440,1,567,564,566,488,485,487,42,437,438,441,1,563,564,567,484,485,488,42,442,437,441,1,568,563,567,489,484,488,42,442,436,437,1,568,562,563,489,483,484,42,443,436,442,1,569,562,568,490,483,489,42,443,444,436,1,569,570,562,490,491,483,42,445,444,443,1,571,570,569,492,491,490,42,445,446,444,1,571,572,570,492,493,491,42,447,446,445,1,573,572,571,494,493,492,42,446,447,448,1,572,573,574,493,494,495,42,447,449,448,1,573,575,574,494,496,495,42,447,450,449,1,573,576,575,494,497,496,42,451,450,447,1,577,576,573,498,497,494,42,452,450,451,1,578,576,577,499,497,498,42,452,453,450,1,578,579,576,499,500,497,42,452,454,453,1,578,580,579,499,501,500,42,455,454,452,1,581,580,578,502,501,499,42,454,455,456,1,580,581,582,501,502,503,42,456,455,457,1,582,581,583,503,502,504,42,455,458,457,1,581,584,583,502,505,504,42,452,458,455,1,578,584,581,499,505,502,42,458,452,451,1,584,578,577,505,499,498,42,458,451,459,1,584,577,585,505,498,506,42,451,447,459,1,577,573,585,498,494,506,42,447,445,459,1,573,571,585,494,492,506,42,458,459,445,1,584,585,571,505,506,492,42,460,458,445,1,586,584,571,507,505,492,42,457,458,460,1,583,584,586,504,505,507,42,457,460,461,1,583,586,587,504,507,508,42,460,445,461,1,586,571,587,507,492,508,42,461,445,443,1,587,571,569,508,492,490,42,461,443,462,1,587,569,588,508,490,509,42,462,443,442,1,588,569,568,509,490,489,42,462,442,463,1,588,568,589,509,489,510,42,442,441,463,1,568,567,589,489,488,510,42,463,441,440,1,589,567,566,510,488,487,42,463,440,439,1,589,566,565,510,487,486,42,463,439,464,1,589,565,590,510,486,511,42,464,439,465,1,591,592,593,511,486,512,42,439,431,465,1,592,555,593,486,478,512,42,465,431,428,1,593,555,552,512,478,475,42,465,428,427,1,593,552,551,512,475,474,42,465,427,466,1,593,551,594,512,474,513,42,466,427,425,1,594,551,549,513,474,472,42,466,425,467,1,594,549,595,513,472,514,42,467,425,423,1,595,549,547,514,472,470,42,467,423,468,1,595,547,596,514,470,515,42,468,423,421,1,596,547,545,515,470,468,42,468,421,469,1,596,545,597,515,468,516,42,421,416,469,1,545,540,597,468,463,516,42,469,416,414,1,597,540,538,516,463,461,42,469,414,411,1,597,538,598,516,461,395,42,469,411,470,1,597,535,599,516,395,397,42,332,482,481,1,522,600,601,330,517,408,42,332,483,482,1,522,602,600,330,518,517,42,333,483,332,1,521,602,522,446,518,330,42,333,484,483,1,521,603,602,446,519,518,42,333,485,484,1,521,604,603,446,520,519,42,334,485,333,1,523,604,521,447,520,446,42,335,485,334,1,524,604,523,448,520,447,42,335,486,485,1,524,605,604,448,521,520,42,335,487,486,1,524,606,605,448,522,521,42,338,487,335,1,527,606,524,451,522,448,42,338,488,487,1,527,607,606,451,523,522,42,339,488,338,1,528,607,527,452,523,451,42,339,489,488,1,528,608,607,452,524,523,42,489,339,490,1,608,528,609,524,452,525,42,490,339,340,1,609,528,529,525,452,453,42,490,340,491,1,609,529,610,525,453,526,42,491,340,492,1,610,529,611,526,453,527,42,340,493,492,1,529,612,611,453,528,527,42,340,341,493,1,529,530,612,453,454,528,42,341,343,493,1,530,532,612,454,456,528,42,341,342,343,1,530,531,532,454,455,456,42,493,343,494,1,612,532,530,528,456,529,42,494,343,495,1,530,532,531,529,456,530,42,343,345,495,1,532,519,531,456,458,530,42,343,344,345,1,532,533,519,456,457,458,42,495,345,346,1,531,519,517,530,458,459,42,496,495,346,1,525,531,517,531,530,459,42,494,495,496,1,530,531,525,529,530,531,42,494,496,497,1,530,525,526,529,531,532,42,496,498,497,1,525,524,526,531,533,532,42,498,496,346,1,524,525,517,533,531,459,42,346,499,498,1,517,523,524,459,534,533,42,346,500,499,1,517,521,523,459,535,534,42,346,347,500,1,517,518,521,459,331,535,42,347,501,500,1,518,522,521,331,409,535,42,531,533,532,1,613,614,615,439,536,440,42,530,533,531,1,616,614,617,438,536,439,42,530,534,533,1,616,618,614,438,537,536,42,413,534,530,1,536,618,616,460,537,438,42,413,415,534,1,536,539,618,460,462,537,42,415,535,534,1,539,619,618,462,538,537,42,415,536,535,1,539,620,619,462,539,538,42,415,537,536,1,539,621,620,462,540,539,42,417,537,415,1,541,621,539,464,540,462,42,417,538,537,1,541,622,621,464,541,540,42,418,538,417,1,542,622,541,465,541,464,42,539,538,418,1,623,622,542,542,541,465,42,539,540,538,1,623,624,622,542,543,541,42,541,540,539,1,625,624,623,544,543,542,42,541,542,540,1,625,626,624,544,545,543,42,543,542,541,1,627,626,625,546,545,544,42,543,544,542,1,627,628,626,546,547,545,42,543,545,544,1,627,629,628,546,548,547,42,543,546,545,1,627,630,629,546,549,548,42,547,546,543,1,631,630,627,550,549,546,42,547,548,546,1,631,632,630,550,551,549,42,549,548,547,1,633,632,631,552,551,550,42,550,548,549,1,634,632,633,553,551,552,42,550,551,548,1,634,635,632,553,554,551,42,550,552,551,1,634,636,635,553,555,554,42,553,552,550,1,637,636,634,556,555,553,42,553,554,552,1,637,638,636,556,557,555,42,555,554,553,1,639,638,637,558,557,556,42,555,556,554,1,639,640,638,558,559,557,42,555,557,556,1,639,641,640,558,560,559,42,558,557,555,1,642,641,639,561,560,558,42,559,558,555,1,643,642,639,562,561,558,42,559,555,560,1,643,639,644,562,558,563,42,560,555,561,1,644,639,645,563,558,564,42,555,553,561,1,639,637,645,558,556,564,42,561,553,562,1,645,637,646,564,556,565,42,562,553,563,1,646,637,647,565,556,566,42,553,549,563,1,637,633,647,556,552,566,42,549,553,550,1,633,637,634,552,556,553,42,563,549,564,1,647,633,648,566,552,567,42,549,565,564,1,633,649,648,552,568,567,42,549,547,565,1,633,631,649,552,550,568,42,547,541,565,1,631,625,649,550,544,568,42,547,543,541,1,631,627,625,550,546,544,42,565,541,539,1,649,625,623,568,544,542,42,565,539,566,1,649,623,650,568,542,569,42,566,539,418,1,650,623,542,569,542,465,42,419,566,418,1,543,650,542,466,569,465,42,419,567,566,1,543,651,650,466,570,569,42,420,567,419,1,544,651,543,467,570,466,42,422,567,420,1,546,651,544,469,570,467,42,422,568,567,1,546,652,651,469,571,570,42,424,568,422,1,548,652,546,471,571,469,42,424,569,568,1,548,653,652,471,572,571,42,426,569,424,1,550,653,548,473,572,471,42,426,570,569,1,550,654,653,473,573,572,42,426,429,570,1,550,553,654,473,476,573,42,429,571,570,1,553,655,654,476,574,573,42,572,571,429,1,656,655,553,575,574,476,42,572,573,571,1,656,657,655,575,576,574,42,572,574,573,1,656,658,657,575,577,576,42,572,575,574,1,656,659,658,575,578,577,42,576,575,572,1,660,659,656,579,578,575,42,576,577,575,1,660,661,659,579,580,578,42,578,577,576,1,662,661,660,581,580,579,42,578,579,577,1,662,663,661,581,582,580,42,578,580,579,1,662,664,663,581,583,582,42,581,580,578,1,665,664,662,584,583,581,42,581,582,580,1,665,666,664,584,585,583,42,583,582,581,1,667,666,665,586,585,584,42,583,584,582,1,667,668,666,586,587,585,42,585,584,583,1,669,668,667,588,587,586,42,585,583,488,1,669,667,607,588,586,523,42,488,583,586,1,607,667,670,523,586,589,42,586,583,587,1,670,667,671,589,586,590,42,587,583,581,1,671,667,665,590,586,584,42,587,581,588,1,671,665,672,590,584,591,42,588,581,589,1,672,665,673,591,584,592,42,589,581,576,1,673,665,660,592,584,579,42,581,578,576,1,665,662,660,584,581,579,42,589,576,430,1,673,660,554,592,579,477,42,430,576,572,1,554,660,656,477,579,575,42,430,572,429,1,554,656,553,477,575,476,42,590,589,430,1,674,673,554,593,592,477,42,590,588,589,1,674,672,673,593,591,592,42,448,588,590,1,574,675,676,495,591,593,42,448,449,588,1,574,575,675,495,496,591,42,449,591,588,1,575,677,675,496,594,591,42,449,592,591,1,575,678,677,496,595,594,42,450,592,449,1,576,678,575,497,595,496,42,450,593,592,1,576,679,678,497,596,595,42,453,593,450,1,579,679,576,500,596,497,42,453,594,593,1,579,680,679,500,597,596,42,454,594,453,1,580,680,579,501,597,500,42,594,454,586,1,680,580,681,597,501,589,42,454,456,586,1,580,582,681,501,503,589,42,488,586,456,1,607,670,682,523,589,503,42,488,456,487,1,607,682,606,523,503,522,42,456,457,487,1,582,583,683,503,504,522,42,487,457,595,1,683,583,684,522,504,598,42,457,461,595,1,583,587,684,504,508,598,42,461,462,595,1,587,588,684,508,509,598,42,487,595,462,1,683,684,588,522,598,509,42,487,462,486,1,683,588,685,522,509,521,42,486,462,463,1,685,588,589,521,509,510,42,486,463,464,1,685,589,590,521,510,511,42,486,464,485,1,605,591,604,521,511,520,42,485,464,596,1,604,591,686,520,511,599,42,464,465,596,1,591,593,686,511,512,599,42,596,465,466,1,686,593,594,599,512,513,42,596,466,482,1,686,594,600,599,513,517,42,482,466,597,1,600,594,687,517,513,600,42,466,467,597,1,594,595,687,513,514,600,42,597,467,468,1,687,595,596,600,514,515,42,597,468,469,1,687,596,597,600,515,516,42,481,597,469,1,688,687,597,408,600,516,42,482,597,481,1,600,687,689,517,600,408,42,481,469,470,1,688,597,690,408,516,397,42,483,596,482,1,602,686,600,518,599,517,42,483,484,596,1,602,603,686,518,519,599,42,484,485,596,1,603,604,686,519,520,599,42,594,586,598,1,680,681,691,597,589,601,42,586,599,598,1,681,692,691,589,602,601,42,586,587,599,1,681,693,692,589,590,602,42,587,591,599,1,693,677,692,590,594,602,42,587,588,591,1,693,675,677,590,591,594,42,599,591,592,1,692,677,678,602,594,595,42,598,599,592,1,691,692,678,601,602,595,42,598,592,593,1,691,678,679,601,595,596,42,594,598,593,1,680,691,679,597,601,596,42,448,590,600,1,574,676,694,495,593,603,42,590,432,600,1,676,558,694,593,479,603,42,590,430,432,1,674,554,556,593,477,479,42,600,432,601,1,694,558,695,603,479,604,42,601,432,434,1,695,558,560,604,479,481,42,434,600,601,1,560,694,695,481,603,604,42,600,434,602,1,694,560,696,603,481,605,42,602,434,444,1,696,560,570,605,481,491,42,444,434,435,1,570,560,561,491,481,482,42,444,435,436,1,570,561,562,491,482,483,42,446,602,444,1,572,696,570,493,605,491,42,448,602,446,1,574,696,572,495,605,493,42,448,600,602,1,574,694,696,495,603,605,42,489,585,488,1,608,669,607,524,588,523,42,584,603,582,1,668,697,666,587,606,585,42,582,603,604,1,666,697,698,585,606,607,42,603,605,604,1,697,699,698,606,608,607,42,603,606,605,1,697,700,699,606,609,608,42,607,605,606,1,701,699,700,610,608,609,42,607,608,605,1,701,702,699,610,611,608,42,607,609,608,1,701,703,702,610,612,611,42,607,610,609,1,701,704,703,610,613,612,42,611,610,607,1,705,704,701,614,613,610,42,606,611,607,1,700,705,701,609,614,610,42,610,612,609,1,704,706,703,613,615,612,42,610,613,612,1,704,707,706,613,616,615,42,613,614,612,1,707,708,706,616,617,615,42,612,614,615,1,706,708,709,615,617,618,42,615,614,616,1,709,708,710,618,617,619,42,614,617,616,1,708,711,710,617,620,619,42,618,616,617,1,712,710,711,621,619,620,42,618,619,616,1,712,713,710,621,622,619,42,620,619,618,1,714,713,712,623,622,621,42,620,621,619,1,714,715,713,623,624,622,42,622,621,620,1,716,715,714,625,624,623,42,622,623,621,1,716,717,715,625,626,624,42,624,623,622,1,718,717,716,627,626,625,42,624,625,623,1,718,719,717,627,628,626,42,624,626,625,1,718,720,719,627,629,628,42,627,626,624,1,721,720,718,630,629,627,42,627,628,626,1,721,722,720,630,631,629,42,629,628,627,1,723,722,721,632,631,630,42,629,630,628,1,723,724,722,632,633,631,42,631,630,629,1,694,558,676,634,633,632,42,631,632,630,1,694,695,558,634,635,633,42,631,633,632,1,694,560,695,634,636,635,42,631,634,633,1,694,696,560,634,637,636,42,635,634,631,1,574,696,694,638,637,634,42,636,634,635,1,572,696,574,639,637,638,42,636,637,634,1,572,570,696,639,640,637,42,638,637,636,1,571,570,572,641,640,639,42,638,639,637,1,571,569,570,641,642,640,42,640,639,638,1,587,569,571,643,642,641,42,641,639,640,1,588,569,587,644,642,643,42,639,641,642,1,569,588,568,642,644,645,42,641,643,642,1,588,589,568,644,646,645,42,644,643,641,1,685,589,588,647,646,644,42,644,645,643,1,685,590,589,647,648,646,42,644,646,645,1,725,726,727,647,649,648,42,498,646,644,1,524,604,605,533,649,647,42,498,499,646,1,524,523,604,533,534,649,42,499,500,646,1,523,521,604,534,535,649,42,500,647,646,1,521,603,604,535,650,649,42,500,648,647,1,521,602,603,535,651,650,42,500,501,648,1,521,522,602,535,409,651,42,501,649,648,1,728,729,730,409,652,651,42,501,532,649,1,728,615,729,409,440,652,42,649,532,650,1,729,615,731,652,440,653,42,532,533,650,1,615,614,731,440,536,653,42,533,651,650,1,614,732,731,536,654,653,42,533,652,651,1,614,733,732,536,655,654,42,535,652,533,1,619,733,614,538,655,536,42,535,653,652,1,619,734,733,538,656,655,42,535,654,653,1,619,735,734,538,657,656,42,655,654,535,1,736,735,619,658,657,538,42,654,655,656,1,735,736,737,657,658,659,42,656,655,657,1,737,736,738,659,658,660,42,657,655,658,1,738,736,739,660,658,661,42,658,655,536,1,739,736,620,661,658,539,42,536,655,535,1,620,736,619,539,658,538,42,537,658,536,1,621,739,620,540,661,539,42,537,659,658,1,621,740,739,540,662,661,42,538,659,537,1,622,740,621,541,662,540,42,660,659,538,1,741,740,622,663,662,541,42,660,658,659,1,741,739,740,663,661,662,42,661,658,660,1,742,739,741,664,661,663,42,658,661,657,1,739,742,738,661,664,660,42,544,657,661,1,628,738,742,547,660,664,42,662,657,544,1,743,738,628,665,660,547,42,656,657,662,1,737,738,743,659,660,665,42,663,656,662,1,744,737,743,666,659,665,42,664,656,663,1,745,737,744,667,659,666,42,654,656,664,1,735,737,745,657,659,667,42,653,654,664,1,734,735,745,656,657,667,42,665,653,664,1,746,734,745,668,656,667,42,653,665,652,1,734,746,733,656,668,655,42,652,665,666,1,733,746,747,655,668,669,42,666,665,667,1,747,746,748,669,668,670,42,667,665,668,1,748,746,749,670,668,671,42,665,664,668,1,746,745,749,668,667,671,42,668,664,669,1,749,745,750,671,667,672,42,669,664,663,1,750,745,744,672,667,666,42,670,669,663,1,751,750,744,673,672,666,42,671,669,670,1,752,750,751,674,672,673,42,672,669,671,1,753,750,752,675,672,674,42,672,673,669,1,753,754,750,675,676,672,42,674,673,672,1,755,754,753,677,676,675,42,675,673,674,1,756,754,755,678,676,677,42,675,676,673,1,756,757,754,678,679,676,42,677,676,675,1,758,757,756,680,679,678,42,677,667,676,1,758,748,757,680,670,679,42,678,667,677,1,759,748,758,681,670,680,42,678,666,667,1,759,747,748,681,669,670,42,666,678,679,1,747,759,760,669,681,682,42,679,678,680,1,760,759,761,682,681,683,42,680,678,681,1,761,759,762,683,681,684,42,681,678,677,1,762,759,758,684,681,680,42,682,681,677,1,763,762,758,685,684,680,42,683,681,682,1,764,762,763,686,684,685,42,683,680,681,1,764,761,762,686,683,684,42,684,680,683,1,765,761,764,687,683,686,42,684,649,680,1,765,729,761,687,652,683,42,648,649,684,1,730,729,765,651,652,687,42,647,648,684,1,766,730,765,650,651,687,42,646,647,684,1,726,766,765,649,650,687,42,684,645,646,1,765,727,726,687,648,649,42,684,683,645,1,765,764,727,687,686,648,42,645,683,685,1,727,764,767,648,686,688,42,685,683,686,1,767,764,768,688,686,689,42,686,683,682,1,768,764,763,689,686,685,42,686,682,628,1,768,763,722,689,685,631,42,682,687,628,1,763,769,722,685,690,631,42,682,677,687,1,763,758,769,685,680,690,42,677,675,687,1,758,756,769,680,678,690,42,687,675,688,1,769,756,770,690,678,691,42,675,674,688,1,756,755,770,678,677,691,42,688,674,689,1,770,755,771,691,677,692,42,689,674,690,1,771,755,772,692,677,693,42,690,674,672,1,772,755,753,693,677,675,42,690,672,691,1,772,753,773,693,675,694,42,691,672,671,1,773,753,752,694,675,674,42,691,671,692,1,773,752,774,694,674,695,42,692,671,693,1,774,752,775,695,674,696,42,693,671,670,1,775,752,751,696,674,673,42,693,670,694,1,775,751,776,696,673,697,42,670,663,694,1,751,744,776,673,666,697,42,694,663,662,1,776,744,743,697,666,665,42,694,662,545,1,776,743,629,697,665,548,42,545,662,544,1,629,743,628,548,665,547,42,695,694,545,1,777,776,629,698,697,548,42,695,696,694,1,777,778,776,698,699,697,42,695,697,696,1,777,779,778,698,700,699,42,695,698,697,1,777,780,779,698,701,700,42,699,698,695,1,781,780,777,702,701,698,42,700,698,699,1,782,780,781,703,701,702,42,700,697,698,1,782,779,780,703,700,701,42,701,697,700,1,783,779,782,704,700,703,42,701,702,697,1,783,784,779,704,705,700,42,703,702,701,1,785,784,783,706,705,704,42,704,702,703,1,786,784,785,707,705,706,42,693,702,704,1,775,784,786,696,705,707,42,696,702,693,1,778,784,775,699,705,696,42,697,702,696,1,779,784,778,700,705,699,42,693,694,696,1,775,776,778,696,697,699,42,705,693,704,1,787,775,786,708,696,707,42,705,692,693,1,787,774,775,708,695,696,42,706,692,705,1,788,774,787,709,695,708,42,706,691,692,1,788,773,774,709,694,695,42,690,691,706,1,772,773,788,693,694,709,42,707,690,706,1,789,772,788,710,693,709,42,707,708,690,1,789,790,772,710,711,693,42,709,708,707,1,791,790,789,712,711,710,42,708,709,710,1,790,791,792,711,712,713,42,711,710,709,1,793,792,791,714,713,712,42,712,710,711,1,794,792,793,715,713,714,42,712,713,710,1,794,795,792,715,716,713,42,714,713,712,1,796,795,794,717,716,715,42,714,715,713,1,796,797,795,717,718,716,42,716,715,714,1,798,797,796,719,718,717,42,717,715,716,1,799,797,798,720,718,719,42,717,718,715,1,799,800,797,720,721,718,42,717,719,718,1,799,801,800,720,722,721,42,720,719,717,1,802,801,799,723,722,720,42,720,721,719,1,802,803,801,723,724,722,42,722,721,720,1,804,803,802,725,724,723,42,722,723,721,1,804,805,803,725,726,724,42,724,723,722,1,806,805,804,727,726,725,42,725,723,724,1,807,805,806,728,726,727,42,726,723,725,1,808,805,807,729,726,728,42,726,727,723,1,808,809,805,729,730,726,42,728,727,726,1,810,809,808,731,730,729,42,729,727,728,1,811,809,810,732,730,731,42,730,727,729,1,812,809,811,733,730,732,42,730,731,727,1,812,813,809,733,734,730,42,730,732,731,1,812,814,813,733,735,734,42,733,732,730,1,815,814,812,736,735,733,42,733,734,732,1,815,816,814,736,737,735,42,733,688,734,1,815,770,816,736,691,737,42,733,687,688,1,815,769,770,736,690,691,42,628,687,733,1,722,769,815,631,690,736,42,628,733,626,1,722,815,720,631,736,629,42,626,733,730,1,720,815,812,629,736,733,42,626,730,735,1,720,812,817,629,733,738,42,735,730,736,1,817,812,818,738,733,739,42,736,730,729,1,818,812,811,739,733,732,42,736,729,737,1,818,811,819,739,732,740,42,737,729,728,1,819,811,810,740,732,731,42,737,728,738,1,819,810,820,740,731,741,42,738,728,739,1,820,810,821,741,731,742,42,728,726,739,1,810,808,821,731,729,742,42,739,726,740,1,821,808,822,742,729,743,42,740,726,741,1,822,808,823,743,729,744,42,726,725,741,1,808,807,823,729,728,744,42,741,725,742,1,823,807,824,744,728,745,42,742,725,724,1,824,807,806,745,728,727,42,743,742,724,1,825,824,806,746,745,727,42,744,742,743,1,826,824,825,747,745,746,42,744,745,742,1,826,827,824,747,748,745,42,746,745,744,1,828,827,826,749,748,747,42,746,747,745,1,828,829,827,749,750,748,42,748,747,746,1,830,829,828,751,750,749,42,748,749,747,1,830,831,829,751,752,750,42,748,750,749,1,830,832,831,751,753,752,42,751,750,748,1,833,832,830,754,753,751,42,751,752,750,1,833,834,832,754,755,753,42,751,753,752,1,833,835,834,754,756,755,42,754,753,751,1,836,835,833,757,756,754,42,754,755,753,1,836,837,835,757,758,756,42,756,755,754,1,838,837,836,759,758,757,42,756,757,755,1,838,839,837,759,760,758,42,758,757,756,1,840,839,838,761,760,759,42,759,757,758,1,841,839,840,762,760,761,42,759,760,757,1,841,842,839,762,763,760,42,761,760,759,1,843,842,841,764,763,762,42,761,762,760,1,843,844,842,764,765,763,42,763,762,761,1,845,844,843,766,765,764,42,763,764,762,1,845,846,844,766,767,765,42,765,764,763,1,847,846,845,768,767,766,42,766,764,765,1,848,846,847,769,767,768,42,766,767,764,1,848,849,846,769,770,767,42,768,767,766,1,850,849,848,771,770,769,42,768,738,767,1,850,820,849,771,741,770,42,769,738,768,1,851,820,850,772,741,771,42,737,738,769,1,819,820,851,740,741,772,42,770,737,769,1,852,819,851,773,740,772,42,736,737,770,1,818,819,852,739,740,773,42,771,736,770,1,853,818,852,774,739,773,42,771,735,736,1,853,817,818,774,738,739,42,625,735,771,1,719,817,853,628,738,774,42,625,626,735,1,719,720,817,628,629,738,42,625,771,623,1,719,853,717,628,774,626,42,623,771,772,1,717,853,854,626,774,775,42,771,770,772,1,853,852,854,774,773,775,42,772,770,768,1,854,852,850,775,773,771,42,770,769,768,1,852,851,850,773,772,771,42,772,768,773,1,854,850,855,775,771,776,42,773,768,766,1,855,850,848,776,771,769,42,773,766,765,1,855,848,847,776,769,768,42,773,765,774,1,855,847,856,776,768,777,42,774,765,763,1,856,847,845,777,768,766,42,774,763,775,1,856,845,857,777,766,778,42,775,763,776,1,857,845,858,778,766,779,42,776,763,761,1,858,845,843,779,766,764,42,776,761,777,1,858,843,859,779,764,780,42,777,761,778,1,859,843,860,780,764,781,42,761,779,778,1,843,861,860,764,782,781,42,780,779,761,1,862,861,843,783,782,764,42,781,779,780,1,863,861,862,784,782,783,42,782,779,781,1,864,861,863,785,782,784,42,778,779,782,1,860,861,864,781,782,785,42,778,782,783,1,860,864,865,781,785,786,42,783,782,784,1,865,864,866,786,785,787,42,784,782,785,1,866,864,867,787,785,788,42,785,782,781,1,867,864,863,788,785,784,42,781,786,785,1,863,868,867,784,789,788,42,781,780,786,1,863,862,868,784,783,789,42,780,787,786,1,862,869,868,783,790,789,42,780,758,787,1,862,840,869,783,761,790,42,759,758,780,1,841,840,862,762,761,783,42,761,759,780,1,843,841,862,764,762,783,42,787,758,756,1,869,840,838,790,761,759,42,787,756,788,1,869,838,870,790,759,791,42,756,789,788,1,838,871,870,759,792,791,42,754,789,756,1,836,871,838,757,792,759,42,790,789,754,1,872,871,836,793,792,757,42,788,789,790,1,870,871,872,791,792,793,42,791,788,790,1,873,870,872,794,791,793,42,792,788,791,1,874,870,873,795,791,794,42,792,787,788,1,874,869,870,795,790,791,42,793,787,792,1,875,869,874,796,790,795,42,786,787,793,1,868,869,875,789,790,796,42,785,786,793,1,867,868,875,788,789,796,42,785,793,794,1,867,875,876,788,796,797,42,793,795,794,1,875,877,876,796,798,797,42,793,792,795,1,875,874,877,796,795,798,42,791,795,792,1,873,877,874,794,798,795,42,796,795,791,1,878,877,873,799,798,794,42,796,797,795,1,878,879,877,799,800,798,42,796,798,797,1,878,880,879,799,801,800,42,799,798,796,1,881,880,878,802,801,799,42,799,800,798,1,881,882,880,802,803,801,42,799,801,800,1,881,883,882,802,804,803,42,802,801,799,1,884,883,881,805,804,802,42,802,744,801,1,884,826,883,805,747,804,42,802,746,744,1,884,828,826,805,749,747,42,790,746,802,1,872,828,884,793,749,805,42,748,746,790,1,830,828,872,751,749,793,42,754,748,790,1,836,830,872,757,751,793,42,754,751,748,1,836,833,830,757,754,751,42,791,790,802,1,873,872,884,794,793,805,42,802,796,791,1,884,878,873,805,799,794,42,802,799,796,1,884,881,878,805,802,799,42,801,744,743,1,883,826,825,804,747,746,42,801,743,800,1,883,825,882,804,746,803,42,800,743,803,1,882,825,885,803,746,806,42,743,724,803,1,825,806,885,746,727,806,42,803,724,722,1,885,806,804,806,727,725,42,803,722,804,1,885,804,886,806,725,807,42,804,722,805,1,886,804,887,807,725,808,42,722,720,805,1,804,802,887,725,723,808,42,805,720,806,1,887,802,888,808,723,809,42,720,717,806,1,802,799,888,723,720,809,42,806,717,716,1,888,799,798,809,720,719,42,807,806,716,1,889,888,798,810,809,719,42,805,806,807,1,887,888,889,808,809,810,42,808,805,807,1,890,887,889,811,808,810,42,809,805,808,1,891,887,890,812,808,811,42,809,804,805,1,891,886,887,812,807,808,42,797,804,809,1,879,886,891,800,807,812,42,797,810,804,1,879,892,886,800,813,807,42,798,810,797,1,880,892,879,801,813,800,42,798,800,810,1,880,882,892,801,803,813,42,800,803,810,1,882,885,892,803,806,813,42,810,803,804,1,892,885,886,813,806,807,42,795,797,809,1,877,879,891,798,800,812,42,795,809,811,1,877,891,893,798,812,814,42,811,809,808,1,893,891,890,814,812,811,42,811,808,812,1,893,890,894,814,811,815,42,808,813,812,1,890,895,894,811,816,815,42,808,807,813,1,890,889,895,811,810,816,42,807,814,813,1,889,896,895,810,817,816,42,815,814,807,1,897,896,889,818,817,810,42,816,814,815,1,898,896,897,819,817,818,42,816,817,814,1,898,899,896,819,820,817,42,816,818,817,1,898,900,899,819,821,820,42,819,818,816,1,901,900,898,822,821,819,42,714,818,819,1,796,900,901,717,821,822,42,714,820,818,1,796,902,900,717,823,821,42,821,820,714,1,903,902,796,824,823,717,42,821,822,820,1,903,904,902,824,825,823,42,823,822,821,1,905,904,903,826,825,824,42,823,824,822,1,905,906,904,826,827,825,42,823,825,824,1,905,907,906,826,828,827,42,826,825,823,1,908,907,905,829,828,826,42,826,827,825,1,908,909,907,829,830,828,42,828,827,826,1,910,909,908,831,830,829,42,827,828,829,1,909,910,911,830,831,832,42,829,828,830,1,911,910,912,832,831,833,42,830,828,826,1,912,910,908,833,831,829,42,830,826,831,1,912,908,913,833,829,834,42,832,831,826,1,914,913,908,835,834,829,42,833,831,832,1,915,913,914,836,834,835,42,830,831,833,1,912,913,915,833,834,836,42,833,834,830,1,915,916,912,836,837,833,42,835,834,833,1,917,916,915,838,837,836,42,836,834,835,1,918,916,917,839,837,838,42,836,830,834,1,918,912,916,839,833,837,42,836,837,830,1,918,919,912,839,840,833,42,838,837,836,1,920,919,918,841,840,839,42,838,829,837,1,920,911,919,841,832,840,42,838,839,829,1,920,921,911,841,842,832,42,840,839,838,1,922,921,920,843,842,841,42,840,841,839,1,922,923,921,843,844,842,42,813,841,840,1,895,923,922,816,844,843,42,813,842,841,1,895,924,923,816,845,844,42,814,842,813,1,896,924,895,817,845,816,42,814,843,842,1,896,925,924,817,846,845,42,817,843,814,1,899,925,896,820,846,817,42,818,843,817,1,900,925,899,821,846,820,42,818,820,843,1,900,902,925,821,823,846,42,820,844,843,1,902,926,925,823,847,846,42,822,844,820,1,904,926,902,825,847,823,42,824,844,822,1,906,926,904,827,847,825,42,827,844,824,1,909,926,906,830,847,827,42,843,844,827,1,925,926,909,846,847,830,42,843,827,845,1,925,909,927,846,830,848,42,845,827,829,1,927,909,911,848,830,832,42,845,829,839,1,927,911,921,848,832,842,42,841,845,839,1,923,927,921,844,848,842,42,842,845,841,1,924,927,923,845,848,844,42,843,845,842,1,925,927,924,846,848,845,42,824,825,827,1,906,907,909,827,828,830,42,846,813,840,1,928,895,922,849,816,843,42,812,813,846,1,894,895,928,815,816,849,42,847,812,846,1,929,894,928,850,815,849,42,811,812,847,1,893,894,929,814,815,850,42,794,811,847,1,876,893,929,797,814,850,42,794,795,811,1,876,877,893,797,798,814,42,794,847,848,1,876,929,930,797,850,851,42,848,847,849,1,930,929,931,851,850,852,42,849,847,850,1,931,929,932,852,850,853,42,847,846,850,1,929,928,932,850,849,853,42,850,846,851,1,932,928,933,853,849,854,42,851,846,840,1,933,928,922,854,849,843,42,851,840,852,1,933,922,934,854,843,855,42,852,840,838,1,934,922,920,855,843,841,42,853,852,838,1,935,934,920,856,855,841,42,851,852,853,1,933,934,935,854,855,856,42,851,853,854,1,933,935,936,854,856,857,42,854,853,855,1,936,935,937,857,856,858,42,853,856,855,1,935,938,937,856,859,858,42,853,857,856,1,935,939,938,856,860,859,42,853,838,857,1,935,920,939,856,841,860,42,857,838,836,1,939,920,918,860,841,839,42,858,857,836,1,940,939,918,861,860,839,42,856,857,858,1,938,939,940,859,860,861,42,859,856,858,1,941,938,940,862,859,861,42,855,856,859,1,937,938,941,858,859,862,42,860,855,859,1,942,937,941,863,858,862,42,855,860,861,1,937,942,943,858,863,864,42,861,860,862,1,943,942,944,864,863,865,42,862,860,863,1,944,942,945,865,863,866,42,863,860,864,1,945,942,946,866,863,867,42,864,860,865,1,946,942,947,867,863,868,42,860,859,865,1,942,941,947,863,862,868,42,859,858,865,1,941,940,947,862,861,868,42,865,858,835,1,947,940,917,868,861,838,42,858,836,835,1,940,918,917,861,839,838,42,866,865,835,1,948,947,917,869,868,838,42,867,865,866,1,949,947,948,870,868,869,42,867,868,865,1,949,950,947,870,871,868,42,869,868,867,1,951,950,949,872,871,870,42,869,870,868,1,951,952,950,872,873,871,42,871,870,869,1,953,952,951,874,873,872,42,871,863,870,1,953,945,952,874,866,873,42,862,863,871,1,944,945,953,865,866,874,42,861,862,871,1,943,944,953,864,865,874,42,872,861,871,1,954,943,953,875,864,874,42,873,861,872,1,955,943,954,876,864,875,42,874,861,873,1,956,943,955,877,864,876,42,874,855,861,1,956,937,943,877,858,864,42,875,855,874,1,957,937,956,878,858,877,42,854,855,875,1,936,937,957,857,858,878,42,876,854,875,1,958,936,957,879,857,878,42,877,854,876,1,959,936,958,880,857,879,42,877,851,854,1,959,933,936,880,854,857,42,878,851,877,1,960,933,959,881,854,880,42,878,850,851,1,960,932,933,881,853,854,42,879,850,878,1,961,932,960,882,853,881,42,879,849,850,1,961,931,932,882,852,853,42,880,849,879,1,962,931,961,883,852,882,42,880,784,849,1,962,866,931,883,787,852,42,783,784,880,1,865,866,962,786,787,883,42,881,783,880,1,963,865,962,884,786,883,42,881,777,783,1,963,859,865,884,780,786,42,882,777,881,1,964,859,963,885,780,884,42,882,776,777,1,964,858,859,885,779,780,42,883,776,882,1,965,858,964,886,779,885,42,883,775,776,1,965,857,858,886,778,779,42,884,775,883,1,966,857,965,887,778,886,42,884,885,775,1,966,967,857,887,888,778,42,886,885,884,1,968,967,966,889,888,887,42,886,887,885,1,968,969,967,889,890,888,42,888,887,886,1,970,969,968,891,890,889,42,619,887,888,1,713,969,970,622,890,891,42,619,889,887,1,713,971,969,622,892,890,42,621,889,619,1,715,971,713,624,892,622,42,621,890,889,1,715,972,971,624,893,892,42,621,772,890,1,715,854,972,624,775,893,42,621,623,772,1,715,717,854,624,626,775,42,772,773,890,1,854,855,972,775,776,893,42,890,773,774,1,972,855,856,893,776,777,42,890,774,891,1,972,856,973,893,777,894,42,891,774,885,1,973,856,967,894,777,888,42,774,775,885,1,856,857,967,777,778,888,42,891,885,887,1,973,967,969,894,888,890,42,889,891,887,1,971,973,969,892,894,890,42,890,891,889,1,972,973,971,893,894,892,42,619,888,616,1,713,970,710,622,891,619,42,615,616,888,1,709,710,970,618,619,891,42,612,615,888,1,706,709,970,615,618,891,42,612,888,892,1,706,970,974,615,891,895,42,892,888,886,1,974,970,968,895,891,889,42,892,886,893,1,974,968,975,895,889,896,42,893,886,894,1,975,968,976,896,889,897,42,886,884,894,1,968,966,976,889,887,897,42,894,884,883,1,976,966,965,897,887,886,42,894,883,882,1,976,965,964,897,886,885,42,894,882,895,1,976,964,977,897,885,898,42,895,882,881,1,977,964,963,898,885,884,42,895,881,896,1,977,963,978,898,884,899,42,896,881,897,1,978,963,979,899,884,900,42,881,880,897,1,963,962,979,884,883,900,42,897,880,879,1,979,962,961,900,883,882,42,898,897,879,1,980,979,961,901,900,882,42,899,897,898,1,981,979,980,902,900,901,42,896,897,899,1,978,979,981,899,900,902,42,895,896,899,1,977,978,981,898,899,902,42,900,895,899,1,982,977,981,903,898,902,42,894,895,900,1,976,977,982,897,898,903,42,894,900,901,1,976,982,983,897,903,904,42,901,900,902,1,983,982,984,904,903,905,42,900,903,902,1,982,985,984,903,906,905,42,900,899,903,1,982,981,985,903,902,906,42,899,904,903,1,981,986,985,902,907,906,42,899,898,904,1,981,980,986,902,901,907,42,904,898,905,1,986,980,987,907,901,908,42,898,906,905,1,980,988,987,901,909,908,42,898,879,906,1,980,961,988,901,882,909,42,879,877,906,1,961,959,988,882,880,909,42,879,878,877,1,961,960,959,882,881,880,42,906,877,876,1,988,959,958,909,880,879,42,906,876,907,1,988,958,989,909,879,910,42,907,876,908,1,989,958,990,910,879,911,42,908,876,909,1,990,958,991,911,879,912,42,876,875,909,1,958,957,991,879,878,912,42,909,875,874,1,991,957,956,912,878,877,42,909,874,910,1,991,956,992,912,877,913,42,910,874,873,1,992,956,955,913,877,876,42,910,873,911,1,992,955,993,913,876,914,42,911,873,912,1,993,955,994,914,876,915,42,912,873,913,1,994,955,995,915,876,916,42,873,872,913,1,955,954,995,876,875,916,42,913,872,914,1,995,954,996,916,875,917,42,872,871,914,1,954,953,996,875,874,917,42,914,871,915,1,996,953,997,917,874,918,42,871,869,915,1,953,951,997,874,872,918,42,869,916,915,1,951,998,997,872,919,918,42,869,917,916,1,951,999,998,872,920,919,42,869,918,917,1,951,1000,999,872,921,920,42,869,867,918,1,951,949,1000,872,870,921,42,867,919,918,1,949,1001,1000,870,922,921,42,867,866,919,1,949,948,1001,870,869,922,42,919,866,920,1,1001,948,1002,922,869,923,42,866,835,920,1,948,917,1002,869,838,923,42,920,835,921,1,1002,917,1003,923,838,924,42,921,835,833,1,1003,917,915,924,838,836,42,921,833,922,1,1003,915,1004,924,836,925,42,922,833,923,1,1004,915,1005,925,836,926,42,923,833,832,1,1005,915,914,926,836,835,42,923,832,924,1,1005,914,1006,926,835,927,42,924,832,925,1,1006,914,1007,927,835,928,42,925,832,926,1,1007,914,1008,928,835,929,42,927,926,832,1,1009,1008,914,930,929,835,42,928,926,927,1,1010,1008,1009,931,929,930,42,928,929,926,1,1010,1011,1008,931,932,929,42,928,711,929,1,1010,793,1011,931,714,932,42,928,712,711,1,1010,794,793,931,715,714,42,821,712,928,1,903,794,1010,824,715,931,42,714,712,821,1,796,794,903,717,715,824,42,823,821,928,1,905,903,1010,826,824,931,42,928,927,823,1,1010,1009,905,931,930,826,42,823,927,826,1,905,1009,908,826,930,829,42,832,826,927,1,914,908,1009,835,829,930,42,929,711,930,1,1011,793,1012,932,714,933,42,709,930,711,1,791,1012,793,712,933,714,42,930,709,931,1,1012,791,1013,933,712,934,42,931,709,932,1,1013,791,1014,934,712,935,42,707,932,709,1,789,1014,791,710,935,712,42,932,707,933,1,1014,789,1015,935,710,936,42,934,933,707,1,1016,1015,789,937,936,710,42,935,933,934,1,1017,1015,1016,938,936,937,42,935,936,933,1,1017,1018,1015,938,939,936,42,937,936,935,1,1019,1018,1017,940,939,938,42,937,931,936,1,1019,1013,1018,940,934,939,42,938,931,937,1,1020,1013,1019,941,934,940,42,939,931,938,1,1021,1013,1020,942,934,941,42,939,930,931,1,1021,1012,1013,942,933,934,42,940,930,939,1,1022,1012,1021,943,933,942,42,940,929,930,1,1022,1011,1012,943,932,933,42,926,929,940,1,1008,1011,1022,929,932,943,42,925,926,940,1,1007,1008,1022,928,929,943,42,925,940,941,1,1007,1022,1023,928,943,944,42,941,940,939,1,1023,1022,1021,944,943,942,42,941,939,942,1,1023,1021,1024,944,942,945,42,939,938,942,1,1021,1020,1024,942,941,945,42,942,938,943,1,1024,1020,1025,945,941,946,42,943,938,944,1,1025,1020,1026,946,941,947,42,944,938,937,1,1026,1020,1019,947,941,940,42,945,944,937,1,1027,1026,1019,948,947,940,42,946,944,945,1,1028,1026,1027,949,947,948,42,946,947,944,1,1028,1029,1026,949,950,947,42,948,947,946,1,1030,1029,1028,951,950,949,42,943,947,948,1,1025,1029,1030,946,950,951,42,947,943,944,1,1029,1025,1026,950,946,947,42,948,949,943,1,1030,1031,1025,951,952,946,42,950,949,948,1,1032,1031,1030,953,952,951,42,950,951,949,1,1032,1033,1031,953,954,952,42,952,951,950,1,1034,1033,1032,955,954,953,42,953,951,952,1,1035,1033,1034,956,954,955,42,954,951,953,1,1036,1033,1035,957,954,956,42,955,951,954,1,1037,1033,1036,958,954,957,42,956,951,955,1,1038,1033,1037,959,954,958,42,956,949,951,1,1038,1031,1033,959,952,954,42,956,942,949,1,1038,1024,1031,959,945,952,42,941,942,956,1,1023,1024,1038,944,945,959,42,941,956,957,1,1023,1038,1039,944,959,960,42,957,956,955,1,1039,1038,1037,960,959,958,42,958,957,955,1,1040,1039,1037,961,960,958,42,924,957,958,1,1006,1039,1040,927,960,961,42,924,925,957,1,1006,1007,1039,927,928,960,42,925,941,957,1,1007,1023,1039,928,944,960,42,959,924,958,1,1041,1006,1040,962,927,961,42,959,923,924,1,1041,1005,1006,962,926,927,42,959,922,923,1,1041,1004,1005,962,925,926,42,922,959,918,1,1004,1041,1000,925,962,921,42,918,959,917,1,1000,1041,999,921,962,920,42,917,959,960,1,999,1041,1042,920,962,963,42,959,958,960,1,1041,1040,1042,962,961,963,42,960,958,955,1,1042,1040,1037,963,961,958,42,960,955,954,1,1042,1037,1036,963,958,957,42,960,954,961,1,1042,1036,1043,963,957,964,42,961,954,962,1,1043,1036,1044,964,957,965,42,954,963,962,1,1036,1045,1044,957,966,965,42,954,953,963,1,1036,1035,1045,957,956,966,42,963,953,964,1,1045,1035,1046,966,956,967,42,964,953,952,1,1046,1035,1034,967,956,955,42,964,952,965,1,1046,1034,1047,967,955,968,42,952,950,965,1,1034,1032,1047,955,953,968,42,965,950,966,1,1047,1032,1048,968,953,969,42,950,967,966,1,1032,1049,1048,953,970,969,42,950,948,967,1,1032,1030,1049,953,951,970,42,967,948,946,1,1049,1030,1028,970,951,949,42,964,965,557,1,1046,1047,1050,967,968,560,42,963,964,557,1,1045,1046,1050,966,967,560,42,963,557,968,1,1045,1050,1051,966,560,971,42,560,963,968,1,644,1045,1051,563,966,971,42,969,963,560,1,1052,1045,644,972,966,563,42,962,963,969,1,1044,1045,1052,965,966,972,42,970,962,969,1,1053,1044,1052,973,965,972,42,961,962,970,1,1043,1044,1053,964,965,973,42,916,961,970,1,998,1043,1053,919,964,973,42,917,961,916,1,999,1043,998,920,964,919,42,917,960,961,1,999,1042,1043,920,963,964,42,916,970,971,1,998,1053,1054,919,973,974,42,972,971,970,1,1055,1054,1053,975,974,973,42,973,971,972,1,1056,1054,1055,976,974,975,42,973,915,971,1,1056,997,1054,976,918,974,42,914,915,973,1,996,997,1056,917,918,976,42,974,914,973,1,1057,996,1056,977,917,976,42,913,914,974,1,995,996,1057,916,917,977,42,975,913,974,1,1058,995,1057,978,916,977,42,912,913,975,1,994,995,1058,915,916,978,42,976,912,975,1,1059,994,1058,979,915,978,42,977,912,976,1,1060,994,1059,980,915,979,42,977,978,912,1,1060,1061,994,980,981,915,42,979,978,977,1,1062,1061,1060,982,981,980,42,980,978,979,1,1063,1061,1062,983,981,982,42,980,981,978,1,1063,1064,1061,983,984,981,42,982,981,980,1,1065,1064,1063,985,984,983,42,982,983,981,1,1065,1066,1064,985,986,984,42,984,983,982,1,1067,1066,1065,987,986,985,42,984,985,983,1,1067,1068,1066,987,988,986,42,986,985,984,1,1069,1068,1067,989,988,987,42,986,987,985,1,1069,1070,1068,989,990,988,42,988,987,986,1,1071,1070,1069,991,990,989,42,989,987,988,1,1072,1070,1071,992,990,991,42,990,987,989,1,1073,1070,1072,993,990,992,42,990,985,987,1,1073,1068,1070,993,988,990,42,990,908,985,1,1073,990,1068,993,911,988,42,991,908,990,1,1074,990,1073,994,911,993,42,991,907,908,1,1074,989,990,994,910,911,42,905,907,991,1,987,989,1074,908,910,994,42,905,906,907,1,987,988,989,908,909,910,42,992,905,991,1,1075,987,1074,995,908,994,42,904,905,992,1,986,987,1075,907,908,995,42,993,904,992,1,1076,986,1075,996,907,995,42,903,904,993,1,985,986,1076,906,907,996,42,994,903,993,1,1077,985,1076,997,906,996,42,902,903,994,1,984,985,1077,905,906,997,42,995,902,994,1,1078,984,1077,998,905,997,42,996,902,995,1,1079,984,1078,999,905,998,42,996,901,902,1,1079,983,984,999,904,905,42,997,901,996,1,1080,983,1079,1000,904,999,42,997,894,901,1,1080,976,983,1000,897,904,42,998,894,997,1,1081,976,1080,1001,897,1000,42,893,894,998,1,975,976,1081,896,897,1001,42,892,893,998,1,974,975,1081,895,896,1001,42,608,892,998,1,702,974,1081,611,895,1001,42,612,892,608,1,706,974,702,615,895,611,42,608,609,612,1,702,703,706,611,612,615,42,608,998,999,1,702,1081,1082,611,1001,1002,42,998,1000,999,1,1081,1083,1082,1001,1003,1002,42,998,997,1000,1,1081,1080,1083,1001,1000,1003,42,997,996,1000,1,1080,1079,1083,1000,999,1003,42,1000,996,1001,1,1083,1079,1084,1003,999,1004,42,996,995,1001,1,1079,1078,1084,999,998,1004,42,1001,995,1002,1,1084,1078,1085,1004,998,1005,42,995,1003,1002,1,1078,1086,1085,998,1006,1005,42,995,1004,1003,1,1078,1087,1086,998,1007,1006,42,995,994,1004,1,1078,1077,1087,998,997,1007,42,1004,994,1005,1,1087,1077,1088,1007,997,1008,42,994,1006,1005,1,1077,1089,1088,997,1009,1008,42,994,1007,1006,1,1077,1090,1089,997,1010,1009,42,994,1008,1007,1,1077,1091,1090,997,1011,1010,42,994,993,1008,1,1077,1076,1091,997,996,1011,42,993,992,1008,1,1076,1075,1091,996,995,1011,42,1008,992,1009,1,1091,1075,1092,1011,995,1012,42,1009,992,991,1,1092,1075,1074,1012,995,994,42,1009,991,1010,1,1092,1074,1093,1012,994,1013,42,1010,991,990,1,1093,1074,1073,1013,994,993,42,1010,990,989,1,1093,1073,1072,1013,993,992,42,1007,1010,989,1,1090,1093,1072,1010,1013,992,42,1007,1009,1010,1,1090,1092,1093,1010,1012,1013,42,1008,1009,1007,1,1091,1092,1090,1011,1012,1010,42,1007,989,1011,1,1090,1072,1094,1010,992,1014,42,1012,1011,989,1,1095,1094,1072,1015,1014,992,42,1013,1011,1012,1,1096,1094,1095,1016,1014,1015,42,1006,1011,1013,1,1089,1094,1096,1009,1014,1016,42,1006,1007,1011,1,1089,1090,1094,1009,1010,1014,42,1005,1006,1013,1,1088,1089,1096,1008,1009,1016,42,1005,1013,1014,1,1088,1096,1097,1008,1016,1017,42,1014,1013,1015,1,1097,1096,1098,1017,1016,1018,42,1015,1013,1012,1,1098,1096,1095,1018,1016,1015,42,1015,1012,1016,1,1098,1095,1099,1018,1015,1019,42,1016,1012,1017,1,1099,1095,1100,1019,1015,1020,42,1012,988,1017,1,1095,1071,1100,1015,991,1020,42,1012,989,988,1,1095,1072,1071,1015,992,991,42,1018,1017,988,1,1101,1100,1071,1021,1020,991,42,1016,1017,1018,1,1099,1100,1101,1019,1020,1021,42,1016,1018,1019,1,1099,1101,1102,1019,1021,1022,42,1019,1018,1020,1,1102,1101,1103,1022,1021,1023,42,1018,1021,1020,1,1101,1104,1103,1021,1024,1023,42,1021,1018,986,1,1104,1101,1069,1024,1021,989,42,1018,988,986,1,1101,1071,1069,1021,991,989,42,1021,986,984,1,1104,1069,1067,1024,989,987,42,1021,984,1022,1,1104,1067,1105,1024,987,1025,42,1022,984,982,1,1105,1067,1065,1025,987,985,42,1022,982,980,1,1105,1065,1063,1025,985,983,42,1023,1022,980,1,1106,1105,1063,1026,1025,983,42,1021,1022,1023,1,1104,1105,1106,1024,1025,1026,42,1021,1023,1024,1,1104,1106,1107,1024,1026,1027,42,1023,979,1024,1,1106,1062,1107,1026,982,1027,42,1023,980,979,1,1106,1063,1062,1026,983,982,42,1024,979,1025,1,1107,1062,1108,1027,982,1028,42,1025,979,977,1,1108,1062,1060,1028,982,980,42,1025,977,1026,1,1108,1060,1109,1028,980,1029,42,1026,977,976,1,1109,1060,1059,1029,980,979,42,1027,1026,976,1,1110,1109,1059,1030,1029,979,42,1027,1028,1026,1,1110,1111,1109,1030,1031,1029,42,1029,1028,1027,1,1112,1111,1110,1032,1031,1030,42,1030,1028,1029,1,1113,1111,1112,1033,1031,1032,42,1030,1031,1028,1,1113,1114,1111,1033,1034,1031,42,1030,1032,1031,1,1113,1115,1114,1033,1035,1034,42,1033,1032,1030,1,1116,1115,1113,1036,1035,1033,42,1034,1032,1033,1,1117,1115,1116,1037,1035,1036,42,1019,1032,1034,1,1102,1115,1117,1022,1035,1037,42,1019,1020,1032,1,1102,1103,1115,1022,1023,1035,42,1032,1020,1035,1,1115,1103,1118,1035,1023,1038,42,1020,1024,1035,1,1103,1107,1118,1023,1027,1038,42,1021,1024,1020,1,1104,1107,1103,1024,1027,1023,42,1035,1024,1025,1,1118,1107,1108,1038,1027,1028,42,1031,1035,1025,1,1114,1118,1108,1034,1038,1028,42,1031,1032,1035,1,1114,1115,1118,1034,1035,1038,42,1031,1025,1028,1,1114,1108,1111,1034,1028,1031,42,1028,1025,1026,1,1111,1108,1109,1031,1028,1029,42,1036,1019,1034,1,1119,1102,1117,1039,1022,1037,42,1037,1019,1036,1,1120,1102,1119,1040,1022,1039,42,1037,1016,1019,1,1120,1099,1102,1040,1019,1022,42,1038,1016,1037,1,1121,1099,1120,1041,1019,1040,42,1038,1015,1016,1,1121,1098,1099,1041,1018,1019,42,1014,1015,1038,1,1097,1098,1121,1017,1018,1041,42,1039,1014,1038,1,1122,1097,1121,1042,1017,1041,42,1040,1014,1039,1,1123,1097,1122,1043,1017,1042,42,1005,1014,1040,1,1088,1097,1123,1008,1017,1043,42,1003,1005,1040,1,1086,1088,1123,1006,1008,1043,42,1004,1005,1003,1,1087,1088,1086,1007,1008,1006,42,1003,1040,1041,1,1086,1123,1124,1006,1043,1044,42,1040,1042,1041,1,1123,1125,1124,1043,1045,1044,42,1040,1039,1042,1,1123,1122,1125,1043,1042,1045,42,1039,1043,1042,1,1122,1126,1125,1042,1046,1045,42,1038,1044,1039,1,1121,1127,1122,1041,1047,1042,42,1044,1038,1037,1,1127,1121,1120,1047,1041,1040,42,1044,1037,1036,1,1127,1120,1119,1047,1040,1039,42,1045,1044,1036,1,1128,1127,1119,1048,1047,1039,42,1044,1045,1043,1,1127,1128,1126,1047,1048,1046,42,1046,1043,1045,1,1129,1126,1128,1049,1046,1048,42,1042,1043,1046,1,1125,1126,1129,1045,1046,1049,42,1047,1042,1046,1,1130,1125,1129,1050,1045,1049,42,1047,1041,1042,1,1130,1124,1125,1050,1044,1045,42,1048,1041,1047,1,1131,1124,1130,1051,1044,1050,42,1048,1049,1041,1,1131,1132,1124,1051,1052,1044,42,1050,1049,1048,1,1133,1132,1131,1053,1052,1051,42,1050,1002,1049,1,1133,1085,1132,1053,1005,1052,42,1050,1001,1002,1,1133,1084,1085,1053,1004,1005,42,1051,1001,1050,1,1134,1084,1133,1054,1004,1053,42,1051,1052,1001,1,1134,1135,1084,1054,1055,1004,42,1051,1053,1052,1,1134,1136,1135,1054,1056,1055,42,604,1053,1051,1,698,1136,1134,607,1056,1054,42,604,605,1053,1,698,699,1136,607,608,1056,42,605,999,1053,1,699,1082,1136,608,1002,1056,42,605,608,999,1,699,702,1082,608,611,1002,42,999,1052,1053,1,1082,1135,1136,1002,1055,1056,42,1052,999,1000,1,1135,1082,1083,1055,1002,1003,42,1052,1000,1001,1,1135,1083,1084,1055,1003,1004,42,604,1051,1054,1,698,1134,1137,607,1054,1057,42,1054,1051,1050,1,1137,1134,1133,1057,1054,1053,42,1054,1050,1048,1,1137,1133,1131,1057,1053,1051,42,1054,1048,1055,1,1137,1131,1138,1057,1051,1058,42,1055,1048,1056,1,1138,1131,1139,1058,1051,1059,42,1048,1047,1056,1,1131,1130,1139,1051,1050,1059,42,1056,1047,1057,1,1139,1130,1140,1059,1050,1060,42,1057,1047,1058,1,1140,1130,1141,1060,1050,1061,42,1047,1059,1058,1,1130,1142,1141,1050,1062,1061,42,1047,1060,1059,1,1130,1143,1142,1050,1063,1062,42,1047,1046,1060,1,1130,1129,1143,1050,1049,1063,42,1046,1045,1060,1,1129,1128,1143,1049,1048,1063,42,1060,1045,1033,1,1143,1128,1116,1063,1048,1036,42,1045,1034,1033,1,1128,1117,1116,1048,1037,1036,42,1036,1034,1045,1,1119,1117,1128,1039,1037,1048,42,1060,1033,1059,1,1143,1116,1142,1063,1036,1062,42,1033,1029,1059,1,1116,1112,1142,1036,1032,1062,42,1033,1030,1029,1,1116,1113,1112,1036,1033,1032,42,1059,1029,1027,1,1142,1112,1110,1062,1032,1030,42,1059,1027,1058,1,1142,1110,1141,1062,1030,1061,42,1058,1027,1061,1,1141,1110,1144,1061,1030,1064,42,1027,976,1061,1,1110,1059,1144,1030,979,1064,42,1061,976,1062,1,1144,1059,1145,1064,979,1065,42,976,975,1062,1,1059,1058,1145,979,978,1065,42,1062,975,1063,1,1145,1058,1146,1065,978,1066,42,975,1064,1063,1,1058,1147,1146,978,1067,1066,42,975,974,1064,1,1058,1057,1147,978,977,1067,42,974,973,1064,1,1057,1056,1147,977,976,1067,42,1064,973,972,1,1147,1056,1055,1067,976,975,42,1063,1064,972,1,1146,1147,1055,1066,1067,975,42,1063,972,573,1,1146,1055,657,1066,975,576,42,573,972,1065,1,657,1055,1148,576,975,1068,42,972,970,1065,1,1055,1053,1148,975,973,1068,42,1065,970,969,1,1148,1053,1052,1068,973,972,42,1065,969,1066,1,1148,1052,1149,1068,972,1069,42,1066,969,1067,1,1149,1052,1150,1069,972,1070,42,969,1068,1067,1,1052,1151,1150,972,1071,1070,42,969,560,1068,1,1052,644,1151,972,563,1071,42,560,561,1068,1,644,645,1151,563,564,1071,42,1068,561,562,1,1151,645,646,1071,564,565,42,1067,1068,562,1,1150,1151,646,1070,1071,565,42,1067,562,1069,1,1150,646,1152,1070,565,1072,42,562,563,1069,1,646,647,1152,565,566,1072,42,563,564,1069,1,647,648,1152,566,567,1072,42,1069,564,567,1,1152,648,651,1072,567,570,42,564,566,567,1,648,650,651,567,569,570,42,564,565,566,1,648,649,650,567,568,569,42,568,1069,567,1,652,1152,651,571,1072,570,42,568,1070,1069,1,652,1153,1152,571,1073,1072,42,569,1070,568,1,653,1153,652,572,1073,571,42,569,570,1070,1,653,654,1153,572,573,1073,42,570,1066,1070,1,654,1149,1153,573,1069,1073,42,570,571,1066,1,654,655,1149,573,574,1069,42,571,1065,1066,1,655,1148,1149,574,1068,1069,42,571,573,1065,1,655,657,1148,574,576,1068,42,1066,1067,1070,1,1149,1150,1153,1069,1070,1073,42,1067,1069,1070,1,1150,1152,1153,1070,1072,1073,42,574,1063,573,1,658,1146,657,577,1066,576,42,1062,1063,574,1,1145,1146,658,1065,1066,577,42,575,1062,574,1,659,1145,658,578,1065,577,42,1061,1062,575,1,1144,1145,659,1064,1065,578,42,1071,1061,575,1,1154,1144,659,1074,1064,578,42,1058,1061,1071,1,1141,1144,1154,1061,1064,1074,42,1057,1058,1071,1,1140,1141,1154,1060,1061,1074,42,1072,1057,1071,1,1155,1140,1154,1075,1060,1074,42,1072,1055,1057,1,1155,1138,1140,1075,1058,1060,42,579,1055,1072,1,663,1138,1155,582,1058,1075,42,579,1054,1055,1,663,1137,1138,582,1057,1058,42,580,1054,579,1,664,1137,663,583,1057,582,42,604,1054,580,1,698,1137,664,607,1057,583,42,582,604,580,1,666,698,664,585,607,583,42,579,1072,577,1,663,1155,661,582,1075,580,42,577,1072,575,1,661,1155,659,580,1075,578,42,1072,1071,575,1,1155,1154,659,1075,1074,578,42,1055,1056,1057,1,1138,1139,1140,1058,1059,1060,42,1049,1002,1003,1,1132,1085,1086,1052,1005,1006,42,1049,1003,1041,1,1132,1086,1124,1052,1006,1044,42,908,909,985,1,990,991,1068,911,912,988,42,985,909,910,1,1068,991,992,988,912,913,42,985,910,983,1,1068,992,1066,988,913,986,42,983,910,911,1,1066,992,993,986,913,914,42,983,911,981,1,1066,993,1064,986,914,984,42,981,911,978,1,1064,993,1061,984,914,981,42,978,911,912,1,1061,993,994,981,914,915,42,915,916,971,1,997,998,1054,918,919,974,42,559,560,968,1,643,644,1051,1076,1076,1076,42,918,919,922,1,1000,1001,1004,921,922,925,42,919,920,922,1,1001,1002,1004,922,923,925,42,920,921,922,1,1002,1003,1004,923,924,925,42,942,943,949,1,1024,1025,1031,945,946,952,42,945,937,1073,1,1027,1019,1156,948,940,1077,42,1073,937,935,1,1156,1019,1017,1077,940,938,42,931,932,936,1,1013,1014,1018,934,935,939,42,936,932,933,1,1018,1014,1015,939,935,936,42,934,707,1074,1,1016,789,1157,937,710,1078,42,1074,707,706,1,1157,789,788,1078,710,709,42,1074,706,1075,1,1157,788,1158,1079,1079,1079,42,1075,706,705,1,1158,788,787,1080,709,708,42,1076,1075,705,1,1159,1158,787,1081,1080,708,42,705,934,1076,1,787,1160,1159,708,937,1081,42,705,703,934,1,787,785,1160,708,706,937,42,705,704,703,1,787,786,785,708,707,706,42,934,703,701,1,1160,785,783,937,706,704,42,934,701,1077,1,1160,783,1161,937,704,1082,42,1078,1077,701,1,1162,1161,783,1083,1082,704,42,1078,1079,1077,1,1162,1163,1161,1083,1084,1082,42,1080,1079,1078,1,1164,1163,1162,1085,1084,1083,42,1080,1078,1081,1,1164,1162,1165,1085,1083,1086,42,1081,1078,700,1,1165,1162,782,1086,1083,703,42,1078,701,700,1,1162,783,782,1083,704,703,42,1081,700,1082,1,1165,782,1166,1086,703,1087,42,1082,700,699,1,1166,782,781,1087,703,702,42,1083,1082,699,1,1167,1166,781,1088,1087,702,42,1081,1082,1083,1,1165,1166,1167,1086,1087,1088,42,1084,1081,1083,1,1168,1165,1167,1089,1086,1088,42,1084,1080,1081,1,1168,1164,1165,1089,1085,1086,42,1085,1080,1084,1,1169,1164,1168,1090,1085,1089,42,1086,1085,1084,1,1170,1169,1168,1091,1090,1089,42,557,1085,1086,1,641,1169,1170,560,1090,1091,42,557,1086,1087,1,641,1170,1171,560,1091,1092,42,1086,1084,1087,1,1170,1168,1171,1091,1089,1092,42,1084,1083,1087,1,1168,1167,1171,1089,1088,1092,42,1087,1083,551,1,1171,1167,635,1092,1088,554,42,1083,1088,551,1,1167,1172,635,1088,1093,554,42,1083,699,1088,1,1167,781,1172,1088,702,1093,42,548,1088,699,1,632,1172,781,551,1093,702,42,551,1088,548,1,635,1172,632,554,1093,551,42,548,699,546,1,632,781,630,551,702,549,42,546,699,695,1,630,781,777,549,702,698,42,546,695,545,1,630,777,629,549,698,548,42,1087,551,552,1,1171,635,636,1092,554,555,42,556,1087,552,1,640,1171,636,559,1092,555,42,556,557,1087,1,640,641,1171,559,560,1092,42,556,552,554,1,640,636,638,559,555,557,42,1079,934,1077,1,1163,1160,1161,1084,937,1082,42,777,778,783,1,859,860,865,780,781,786,42,784,848,849,1,866,930,931,787,851,852,42,848,784,785,1,930,866,867,851,787,788,42,785,794,848,1,867,876,930,788,797,851,42,870,863,868,1,952,945,950,873,866,871,42,863,864,868,1,945,946,950,866,867,871,42,868,864,865,1,950,946,947,871,867,868,42,837,829,830,1,919,911,912,840,832,833,42,716,714,819,1,798,796,901,719,717,822,42,716,819,816,1,798,901,898,719,822,819,42,815,716,816,1,897,798,898,818,719,819,42,807,716,815,1,889,798,897,810,719,818,42,738,1089,767,1,820,1173,849,741,1094,770,42,1091,1089,1090,1,1174,1173,1175,1095,1094,1096,42,1092,1089,1091,1,1176,1173,1174,1097,1094,1095,42,1093,1089,1092,1,1177,1173,1176,1098,1094,1097,42,767,1089,1093,1,849,1173,1177,770,1094,1098,42,764,767,1093,1,846,849,1177,767,770,1098,42,764,1093,760,1,846,1177,842,767,1098,763,42,760,1093,1094,1,842,1177,1178,763,1098,1099,42,1094,1093,1092,1,1178,1177,1176,1099,1098,1097,42,753,1094,1092,1,835,1178,1176,756,1099,1097,42,755,1094,753,1,837,1178,835,758,1099,756,42,755,757,1094,1,837,839,1178,758,760,1099,42,760,1094,757,1,842,1178,839,763,1099,760,42,753,1092,752,1,835,1176,834,756,1097,755,42,752,1092,1091,1,834,1176,1174,755,1097,1095,42,752,1091,1095,1,834,1174,1179,755,1095,1100,42,1095,1091,1090,1,1179,1174,1175,1100,1095,1096,42,1095,1090,1096,1,1179,1175,1180,1100,1096,1101,42,1096,1090,738,1,1180,1175,820,1101,1096,741,42,739,1096,738,1,821,1180,820,742,1101,741,42,1097,1096,739,1,1181,1180,821,1102,1101,742,42,1097,1095,1096,1,1181,1179,1180,1102,1100,1101,42,749,1095,1097,1,831,1179,1181,752,1100,1102,42,750,1095,749,1,832,1179,831,753,1100,752,42,750,752,1095,1,832,834,1179,753,755,1100,42,749,1097,747,1,831,1181,829,752,1102,750,42,1097,1098,747,1,1181,1182,829,1102,1103,750,42,1097,740,1098,1,1181,822,1182,1102,743,1103,42,739,740,1097,1,821,822,1181,742,743,1102,42,1098,740,741,1,1182,822,823,1103,743,744,42,1098,741,1099,1,1182,823,1183,1103,744,1104,42,1099,741,742,1,1183,823,824,1104,744,745,42,1099,742,745,1,1183,824,827,1104,745,748,42,745,747,1099,1,827,829,1183,748,750,1104,42,1098,1099,747,1,1182,1183,829,1103,1104,750,42,762,764,760,1,844,846,842,765,767,763,42,688,689,734,1,770,771,816,691,692,737,42,734,689,1100,1,816,771,1184,737,692,1105,42,1100,689,1101,1,1184,771,1185,1105,692,1106,42,1101,689,690,1,1185,771,772,1106,692,693,42,1101,690,708,1,1185,772,790,1106,693,711,42,710,1101,708,1,792,1185,790,713,1106,711,42,713,1101,710,1,795,1185,792,716,1106,713,42,713,1102,1101,1,795,1186,1185,716,1107,1106,42,715,1102,713,1,797,1186,795,718,1107,716,42,715,718,1102,1,797,800,1186,718,721,1107,42,718,1100,1102,1,800,1184,1186,721,1105,1107,42,1103,1100,718,1,1187,1184,800,1108,1105,721,42,1104,1100,1103,1,1188,1184,1187,1109,1105,1108,42,1104,734,1100,1,1188,816,1184,1109,737,1105,42,732,734,1104,1,814,816,1188,735,737,1109,42,732,1104,731,1,814,1188,813,735,1109,734,42,721,731,1104,1,803,813,1188,724,734,1109,42,723,731,721,1,805,813,803,726,734,724,42,727,731,723,1,809,813,805,730,734,726,42,721,1104,1103,1,803,1188,1187,724,1109,1108,42,721,1103,719,1,803,1187,801,724,1108,722,42,719,1103,718,1,801,1187,800,722,1108,721,42,1100,1101,1102,1,1184,1185,1186,1105,1106,1107,42,686,628,630,1,768,722,724,689,631,633,42,1105,686,630,1,557,559,558,1110,689,633,42,1106,686,1105,1,563,559,557,1111,689,1110,42,1106,1107,686,1,563,564,559,1111,1112,689,42,1108,1107,1106,1,567,564,563,1113,1112,1111,42,1107,1108,1109,1,564,567,566,1112,1113,1114,42,1109,1108,643,1,566,567,589,1114,1113,646,42,1108,642,643,1,567,568,589,1113,645,646,42,642,1108,1106,1,568,567,563,645,1113,1111,42,642,1106,1110,1,568,563,562,645,1111,1115,42,1110,1106,1105,1,562,563,557,1115,1111,1110,42,1110,1105,1111,1,562,557,561,1115,1110,1116,42,1111,1105,633,1,561,557,560,1116,1110,636,42,1105,630,633,1,557,558,560,1110,633,636,42,630,632,633,1,558,695,560,633,635,636,42,637,1111,633,1,570,561,560,640,1116,636,42,637,1110,1111,1,570,562,561,640,1115,1116,42,639,1110,637,1,569,562,570,642,1115,640,42,639,642,1110,1,569,568,562,642,645,1115,42,637,633,634,1,570,560,696,640,636,637,42,643,685,1109,1,589,565,566,646,688,1114,42,685,643,645,1,565,589,590,688,646,648,42,1109,685,1107,1,566,565,564,1114,688,1112,42,685,686,1107,1,565,559,564,688,689,1112,42,649,650,680,1,729,731,761,652,653,683,42,680,650,679,1,761,731,760,683,653,682,42,650,651,679,1,731,732,760,653,654,682,42,651,666,679,1,732,747,760,654,669,682,42,652,666,651,1,733,747,732,655,669,654,42,668,676,667,1,749,757,748,671,679,670,42,676,668,673,1,757,749,754,679,671,676,42,668,669,673,1,749,750,754,671,672,676,42,542,544,661,1,626,628,742,545,547,664,42,542,661,660,1,626,742,741,545,664,663,42,542,660,540,1,626,741,624,545,663,543,42,540,660,538,1,624,741,622,543,663,541,42,534,535,533,1,618,619,614,537,538,536,42,498,644,1112,1,524,605,606,533,647,1117,42,1112,644,641,1,683,685,588,1117,647,644,42,1112,641,1113,1,683,588,684,1117,644,1118,42,641,640,1113,1,588,587,684,644,643,1118,42,1114,1113,640,1,583,684,587,1119,1118,643,42,1112,1113,1114,1,683,684,583,1117,1118,1119,42,1115,1112,1114,1,582,683,583,1120,1117,1119,42,1116,1112,1115,1,1189,1190,1191,1121,1117,1120,42,1117,1112,1116,1,527,606,607,1122,1117,1121,42,1117,498,1112,1,527,524,606,1122,533,1117,42,497,498,1117,1,526,524,527,532,533,1122,42,497,1117,1118,1,526,527,528,532,1122,1123,42,1118,1117,1116,1,528,527,607,1123,1122,1121,42,1118,1116,1119,1,528,607,608,1123,1121,1124,42,1119,1116,1120,1,608,607,669,1124,1121,1125,42,1120,1116,1121,1,1192,1193,1194,1125,1121,1126,42,1116,1122,1121,1,1189,1195,1196,1121,1127,1126,42,1116,1115,1122,1,1189,1191,1195,1121,1120,1127,42,1115,1123,1122,1,582,580,681,1120,1128,1127,42,1123,1115,1124,1,580,582,581,1128,1120,1129,42,1115,1114,1124,1,582,583,581,1120,1119,1129,42,1124,1114,1125,1,581,583,584,1129,1119,1130,42,1125,1114,1126,1,584,583,586,1130,1119,1131,42,1114,640,1126,1,583,587,586,1119,643,1131,42,1126,640,638,1,586,587,571,1131,643,641,42,1126,638,1125,1,586,571,584,1131,641,1130,42,1125,638,1127,1,584,571,585,1130,641,1132,42,1127,638,1128,1,585,571,573,1132,641,1133,42,638,636,1128,1,571,572,573,641,639,1133,42,636,635,1128,1,572,574,573,639,638,1133,42,1128,635,1129,1,573,574,575,1133,638,1134,42,635,1130,1129,1,574,675,575,638,1135,1134,42,635,629,1130,1,574,676,675,638,632,1135,42,635,631,629,1,574,694,676,638,634,632,42,1130,629,627,1,1197,723,721,1135,632,630,42,1130,627,624,1,1197,721,718,1135,630,627,42,1131,1130,624,1,1198,1197,718,1136,1135,627,42,1131,1132,1130,1,693,677,675,1136,1137,1135,42,1131,1133,1132,1,693,692,677,1136,1138,1137,42,1131,1122,1133,1,693,681,692,1136,1127,1138,42,1122,1131,1121,1,1195,1198,1196,1127,1136,1126,42,1131,624,1121,1,1198,718,1196,1136,627,1126,42,1121,624,622,1,1196,718,716,1126,627,625,42,1121,622,1134,1,1196,716,1199,1126,625,1139,42,1134,622,620,1,1199,716,714,1139,625,623,42,1120,1121,1134,1,1192,1194,1200,1125,1126,1139,42,1122,1135,1133,1,681,691,692,1127,1140,1138,42,1136,1135,1122,1,680,691,681,1141,1140,1127,42,1135,1136,1137,1,691,680,679,1140,1141,1142,42,1137,1136,1138,1,679,680,579,1142,1141,1143,42,1123,1138,1136,1,580,579,680,1128,1143,1141,42,1123,1139,1138,1,580,578,579,1128,1144,1143,42,1124,1139,1123,1,581,578,580,1129,1144,1128,42,1139,1124,1125,1,578,581,584,1144,1129,1130,42,1125,1140,1139,1,584,577,578,1130,1145,1144,42,1125,1127,1140,1,584,585,577,1130,1132,1145,42,1127,1128,1140,1,585,573,577,1132,1133,1145,42,1128,1141,1140,1,573,576,577,1133,1146,1145,42,1129,1141,1128,1,575,576,573,1134,1146,1133,42,1141,1129,1142,1,576,575,678,1146,1134,1147,42,1129,1132,1142,1,575,677,678,1134,1137,1147,42,1129,1130,1132,1,575,675,677,1134,1135,1137,42,1133,1142,1132,1,692,678,677,1138,1147,1137,42,1135,1142,1133,1,691,678,692,1140,1147,1138,42,1135,1137,1142,1,691,679,678,1140,1142,1147,42,1141,1142,1137,1,576,678,679,1146,1147,1142,42,1138,1141,1137,1,579,576,679,1143,1146,1142,42,1139,1141,1138,1,578,576,579,1144,1146,1143,42,1139,1140,1141,1,578,577,576,1144,1145,1146,42,1123,1136,1122,1,580,680,681,1128,1141,1127,42,1143,1118,1119,1,609,528,608,1148,1123,1124,42,1143,1144,1118,1,609,529,528,1148,1149,1123,42,491,1144,1143,1,610,529,609,526,1149,1148,42,491,492,1144,1,610,611,529,526,527,1149,42,492,493,1144,1,611,612,529,527,528,1149,42,1144,493,494,1,529,612,530,1149,528,529,42,1144,494,497,1,529,530,526,1149,529,532,42,1144,497,1118,1,529,526,528,1149,532,1123,42,412,413,530,1,1201,536,1202,396,460,438,42,1043,1039,1044,2,1203,1204,1205,1046,1042,1047,42,1090,1089,738,2,1206,1207,1208,1096,1094,741,42,1148,1149,1150,0,1209,1210,1211,1150,1151,1152,42,1148,1151,1149,0,1209,1212,1210,1150,1153,1151,42,1151,1148,1152,0,1212,1209,1213,1153,1150,1154,42,1152,1153,1151,0,1213,1214,1212,1154,1155,1153,42,1155,1156,1154,0,1215,1216,1217,1156,1157,1158,42,1157,1156,1155,0,1218,1216,1215,1159,1157,1156,42,1157,1158,1156,0,1218,1219,1216,1159,1160,1157,42,1159,1158,1157,0,1220,1219,1218,1161,1160,1159,42,1160,1158,1159,0,1221,1219,1220,1162,1160,1161,42,1160,1161,1158,0,1221,1222,1219,1162,1163,1160,42,1160,1162,1161,0,1221,1223,1222,1162,1164,1163,42,1163,1162,1160,0,1224,1223,1221,1165,1164,1162,42,1163,1164,1162,0,1224,1225,1223,1165,1166,1164,42,1165,1164,1163,0,1226,1225,1224,1167,1166,1165,42,1166,1164,1165,0,1227,1225,1226,1168,1166,1167,42,1166,1167,1164,0,1227,1228,1225,1168,1169,1166,42,1166,1168,1167,0,1227,1229,1228,1168,1170,1169,42,1169,1168,1166,0,1230,1229,1227,1171,1170,1168,42,1169,1170,1168,0,1230,1231,1229,1171,1172,1170,42,1171,1170,1169,0,1232,1231,1230,1173,1172,1171,42,1171,1172,1170,0,1232,1233,1231,1173,1174,1172,42,1173,1172,1171,0,1234,1233,1232,1175,1174,1173,42,1174,1172,1173,0,1235,1233,1234,1176,1174,1175,42,1174,1175,1172,0,1235,1236,1233,1176,1177,1174,42,1176,1175,1174,0,1237,1236,1235,1178,1177,1176,42,1176,1177,1175,0,1237,1238,1236,1178,1179,1177,42,1178,1177,1176,0,1239,1238,1237,1180,1179,1178,42,1178,1179,1177,0,1239,1240,1238,1180,1181,1179,42,1180,1179,1178,0,1241,1240,1239,1182,1181,1180,42,1180,1181,1179,0,1241,1242,1240,1182,1183,1181,42,1182,1181,1180,0,1243,1242,1241,1184,1183,1182,42,1181,1182,1183,0,1242,1243,1244,1183,1184,1185,42,1183,1182,1184,0,1244,1243,1245,1185,1184,1186,42,1182,1185,1184,0,1243,1246,1245,1184,1187,1186,42,1186,1185,1182,0,1247,1246,1243,1188,1187,1184,42,1186,1187,1185,0,1247,1248,1246,1188,1189,1187,42,1186,1188,1187,0,1247,1249,1248,1188,1190,1189,42,1189,1188,1186,0,1250,1249,1247,1191,1190,1188,42,1189,1190,1188,0,1250,1251,1249,1191,1192,1190,42,1189,1191,1190,0,1252,1253,1254,1191,1193,1192,42,1192,1191,1189,0,1255,1253,1252,1194,1193,1191,42,1192,1193,1191,0,1255,1256,1253,1194,1195,1193,42,1194,1193,1192,0,1257,1256,1255,1196,1195,1194,42,1195,1193,1194,0,1258,1256,1257,1197,1195,1196,42,1195,1196,1193,0,1258,1259,1256,1197,1198,1195,42,1197,1196,1195,0,1260,1259,1258,1199,1198,1197,42,1197,1198,1196,0,1260,1261,1259,1199,1200,1198,42,1197,1199,1198,0,1260,1262,1261,1199,1201,1200,42,1197,1200,1199,0,1260,1263,1262,1199,1202,1201,42,1201,1200,1197,0,1264,1263,1260,1203,1202,1199,42,1202,1200,1201,0,1265,1263,1264,1204,1202,1203,42,1200,1202,1203,0,1263,1265,1266,1202,1204,1205,42,1202,1204,1203,0,1265,1267,1266,1204,1206,1205,42,1205,1204,1202,0,1268,1269,1270,1207,1206,1204,42,1205,1206,1204,0,1268,1271,1269,1207,1208,1206,42,1207,1206,1205,0,1272,1271,1268,1209,1208,1207,42,1207,1208,1206,0,1272,1273,1271,1209,1210,1208,42,1207,1209,1208,0,1272,1274,1273,1209,1211,1210,42,1210,1209,1207,0,1275,1274,1272,1212,1211,1209,42,1211,1209,1210,0,1276,1274,1275,1213,1211,1212,42,1211,1212,1209,0,1276,1277,1274,1213,1214,1211,42,1213,1212,1211,0,1278,1277,1276,1215,1214,1213,42,1214,1212,1213,0,1279,1277,1278,1216,1214,1215,42,1214,1215,1212,0,1279,1280,1277,1216,1217,1214,42,1214,1216,1215,0,1279,1281,1280,1216,1218,1217,42,1217,1216,1214,0,1282,1281,1279,1219,1218,1216,42,1218,1216,1217,0,1283,1284,1285,1220,1218,1219,42,1218,1219,1216,0,1283,1286,1284,1220,1221,1218,42,1220,1219,1218,0,1287,1286,1283,1222,1221,1220,42,1220,1221,1219,0,1287,1288,1286,1222,1223,1221,42,1220,1222,1221,0,1287,1289,1288,1222,1224,1223,42,1220,1223,1222,0,1287,1290,1289,1222,1225,1224,42,1224,1223,1220,0,1291,1290,1287,1226,1225,1222,42,1224,1225,1223,0,1291,1292,1290,1226,1227,1225,42,1224,1226,1225,0,1291,1293,1292,1226,1228,1227,42,1227,1226,1224,0,1294,1293,1291,1229,1228,1226,42,1227,1228,1226,0,1294,1295,1293,1229,1230,1228,42,1229,1228,1227,0,1296,1295,1294,1231,1230,1229,42,1229,1230,1228,0,1296,1297,1295,1231,1232,1230,42,1229,1231,1230,0,1296,1298,1297,1231,1233,1232,42,1229,1232,1231,0,1296,1299,1298,1231,1234,1233,42,1233,1232,1229,0,1300,1299,1296,1235,1234,1231,42,1234,1232,1233,0,1301,1299,1300,1236,1234,1235,42,1234,1235,1232,0,1301,1302,1299,1236,1237,1234,42,1234,1236,1235,0,1301,1303,1302,1236,1238,1237,42,1234,1237,1236,0,1301,1304,1303,1236,1239,1238,42,1237,1234,1238,0,1304,1301,1305,1239,1236,1240,42,1239,1238,1234,0,1306,1305,1301,1241,1240,1236,42,1238,1239,1240,0,1305,1306,1307,1240,1241,1242,42,1239,1241,1240,0,1306,1308,1307,1241,1243,1242,42,1239,1234,1241,0,1306,1301,1308,1241,1236,1243,42,1241,1234,1233,0,1308,1301,1300,1243,1236,1235,42,1241,1233,1229,0,1308,1300,1296,1243,1235,1231,42,1241,1229,1242,0,1308,1296,1309,1243,1231,1244,42,1242,1229,1227,0,1309,1296,1294,1244,1231,1229,42,1242,1227,1243,0,1309,1294,1310,1244,1229,1245,42,1243,1227,1244,0,1310,1294,1311,1245,1229,1246,42,1227,1245,1244,0,1294,1312,1311,1229,1247,1246,42,1227,1224,1245,0,1294,1291,1312,1229,1226,1247,42,1245,1224,1220,0,1312,1291,1287,1247,1226,1222,42,1245,1220,1246,0,1312,1287,1313,1247,1222,1248,42,1220,1218,1246,0,1287,1283,1313,1222,1220,1248,42,1246,1218,1217,0,1313,1283,1285,1248,1220,1219,42,1246,1217,1247,0,1313,1285,1314,1248,1219,1249,42,1247,1217,1214,0,1315,1282,1279,1249,1219,1216,42,1247,1214,1248,0,1315,1279,1316,1249,1216,1250,42,1248,1214,1249,0,1316,1279,1317,1250,1216,1251,42,1249,1214,1213,0,1317,1279,1278,1251,1216,1215,42,1249,1213,1211,0,1317,1278,1276,1251,1215,1213,42,1250,1249,1211,0,1318,1317,1276,1252,1251,1213,42,1250,1251,1249,0,1318,1319,1317,1252,1253,1251,42,1252,1251,1250,0,1320,1319,1318,1254,1253,1252,42,1253,1251,1252,0,1321,1319,1320,1255,1253,1254,42,1253,1254,1251,0,1321,1322,1319,1255,1256,1253,42,1253,1255,1254,0,1321,1323,1322,1255,1257,1256,42,1256,1255,1253,0,1324,1323,1321,1258,1257,1255,42,1256,1257,1255,0,1324,1325,1323,1258,1259,1257,42,1232,1257,1256,0,1299,1325,1324,1260,1260,1260,42,1235,1257,1232,0,1302,1325,1299,1237,1259,1234,42,1235,1236,1257,0,1302,1303,1325,1237,1238,1259,42,1257,1236,1258,0,1325,1303,1326,1259,1238,1261,42,1236,1259,1258,0,1303,1327,1326,1238,1262,1261,42,1236,1260,1259,0,1303,1328,1327,1238,1263,1262,42,1236,1261,1260,0,1303,1329,1328,1238,1264,1263,42,1237,1261,1236,0,1304,1329,1303,1239,1264,1238,42,1261,1237,1238,0,1329,1304,1305,1264,1239,1240,42,1261,1238,1262,0,1329,1305,1330,1264,1240,1265,42,1262,1238,1263,0,1330,1305,1331,1265,1240,1266,42,1238,1240,1263,0,1305,1307,1331,1240,1242,1266,42,1240,1264,1263,0,1307,1332,1331,1242,1267,1266,42,1264,1240,1265,0,1332,1307,1333,1267,1242,1268,42,1240,1266,1265,0,1307,1334,1333,1242,1269,1268,42,1240,1267,1266,0,1307,1335,1334,1242,1270,1269,42,1240,1241,1267,0,1307,1308,1335,1242,1243,1270,42,1241,1243,1267,0,1308,1310,1335,1243,1245,1270,42,1241,1242,1243,0,1308,1309,1310,1243,1244,1245,42,1267,1243,1268,0,1335,1310,1336,1270,1245,1271,42,1268,1243,1269,0,1336,1310,1337,1271,1245,1272,42,1243,1244,1269,0,1310,1311,1337,1245,1246,1272,42,1244,1245,1269,0,1311,1312,1337,1246,1247,1272,42,1245,1246,1269,0,1312,1313,1337,1247,1248,1272,42,1269,1246,1247,0,1337,1313,1314,1272,1248,1249,42,1269,1247,1270,0,1337,1314,1338,1272,1249,1273,42,1270,1247,1248,0,1339,1315,1316,1273,1249,1250,42,1270,1248,1271,0,1339,1316,1340,1273,1250,1274,42,1271,1248,1251,0,1340,1316,1319,1274,1250,1253,42,1251,1248,1249,0,1319,1316,1317,1253,1250,1251,42,1272,1271,1251,0,1341,1340,1319,1275,1274,1253,42,1272,1270,1271,0,1341,1339,1340,1275,1273,1274,42,1273,1270,1272,0,1342,1339,1341,1276,1273,1275,42,1273,1269,1270,0,1343,1337,1338,1276,1272,1273,42,1268,1269,1273,0,1336,1337,1343,1271,1272,1276,42,1268,1273,1274,0,1336,1343,1344,1271,1276,1277,42,1274,1273,1272,0,1345,1342,1341,1277,1276,1275,42,1274,1272,1275,0,1345,1341,1346,1277,1275,1278,42,1255,1275,1272,0,1323,1346,1341,1257,1278,1275,42,1275,1255,1276,0,1346,1323,1347,1278,1257,1279,42,1255,1277,1276,0,1323,1348,1347,1257,1280,1279,42,1255,1257,1277,0,1323,1325,1348,1257,1259,1280,42,1278,1277,1257,0,1349,1348,1325,1281,1280,1259,42,1277,1278,1276,0,1348,1349,1347,1280,1281,1279,42,1278,1279,1276,0,1349,1350,1347,1281,1282,1279,42,1278,1280,1279,0,1349,1351,1350,1281,1283,1282,42,1281,1280,1278,0,1352,1351,1349,1284,1283,1281,42,1282,1280,1281,0,1353,1351,1352,1285,1283,1284,42,1282,1283,1280,0,1353,1354,1351,1285,1286,1283,42,1280,1283,1284,0,1351,1354,1355,1283,1286,1287,42,1285,1280,1284,0,1356,1351,1355,1288,1283,1287,42,1286,1280,1285,0,1357,1351,1356,1289,1283,1288,42,1286,1279,1280,0,1357,1350,1351,1289,1282,1283,42,1276,1279,1286,0,1347,1350,1357,1279,1282,1289,42,1287,1276,1286,0,1358,1347,1357,1290,1279,1289,42,1275,1276,1287,0,1346,1347,1358,1278,1279,1290,42,1274,1275,1287,0,1345,1346,1358,1277,1278,1290,42,1265,1274,1287,0,1333,1344,1359,1268,1277,1290,42,1265,1266,1274,0,1333,1334,1344,1268,1269,1277,42,1266,1268,1274,0,1334,1336,1344,1269,1271,1277,42,1266,1267,1268,0,1334,1335,1336,1269,1270,1271,42,1265,1287,1264,0,1333,1359,1332,1268,1290,1267,42,1287,1286,1264,0,1359,1360,1332,1290,1289,1267,42,1264,1286,1288,0,1332,1360,1361,1267,1289,1291,42,1286,1285,1288,0,1360,1362,1361,1289,1288,1291,42,1288,1285,1284,0,1361,1362,1363,1291,1288,1287,42,1288,1284,1289,0,1361,1363,1364,1291,1287,1292,42,1288,1289,1290,0,1361,1364,1365,1291,1292,1293,42,1291,1288,1290,0,1366,1361,1365,1294,1291,1293,42,1263,1288,1291,0,1331,1361,1366,1266,1291,1294,42,1263,1264,1288,0,1331,1332,1361,1266,1267,1291,42,1262,1263,1291,0,1330,1331,1366,1265,1266,1294,42,1292,1262,1291,0,1367,1330,1366,1295,1265,1294,42,1261,1262,1292,0,1329,1330,1367,1264,1265,1295,42,1293,1261,1292,0,1368,1329,1367,1296,1264,1295,42,1261,1293,1260,0,1329,1368,1328,1264,1296,1263,42,1260,1293,1294,0,1328,1368,1369,1263,1296,1297,42,1260,1294,1259,0,1328,1369,1327,1263,1297,1262,42,1259,1294,1295,0,1327,1369,1370,1262,1297,1298,42,1295,1281,1259,0,1370,1352,1327,1298,1284,1262,42,1295,1282,1281,0,1370,1353,1352,1298,1285,1284,42,1259,1281,1278,0,1327,1352,1349,1262,1284,1281,42,1259,1278,1258,0,1327,1349,1326,1262,1281,1261,42,1258,1278,1257,0,1326,1349,1325,1261,1281,1259,42,1291,1290,1292,0,1366,1365,1367,1294,1293,1295,42,1255,1272,1254,0,1323,1341,1322,1257,1275,1256,42,1272,1251,1254,0,1341,1319,1322,1275,1253,1256,42,1232,1256,1253,0,1299,1324,1321,1234,1258,1255,42,1253,1231,1232,0,1321,1298,1299,1255,1233,1234,42,1231,1253,1230,0,1298,1321,1297,1233,1255,1232,42,1230,1253,1252,0,1297,1321,1320,1232,1255,1254,42,1252,1250,1230,0,1320,1318,1297,1254,1252,1232,42,1230,1250,1296,0,1297,1318,1371,1232,1252,1299,42,1296,1250,1211,0,1371,1318,1276,1299,1252,1213,42,1296,1211,1297,0,1371,1276,1372,1299,1213,1300,42,1297,1211,1210,0,1372,1276,1275,1300,1213,1212,42,1297,1210,1225,0,1372,1275,1292,1300,1212,1227,42,1225,1210,1298,0,1292,1275,1373,1227,1212,1301,42,1210,1299,1298,0,1275,1374,1373,1212,1302,1301,42,1210,1207,1299,0,1275,1272,1374,1212,1209,1302,42,1299,1207,1205,0,1374,1272,1268,1302,1209,1207,42,1299,1205,1300,0,1374,1268,1375,1302,1207,1303,42,1205,1202,1300,0,1268,1270,1375,1207,1204,1303,42,1202,1301,1300,0,1270,1376,1375,1204,1304,1303,42,1301,1202,1201,0,1377,1265,1264,1304,1204,1203,42,1301,1201,1302,0,1377,1264,1378,1304,1203,1305,42,1302,1201,1303,0,1378,1264,1379,1305,1203,1306,42,1201,1197,1303,0,1264,1260,1379,1203,1199,1306,42,1303,1197,1195,0,1379,1260,1258,1306,1199,1197,42,1303,1195,1304,0,1379,1258,1380,1306,1197,1307,42,1304,1195,1305,0,1380,1258,1381,1307,1197,1308,42,1195,1306,1305,0,1258,1382,1381,1197,1309,1308,42,1195,1194,1306,0,1258,1257,1382,1197,1196,1309,42,1194,1192,1306,0,1257,1255,1382,1196,1194,1309,42,1306,1192,1189,0,1382,1255,1252,1309,1194,1191,42,1307,1306,1189,0,1383,1382,1252,1310,1309,1191,42,1305,1306,1307,0,1381,1382,1383,1308,1309,1310,42,1305,1307,1308,0,1381,1383,1384,1308,1310,1311,42,1308,1307,1309,0,1384,1383,1385,1311,1310,1312,42,1307,1189,1309,0,1383,1252,1385,1310,1191,1312,42,1309,1189,1310,0,1385,1252,1386,1312,1191,1313,42,1189,1311,1310,0,1252,1387,1386,1191,1314,1313,42,1189,1186,1311,0,1252,1388,1387,1191,1188,1314,42,1186,1312,1311,0,1388,1389,1387,1188,1315,1314,42,1313,1312,1186,0,1390,1391,1247,1316,1315,1188,42,1313,1314,1312,0,1390,1392,1391,1316,1317,1315,42,1315,1314,1313,0,1393,1392,1390,1318,1317,1316,42,1315,1316,1314,0,1393,1394,1392,1318,1319,1317,42,1317,1316,1315,0,1395,1394,1393,1320,1319,1318,42,1317,1318,1316,0,1395,1396,1394,1320,1321,1319,42,1317,1309,1318,0,1397,1385,1398,1320,1312,1321,42,1308,1309,1317,0,1384,1385,1397,1311,1312,1320,42,1308,1317,1319,0,1384,1397,1399,1311,1320,1322,42,1319,1317,1320,0,1399,1397,1400,1322,1320,1323,42,1317,1321,1320,0,1397,1401,1400,1320,1324,1323,42,1317,1315,1321,0,1397,1402,1401,1320,1318,1324,42,1315,1322,1321,0,1402,1403,1401,1318,1325,1324,42,1323,1322,1315,0,1404,1405,1393,1326,1325,1318,42,1323,1324,1322,0,1404,1406,1405,1326,1327,1325,42,1325,1324,1323,0,1407,1406,1404,1328,1327,1326,42,1325,1326,1324,0,1407,1408,1406,1328,1329,1327,42,1327,1326,1325,0,1409,1408,1407,1330,1329,1328,42,1327,1328,1326,0,1409,1410,1408,1330,1331,1329,42,1327,1319,1328,0,1411,1399,1412,1330,1322,1331,42,1329,1319,1327,0,1413,1399,1411,1332,1322,1330,42,1308,1319,1329,0,1384,1399,1413,1311,1322,1332,42,1330,1308,1329,0,1414,1384,1413,1333,1311,1332,42,1331,1308,1330,0,1415,1384,1414,1334,1311,1333,42,1331,1304,1308,0,1415,1380,1384,1334,1307,1311,42,1332,1304,1331,0,1416,1380,1415,1335,1307,1334,42,1332,1303,1304,0,1416,1379,1380,1335,1306,1307,42,1302,1303,1332,0,1378,1379,1416,1305,1306,1335,42,1333,1302,1332,0,1417,1378,1416,1336,1305,1335,42,1301,1302,1333,0,1377,1378,1417,1304,1305,1336,42,1334,1301,1333,0,1418,1377,1417,1337,1304,1336,42,1335,1301,1334,0,1419,1376,1420,1338,1304,1337,42,1335,1300,1301,0,1419,1375,1376,1338,1303,1304,42,1336,1300,1335,0,1421,1375,1419,1339,1303,1338,42,1336,1299,1300,0,1421,1374,1375,1339,1302,1303,42,1298,1299,1336,0,1373,1374,1421,1301,1302,1339,42,1222,1298,1336,0,1289,1373,1421,1224,1301,1339,42,1225,1298,1222,0,1292,1373,1289,1227,1301,1224,42,1223,1225,1222,0,1290,1292,1289,1225,1227,1224,42,1222,1336,1337,0,1289,1421,1422,1224,1339,1340,42,1337,1336,1335,0,1422,1421,1419,1340,1339,1338,42,1337,1335,1338,0,1422,1419,1423,1340,1338,1341,42,1335,1334,1338,0,1419,1420,1423,1338,1337,1341,42,1338,1334,1339,0,1423,1420,1424,1341,1337,1342,42,1339,1334,1340,0,1425,1418,1426,1342,1337,1343,42,1334,1333,1340,0,1418,1417,1426,1337,1336,1343,42,1340,1333,1341,0,1426,1417,1427,1343,1336,1344,42,1333,1342,1341,0,1417,1428,1427,1336,1345,1344,42,1333,1332,1342,0,1417,1416,1428,1336,1335,1345,42,1342,1332,1331,0,1428,1416,1415,1345,1335,1334,42,1342,1331,1343,0,1428,1415,1429,1345,1334,1346,42,1343,1331,1330,0,1429,1415,1414,1346,1334,1333,42,1343,1330,1344,0,1429,1414,1430,1346,1333,1347,42,1344,1330,1329,0,1430,1414,1413,1347,1333,1332,42,1344,1329,1327,0,1430,1413,1411,1347,1332,1330,42,1327,1345,1344,0,1409,1431,1432,1330,1348,1347,42,1327,1325,1345,0,1409,1407,1431,1330,1328,1348,42,1325,1323,1345,0,1407,1404,1431,1328,1326,1348,42,1345,1323,1346,0,1431,1404,1433,1348,1326,1349,42,1323,1315,1346,0,1404,1393,1433,1326,1318,1349,42,1315,1313,1346,0,1393,1390,1433,1318,1316,1349,42,1346,1313,1182,0,1433,1390,1243,1349,1316,1184,42,1182,1313,1186,0,1243,1390,1247,1184,1316,1188,42,1180,1346,1182,0,1241,1433,1243,1182,1349,1184,42,1347,1346,1180,0,1434,1433,1241,1350,1349,1182,42,1345,1346,1347,0,1431,1433,1434,1348,1349,1350,42,1345,1347,1348,0,1431,1434,1435,1348,1350,1351,42,1348,1347,1349,0,1435,1434,1436,1351,1350,1352,42,1349,1347,1350,0,1436,1434,1437,1352,1350,1353,42,1350,1347,1178,0,1437,1434,1239,1353,1350,1180,42,1178,1347,1180,0,1239,1434,1241,1180,1350,1182,42,1176,1350,1178,0,1237,1437,1239,1178,1353,1180,42,1351,1350,1176,0,1438,1437,1237,1354,1353,1178,42,1352,1350,1351,0,1439,1437,1438,1355,1353,1354,42,1349,1350,1352,0,1436,1437,1439,1352,1353,1355,42,1340,1349,1352,0,1440,1436,1439,1343,1352,1355,42,1340,1341,1349,0,1440,1441,1436,1343,1344,1352,42,1341,1348,1349,0,1441,1435,1436,1344,1351,1352,42,1343,1348,1341,0,1442,1435,1441,1346,1351,1344,42,1343,1345,1348,0,1442,1431,1435,1346,1348,1351,42,1344,1345,1343,0,1432,1431,1442,1347,1348,1346,42,1341,1342,1343,0,1427,1428,1429,1344,1345,1346,42,1339,1340,1352,0,1443,1440,1439,1342,1343,1355,42,1339,1352,1353,0,1443,1439,1444,1342,1355,1356,42,1354,1353,1352,0,1445,1444,1439,1357,1356,1355,42,1353,1354,1355,0,1446,1447,1448,1356,1357,1358,42,1355,1354,1356,0,1449,1450,1451,1358,1357,1359,42,1356,1354,1357,0,1451,1450,1452,1359,1357,1360,42,1354,1351,1357,0,1445,1438,1453,1357,1354,1360,42,1354,1352,1351,0,1445,1439,1438,1357,1355,1354,42,1357,1351,1176,0,1453,1438,1237,1360,1354,1178,42,1357,1176,1358,0,1453,1237,1454,1360,1178,1361,42,1358,1176,1359,0,1454,1237,1455,1361,1178,1362,42,1359,1176,1174,0,1455,1237,1235,1362,1178,1176,42,1359,1174,1360,0,1455,1235,1456,1362,1176,1363,42,1360,1174,1173,0,1456,1235,1234,1363,1176,1175,42,1203,1360,1173,0,1266,1456,1234,1205,1363,1175,42,1203,1204,1360,0,1266,1267,1456,1205,1206,1363,42,1358,1360,1204,0,1454,1456,1267,1361,1363,1206,42,1358,1359,1360,0,1454,1455,1456,1361,1362,1363,42,1358,1204,1206,0,1457,1269,1271,1361,1206,1208,42,1361,1358,1206,0,1458,1457,1271,1364,1361,1208,42,1357,1358,1361,0,1452,1457,1458,1360,1361,1364,42,1356,1357,1361,0,1451,1452,1458,1359,1360,1364,42,1362,1356,1361,0,1459,1451,1458,1365,1359,1364,42,1363,1356,1362,0,1460,1451,1459,1366,1359,1365,42,1363,1355,1356,0,1460,1449,1451,1366,1358,1359,42,1364,1355,1363,0,1461,1449,1460,1367,1358,1366,42,1364,1365,1355,0,1462,1463,1448,1367,1368,1358,42,1364,1366,1365,0,1462,1464,1463,1367,1369,1368,42,1219,1366,1364,0,1286,1464,1462,1221,1369,1367,42,1221,1366,1219,0,1288,1464,1286,1223,1369,1221,42,1221,1337,1366,0,1288,1422,1464,1223,1340,1369,42,1221,1222,1337,0,1288,1289,1422,1223,1224,1340,42,1337,1338,1366,0,1422,1423,1464,1340,1341,1369,42,1338,1365,1366,0,1423,1463,1464,1341,1368,1369,42,1338,1339,1365,0,1423,1424,1463,1341,1342,1368,42,1339,1353,1365,0,1424,1446,1463,1342,1356,1368,42,1365,1353,1355,0,1463,1446,1448,1368,1356,1358,42,1219,1364,1216,0,1286,1462,1284,1221,1367,1218,42,1216,1364,1363,0,1281,1461,1460,1218,1367,1366,42,1216,1363,1215,0,1281,1460,1280,1218,1366,1217,42,1215,1363,1362,0,1280,1460,1459,1217,1366,1365,42,1215,1362,1212,0,1280,1459,1277,1217,1365,1214,42,1212,1362,1208,0,1277,1459,1273,1214,1365,1210,42,1362,1361,1208,0,1459,1458,1273,1365,1364,1210,42,1208,1361,1206,0,1273,1458,1271,1210,1364,1208,42,1212,1208,1209,0,1277,1273,1274,1214,1210,1211,42,1203,1173,1367,0,1266,1234,1465,1205,1175,1370,42,1367,1173,1171,0,1465,1234,1232,1370,1175,1173,42,1367,1171,1368,0,1465,1232,1466,1370,1173,1371,42,1368,1171,1169,0,1466,1232,1230,1371,1173,1171,42,1368,1169,1369,0,1466,1230,1467,1371,1171,1372,42,1369,1169,1166,0,1467,1230,1227,1372,1171,1168,42,1369,1166,1370,0,1467,1227,1468,1372,1168,1373,42,1370,1166,1165,0,1468,1227,1226,1373,1168,1167,42,1371,1370,1165,0,1469,1468,1226,1374,1373,1167,42,1372,1370,1371,0,1470,1468,1469,1375,1373,1374,42,1372,1369,1370,0,1470,1467,1468,1375,1372,1373,42,1368,1369,1372,0,1466,1467,1470,1371,1372,1375,42,1373,1368,1372,0,1471,1466,1470,1376,1371,1375,42,1367,1368,1373,0,1465,1466,1471,1370,1371,1376,42,1374,1367,1373,0,1472,1465,1471,1377,1370,1376,42,1203,1367,1374,0,1266,1465,1472,1205,1370,1377,42,1203,1374,1199,0,1266,1472,1262,1205,1377,1201,42,1199,1374,1375,0,1262,1472,1473,1201,1377,1378,42,1374,1376,1375,0,1472,1474,1473,1377,1379,1378,42,1374,1373,1376,0,1472,1471,1474,1377,1376,1379,42,1376,1373,1372,0,1474,1471,1470,1379,1376,1375,42,1372,1377,1376,0,1470,1475,1474,1375,1380,1379,42,1371,1377,1372,0,1469,1475,1470,1374,1380,1375,42,1377,1371,1378,0,1475,1469,1476,1380,1374,1381,42,1378,1371,1379,0,1476,1469,1477,1381,1374,1382,42,1371,1380,1379,0,1469,1478,1477,1374,1383,1382,42,1371,1165,1380,0,1469,1226,1478,1374,1167,1383,42,1380,1165,1163,0,1478,1226,1224,1383,1167,1165,42,1380,1163,1381,0,1478,1224,1479,1383,1165,1384,42,1381,1163,1160,0,1479,1224,1221,1384,1165,1162,42,1381,1160,1382,0,1479,1221,1480,1384,1162,1385,42,1382,1160,1383,0,1480,1221,1481,1385,1162,1386,42,1383,1160,1159,0,1481,1221,1220,1386,1162,1161,42,1383,1159,1157,0,1481,1220,1218,1386,1161,1159,42,1383,1157,1384,0,1481,1218,1482,1386,1159,1387,42,1384,1157,1155,0,1482,1218,1215,1387,1159,1156,42,1384,1155,1385,0,1482,1215,1483,1387,1156,1388,42,1386,1152,1387,0,1484,1213,1485,1389,1154,1390,42,1152,1148,1387,0,1213,1209,1485,1154,1150,1390,42,1387,1148,1388,0,1485,1209,1486,1390,1150,1391,42,1388,1148,1150,0,1486,1209,1211,1391,1150,1152,42,1389,1149,1390,0,1487,1210,1488,1392,1151,1393,42,1149,1392,1391,0,1210,1489,1490,1151,1394,1395,42,1151,1392,1149,0,1212,1489,1210,1153,1394,1151,42,1393,1392,1151,0,1491,1489,1212,1396,1394,1153,42,1154,1156,1395,0,1217,1216,1492,1158,1157,1397,42,1156,1396,1395,0,1216,1493,1492,1157,1398,1397,42,1158,1396,1156,0,1219,1493,1216,1160,1398,1157,42,1158,1397,1396,0,1219,1494,1493,1160,1399,1398,42,1158,1398,1397,0,1219,1495,1494,1160,1400,1399,42,1161,1398,1158,0,1222,1495,1219,1163,1400,1160,42,1399,1398,1161,0,1496,1495,1222,1401,1400,1163,42,1399,1400,1398,0,1496,1497,1495,1401,1402,1400,42,1401,1400,1399,0,1498,1497,1496,1403,1402,1401,42,1402,1400,1401,0,1499,1497,1498,1404,1402,1403,42,1402,1403,1400,0,1499,1500,1497,1404,1405,1402,42,1402,1404,1403,0,1499,1501,1500,1404,1406,1405,42,1405,1404,1402,0,1502,1501,1499,1407,1406,1404,42,1405,1406,1404,0,1502,1503,1501,1407,1408,1406,42,1407,1406,1405,0,1504,1503,1502,1409,1408,1407,42,1407,1408,1406,0,1504,1505,1503,1409,1410,1408,42,1408,1407,1409,0,1505,1504,1506,1410,1409,1411,42,1407,1410,1409,0,1504,1507,1506,1409,1412,1411,42,1407,1411,1410,0,1504,1508,1507,1409,1413,1412,42,1407,1405,1411,0,1504,1502,1508,1409,1407,1413,42,1405,1402,1411,0,1502,1499,1508,1407,1404,1413,42,1411,1402,1401,0,1508,1499,1498,1413,1404,1403,42,1412,1411,1401,0,1509,1508,1498,1414,1413,1403,42,1412,1410,1411,0,1509,1507,1508,1414,1412,1413,42,1412,1413,1410,0,1509,1510,1507,1414,1415,1412,42,1414,1413,1412,0,1511,1510,1509,1416,1415,1414,42,1167,1413,1414,0,1228,1510,1511,1169,1415,1416,42,1415,1413,1167,0,1512,1510,1228,1417,1415,1169,42,1416,1413,1415,0,1513,1510,1512,1418,1415,1417,42,1416,1410,1413,0,1513,1507,1510,1418,1412,1415,42,1416,1409,1410,0,1513,1506,1507,1418,1411,1412,42,1417,1409,1416,0,1514,1506,1513,1419,1411,1418,42,1417,1379,1409,0,1514,1515,1506,1419,1382,1411,42,1378,1379,1417,0,1516,1515,1514,1381,1382,1419,42,1378,1417,1418,0,1516,1514,1517,1381,1419,1420,42,1417,1419,1418,0,1514,1518,1517,1419,1421,1420,42,1420,1419,1417,0,1519,1518,1514,1422,1421,1419,42,1183,1419,1420,0,1244,1518,1519,1185,1421,1422,42,1183,1184,1419,0,1244,1245,1518,1185,1186,1421,42,1184,1421,1419,0,1245,1520,1518,1186,1423,1421,42,1184,1422,1421,0,1245,1521,1520,1186,1424,1423,42,1184,1185,1422,0,1245,1246,1521,1186,1187,1424,42,1185,1423,1422,0,1246,1522,1521,1187,1425,1424,42,1185,1187,1423,0,1246,1248,1522,1187,1189,1425,42,1187,1424,1423,0,1248,1523,1522,1189,1426,1425,42,1187,1425,1424,0,1248,1524,1523,1189,1427,1426,42,1187,1426,1425,0,1248,1525,1524,1189,1428,1427,42,1187,1188,1426,0,1248,1249,1525,1189,1190,1428,42,1188,1427,1426,0,1249,1526,1525,1190,1429,1428,42,1190,1427,1188,0,1251,1526,1249,1192,1429,1190,42,1190,1428,1427,0,1254,1527,1528,1192,1430,1429,42,1191,1428,1190,0,1253,1527,1254,1193,1430,1192,42,1191,1429,1428,0,1253,1529,1527,1193,1431,1430,42,1191,1193,1429,0,1253,1256,1529,1193,1195,1431,42,1193,1430,1429,0,1256,1530,1529,1195,1432,1431,42,1431,1430,1193,0,1531,1530,1256,1433,1432,1195,42,1431,1432,1430,0,1531,1532,1530,1433,1434,1432,42,1198,1432,1431,0,1261,1532,1531,1200,1434,1433,42,1198,1433,1432,0,1261,1533,1532,1200,1435,1434,42,1375,1433,1198,0,1473,1533,1261,1378,1435,1200,42,1376,1433,1375,0,1474,1533,1473,1379,1435,1378,42,1376,1377,1433,0,1474,1475,1533,1379,1380,1435,42,1377,1434,1433,0,1475,1534,1533,1380,1436,1435,42,1377,1418,1434,0,1475,1535,1534,1380,1420,1436,42,1378,1418,1377,0,1516,1517,1536,1381,1420,1380,42,1419,1434,1418,0,1518,1537,1517,1421,1436,1420,42,1419,1421,1434,0,1518,1520,1537,1421,1423,1436,42,1421,1435,1434,0,1520,1538,1537,1423,1437,1436,42,1421,1436,1435,0,1520,1539,1538,1423,1438,1437,42,1421,1422,1436,0,1520,1521,1539,1423,1424,1438,42,1437,1436,1422,0,1540,1539,1521,1439,1438,1424,42,1437,1438,1436,0,1540,1541,1539,1439,1440,1438,42,1437,1439,1438,0,1540,1542,1541,1439,1441,1440,42,1440,1439,1437,0,1543,1542,1540,1442,1441,1439,42,1440,1441,1439,0,1543,1544,1542,1442,1443,1441,42,1440,1442,1441,0,1545,1546,1547,1442,1444,1443,42,1443,1442,1440,0,1548,1546,1545,1445,1444,1442,42,1443,1444,1442,0,1548,1549,1546,1445,1446,1444,42,1443,1432,1444,0,1548,1532,1549,1445,1434,1446,42,1430,1432,1443,0,1530,1532,1548,1432,1434,1445,42,1430,1443,1429,0,1530,1548,1529,1432,1445,1431,42,1429,1443,1440,0,1529,1548,1545,1431,1445,1442,42,1429,1440,1437,0,1550,1543,1540,1431,1442,1439,42,1429,1437,1422,0,1550,1540,1521,1431,1439,1424,42,1429,1422,1445,0,1529,1551,1552,1431,1424,1447,42,1422,1423,1445,0,1551,1553,1552,1424,1425,1447,42,1445,1423,1446,0,1552,1553,1554,1447,1425,1448,42,1423,1424,1446,0,1553,1555,1554,1425,1426,1448,42,1446,1424,1447,0,1554,1555,1556,1448,1426,1449,42,1424,1448,1447,0,1555,1557,1556,1426,1450,1449,42,1425,1448,1424,0,1524,1558,1523,1427,1450,1426,42,1425,1449,1448,0,1524,1559,1558,1427,1451,1450,42,1425,1450,1449,0,1524,1560,1559,1427,1452,1451,42,1426,1450,1425,0,1525,1560,1524,1428,1452,1427,42,1451,1450,1426,0,1561,1560,1525,1453,1452,1428,42,1451,1452,1450,0,1561,1562,1560,1453,1454,1452,42,1453,1452,1451,0,1563,1564,1565,1455,1454,1453,42,1453,1454,1452,0,1563,1566,1564,1455,1456,1454,42,1455,1454,1453,0,1567,1566,1563,1457,1456,1455,42,1455,1456,1454,0,1567,1568,1566,1457,1458,1456,42,1455,1457,1456,0,1567,1569,1568,1457,1459,1458,42,1455,1458,1457,0,1567,1570,1569,1457,1460,1459,42,1455,1448,1458,0,1567,1557,1570,1457,1450,1460,42,1448,1455,1447,0,1557,1567,1556,1450,1457,1449,42,1447,1455,1453,0,1556,1567,1563,1449,1457,1455,42,1447,1453,1459,0,1556,1563,1571,1449,1455,1461,42,1459,1453,1451,0,1571,1563,1565,1461,1455,1453,42,1427,1459,1451,0,1528,1571,1565,1429,1461,1453,42,1428,1459,1427,0,1527,1571,1528,1430,1461,1429,42,1428,1446,1459,0,1527,1554,1571,1430,1448,1461,42,1445,1446,1428,0,1552,1554,1527,1447,1448,1430,42,1428,1429,1445,0,1527,1529,1552,1430,1431,1447,42,1459,1446,1447,0,1571,1554,1556,1461,1448,1449,42,1427,1451,1426,0,1526,1561,1525,1429,1453,1428,42,1448,1449,1458,0,1558,1559,1572,1450,1451,1460,42,1458,1449,1460,0,1572,1559,1573,1460,1451,1462,42,1449,1450,1460,0,1559,1560,1573,1451,1452,1462,42,1460,1450,1461,0,1573,1560,1574,1462,1452,1463,42,1452,1461,1450,0,1562,1574,1560,1454,1463,1452,42,1452,1462,1461,0,1562,1575,1574,1454,1464,1463,42,1452,1456,1462,0,1564,1568,1576,1454,1458,1464,42,1454,1456,1452,0,1566,1568,1564,1456,1458,1454,42,1462,1456,1463,0,1576,1568,1577,1464,1458,1465,42,1456,1464,1463,0,1568,1578,1577,1458,1466,1465,42,1465,1464,1456,0,1579,1578,1568,1467,1466,1458,42,1465,1466,1464,0,1579,1580,1578,1467,1468,1466,42,1467,1466,1465,0,1581,1580,1579,1469,1468,1467,42,1467,1468,1466,0,1581,1582,1580,1469,1470,1468,42,1467,1469,1468,0,1583,1584,1585,1469,1471,1470,42,1470,1469,1467,0,1586,1584,1583,1472,1471,1469,42,1471,1469,1470,0,1587,1584,1586,1473,1471,1472,42,1469,1471,1472,0,1584,1587,1588,1471,1473,1474,42,1472,1471,1473,0,1588,1587,1589,1474,1473,1475,42,1463,1473,1471,0,1590,1589,1587,1465,1475,1473,42,1464,1473,1463,0,1578,1591,1577,1466,1475,1465,42,1464,1474,1473,0,1578,1592,1591,1466,1476,1475,42,1466,1474,1464,0,1580,1592,1578,1468,1476,1466,42,1466,1475,1474,0,1580,1593,1592,1468,1477,1476,42,1466,1476,1475,0,1580,1594,1593,1468,1478,1477,42,1466,1468,1476,0,1580,1582,1594,1468,1470,1478,42,1468,1477,1476,0,1585,1595,1596,1470,1479,1478,42,1468,1478,1477,0,1585,1597,1595,1470,1480,1479,42,1468,1469,1478,0,1585,1584,1597,1470,1471,1480,42,1469,1472,1478,0,1584,1588,1597,1471,1474,1480,42,1478,1472,1477,0,1597,1588,1595,1480,1474,1479,42,1477,1472,1479,0,1595,1588,1598,1479,1474,1481,42,1473,1479,1472,0,1589,1598,1588,1475,1481,1474,42,1473,1480,1479,0,1589,1599,1598,1475,1482,1481,42,1481,1480,1473,0,1600,1601,1591,1483,1482,1475,42,1481,1482,1480,0,1600,1602,1601,1483,1484,1482,42,1475,1482,1481,0,1593,1602,1600,1477,1484,1483,42,1475,1483,1482,0,1593,1603,1602,1477,1485,1484,42,1475,1484,1483,0,1593,1604,1603,1477,1486,1485,42,1475,1485,1484,0,1593,1605,1604,1477,1487,1486,42,1475,1476,1485,0,1593,1594,1605,1477,1478,1487,42,1476,1486,1485,0,1596,1606,1607,1478,1488,1487,42,1476,1477,1486,0,1596,1595,1606,1478,1479,1488,42,1477,1479,1486,0,1595,1598,1606,1479,1481,1488,42,1479,1487,1486,0,1598,1608,1606,1481,1489,1488,42,1480,1487,1479,0,1599,1608,1598,1482,1489,1481,42,1480,1488,1487,0,1599,1609,1608,1482,1490,1489,42,1480,1489,1488,0,1601,1610,1611,1482,1491,1490,42,1482,1489,1480,0,1602,1610,1601,1484,1491,1482,42,1482,1490,1489,0,1602,1612,1610,1484,1492,1491,42,1483,1490,1482,0,1603,1612,1602,1485,1492,1484,42,1483,1491,1490,0,1603,1613,1612,1485,1493,1492,42,1483,1492,1491,0,1603,1614,1613,1485,1494,1493,42,1483,1484,1492,0,1603,1604,1614,1485,1486,1494,42,1493,1492,1484,0,1615,1614,1604,1495,1494,1486,42,1493,1494,1492,0,1615,1616,1614,1495,1496,1494,42,1493,1496,1495,0,1615,1617,1618,1495,1497,1498,42,1497,1496,1493,0,1619,1620,1621,1499,1497,1495,42,1498,1496,1497,0,1622,1620,1619,1500,1497,1499,42,1498,1499,1496,0,1622,1623,1620,1500,1501,1497,42,1498,1500,1499,0,1622,1624,1623,1500,1502,1501,42,1501,1500,1498,0,1625,1624,1622,1503,1502,1500,42,1501,1502,1500,0,1625,1626,1624,1503,1504,1502,42,1488,1502,1501,0,1609,1626,1625,1490,1504,1503,42,1488,1503,1502,0,1611,1627,1628,1490,1505,1504,42,1489,1503,1488,0,1610,1627,1611,1491,1505,1490,42,1507,1508,1506,0,1629,1630,1631,1506,1507,1508,42,1507,1509,1508,0,1629,1632,1630,1506,1509,1507,42,1507,1510,1509,0,1629,1633,1632,1506,1510,1509,42,1511,1510,1507,0,1634,1633,1629,1511,1510,1506,42,1495,1513,1510,0,1618,1635,1633,1498,1512,1510,42,1514,1513,1495,0,1636,1635,1618,1513,1512,1498,42,1515,1514,1516,0,1637,1636,1638,1514,1513,1515,42,1519,1516,1518,0,1639,1638,1640,1516,1515,1517,42,1521,1518,1522,0,1641,1640,1642,1518,1517,1519,42,1522,1518,1500,0,1642,1640,1643,1519,1517,1502,42,1496,1514,1495,0,1617,1636,1618,1497,1513,1498,42,1502,1522,1500,0,1628,1642,1643,1504,1519,1502,42,1503,1525,1502,0,1627,1644,1628,1505,1520,1504,42,1505,1508,1522,0,1645,1630,1642,1521,1507,1519,42,1506,1508,1505,0,1631,1630,1645,1508,1507,1521,42,1509,1521,1508,0,1632,1641,1630,1509,1518,1507,42,1509,1526,1521,0,1632,1646,1641,1509,1522,1518,42,1509,1513,1526,0,1632,1635,1646,1509,1512,1522,42,1510,1513,1509,0,1633,1635,1632,1510,1512,1509,42,1513,1515,1520,0,1635,1637,1647,1512,1514,1523,42,1490,1504,1489,0,1612,1648,1610,1492,1524,1491,42,1488,1501,1487,0,1609,1625,1608,1490,1503,1489,42,1487,1501,1498,0,1608,1625,1622,1489,1503,1500,42,1486,1487,1498,0,1606,1608,1622,1488,1489,1500,42,1486,1498,1485,0,1606,1622,1607,1488,1500,1487,42,1485,1498,1497,0,1607,1622,1619,1487,1500,1499,42,1485,1497,1484,0,1605,1649,1604,1487,1499,1486,42,1497,1493,1484,0,1649,1615,1604,1499,1495,1486,42,1475,1481,1474,0,1593,1600,1592,1477,1483,1476,42,1474,1481,1473,0,1592,1600,1591,1476,1483,1475,42,1463,1471,1527,0,1590,1587,1650,1465,1473,1525,42,1470,1527,1471,0,1586,1650,1587,1472,1525,1473,42,1460,1527,1470,0,1573,1650,1586,1462,1525,1472,42,1460,1461,1527,0,1573,1574,1650,1462,1463,1525,42,1461,1462,1527,0,1574,1575,1650,1463,1464,1525,42,1527,1462,1463,0,1650,1575,1590,1525,1464,1465,42,1460,1470,1528,0,1573,1586,1651,1462,1472,1526,42,1470,1467,1528,0,1586,1583,1651,1472,1469,1526,42,1528,1467,1465,0,1652,1581,1579,1526,1469,1467,42,1457,1528,1465,0,1569,1652,1579,1459,1526,1467,42,1458,1528,1457,0,1570,1652,1569,1460,1526,1459,42,1458,1460,1528,0,1572,1573,1651,1460,1462,1526,42,1457,1465,1456,0,1569,1579,1568,1459,1467,1458,42,1432,1434,1444,0,1532,1534,1549,1434,1436,1446,42,1432,1433,1434,0,1532,1533,1534,1434,1435,1436,42,1444,1434,1529,0,1549,1534,1653,1446,1436,1527,42,1529,1434,1435,0,1653,1534,1654,1527,1436,1437,42,1529,1435,1530,0,1653,1654,1655,1527,1437,1528,42,1435,1438,1530,0,1538,1541,1656,1437,1440,1528,42,1436,1438,1435,0,1539,1541,1538,1438,1440,1437,42,1438,1531,1530,0,1541,1657,1656,1440,1529,1528,42,1439,1531,1438,0,1542,1657,1541,1441,1529,1440,42,1439,1532,1531,0,1542,1658,1657,1441,1530,1529,42,1533,1532,1439,0,1659,1658,1542,1531,1530,1441,42,1532,1533,1534,0,1658,1659,1660,1530,1531,1532,42,1533,1535,1534,0,1659,1661,1660,1531,1533,1532,42,1536,1535,1533,0,1662,1663,1664,1534,1533,1531,42,1536,1537,1535,0,1662,1665,1663,1534,1535,1533,42,1538,1537,1536,0,1666,1665,1662,1536,1535,1534,42,1538,1539,1537,0,1666,1667,1665,1536,1537,1535,42,1538,1540,1539,0,1666,1668,1667,1536,1538,1537,42,1538,1541,1540,0,1666,1669,1668,1536,1539,1538,42,1541,1538,1542,0,1669,1666,1670,1539,1536,1540,42,1542,1538,1536,0,1670,1666,1662,1540,1536,1534,42,1536,1543,1542,0,1662,1671,1670,1534,1541,1540,42,1544,1543,1536,0,1672,1671,1662,1542,1541,1534,42,1442,1543,1544,0,1546,1671,1672,1444,1541,1542,42,1442,1529,1543,0,1546,1653,1671,1444,1527,1541,42,1442,1444,1529,0,1546,1549,1653,1444,1446,1527,42,1529,1530,1543,0,1653,1655,1671,1527,1528,1541,42,1543,1530,1542,0,1671,1655,1670,1541,1528,1540,42,1530,1545,1542,0,1655,1673,1670,1528,1543,1540,42,1530,1531,1545,0,1656,1657,1674,1528,1529,1543,42,1545,1531,1546,0,1674,1657,1675,1543,1529,1544,42,1531,1532,1546,0,1657,1658,1675,1529,1530,1544,42,1532,1534,1546,0,1658,1660,1675,1530,1532,1544,42,1546,1534,1547,0,1675,1660,1676,1544,1532,1545,42,1534,1548,1547,0,1660,1677,1676,1532,1546,1545,42,1535,1548,1534,0,1661,1677,1660,1533,1546,1532,42,1535,1549,1548,0,1661,1678,1677,1533,1547,1546,42,1535,1550,1549,0,1663,1679,1680,1533,1548,1547,42,1537,1550,1535,0,1665,1679,1663,1535,1548,1533,42,1537,1539,1550,0,1665,1667,1679,1535,1537,1548,42,1539,1551,1550,0,1667,1681,1679,1537,1549,1548,42,1539,1552,1551,0,1667,1682,1681,1537,1550,1549,42,1539,1540,1552,0,1667,1668,1682,1537,1538,1550,42,1540,1553,1552,0,1668,1683,1682,1538,1551,1550,42,1540,1554,1553,0,1684,1685,1686,1538,1552,1551,42,1547,1554,1540,0,1676,1685,1684,1545,1552,1538,42,1548,1554,1547,0,1677,1685,1676,1546,1552,1545,42,1548,1555,1554,0,1677,1687,1685,1546,1553,1552,42,1556,1555,1548,0,1688,1687,1677,1554,1553,1546,42,1557,1555,1556,0,1689,1687,1688,1555,1553,1554,42,1558,1555,1557,0,1690,1687,1689,1556,1553,1555,42,1554,1555,1558,0,1685,1687,1690,1552,1553,1556,42,1553,1554,1558,0,1686,1685,1690,1551,1552,1556,42,1553,1558,1559,0,1686,1690,1691,1551,1556,1557,42,1559,1558,1560,0,1691,1690,1692,1557,1556,1558,42,1558,1557,1560,0,1690,1689,1692,1556,1555,1558,42,1557,1561,1560,0,1689,1693,1692,1555,1559,1558,42,1562,1561,1557,0,1694,1693,1689,1560,1559,1555,42,1562,1563,1561,0,1694,1695,1693,1560,1561,1559,42,1562,1564,1563,0,1696,1697,1698,1560,1562,1561,42,1565,1564,1562,0,1699,1697,1696,1563,1562,1560,42,1565,1566,1564,0,1699,1700,1697,1563,1564,1562,42,1567,1566,1565,0,1701,1700,1699,1565,1564,1563,42,1568,1566,1567,0,1702,1700,1701,1566,1564,1565,42,1568,1569,1566,0,1702,1703,1700,1566,1567,1564,42,1568,1570,1569,0,1704,1705,1706,1566,1568,1567,42,1568,1560,1570,0,1704,1692,1705,1566,1558,1568,42,1559,1560,1568,0,1691,1692,1704,1557,1558,1566,42,1559,1568,1567,0,1707,1702,1701,1557,1566,1565,42,1559,1567,1552,0,1707,1701,1682,1557,1565,1550,42,1552,1567,1551,0,1682,1701,1681,1550,1565,1549,42,1567,1565,1551,0,1701,1699,1681,1565,1563,1549,42,1551,1565,1562,0,1681,1699,1696,1549,1563,1560,42,1551,1562,1556,0,1681,1696,1708,1549,1560,1554,42,1556,1562,1557,0,1688,1694,1689,1554,1560,1555,42,1551,1556,1549,0,1681,1708,1680,1549,1554,1547,42,1548,1549,1556,0,1677,1678,1688,1546,1547,1554,42,1550,1551,1549,0,1679,1681,1680,1548,1549,1547,42,1552,1553,1559,0,1682,1683,1707,1550,1551,1557,42,1560,1561,1570,0,1692,1693,1705,1558,1559,1568,42,1561,1571,1570,0,1693,1709,1705,1559,1569,1568,42,1563,1571,1561,0,1695,1709,1693,1561,1569,1559,42,1563,1572,1571,0,1695,1710,1709,1561,1570,1569,42,1563,1573,1572,0,1698,1711,1712,1561,1571,1570,42,1563,1574,1573,0,1698,1713,1711,1561,1572,1571,42,1564,1574,1563,0,1697,1713,1698,1562,1572,1561,42,1566,1574,1564,0,1700,1713,1697,1564,1572,1562,42,1574,1566,1575,0,1713,1700,1714,1572,1564,1573,42,1566,1576,1575,0,1700,1715,1714,1564,1574,1573,42,1569,1576,1566,0,1703,1715,1700,1567,1574,1564,42,1569,1577,1576,0,1703,1716,1715,1567,1575,1574,42,1569,1578,1577,0,1706,1717,1718,1567,1576,1575,42,1570,1578,1569,0,1705,1717,1706,1568,1576,1567,42,1571,1578,1570,0,1709,1717,1705,1569,1576,1568,42,1571,1579,1578,0,1709,1719,1717,1569,1577,1576,42,1572,1579,1571,0,1710,1719,1709,1570,1577,1569,42,1572,1580,1579,0,1710,1720,1719,1570,1578,1577,42,1572,1581,1580,0,1712,1721,1722,1570,1579,1578,42,1573,1581,1572,0,1711,1721,1712,1571,1579,1570,42,1583,1582,1573,0,1723,1724,1711,1580,1581,1571,42,1575,1588,1585,0,1714,1725,1726,1573,1582,1583,42,1575,1576,1588,0,1714,1715,1725,1573,1574,1582,42,1576,1589,1588,0,1715,1727,1725,1574,1584,1582,42,1577,1589,1576,0,1716,1727,1715,1575,1584,1574,42,1577,1590,1589,0,1718,1728,1729,1575,1585,1584,42,1578,1590,1577,0,1717,1728,1718,1576,1585,1575,42,1578,1591,1590,0,1717,1730,1728,1576,1586,1585,42,1592,1591,1578,0,1731,1730,1717,1587,1586,1576,42,1595,1594,1592,0,1732,1733,1734,1588,1589,1587,42,1596,1594,1595,0,1735,1733,1732,1590,1589,1588,42,1602,1603,1601,0,1736,1737,1738,1591,1592,1593,42,1604,1603,1602,0,1739,1737,1736,1594,1592,1591,42,1589,1605,1588,0,1727,1740,1725,1584,1595,1582,42,1589,1590,1603,0,1727,1741,1737,1584,1585,1592,42,1590,1601,1603,0,1741,1738,1737,1585,1593,1592,42,1586,1604,1584,0,1742,1739,1743,1596,1594,1597,42,1584,1604,1608,0,1743,1739,1744,1597,1594,1598,42,1604,1602,1608,0,1739,1736,1744,1594,1591,1598,42,1608,1602,1609,0,1744,1736,1745,1598,1591,1599,42,1608,1609,1596,0,1744,1745,1735,1598,1599,1590,42,1608,1596,1610,0,1744,1735,1746,1598,1590,1600,42,1584,1610,1612,0,1743,1746,1747,1597,1600,1601,42,1584,1608,1610,0,1743,1744,1746,1597,1598,1600,42,1580,1595,1592,0,1722,1732,1734,1578,1588,1587,42,1580,1592,1579,0,1720,1731,1719,1578,1587,1577,42,1579,1592,1578,0,1719,1731,1717,1577,1587,1576,42,1581,1613,1580,0,1721,1748,1722,1579,1602,1578,42,1575,1585,1583,0,1714,1726,1723,1573,1583,1580,42,1575,1583,1574,0,1714,1723,1713,1573,1580,1572,42,1574,1583,1573,0,1713,1723,1711,1572,1580,1571,42,1541,1547,1540,0,1749,1676,1684,1539,1545,1538,42,1541,1546,1547,0,1749,1675,1676,1539,1544,1545,42,1545,1546,1541,0,1674,1675,1749,1543,1544,1539,42,1542,1545,1541,0,1670,1673,1669,1540,1543,1539,42,1442,1544,1441,0,1546,1672,1547,1444,1542,1443,42,1544,1536,1441,0,1672,1662,1547,1542,1534,1443,42,1441,1536,1533,0,1547,1662,1664,1443,1534,1531,42,1439,1441,1533,0,1542,1544,1659,1441,1443,1531,42,1199,1375,1198,0,1262,1473,1261,1201,1378,1200,42,1196,1198,1431,0,1259,1261,1531,1198,1200,1433,42,1196,1431,1193,0,1259,1531,1256,1198,1433,1195,42,1183,1420,1614,0,1244,1519,1750,1185,1422,1603,42,1614,1420,1417,0,1750,1519,1514,1603,1422,1419,42,1417,1416,1614,0,1514,1513,1750,1419,1418,1603,42,1614,1416,1615,0,1750,1513,1751,1603,1418,1604,42,1615,1416,1415,0,1751,1513,1512,1604,1418,1417,42,1615,1415,1616,0,1751,1512,1752,1604,1417,1605,42,1170,1616,1415,0,1231,1752,1512,1172,1605,1417,42,1172,1616,1170,0,1233,1752,1231,1174,1605,1172,42,1172,1617,1616,0,1233,1753,1752,1174,1606,1605,42,1177,1617,1172,0,1238,1753,1233,1179,1606,1174,42,1177,1179,1617,0,1238,1240,1753,1179,1181,1606,42,1179,1618,1617,0,1240,1754,1753,1181,1607,1606,42,1179,1181,1618,0,1240,1242,1754,1181,1183,1607,42,1181,1183,1618,0,1242,1244,1754,1183,1185,1607,42,1618,1183,1614,0,1754,1244,1750,1607,1185,1603,42,1615,1618,1614,0,1751,1754,1750,1604,1607,1603,42,1617,1618,1615,0,1753,1754,1751,1606,1607,1604,42,1617,1615,1616,0,1753,1751,1752,1606,1604,1605,42,1175,1177,1172,0,1236,1238,1233,1177,1179,1174,42,1170,1415,1168,0,1231,1512,1229,1172,1417,1170,42,1168,1415,1167,0,1229,1512,1228,1170,1417,1169,42,1379,1408,1409,0,1515,1505,1506,1382,1410,1411,42,1379,1381,1408,0,1477,1479,1755,1382,1384,1410,42,1380,1381,1379,0,1478,1479,1477,1383,1384,1382,42,1381,1382,1408,0,1479,1480,1755,1384,1385,1410,42,1408,1382,1406,0,1755,1480,1756,1410,1385,1408,42,1406,1382,1619,0,1756,1480,1757,1408,1385,1608,42,1382,1383,1619,0,1480,1481,1757,1385,1386,1608,42,1383,1620,1619,0,1481,1758,1757,1386,1609,1608,42,1383,1621,1620,0,1481,1759,1758,1386,1610,1609,42,1383,1384,1621,0,1481,1482,1759,1386,1387,1610,42,1384,1622,1621,0,1482,1760,1759,1387,1611,1610,42,1384,1385,1622,0,1482,1483,1760,1387,1388,1611,42,1386,1387,1623,0,1484,1485,1761,1389,1390,1612,42,1623,1387,1624,0,1761,1485,1762,1612,1390,1613,42,1388,1625,1624,0,1486,1763,1762,1391,1614,1613,42,1390,1391,1627,0,1488,1490,1764,1393,1395,1615,42,1626,1627,1625,0,1765,1764,1763,1616,1615,1614,42,1633,1631,1634,0,1766,1767,1768,1617,1618,1619,42,1634,1631,1635,0,1768,1767,1769,1619,1618,1620,42,1631,1636,1635,0,1767,1770,1769,1618,1621,1620,42,1636,1630,1392,0,1771,1772,1489,1621,1622,1394,42,1392,1630,1391,0,1489,1772,1490,1394,1622,1395,42,1395,1636,1394,0,1492,1771,1773,1397,1621,1623,42,1396,1636,1395,0,1493,1771,1492,1398,1621,1397,42,1397,1636,1396,0,1494,1771,1493,1399,1621,1398,42,1397,1637,1636,0,1494,1774,1771,1399,1624,1621,42,1398,1637,1397,0,1495,1774,1494,1400,1624,1399,42,1398,1400,1637,0,1495,1497,1774,1400,1402,1624,42,1635,1637,1400,0,1769,1774,1497,1620,1624,1402,42,1636,1637,1635,0,1770,1774,1769,1621,1624,1620,42,1403,1635,1400,0,1500,1769,1497,1405,1620,1402,42,1404,1635,1403,0,1501,1769,1500,1406,1620,1405,42,1404,1638,1635,0,1501,1775,1769,1406,1625,1620,42,1619,1638,1404,0,1776,1775,1501,1608,1625,1406,42,1619,1620,1638,0,1776,1777,1775,1608,1609,1625,42,1620,1634,1638,0,1758,1778,1779,1609,1619,1625,42,1620,1621,1634,0,1758,1759,1778,1609,1610,1619,42,1622,1634,1621,0,1760,1778,1759,1611,1619,1610,42,1622,1639,1634,0,1760,1780,1778,1611,1626,1619,42,1624,1633,1634,0,1762,1781,1778,1613,1617,1619,42,1624,1625,1633,0,1762,1763,1781,1613,1614,1617,42,1634,1635,1638,0,1768,1769,1775,1619,1620,1625,42,1406,1619,1404,0,1503,1776,1501,1408,1608,1406,42,1167,1414,1162,0,1228,1511,1223,1169,1416,1164,42,1414,1161,1162,0,1511,1222,1223,1416,1163,1164,42,1414,1399,1161,0,1511,1496,1222,1416,1401,1163,42,1414,1412,1399,0,1511,1509,1496,1416,1414,1401,42,1399,1412,1401,0,1496,1509,1498,1401,1414,1403,42,1167,1162,1164,0,1228,1223,1225,1169,1164,1166,42,1153,1393,1151,0,1214,1491,1212,1155,1396,1153,42,1200,1203,1199,0,1263,1266,1262,1202,1205,1201,42,1304,1305,1308,0,1380,1381,1384,1307,1308,1311,42,1319,1320,1328,0,1399,1400,1412,1322,1323,1331,42,1328,1320,1640,0,1412,1400,1782,1331,1323,1627,42,1321,1640,1320,0,1401,1782,1400,1324,1627,1323,42,1321,1641,1640,0,1401,1783,1782,1324,1628,1627,42,1321,1642,1641,0,1401,1784,1783,1324,1629,1628,42,1321,1322,1642,0,1401,1403,1784,1324,1325,1629,42,1322,1643,1642,0,1405,1785,1786,1325,1630,1629,42,1324,1643,1322,0,1406,1785,1405,1327,1630,1325,42,1324,1326,1643,0,1406,1408,1785,1327,1329,1630,42,1326,1644,1643,0,1408,1787,1785,1329,1631,1630,42,1328,1644,1326,0,1410,1787,1408,1331,1631,1329,42,1328,1645,1644,0,1410,1788,1787,1331,1632,1631,42,1328,1640,1645,0,1412,1782,1789,1331,1627,1632,42,1645,1640,1646,0,1789,1782,1790,1632,1627,1633,42,1641,1646,1640,0,1783,1790,1782,1628,1633,1627,42,1646,1641,1647,0,1790,1783,1791,1633,1628,1634,42,1641,1648,1647,0,1783,1792,1791,1628,1635,1634,42,1642,1648,1641,0,1784,1792,1783,1629,1635,1628,42,1649,1648,1642,0,1793,1794,1786,1636,1635,1629,42,1649,1650,1648,0,1793,1795,1794,1636,1637,1635,42,1649,1651,1650,0,1793,1796,1795,1636,1638,1637,42,1651,1649,1644,0,1796,1793,1787,1638,1636,1631,42,1644,1649,1643,0,1787,1793,1785,1631,1636,1630,42,1642,1643,1649,0,1786,1785,1793,1629,1630,1636,42,1645,1651,1644,0,1788,1796,1787,1632,1638,1631,42,1652,1651,1645,0,1797,1796,1788,1639,1638,1632,42,1653,1651,1652,0,1798,1796,1797,1640,1638,1639,42,1650,1651,1653,0,1795,1796,1798,1637,1638,1640,42,1650,1653,1654,0,1795,1798,1799,1637,1640,1641,42,1653,1655,1654,0,1798,1800,1799,1640,1642,1641,42,1656,1655,1653,0,1801,1800,1798,1643,1642,1640,42,1656,1657,1655,0,1801,1802,1800,1643,1644,1642,42,1656,1658,1657,0,1803,1804,1805,1643,1645,1644,42,1656,1646,1658,0,1803,1790,1804,1643,1633,1645,42,1646,1656,1652,0,1790,1803,1806,1633,1643,1639,42,1652,1656,1653,0,1797,1801,1798,1639,1643,1640,42,1645,1646,1652,0,1789,1790,1806,1632,1633,1639,42,1659,1658,1646,0,1807,1804,1790,1646,1645,1633,42,1659,1660,1658,0,1807,1808,1804,1646,1647,1645,42,1659,1661,1660,0,1807,1809,1808,1646,1648,1647,42,1659,1662,1661,0,1807,1810,1809,1646,1649,1648,42,1662,1659,1647,0,1810,1807,1791,1649,1646,1634,42,1647,1659,1646,0,1791,1807,1790,1634,1646,1633,42,1647,1648,1662,0,1791,1792,1810,1634,1635,1649,42,1648,1650,1662,0,1794,1795,1811,1635,1637,1649,42,1650,1654,1662,0,1795,1799,1811,1637,1641,1649,42,1654,1661,1662,0,1799,1812,1811,1641,1648,1649,42,1654,1663,1661,0,1799,1813,1812,1641,1650,1648,42,1655,1663,1654,0,1800,1813,1799,1642,1650,1641,42,1655,1664,1663,0,1800,1814,1813,1642,1651,1650,42,1665,1664,1655,0,1815,1814,1800,1652,1651,1642,42,1666,1664,1665,0,1816,1814,1815,1653,1651,1652,42,1667,1664,1666,0,1817,1814,1816,1654,1651,1653,42,1663,1664,1667,0,1813,1814,1817,1650,1651,1654,42,1668,1663,1667,0,1818,1813,1817,1655,1650,1654,42,1663,1668,1661,0,1813,1818,1812,1650,1655,1648,42,1661,1668,1669,0,1809,1819,1820,1648,1655,1656,42,1669,1668,1670,0,1820,1819,1821,1656,1655,1657,42,1668,1667,1670,0,1818,1817,1822,1655,1654,1657,42,1670,1667,1671,0,1822,1817,1823,1657,1654,1658,42,1667,1666,1671,0,1817,1816,1823,1654,1653,1658,42,1671,1666,1672,0,1823,1816,1824,1658,1653,1659,42,1673,1672,1666,0,1825,1824,1816,1660,1659,1653,42,1673,1674,1672,0,1825,1826,1824,1660,1661,1659,42,1673,1675,1674,0,1827,1828,1829,1660,1662,1661,42,1676,1675,1673,0,1830,1828,1827,1663,1662,1660,42,1677,1675,1676,0,1831,1828,1830,1664,1662,1663,42,1677,1678,1675,0,1831,1832,1828,1664,1665,1662,42,1677,1679,1678,0,1831,1833,1832,1664,1666,1665,42,1677,1680,1679,0,1831,1834,1833,1664,1667,1666,42,1677,1681,1680,0,1831,1835,1834,1664,1668,1667,42,1682,1681,1677,0,1836,1835,1831,1669,1668,1664,42,1682,1683,1681,0,1837,1838,1839,1669,1670,1668,42,1682,1671,1683,0,1837,1823,1838,1669,1658,1670,42,1670,1671,1682,0,1822,1823,1837,1657,1658,1669,42,1682,1684,1670,0,1836,1840,1821,1669,1671,1657,42,1684,1682,1677,0,1840,1836,1831,1671,1669,1664,42,1684,1677,1676,0,1840,1831,1830,1671,1664,1663,42,1684,1676,1685,0,1840,1830,1841,1671,1663,1672,42,1685,1676,1673,0,1841,1830,1827,1672,1663,1660,42,1685,1673,1665,0,1841,1827,1842,1672,1660,1652,42,1665,1673,1666,0,1815,1825,1816,1652,1660,1653,42,1657,1685,1665,0,1805,1841,1842,1644,1672,1652,42,1657,1686,1685,0,1805,1843,1841,1644,1673,1672,42,1657,1658,1686,0,1805,1804,1843,1644,1645,1673,42,1658,1660,1686,0,1804,1808,1843,1645,1647,1673,42,1660,1685,1686,0,1808,1841,1843,1647,1672,1673,42,1660,1669,1685,0,1808,1820,1841,1647,1656,1672,42,1660,1661,1669,0,1808,1809,1820,1647,1648,1656,42,1669,1684,1685,0,1820,1840,1841,1656,1671,1672,42,1670,1684,1669,0,1821,1840,1820,1657,1671,1656,42,1655,1657,1665,0,1800,1802,1815,1642,1644,1652,42,1671,1672,1683,0,1823,1824,1838,1658,1659,1670,42,1672,1687,1683,0,1824,1844,1838,1659,1674,1670,42,1674,1687,1672,0,1826,1844,1824,1661,1674,1659,42,1674,1688,1687,0,1826,1845,1844,1661,1675,1674,42,1674,1689,1688,0,1829,1846,1847,1661,1676,1675,42,1674,1678,1689,0,1829,1832,1846,1661,1665,1676,42,1674,1675,1678,0,1829,1828,1832,1661,1662,1665,42,1689,1678,1690,0,1846,1832,1848,1676,1665,1677,42,1679,1690,1678,0,1833,1848,1832,1666,1677,1665,42,1679,1691,1690,0,1833,1849,1848,1666,1678,1677,42,1679,1692,1691,0,1833,1850,1849,1666,1679,1678,42,1679,1680,1692,0,1833,1834,1850,1666,1667,1679,42,1680,1693,1692,0,1834,1851,1850,1667,1680,1679,42,1694,1693,1680,0,1852,1851,1834,1681,1680,1667,42,1696,1695,1694,0,1853,1854,1855,1682,1683,1681,42,1696,1697,1695,0,1853,1856,1854,1682,1684,1683,42,1696,1698,1697,0,1853,1857,1856,1682,1685,1684,42,1699,1698,1696,0,1858,1857,1853,1686,1685,1682,42,1700,1701,1698,0,1859,1860,1861,1687,1688,1685,42,1706,1704,1705,0,1862,1863,1864,1689,1690,1691,42,1706,1707,1704,0,1862,1865,1863,1689,1692,1690,42,1706,1708,1707,0,1862,1866,1865,1689,1693,1692,42,1709,1708,1706,0,1867,1866,1862,1694,1693,1689,42,1693,1711,1692,0,1851,1868,1850,1680,1695,1679,42,1695,1712,1693,0,1869,1870,1851,1683,1696,1680,42,1708,1722,1707,0,1866,1871,1865,1693,1697,1692,42,1707,1722,1721,0,1865,1871,1872,1692,1697,1698,42,1707,1721,1720,0,1865,1872,1873,1692,1698,1699,42,1707,1720,1704,0,1865,1873,1863,1692,1699,1690,42,1726,1702,1700,0,1874,1875,1859,1700,1701,1687,42,1688,1726,1700,0,1847,1874,1859,1675,1700,1687,42,1689,1726,1688,0,1846,1874,1847,1676,1700,1675,42,1689,1690,1725,0,1846,1848,1876,1676,1677,1702,42,1688,1700,1699,0,1845,1877,1858,1675,1687,1686,42,1688,1699,1687,0,1845,1858,1844,1675,1686,1674,42,1687,1699,1696,0,1844,1858,1853,1674,1686,1682,42,1683,1687,1696,0,1838,1844,1853,1670,1674,1682,42,1681,1683,1696,0,1839,1838,1853,1668,1670,1682,42,1681,1696,1694,0,1839,1853,1855,1668,1682,1681,42,1694,1680,1681,0,1852,1834,1835,1681,1667,1668,42,1309,1310,1318,0,1385,1386,1398,1312,1313,1321,42,1318,1310,1727,0,1398,1386,1878,1321,1313,1703,42,1310,1728,1727,0,1386,1879,1878,1313,1704,1703,42,1310,1729,1728,0,1386,1880,1879,1313,1705,1704,42,1311,1729,1310,0,1387,1880,1386,1314,1705,1313,42,1311,1730,1729,0,1387,1881,1880,1314,1706,1705,42,1311,1312,1730,0,1387,1389,1881,1314,1315,1706,42,1312,1731,1730,0,1391,1882,1883,1315,1707,1706,42,1314,1731,1312,0,1392,1882,1391,1317,1707,1315,42,1314,1316,1731,0,1392,1394,1882,1317,1319,1707,42,1316,1732,1731,0,1394,1884,1882,1319,1708,1707,42,1318,1732,1316,0,1396,1884,1394,1321,1708,1319,42,1318,1727,1732,0,1396,1885,1884,1321,1703,1708,42,1727,1733,1732,0,1885,1886,1884,1703,1709,1708,42,1733,1727,1734,0,1887,1878,1888,1709,1703,1710,42,1727,1728,1734,0,1878,1879,1888,1703,1704,1710,42,1729,1734,1728,0,1880,1888,1879,1705,1710,1704,42,1734,1729,1735,0,1888,1880,1889,1710,1705,1711,42,1735,1729,1730,0,1889,1880,1881,1711,1705,1706,42,1735,1730,1736,0,1889,1881,1890,1711,1706,1712,42,1736,1730,1737,0,1891,1883,1892,1712,1706,1713,42,1730,1731,1737,0,1883,1882,1892,1706,1707,1713,42,1737,1731,1732,0,1892,1882,1884,1713,1707,1708,42,1737,1732,1738,0,1892,1884,1893,1713,1708,1714,42,1732,1733,1738,0,1884,1886,1893,1708,1709,1714,42,1733,1739,1738,0,1886,1894,1893,1709,1715,1714,42,1733,1740,1739,0,1886,1895,1894,1709,1716,1715,42,1734,1740,1733,0,1888,1896,1887,1710,1716,1709,42,1734,1741,1740,0,1888,1897,1896,1710,1717,1716,42,1742,1741,1734,0,1898,1897,1888,1718,1717,1710,42,1742,1743,1741,0,1898,1899,1897,1718,1719,1717,42,1742,1744,1743,0,1898,1900,1899,1718,1720,1719,42,1742,1745,1744,0,1898,1901,1900,1718,1721,1720,42,1745,1742,1735,0,1901,1898,1889,1721,1718,1711,42,1735,1742,1734,0,1889,1898,1888,1711,1718,1710,42,1745,1735,1736,0,1901,1889,1890,1721,1711,1712,42,1746,1745,1736,0,1902,1903,1891,1722,1721,1712,42,1745,1746,1747,0,1903,1902,1904,1721,1722,1723,42,1746,1739,1747,0,1902,1894,1904,1722,1715,1723,42,1746,1738,1739,0,1902,1893,1894,1722,1714,1715,42,1738,1746,1737,0,1893,1902,1892,1714,1722,1713,42,1746,1736,1737,0,1902,1891,1892,1722,1712,1713,42,1739,1748,1747,0,1894,1905,1904,1715,1724,1723,42,1740,1748,1739,0,1895,1905,1894,1716,1724,1715,42,1740,1749,1748,0,1895,1906,1905,1716,1725,1724,42,1740,1750,1749,0,1896,1907,1908,1716,1726,1725,42,1741,1750,1740,0,1897,1907,1896,1717,1726,1716,42,1741,1743,1750,0,1897,1899,1907,1717,1719,1726,42,1743,1751,1750,0,1899,1909,1907,1719,1727,1726,42,1743,1752,1751,0,1899,1910,1909,1719,1728,1727,42,1743,1744,1752,0,1899,1900,1910,1719,1720,1728,42,1744,1753,1752,0,1900,1911,1910,1720,1729,1728,42,1744,1754,1753,0,1912,1913,1914,1720,1730,1729,42,1747,1754,1744,0,1904,1913,1912,1723,1730,1720,42,1748,1754,1747,0,1905,1913,1904,1724,1730,1723,42,1754,1748,1755,0,1913,1905,1915,1730,1724,1731,42,1756,1755,1748,0,1916,1915,1905,1732,1731,1724,42,1757,1755,1756,0,1917,1915,1916,1733,1731,1732,42,1758,1755,1757,0,1918,1915,1917,1734,1731,1733,42,1754,1755,1758,0,1913,1915,1918,1730,1731,1734,42,1753,1754,1758,0,1914,1913,1918,1729,1730,1734,42,1753,1758,1759,0,1914,1918,1919,1729,1734,1735,42,1759,1758,1760,0,1919,1918,1920,1735,1734,1736,42,1758,1757,1760,0,1918,1917,1920,1734,1733,1736,42,1760,1757,1761,0,1920,1917,1921,1736,1733,1737,42,1762,1761,1757,0,1922,1921,1917,1738,1737,1733,42,1762,1763,1761,0,1922,1923,1921,1738,1739,1737,42,1762,1764,1763,0,1924,1925,1926,1738,1740,1739,42,1765,1764,1762,0,1927,1925,1924,1741,1740,1738,42,1766,1764,1765,0,1928,1925,1927,1742,1740,1741,42,1766,1767,1764,0,1928,1929,1925,1742,1743,1740,42,1766,1768,1767,0,1928,1930,1929,1742,1744,1743,42,1766,1769,1768,0,1928,1931,1930,1742,1745,1744,42,1766,1770,1769,0,1928,1932,1931,1742,1746,1745,42,1766,1771,1770,0,1928,1933,1932,1742,1747,1746,42,1772,1771,1766,0,1934,1933,1928,1748,1747,1742,42,1772,1759,1771,0,1934,1935,1933,1748,1735,1747,42,1759,1772,1752,0,1935,1934,1910,1735,1748,1728,42,1752,1772,1751,0,1910,1934,1909,1728,1748,1727,42,1772,1765,1751,0,1934,1927,1909,1748,1741,1727,42,1772,1766,1765,0,1934,1928,1927,1748,1742,1741,42,1751,1765,1762,0,1909,1927,1924,1727,1741,1738,42,1751,1762,1756,0,1909,1924,1936,1727,1738,1732,42,1756,1762,1757,0,1916,1922,1917,1732,1738,1733,42,1749,1751,1756,0,1908,1909,1936,1725,1727,1732,42,1749,1750,1751,0,1908,1907,1909,1725,1726,1727,42,1748,1749,1756,0,1905,1906,1916,1724,1725,1732,42,1752,1753,1759,0,1910,1911,1935,1728,1729,1735,42,1759,1760,1771,0,1919,1920,1937,1735,1736,1747,42,1771,1760,1773,0,1937,1920,1938,1747,1736,1749,42,1760,1761,1773,0,1920,1921,1938,1736,1737,1749,42,1761,1774,1773,0,1921,1939,1938,1737,1750,1749,42,1763,1774,1761,0,1923,1939,1921,1739,1750,1737,42,1763,1775,1774,0,1923,1940,1939,1739,1751,1750,42,1763,1776,1775,0,1926,1941,1942,1739,1752,1751,42,1763,1767,1776,0,1926,1929,1941,1739,1743,1752,42,1764,1767,1763,0,1925,1929,1926,1740,1743,1739,42,1776,1767,1777,0,1941,1929,1943,1752,1743,1753,42,1768,1777,1767,0,1930,1943,1929,1744,1753,1743,42,1768,1778,1777,0,1930,1944,1943,1744,1754,1753,42,1768,1779,1778,0,1930,1945,1944,1744,1755,1754,42,1768,1769,1779,0,1930,1931,1945,1744,1745,1755,42,1769,1780,1779,0,1931,1946,1945,1745,1756,1755,42,1781,1780,1769,0,1947,1946,1931,1757,1756,1745,42,1781,1782,1780,0,1948,1949,1950,1757,1758,1756,42,1783,1782,1781,0,1951,1949,1948,1759,1758,1757,42,1783,1784,1782,0,1951,1952,1949,1759,1760,1758,42,1783,1785,1784,0,1951,1953,1952,1759,1761,1760,42,1786,1785,1783,0,1954,1953,1951,1762,1761,1759,42,1786,1787,1785,0,1954,1955,1953,1762,1763,1761,42,1775,1787,1786,0,1940,1955,1954,1751,1763,1762,42,1775,1788,1787,0,1942,1956,1957,1751,1764,1763,42,1776,1788,1775,0,1941,1956,1942,1752,1764,1751,42,1780,1795,1779,0,1946,1958,1945,1756,1765,1755,42,1780,1782,1796,0,1946,1959,1960,1756,1758,1766,42,1782,1797,1796,0,1959,1961,1960,1758,1767,1766,42,1804,1801,1805,0,1962,1963,1964,1768,1769,1770,42,1805,1801,1785,0,1964,1963,1965,1770,1769,1761,42,1787,1805,1785,0,1957,1964,1965,1763,1770,1761,42,1790,1808,1805,0,1966,1967,1964,1771,1772,1770,42,1791,1808,1790,0,1968,1967,1966,1773,1772,1771,42,1792,1808,1791,0,1969,1967,1968,1774,1772,1773,42,1792,1809,1808,0,1969,1970,1967,1774,1775,1772,42,1792,1810,1809,0,1969,1971,1970,1774,1776,1775,42,1793,1810,1792,0,1972,1971,1969,1777,1776,1774,42,1810,1796,1811,0,1971,1960,1973,1776,1766,1778,42,1811,1796,1797,0,1973,1960,1961,1778,1766,1767,42,1812,1797,1800,0,1974,1961,1975,1779,1767,1780,42,1809,1813,1804,0,1970,1976,1962,1775,1781,1768,42,1809,1811,1813,0,1970,1973,1976,1775,1778,1781,42,1810,1811,1809,0,1971,1973,1970,1776,1778,1775,42,1809,1804,1808,0,1970,1962,1967,1775,1768,1772,42,1788,1807,1787,0,1956,1977,1957,1764,1782,1763,42,1776,1777,1789,0,1941,1943,1978,1752,1753,1783,42,1775,1786,1774,0,1940,1954,1939,1751,1762,1750,42,1783,1774,1786,0,1951,1939,1954,1759,1750,1762,42,1773,1774,1783,0,1938,1939,1951,1749,1750,1759,42,1770,1773,1783,0,1979,1938,1951,1746,1749,1759,42,1771,1773,1770,0,1937,1938,1979,1747,1749,1746,42,1770,1783,1781,0,1979,1951,1948,1746,1759,1757,42,1770,1781,1769,0,1932,1947,1931,1746,1757,1745,42,1745,1747,1744,0,1903,1904,1912,1721,1723,1720,42,1296,1297,1225,0,1371,1372,1292,1299,1300,1227,42,1226,1296,1225,0,1293,1371,1292,1228,1299,1227,42,1230,1296,1226,0,1297,1371,1293,1232,1299,1228,42,1228,1230,1226,0,1295,1297,1293,1230,1232,1228,42,1152,1154,1153,3,1980,1981,1982,1154,1158,1155,42,1155,1154,1152,3,1983,1984,1985,1156,1158,1154,42,1385,1155,1152,3,1986,1987,1988,1388,1156,1154,42,1385,1152,1386,3,1989,1990,1991,1388,1154,1389,42,1388,1150,1389,3,1992,1993,1994,1391,1152,1392,42,1150,1149,1389,3,1995,1996,1997,1152,1151,1392,42,1149,1391,1390,3,1998,1999,2000,1151,1395,1393,42,1393,1394,1392,3,2001,2002,2003,1396,1623,1394,42,1393,1395,1394,3,2004,2005,2006,1396,1397,1623,42,1154,1395,1393,3,2007,2008,2009,1158,1397,1396,42,1493,1495,1494,3,2010,2011,2012,1495,1498,1496,42,1504,1503,1489,3,2013,2014,2015,1524,1505,1491,42,1504,1505,1503,3,2016,2017,2018,1524,1521,1505,42,1504,1506,1505,3,2019,2020,2021,1524,1508,1521,42,1507,1506,1504,3,2022,2023,2024,1506,1508,1524,42,1511,1512,1510,3,2025,2026,2027,1511,1784,1510,42,1491,1512,1511,3,2028,2029,2030,1493,1784,1511,42,1491,1492,1512,3,2031,2032,2033,1493,1494,1784,42,1492,1494,1512,3,2034,2035,2036,1494,1496,1784,42,1512,1494,1495,3,2037,2038,2039,1784,1496,1498,42,1512,1495,1510,3,2040,2041,2042,1784,1498,1510,42,1513,1514,1515,3,2043,2044,2045,1512,1513,1514,42,1517,1516,1514,3,2046,2047,2048,1785,1515,1513,42,1518,1516,1517,3,2049,2050,2051,1517,1515,1785,42,1519,1520,1516,3,2052,2053,2054,1516,1523,1515,42,1520,1519,1521,3,2055,2056,2057,1523,1516,1518,42,1521,1519,1518,3,2058,2059,2060,1518,1516,1517,42,1500,1518,1523,3,2061,2062,2063,1502,1517,1786,42,1518,1517,1523,3,2064,2065,2066,1517,1785,1786,42,1499,1523,1517,3,2067,2068,2069,1501,1786,1785,42,1499,1500,1523,3,2070,2071,2072,1501,1502,1786,42,1524,1499,1517,3,2073,2074,2075,1787,1501,1785,42,1496,1499,1524,3,2076,2077,2078,1497,1501,1787,42,1524,1514,1496,3,2079,2080,2081,1787,1513,1497,42,1524,1517,1514,3,2082,2083,2084,1787,1785,1513,42,1502,1525,1522,3,2085,2086,2087,1504,1520,1519,42,1505,1525,1503,3,2088,2089,2090,1521,1520,1505,42,1505,1522,1525,3,2091,2092,2093,1521,1519,1520,42,1508,1521,1522,3,2094,2095,2096,1507,1518,1519,42,1513,1520,1526,3,2097,2098,2099,1512,1523,1522,42,1515,1516,1520,3,2100,2101,2102,1514,1515,1523,42,1526,1520,1521,3,2103,2104,2105,1522,1523,1518,42,1491,1511,1507,3,2106,2107,2108,1493,1511,1506,42,1491,1507,1490,3,2109,2110,2111,1493,1506,1492,42,1490,1507,1504,3,2112,2113,2114,1492,1506,1524,42,1573,1582,1581,3,2115,2116,2117,1571,1581,1579,42,1583,1584,1582,3,2118,2119,2120,1580,1597,1581,42,1585,1584,1583,3,2121,2122,2123,1583,1597,1580,42,1585,1586,1584,3,2124,2125,2126,1583,1596,1597,42,1585,1587,1586,3,2127,2128,2129,1583,1788,1596,42,1585,1588,1587,3,2130,2131,2132,1583,1582,1788,42,1591,1592,1593,3,2133,2134,2135,1586,1587,1789,42,1592,1594,1593,3,2136,2137,2138,1587,1589,1789,42,1596,1597,1594,3,2139,2140,2141,1590,1790,1589,42,1598,1597,1596,3,2142,2143,2144,1791,1790,1590,42,1598,1599,1597,3,2145,2146,2147,1791,1792,1790,42,1600,1599,1598,3,2148,2149,2150,1793,1792,1791,42,1600,1601,1599,3,2151,2152,2153,1793,1593,1792,42,1602,1601,1600,3,2154,2155,2156,1591,1593,1793,42,1587,1603,1604,3,2157,2158,2159,1788,1592,1594,42,1587,1605,1603,3,2160,2161,2162,1788,1595,1592,42,1588,1605,1587,3,2163,2164,2165,1582,1595,1788,42,1589,1603,1605,3,2166,2167,2168,1584,1592,1595,42,1590,1606,1601,3,2169,2170,2171,1585,1794,1593,42,1590,1591,1606,3,2172,2173,2174,1585,1586,1794,42,1606,1591,1607,3,2175,2176,2177,1794,1586,1795,42,1591,1593,1607,3,2178,2179,2180,1586,1789,1795,42,1594,1607,1593,3,2181,2182,2183,1589,1795,1789,42,1594,1599,1607,3,2184,2185,2186,1589,1792,1795,42,1599,1594,1597,3,2187,2188,2189,1792,1589,1790,42,1601,1607,1599,3,2190,2191,2192,1593,1795,1792,42,1606,1607,1601,3,2193,2194,2195,1794,1795,1593,42,1586,1587,1604,3,2196,2197,2198,1596,1788,1594,42,1602,1598,1609,3,2199,2200,2201,1591,1791,1599,42,1602,1600,1598,3,2202,2203,2204,1591,1793,1791,42,1609,1598,1596,3,2205,2206,2207,1599,1791,1590,42,1610,1596,1595,3,2208,2209,2210,1600,1590,1588,42,1611,1610,1595,3,2211,2212,2213,1796,1600,1588,42,1612,1610,1611,3,2214,2215,2216,1601,1600,1796,42,1582,1584,1612,3,2217,2218,2219,1581,1597,1601,42,1582,1612,1611,3,2220,2221,2222,1581,1601,1796,42,1582,1611,1581,3,2223,2224,2225,1581,1796,1579,42,1611,1613,1581,3,2226,2227,2228,1796,1602,1579,42,1611,1595,1613,3,2229,2230,2231,1796,1588,1602,42,1613,1595,1580,3,2232,2233,2234,1602,1588,1578,42,1385,1623,1622,3,2235,2236,2237,1388,1612,1611,42,1385,1386,1623,3,2238,2239,2240,1388,1389,1612,42,1387,1388,1624,3,2241,2242,2243,1390,1391,1613,42,1388,1626,1625,3,2244,2245,2246,1391,1616,1614,42,1388,1389,1626,3,2247,2248,2249,1391,1392,1616,42,1626,1389,1627,3,2250,2251,2252,1616,1392,1615,42,1390,1627,1389,3,2253,2254,2255,1393,1615,1392,42,1391,1628,1627,3,2256,2257,2258,1395,1797,1615,42,1391,1629,1628,3,2259,2260,2261,1395,1798,1797,42,1630,1629,1391,3,2262,2263,2264,1622,1798,1395,42,1631,1629,1630,3,2265,2266,2267,1618,1798,1622,42,1631,1628,1629,3,2268,2269,2270,1618,1797,1798,42,1632,1628,1631,3,2271,2272,2273,1799,1797,1618,42,1625,1628,1632,3,2274,2275,2276,1614,1797,1799,42,1625,1627,1628,3,2277,2278,2279,1614,1615,1797,42,1625,1632,1633,3,2280,2281,2282,1614,1799,1617,42,1633,1632,1631,3,2283,2284,2285,1617,1799,1618,42,1631,1630,1636,3,2286,2287,2288,1618,1622,1621,42,1392,1394,1636,3,2289,2290,2291,1394,1623,1621,42,1622,1623,1639,3,2292,2293,2294,1611,1612,1626,42,1623,1624,1639,3,2295,2296,2297,1612,1613,1626,42,1639,1624,1634,3,2298,2299,2300,1626,1613,1619,42,1154,1393,1153,3,2301,2302,2303,1158,1396,1155,42,1694,1695,1693,3,2304,2305,2306,1681,1683,1680,42,1700,1698,1699,3,2307,2308,2309,1687,1685,1686,42,1702,1701,1700,3,2310,2311,2312,1701,1688,1687,42,1703,1701,1702,3,2313,2314,2315,1800,1688,1701,42,1703,1704,1701,3,2316,2317,2318,1800,1690,1688,42,1705,1704,1703,3,2319,2320,2321,1691,1690,1800,42,1709,1710,1708,3,2322,2323,2324,1694,1801,1693,42,1691,1710,1709,3,2325,2326,2327,1678,1801,1694,42,1691,1692,1710,3,2328,2329,2330,1678,1679,1801,42,1692,1711,1710,3,2331,2332,2333,1679,1695,1801,42,1693,1712,1711,3,2334,2335,2336,1680,1696,1695,42,1695,1713,1712,3,2337,2338,2339,1683,1802,1696,42,1714,1713,1695,3,2340,2341,2342,1803,1802,1683,42,1715,1713,1714,3,2343,2344,2345,1804,1802,1803,42,1715,1716,1713,3,2346,2347,2348,1804,1805,1802,42,1717,1716,1715,3,2349,2350,2351,1806,1805,1804,42,1718,1716,1717,3,2352,2353,2354,1807,1805,1806,42,1718,1719,1716,3,2355,2356,2357,1807,1808,1805,42,1720,1719,1718,3,2358,2359,2360,1699,1808,1807,42,1721,1719,1720,3,2361,2362,2363,1698,1808,1699,42,1722,1719,1721,3,2364,2365,2366,1697,1808,1698,42,1722,1723,1719,3,2367,2368,2369,1697,1809,1808,42,1722,1713,1723,3,2370,2371,2372,1697,1802,1809,42,1722,1712,1713,3,2373,2374,2375,1697,1696,1802,42,1708,1712,1722,3,2376,2377,2378,1693,1696,1697,42,1710,1712,1708,3,2379,2380,2381,1801,1696,1693,42,1710,1711,1712,3,2382,2383,2384,1801,1695,1696,42,1704,1720,1701,3,2385,2386,2387,1690,1699,1688,42,1720,1717,1701,3,2388,2389,2390,1699,1806,1688,42,1720,1718,1717,3,2391,2392,2393,1699,1807,1806,42,1701,1717,1698,3,2394,2395,2396,1688,1806,1685,42,1698,1717,1724,3,2397,2398,2399,1685,1806,1810,42,1717,1715,1724,3,2400,2401,2402,1806,1804,1810,42,1715,1698,1724,3,2403,2404,2405,1804,1685,1810,42,1698,1715,1697,3,2404,2403,2406,1685,1804,1684,42,1714,1697,1715,3,2407,2408,2409,1803,1684,1804,42,1697,1714,1695,3,2408,2407,2410,1684,1803,1683,42,1723,1713,1716,3,2411,2412,2413,1809,1802,1805,42,1723,1716,1719,3,2414,2415,2416,1809,1805,1808,42,1691,1709,1706,3,2417,2418,2419,1678,1694,1689,42,1691,1706,1690,3,2420,2421,2422,1678,1689,1677,42,1690,1706,1725,3,2423,2424,2425,1677,1689,1702,42,1725,1706,1705,3,2426,2427,2428,1702,1689,1691,42,1725,1705,1703,3,2429,2430,2431,1702,1691,1800,42,1725,1703,1726,3,2432,2433,2434,1702,1800,1700,42,1703,1702,1726,3,2435,2436,2437,1800,1701,1700,42,1725,1726,1689,3,2438,2439,2440,1702,1700,1676,42,1789,1788,1776,3,2441,2442,2443,1783,1764,1752,42,1789,1790,1788,3,2444,2445,2446,1783,1771,1764,42,1789,1791,1790,3,2447,2448,2449,1783,1773,1771,42,1789,1792,1791,3,2450,2451,2452,1783,1774,1773,42,1777,1792,1789,3,2453,2454,2455,1753,1774,1783,42,1778,1792,1777,3,2456,2457,2458,1754,1774,1753,42,1778,1793,1792,3,2459,2460,2461,1754,1777,1774,42,1778,1794,1793,3,2462,2463,2464,1754,1811,1777,42,1778,1779,1794,3,2465,2466,2467,1754,1755,1811,42,1779,1795,1794,3,2468,2469,2470,1755,1765,1811,42,1780,1796,1795,3,2471,2472,2473,1756,1766,1765,42,1798,1797,1782,3,2474,2475,2476,1812,1767,1758,42,1799,1797,1798,3,2477,2478,2479,1813,1767,1812,42,1799,1800,1797,3,2480,2481,2482,1813,1780,1767,42,1801,1800,1799,3,2483,2484,2485,1769,1780,1813,42,1802,1800,1801,3,2486,2487,2488,1814,1780,1769,42,1802,1803,1800,3,2489,2490,2491,1814,1815,1780,42,1803,1802,1804,3,2492,2493,2494,1815,1814,1768,42,1804,1802,1801,3,2495,2496,2497,1768,1814,1769,42,1785,1801,1806,3,2498,2499,2500,1761,1769,1816,42,1801,1799,1806,3,2501,2502,2503,1769,1813,1816,42,1784,1806,1799,3,2504,2505,2506,1760,1816,1813,42,1784,1785,1806,3,2507,2508,2509,1760,1761,1816,42,1798,1784,1799,3,2510,2511,2512,1812,1760,1813,42,1782,1784,1798,3,2513,2514,2515,1758,1760,1812,42,1807,1805,1787,3,2516,2517,2518,1782,1770,1763,42,1790,1805,1807,3,2519,2520,2521,1771,1770,1782,42,1793,1794,1810,3,2522,2523,2524,1777,1811,1776,42,1794,1796,1810,3,2525,2526,2527,1811,1766,1776,42,1794,1795,1796,3,2528,2529,2530,1811,1765,1766,42,1811,1797,1812,3,2531,2532,2533,1778,1767,1779,42,1812,1800,1803,3,2534,2535,2536,1779,1780,1815,42,1811,1812,1803,3,2537,2538,2539,1778,1779,1815,42,1811,1803,1813,3,2540,2541,2542,1778,1815,1781,42,1813,1803,1804,3,2543,2544,2545,1781,1815,1768,42,1808,1804,1805,3,2546,2547,2548,1772,1768,1770,42,1790,1807,1788,3,2549,2550,2551,1771,1782,1764,42,1814,1815,1816,0,2552,2553,2554,1817,1818,1819,42,1814,1817,1815,0,2552,2555,2553,1817,1820,1818,42,1817,1814,1818,0,2555,2552,2556,1820,1817,1821,42,1818,1819,1817,0,2556,2557,2555,1821,1822,1820,42,1820,1819,1818,0,2558,2557,2556,1823,1822,1821,42,1820,1821,1819,0,2558,2559,2557,1823,1824,1822,42,1822,1821,1820,0,2560,2559,2558,1825,1824,1823,42,1822,1823,1821,0,2560,2561,2559,1825,1826,1824,42,1824,1823,1822,0,2562,2561,2560,1827,1826,1825,42,1824,1825,1823,0,2562,2563,2561,1827,1828,1826,42,1826,1825,1824,0,2564,2563,2562,1829,1828,1827,42,1827,1825,1826,0,2565,2566,2567,1830,1828,1829,42,1827,1828,1825,0,2565,2568,2566,1830,1831,1828,42,1829,1828,1827,0,2569,2568,2565,1832,1831,1830,42,1829,1830,1828,0,2569,2570,2568,1832,1833,1831,42,1829,1831,1830,0,2569,2571,2570,1832,1834,1833,42,1832,1831,1829,0,2572,2571,2569,1835,1834,1832,42,1832,1833,1831,0,2572,2573,2571,1835,1836,1834,42,1834,1833,1832,0,2574,2573,2572,1837,1836,1835,42,1834,1835,1833,0,2574,2575,2573,1837,1838,1836,42,1836,1835,1834,0,2576,2577,2578,1839,1838,1837,42,1837,1835,1836,0,2579,2577,2576,1840,1838,1839,42,1837,1838,1835,0,2579,2580,2577,1840,1841,1838,42,1839,1838,1837,0,2581,2580,2579,1842,1841,1840,42,1840,1838,1839,0,2582,2580,2581,1843,1841,1842,42,1840,1841,1838,0,2582,2583,2580,1844,1844,1844,42,1840,1842,1841,0,2582,2584,2583,1845,1845,1845,42,1840,1843,1842,0,2585,2586,2587,1843,1846,1847,42,1840,1844,1843,0,2585,2588,2586,1843,1848,1846,42,1839,1844,1840,0,2589,2588,2585,1842,1848,1843,42,1839,1845,1844,0,2589,2590,2588,1842,1849,1848,42,1837,1845,1839,0,2591,2590,2589,1840,1849,1842,42,1837,1846,1845,0,2591,2592,2590,1840,1850,1849,42,1836,1846,1837,0,2593,2592,2591,1839,1850,1840,42,1836,1847,1846,0,2593,2594,2592,1839,1851,1850,42,1848,1847,1836,0,2595,2594,2593,1852,1851,1839,42,1848,1849,1847,0,2595,2596,2594,1852,1853,1851,42,1848,1850,1849,0,2595,2597,2596,1852,1854,1853,42,1851,1850,1848,0,2598,2597,2595,1855,1854,1852,42,1852,1850,1851,0,2599,2597,2598,1856,1854,1855,42,1852,1853,1850,0,2599,2600,2597,1856,1857,1854,42,1854,1853,1852,0,2601,2600,2599,1858,1857,1856,42,1854,1855,1853,0,2601,2602,2600,1858,1859,1857,42,1856,1855,1854,0,2603,2604,2605,1860,1859,1858,42,1856,1857,1855,0,2603,2606,2604,1860,1861,1859,42,1858,1857,1856,0,2607,2608,2603,1862,1861,1860,42,1859,1857,1858,0,2609,2608,2607,1863,1861,1862,42,1859,1860,1857,0,2609,2610,2608,1863,1864,1861,42,1861,1860,1859,0,2611,2610,2609,1865,1864,1863,42,1861,1862,1860,0,2611,2612,2610,1865,1866,1864,42,1861,1863,1862,0,2611,2613,2612,1865,1867,1866,42,1861,1864,1863,0,2611,2614,2613,1865,1868,1867,42,1864,1861,1865,0,2614,2611,2615,1868,1865,1869,42,1865,1861,1866,0,2615,2611,2616,1869,1865,1870,42,1861,1859,1866,0,2611,2609,2616,1865,1863,1870,42,1866,1859,1858,0,2616,2609,2607,1870,1863,1862,42,1867,1866,1858,0,2617,2618,2619,1871,1870,1862,42,1868,1866,1867,0,2620,2618,2617,1872,1870,1871,42,1868,1865,1866,0,2620,2621,2618,1872,1869,1870,42,1869,1865,1868,0,2622,2621,2620,1873,1869,1872,42,1869,1870,1865,0,2622,2623,2621,1873,1874,1869,42,1871,1870,1869,0,2624,2623,2622,1875,1874,1873,42,1871,1872,1870,0,2624,2625,2623,1875,1876,1874,42,1873,1872,1871,0,2626,2625,2624,1877,1876,1875,42,1873,1874,1872,0,2626,2627,2625,1877,1878,1876,42,1875,1874,1873,0,2628,2627,2626,1879,1878,1877,42,1875,1876,1874,0,2629,2630,2631,1879,1880,1878,42,1875,1877,1876,0,2629,2632,2630,1879,1881,1880,42,1878,1877,1875,0,2633,2632,2629,1882,1881,1879,42,1878,1879,1877,0,2633,2634,2632,1882,1883,1881,42,1880,1879,1878,0,2635,2634,2633,1884,1883,1882,42,1880,1881,1879,0,2635,2636,2634,1884,1885,1883,42,1882,1881,1880,0,2637,2636,2635,1886,1885,1884,42,1882,1883,1881,0,2637,2638,2636,1886,1887,1885,42,1884,1883,1882,0,2639,2638,2637,1888,1887,1886,42,1884,1885,1883,0,2639,2640,2638,1888,1889,1887,42,1886,1885,1884,0,2641,2640,2639,1890,1889,1888,42,1886,1887,1885,0,2641,2642,2640,1890,1891,1889,42,1887,1888,1885,0,2642,2643,2640,1891,1892,1889,42,1887,1889,1888,0,2642,2644,2643,1891,1893,1892,42,1889,1890,1888,0,2644,2645,2643,1893,1894,1892,42,1889,1891,1890,0,2644,2646,2645,1893,1895,1894,42,1891,1892,1890,0,2646,2647,2645,1895,1896,1894,42,1893,1892,1891,0,2648,2647,2646,1897,1896,1895,42,1893,1894,1892,0,2648,2649,2647,1897,1898,1896,42,1895,1894,1893,0,2650,2649,2648,1899,1898,1897,42,1896,1894,1895,0,2651,2649,2650,1900,1898,1899,42,1896,1897,1894,0,2651,2652,2649,1900,1901,1898,42,1898,1897,1896,0,2653,2652,2651,1902,1901,1900,42,1898,1899,1897,0,2653,2654,2652,1902,1903,1901,42,1898,1880,1899,0,2653,2655,2654,1902,1884,1903,42,1898,1882,1880,0,2653,2656,2655,1902,1886,1884,42,1900,1882,1898,0,2657,2656,2653,1904,1886,1902,42,1900,1884,1882,0,2657,2658,2656,1904,1888,1886,42,1901,1884,1900,0,2659,2658,2657,1905,1888,1904,42,1901,1886,1884,0,2659,2660,2658,1905,1890,1888,42,1901,1900,1902,0,2659,2657,2661,1905,1904,1906,42,1900,1896,1902,0,2657,2651,2661,1904,1900,1906,42,1900,1898,1896,0,2657,2653,2651,1904,1902,1900,42,1902,1896,1895,0,2661,2651,2650,1906,1900,1899,42,1899,1880,1878,0,2654,2655,2662,1903,1884,1882,42,1899,1878,1903,0,2654,2662,2663,1903,1882,1907,42,1903,1878,1904,0,2663,2662,2664,1907,1882,1908,42,1878,1875,1904,0,2662,2628,2664,1882,1879,1908,42,1904,1875,1873,0,2664,2628,2626,1908,1879,1877,42,1904,1873,1905,0,2664,2626,2665,1908,1877,1909,42,1873,1906,1905,0,2626,2666,2665,1877,1910,1909,42,1873,1907,1906,0,2626,2667,2666,1877,1911,1910,42,1871,1907,1873,0,2624,2667,2626,1875,1911,1877,42,1869,1907,1871,0,2622,2667,2624,1873,1911,1875,42,1868,1907,1869,0,2620,2667,2622,1872,1911,1873,42,1868,1818,1907,0,2620,2556,2667,1872,1821,1911,42,1867,1818,1868,0,2617,2556,2620,1871,1821,1872,42,1867,1820,1818,0,2617,2558,2556,1871,1823,1821,42,1867,1822,1820,0,2617,2560,2558,1871,1825,1823,42,1867,1908,1822,0,2617,2668,2560,1871,1912,1825,42,1867,1858,1908,0,2617,2619,2668,1871,1862,1912,42,1908,1858,1856,0,2668,2619,2669,1912,1862,1860,42,1908,1856,1909,0,2668,2669,2670,1912,1860,1913,42,1909,1856,1910,0,2670,2669,2671,1913,1860,1914,42,1856,1854,1910,0,2669,2672,2671,1860,1858,1914,42,1910,1854,1911,0,2673,2601,2674,1914,1858,1915,42,1854,1852,1911,0,2601,2599,2674,1858,1856,1915,42,1911,1852,1851,0,2674,2599,2598,1915,1856,1855,42,1851,1829,1911,0,2675,2569,2676,1855,1832,1915,42,1912,1829,1851,0,2677,2569,2675,1916,1832,1855,42,1912,1832,1829,0,2677,2572,2569,1916,1835,1832,42,1912,1834,1832,0,2677,2574,2572,1916,1837,1835,42,1912,1913,1834,0,2677,2678,2574,1916,1917,1837,42,1912,1914,1913,0,2679,2680,2681,1916,1918,1917,42,1912,1848,1914,0,2679,2595,2680,1916,1852,1918,42,1851,1848,1912,0,2598,2595,2679,1855,1852,1916,42,1848,1836,1914,0,2595,2593,2680,1852,1839,1918,42,1914,1836,1915,0,2680,2593,2682,1918,1839,1919,42,1915,1836,1916,0,2682,2593,2683,1919,1839,1920,42,1836,1917,1916,0,2576,2684,2685,1921,1921,1921,42,1834,1917,1836,0,2578,2684,2576,1922,1922,1922,42,1918,1917,1834,0,2686,2687,2574,1923,1924,1837,42,1918,1919,1917,0,2686,2688,2687,1923,1925,1924,42,1918,1920,1919,0,2689,2690,2691,1923,1926,1925,42,1918,1915,1920,0,2689,2682,2690,1923,1919,1926,42,1914,1915,1918,0,2680,2682,2689,1918,1919,1923,42,1913,1914,1918,0,2681,2680,2689,1917,1918,1923,42,1913,1918,1834,0,2678,2686,2574,1917,1923,1837,42,1915,1916,1920,0,2682,2683,2690,1919,1920,1926,42,1920,1916,1921,0,2690,2683,2692,1926,1920,1927,42,1916,1922,1921,0,2685,2693,2694,1928,1928,1928,42,1917,1922,1916,0,2684,2693,2685,1929,1929,1929,42,1919,1922,1917,0,2688,2695,2687,1925,1930,1924,42,1921,1922,1919,0,2694,2693,2696,1931,1931,1931,42,1921,1919,1920,0,2694,2696,2697,1932,1932,1932,42,1911,1829,1827,0,2676,2569,2565,1915,1832,1830,42,1911,1827,1826,0,2676,2565,2567,1915,1830,1829,42,1911,1826,1910,0,2676,2567,2698,1915,1829,1914,42,1909,1910,1826,0,2670,2671,2564,1913,1914,1829,42,1909,1826,1824,0,2670,2564,2562,1913,1829,1827,42,1909,1824,1822,0,2670,2562,2560,1913,1827,1825,42,1908,1909,1822,0,2668,2670,2560,1912,1913,1825,42,1818,1814,1907,0,2556,2552,2667,1821,1817,1911,42,1907,1814,1923,0,2667,2552,2699,1911,1817,1933,42,1923,1814,1816,0,2699,2552,2554,1933,1817,1819,42,1923,1816,1924,0,2699,2554,2700,1933,1819,1934,42,1924,1816,1925,0,2700,2554,2701,1934,1819,1935,42,1925,1816,1926,0,2701,2554,2702,1935,1819,1936,42,1816,1815,1926,0,2554,2553,2702,1819,1818,1936,42,1926,1815,1927,0,2702,2553,2703,1936,1818,1937,42,1815,1928,1927,0,2553,2704,2703,1818,1938,1937,42,1815,1819,1928,0,2553,2557,2704,1818,1822,1938,42,1817,1819,1815,0,2555,2557,2553,1820,1822,1818,42,1819,1929,1928,0,2557,2705,2704,1822,1939,1938,42,1819,1821,1929,0,2557,2559,2705,1822,1824,1939,42,1821,1823,1929,0,2559,2561,2705,1824,1826,1939,42,1929,1823,1930,0,2705,2561,2706,1939,1826,1940,42,1823,1825,1930,0,2561,2563,2706,1826,1828,1940,42,1930,1825,1931,0,2706,2563,2707,1940,1828,1941,42,1825,1828,1931,0,2566,2568,2708,1828,1831,1941,42,1931,1828,1932,0,2708,2568,2709,1941,1831,1942,42,1828,1830,1932,0,2568,2570,2709,1831,1833,1942,42,1932,1830,1933,0,2709,2570,2710,1942,1833,1943,42,1933,1830,1831,0,2710,2570,2571,1943,1833,1834,42,1933,1831,1934,0,2710,2571,2711,1943,1834,1944,42,1831,1935,1934,0,2571,2712,2711,1834,1945,1944,42,1833,1935,1831,0,2573,2712,2571,1836,1945,1834,42,1833,1936,1935,0,2573,2713,2712,1836,1946,1945,42,1833,1937,1936,0,2573,2714,2713,1836,1947,1946,42,1835,1937,1833,0,2575,2714,2573,1838,1947,1836,42,1835,1838,1937,0,2575,2715,2714,1838,1841,1947,42,1838,1938,1937,0,2715,2716,2714,1841,1948,1947,42,1838,1841,1938,0,2715,2717,2716,1841,1949,1948,42,1841,1939,1938,0,2717,2718,2716,1949,1950,1948,42,1841,1940,1939,0,2717,2719,2718,1949,1951,1950,42,1842,1940,1841,0,2584,2720,2583,1952,1952,1952,42,1939,1940,1842,0,2718,2719,2587,1950,1951,1847,42,1939,1842,1843,0,2718,2587,2586,1950,1847,1846,42,1941,1939,1843,0,2721,2718,2586,1953,1950,1846,42,1938,1939,1941,0,2716,2718,2721,1948,1950,1953,42,1938,1941,1942,0,2716,2721,2722,1948,1953,1954,42,1943,1942,1941,0,2723,2722,2721,1955,1954,1953,42,1943,1936,1942,0,2723,2713,2722,1955,1946,1954,42,1943,1944,1936,0,2723,2724,2713,1955,1956,1946,42,1945,1944,1943,0,2725,2724,2723,1957,1956,1955,42,1946,1944,1945,0,2726,2724,2725,1958,1956,1957,42,1946,1934,1944,0,2726,2711,2724,1958,1944,1956,42,1947,1934,1946,0,2727,2711,2726,1959,1944,1958,42,1947,1933,1934,0,2727,2710,2711,1959,1943,1944,42,1947,1948,1933,0,2727,2728,2710,1959,1960,1943,42,1849,1948,1947,0,2596,2728,2727,1853,1960,1959,42,1849,1949,1948,0,2596,2729,2728,1853,1961,1960,42,1849,1950,1949,0,2596,2730,2729,1853,1962,1961,42,1850,1950,1849,0,2597,2730,2596,1854,1962,1853,42,1850,1853,1950,0,2597,2600,2730,1854,1857,1962,42,1853,1855,1950,0,2600,2602,2730,1857,1859,1962,42,1855,1951,1950,0,2602,2731,2730,1859,1963,1962,42,1857,1951,1855,0,2606,2732,2604,1861,1963,1859,42,1857,1952,1951,0,2606,2733,2732,1861,1964,1963,42,1857,1860,1952,0,2606,2610,2733,1861,1864,1964,42,1952,1860,1953,0,2733,2610,2734,1964,1864,1965,42,1860,1862,1953,0,2610,2612,2734,1864,1866,1965,42,1862,1954,1953,0,2612,2735,2734,1866,1966,1965,42,1862,1863,1954,0,2612,2613,2735,1866,1867,1966,42,1863,1927,1954,0,2613,2703,2735,1867,1937,1966,42,1863,1926,1927,0,2613,2702,2703,1867,1936,1937,42,1863,1955,1926,0,2613,2736,2702,1867,1967,1936,42,1956,1955,1863,0,2737,2736,2613,1968,1967,1867,42,1956,1957,1955,0,2737,2738,2736,1968,1969,1967,42,1957,1956,1870,0,2738,2737,2739,1969,1968,1874,42,1870,1956,1864,0,2739,2737,2614,1874,1968,1868,42,1864,1956,1863,0,2614,2737,2613,1868,1968,1867,42,1870,1864,1865,0,2739,2614,2615,1874,1868,1869,42,1872,1957,1870,0,2740,2738,2739,1876,1969,1874,42,1876,1957,1872,0,2630,2738,2740,1880,1969,1876,42,1957,1876,1955,0,2738,2630,2736,1969,1880,1967,42,1876,1958,1955,0,2630,2741,2736,1880,1970,1967,42,1876,1959,1958,0,2630,2742,2741,1880,1971,1970,42,1877,1959,1876,0,2632,2742,2630,1881,1971,1880,42,1877,1960,1959,0,2632,2743,2742,1881,1972,1971,42,1879,1960,1877,0,2634,2743,2632,1883,1972,1881,42,1881,1960,1879,0,2636,2743,2634,1885,1972,1883,42,1881,1961,1960,0,2636,2744,2743,1885,1973,1972,42,1883,1961,1881,0,2638,2744,2636,1887,1973,1885,42,1883,1962,1961,0,2638,2745,2744,1887,1974,1973,42,1885,1962,1883,0,2640,2745,2638,1889,1974,1887,42,1885,1888,1962,0,2640,2643,2745,1889,1892,1974,42,1888,1963,1962,0,2643,2746,2745,1892,1975,1974,42,1888,1890,1963,0,2643,2645,2746,1892,1894,1975,42,1890,1964,1963,0,2645,2747,2746,1894,1976,1975,42,1892,1964,1890,0,2647,2747,2645,1896,1976,1894,42,1892,1965,1964,0,2647,2748,2747,1896,1977,1976,42,1894,1965,1892,0,2649,2748,2647,1898,1977,1896,42,1897,1965,1894,0,2652,2748,2649,1901,1977,1898,42,1897,1966,1965,0,2652,2749,2748,1901,1978,1977,42,1899,1966,1897,0,2654,2749,2652,1903,1978,1901,42,1899,1903,1966,0,2654,2663,2749,1903,1907,1978,42,1903,1967,1966,0,2663,2750,2749,1907,1979,1978,42,1903,1904,1967,0,2663,2664,2750,1907,1908,1979,42,1904,1905,1967,0,2664,2665,2750,1908,1909,1979,42,1967,1905,1968,0,2750,2665,2751,1979,1909,1980,42,1906,1968,1905,0,2666,2751,2665,1910,1980,1909,42,1906,1969,1968,0,2666,2752,2751,1910,1981,1980,42,1906,1923,1969,0,2666,2699,2752,1910,1933,1981,42,1907,1923,1906,0,2667,2699,2666,1911,1933,1910,42,1970,1969,1923,0,2753,2752,2699,1982,1981,1933,42,1971,1969,1970,0,2754,2752,2753,1983,1981,1982,42,1968,1969,1971,0,2751,2752,2754,1980,1981,1983,42,1972,1968,1971,0,2755,2751,2754,1984,1980,1983,42,1973,1968,1972,0,2756,2751,2755,1985,1980,1984,42,1967,1968,1973,0,2750,2751,2756,1979,1980,1985,42,1967,1973,1974,0,2750,2756,2757,1979,1985,1986,42,1974,1973,1975,0,2757,2756,2758,1986,1985,1987,42,1975,1973,1972,0,2758,2756,2755,1987,1985,1984,42,1975,1972,1976,0,2758,2755,2759,1987,1984,1988,42,1976,1972,1977,0,2759,2755,2760,1988,1984,1989,42,1972,1978,1977,0,2755,2761,2760,1984,1990,1989,42,1972,1971,1978,0,2755,2754,2761,1984,1983,1990,42,1971,1979,1978,0,2754,2762,2761,1983,1991,1990,42,1971,1970,1979,0,2754,2753,2762,1983,1982,1991,42,1970,1925,1979,0,2753,2701,2762,1982,1935,1991,42,1970,1924,1925,0,2753,2700,2701,1982,1934,1935,42,1970,1923,1924,0,2753,2699,2700,1982,1933,1934,42,1958,1979,1925,0,2741,2762,2701,1970,1991,1935,42,1958,1959,1979,0,2741,2742,2762,1970,1971,1991,42,1959,1978,1979,0,2742,2761,2762,1971,1990,1991,42,1960,1978,1959,0,2743,2761,2742,1972,1990,1971,42,1960,1977,1978,0,2743,2760,2761,1972,1989,1990,42,1961,1977,1960,0,2744,2760,2743,1973,1989,1972,42,1961,1976,1977,0,2744,2759,2760,1973,1988,1989,42,1962,1976,1961,0,2745,2759,2744,1974,1988,1973,42,1962,1963,1976,0,2745,2746,2759,1974,1975,1988,42,1963,1975,1976,0,2746,2758,2759,1975,1987,1988,42,1964,1975,1963,0,2747,2758,2746,1976,1987,1975,42,1964,1974,1975,0,2747,2757,2758,1976,1986,1987,42,1965,1974,1964,0,2748,2757,2747,1977,1986,1976,42,1966,1974,1965,0,2749,2757,2748,1978,1986,1977,42,1966,1967,1974,0,2749,2750,2757,1978,1979,1986,42,1955,1958,1925,0,2736,2741,2701,1967,1970,1935,42,1955,1925,1926,0,2736,2701,2702,1967,1935,1936,42,1874,1876,1872,0,2631,2630,2740,1878,1880,1876,42,1927,1928,1954,0,2703,2704,2735,1937,1938,1966,42,1928,1929,1954,0,2704,2705,2735,1938,1939,1966,42,1954,1929,1953,0,2735,2705,2734,1966,1939,1965,42,1929,1980,1953,0,2705,2763,2734,1939,1992,1965,42,1929,1930,1980,0,2705,2706,2763,1939,1940,1992,42,1930,1981,1980,0,2706,2764,2763,1940,1993,1992,42,1930,1931,1981,0,2706,2707,2764,1940,1941,1993,42,1931,1932,1981,0,2708,2709,2765,1941,1942,1993,42,1981,1932,1949,0,2765,2709,2729,1993,1942,1961,42,1948,1949,1932,0,2728,2729,2709,1960,1961,1942,42,1948,1932,1933,0,2728,2709,2710,1960,1942,1943,42,1951,1981,1949,0,2731,2765,2729,1963,1993,1961,42,1951,1952,1981,0,2732,2733,2764,1963,1964,1993,42,1952,1980,1981,0,2733,2763,2764,1964,1992,1993,42,1952,1953,1980,0,2733,2734,2763,1964,1965,1992,42,1950,1951,1949,0,2730,2731,2729,1962,1963,1961,42,1847,1849,1947,0,2594,2596,2727,1851,1853,1959,42,1847,1947,1846,0,2594,2727,2592,1851,1959,1850,42,1846,1947,1946,0,2592,2727,2726,1850,1959,1958,42,1846,1946,1945,0,2592,2726,2725,1850,1958,1957,42,1846,1945,1845,0,2592,2725,2590,1850,1957,1849,42,1845,1945,1982,0,2590,2725,2766,1849,1957,1994,42,1982,1945,1943,0,2766,2725,2723,1994,1957,1955,42,1982,1943,1983,0,2766,2723,2767,1994,1955,1995,42,1983,1943,1941,0,2767,2723,2721,1995,1955,1953,42,1941,1843,1983,0,2721,2586,2767,1953,1846,1995,42,1844,1983,1843,0,2588,2767,2586,1848,1995,1846,42,1844,1982,1983,0,2588,2766,2767,1848,1994,1995,42,1845,1982,1844,0,2590,2766,2588,1849,1994,1848,42,1934,1935,1944,0,2711,2712,2724,1944,1945,1956,42,1944,1935,1936,0,2724,2712,2713,1956,1945,1946,42,1937,1942,1936,0,2714,2722,2713,1947,1954,1946,42,1937,1938,1942,0,2714,2716,2722,1947,1948,1954,42,1984,1985,1986,0,2768,2769,2770,1996,1997,1998,42,1984,1987,1985,0,2768,2771,2769,1996,1999,1997,42,1987,1984,1988,0,2771,2768,2772,1999,1996,2000,42,1988,1990,1989,0,2772,2773,2774,2000,2001,2002,42,1991,1992,1990,0,2775,2776,2773,2003,2004,2001,42,1995,1992,1994,0,2777,2776,2778,2005,2004,2006,42,1985,1994,1996,0,2769,2778,2779,1997,2006,2007,42,1996,1994,1997,0,2779,2778,2780,2007,2006,2008,42,2001,2003,2002,0,2781,2782,2783,2009,2010,2011,42,2001,1991,2003,0,2781,2775,2782,2009,2003,2010,42,2003,1991,1988,0,2782,2775,2772,2010,2003,2000,42,2003,1988,2004,0,2782,2772,2784,2010,2000,2012,42,1988,1984,2004,0,2772,2768,2784,2000,1996,2012,42,2004,1984,2005,0,2784,2768,2785,2012,1996,2013,42,2005,1984,1986,0,2785,2768,2770,2013,1996,1998,42,2005,1986,2006,0,2785,2770,2786,2013,1998,2014,42,1986,1996,2007,0,2770,2779,2787,1998,2007,2015,42,2010,2008,2009,0,2788,2789,2790,2016,2017,2018,42,2015,2004,2014,0,2791,2784,2792,2019,2012,2020,42,2015,2003,2004,0,2791,2782,2784,2019,2010,2012,42,2018,2017,2013,0,2793,2794,2795,2021,2022,2023,42,2019,2017,2018,0,2796,2794,2793,2024,2022,2021,42,2019,2002,2017,0,2796,2783,2794,2024,2011,2022,42,2020,2002,2019,0,2797,2783,2796,2025,2011,2024,42,2020,2021,2002,0,2797,2798,2783,2025,2026,2011,42,2022,2021,2020,0,2799,2800,2801,2027,2026,2025,42,2022,2023,2021,0,2799,2802,2800,2027,2028,2026,42,2024,2023,2022,0,2803,2802,2799,2029,2028,2027,42,2025,2023,2024,0,2804,2802,2803,2030,2028,2029,42,2026,2023,2025,0,2805,2802,2804,2031,2028,2030,42,2026,2027,2023,0,2805,2806,2802,2031,2032,2028,42,2026,2028,2027,0,2805,2807,2806,2031,2033,2032,42,2026,2029,2028,0,2805,2808,2807,2031,2034,2033,42,2026,2030,2029,0,2805,2809,2808,2031,2035,2034,42,2030,2026,2025,0,2809,2805,2804,2035,2031,2030,42,2030,2025,2031,0,2809,2804,2810,2035,2030,2036,42,2031,2025,2024,0,2810,2804,2803,2036,2030,2029,42,2032,2031,2024,0,2811,2810,2803,2037,2036,2029,42,2033,2031,2032,0,2812,2810,2811,2038,2036,2037,42,2033,2034,2031,0,2812,2813,2810,2038,2039,2036,42,2035,2034,2033,0,2814,2813,2812,2040,2039,2038,42,2035,2036,2034,0,2814,2815,2813,2040,2041,2039,42,2035,2037,2036,0,2814,2816,2815,2040,2042,2041,42,2038,2037,2035,0,2817,2816,2814,2043,2042,2040,42,2039,2037,2038,0,2818,2816,2817,2044,2042,2043,42,2039,2040,2037,0,2818,2819,2816,2044,2045,2042,42,2041,2040,2039,0,2820,2819,2818,2046,2045,2044,42,2042,2040,2041,0,2821,2819,2820,2047,2045,2046,42,2042,2043,2040,0,2821,2822,2819,2047,2048,2045,42,2042,2044,2043,0,2821,2823,2822,2047,2049,2048,42,2045,2044,2042,0,2824,2823,2821,2050,2049,2047,42,2045,2046,2044,0,2824,2825,2823,2050,2051,2049,42,2047,2046,2045,0,2826,2825,2824,2052,2051,2050,42,2047,2048,2046,0,2826,2827,2825,2052,2053,2051,42,2049,2048,2047,0,2828,2827,2826,2054,2053,2052,42,2049,2050,2048,0,2828,2829,2827,2054,2055,2053,42,2051,2050,2049,0,2830,2829,2828,2056,2055,2054,42,2051,2052,2050,0,2830,2831,2829,2056,2057,2055,42,2053,2052,2051,0,2832,2831,2830,2058,2057,2056,42,2053,2054,2052,0,2832,2833,2831,2058,2059,2057,42,2055,2054,2053,0,2834,2833,2832,2060,2059,2058,42,2055,2056,2054,0,2834,2835,2833,2060,2061,2059,42,2057,2056,2055,0,2836,2835,2834,2062,2061,2060,42,2057,2058,2056,0,2836,2837,2835,2062,2063,2061,42,2059,2058,2057,0,2838,2837,2836,2064,2063,2062,42,2059,2060,2058,0,2838,2839,2837,2064,2065,2063,42,2061,2060,2059,0,2840,2841,2842,2066,2065,2064,42,2061,2062,2060,0,2840,2843,2841,2066,2067,2065,42,2061,2063,2062,0,2840,2844,2843,2066,2068,2067,42,2064,2063,2061,0,2845,2844,2840,2069,2068,2066,42,2064,2065,2063,0,2845,2846,2844,2069,2070,2068,42,2064,2066,2065,0,2845,2847,2846,2069,2071,2070,42,2066,2064,2067,0,2847,2845,2848,2071,2069,2072,42,2067,2064,2068,0,2848,2845,2849,2072,2069,2073,42,2064,2069,2068,0,2850,2851,2852,2069,2074,2073,42,2070,2069,2064,0,2853,2851,2850,2075,2074,2069,42,2071,2069,2070,0,2854,2851,2853,2076,2074,2075,42,2071,2072,2069,0,2854,2855,2851,2076,2077,2074,42,2071,2073,2072,0,2854,2856,2855,2076,2078,2077,42,2071,2074,2073,0,2854,2857,2856,2076,2079,2078,42,2071,2075,2074,0,2854,2858,2857,2076,2080,2079,42,2076,2075,2071,0,2859,2858,2854,2081,2080,2076,42,2076,2077,2075,0,2859,2860,2858,2081,2082,2080,42,2078,2077,2076,0,2861,2860,2859,2083,2082,2081,42,2079,2077,2078,0,2862,2860,2861,2084,2082,2083,42,2079,2080,2077,0,2862,2863,2860,2084,2085,2082,42,2081,2080,2079,0,2864,2863,2862,2086,2085,2084,42,2081,2082,2080,0,2864,2865,2863,2086,2087,2085,42,2081,2083,2082,0,2864,2866,2865,2086,2088,2087,42,2081,2084,2083,0,2867,2868,2869,2086,2089,2088,42,2085,2084,2081,0,2870,2868,2867,2090,2089,2086,42,2085,2086,2084,0,2870,2871,2868,2090,2091,2089,42,2085,2087,2086,0,2870,2872,2871,2090,2092,2091,42,2088,2087,2085,0,2873,2872,2870,2093,2092,2090,42,2088,2089,2087,0,2873,2874,2872,2093,2094,2092,42,2090,2089,2088,0,2875,2874,2873,2095,2094,2093,42,2090,2091,2089,0,2875,2876,2874,2095,2096,2094,42,2090,2092,2091,0,2875,2877,2876,2095,2097,2096,42,2090,2093,2092,0,2875,2878,2877,2095,2098,2097,42,2094,2093,2090,0,2879,2878,2875,2099,2098,2095,42,2095,2093,2094,0,2880,2878,2879,2100,2098,2099,42,2095,2096,2093,0,2880,2881,2878,2100,2101,2098,42,2097,2096,2095,0,2882,2881,2880,2102,2101,2100,42,2097,2098,2096,0,2882,2883,2881,2102,2103,2101,42,2099,2098,2097,0,2884,2883,2882,2104,2103,2102,42,2099,2100,2098,0,2884,2885,2883,2104,2105,2103,42,2101,2100,2099,0,2886,2887,2888,2106,2105,2104,42,2101,2102,2100,0,2886,2889,2887,2106,2107,2105,42,2101,2103,2102,0,2886,2890,2889,2106,2108,2107,42,2104,2103,2101,0,2891,2890,2886,2109,2108,2106,42,2105,2103,2104,0,2892,2890,2891,2110,2108,2109,42,2105,2106,2103,0,2892,2893,2890,2110,2111,2108,42,2107,2106,2105,0,2894,2893,2892,2112,2111,2110,42,2107,2108,2106,0,2894,2895,2893,2112,2113,2111,42,2109,2108,2107,0,2896,2895,2894,2114,2113,2112,42,2109,2110,2108,0,2896,2897,2895,2114,2115,2113,42,2111,2110,2109,0,2898,2897,2896,2116,2115,2114,42,2111,2112,2110,0,2898,2899,2897,2116,2117,2115,42,2111,2113,2112,0,2898,2900,2899,2116,2118,2117,42,2114,2113,2111,0,2901,2900,2898,2119,2118,2116,42,2114,2115,2113,0,2901,2902,2900,2119,2120,2118,42,2116,2115,2114,0,2903,2902,2901,2121,2120,2119,42,2116,2117,2115,0,2903,2904,2902,2121,2122,2120,42,2118,2117,2116,0,2905,2904,2903,2123,2122,2121,42,2118,2119,2117,0,2905,2906,2904,2123,2124,2122,42,2118,2120,2119,0,2905,2907,2906,2123,2125,2124,42,2121,2120,2118,0,2908,2907,2905,2126,2125,2123,42,2122,2120,2121,0,2909,2907,2908,2127,2125,2126,42,2122,2123,2120,0,2909,2910,2907,2127,2128,2125,42,2122,2124,2123,0,2909,2911,2910,2127,2129,2128,42,2124,2122,2125,0,2911,2909,2912,2129,2127,2130,42,2125,2122,2121,0,2912,2909,2908,2130,2127,2126,42,2125,2121,2126,0,2912,2908,2913,2130,2126,2131,42,2126,2121,2127,0,2913,2908,2914,2131,2126,2132,42,2121,2128,2127,0,2908,2915,2914,2126,2133,2132,42,2121,2118,2128,0,2908,2905,2915,2126,2123,2133,42,2128,2118,2129,0,2915,2905,2916,2133,2123,2134,42,2118,2130,2129,0,2905,2917,2916,2123,2135,2134,42,2130,2118,2116,0,2917,2905,2903,2135,2123,2121,42,2130,2116,2114,0,2917,2903,2901,2135,2121,2119,42,2130,2114,2131,0,2917,2901,2918,2135,2119,2136,42,2131,2114,2111,0,2918,2901,2898,2136,2119,2116,42,2131,2111,2132,0,2918,2898,2919,2136,2116,2137,42,2132,2111,2133,0,2919,2898,2920,2137,2116,2138,42,2133,2111,2109,0,2920,2898,2896,2138,2116,2114,42,2133,2109,2134,0,2920,2896,2921,2138,2114,2139,42,2109,2107,2134,0,2896,2894,2921,2114,2112,2139,42,2134,2107,2105,0,2921,2894,2892,2139,2112,2110,42,2134,2105,2135,0,2921,2892,2922,2139,2110,2140,42,2135,2105,2104,0,2922,2892,2891,2140,2110,2109,42,2135,2104,2136,0,2922,2891,2923,2140,2109,2141,42,2136,2104,2137,0,2923,2891,2924,2141,2109,2142,42,2104,2101,2137,0,2891,2886,2924,2109,2106,2142,42,2137,2101,2099,0,2924,2886,2888,2142,2106,2104,42,2137,2099,2138,0,2924,2888,2925,2142,2104,2143,42,2138,2099,2097,0,2926,2927,2928,2143,2104,2102,42,2138,2097,2139,0,2926,2928,2929,2143,2102,2144,42,2139,2097,2095,0,2929,2928,2930,2144,2102,2100,42,2139,2095,2140,0,2929,2930,2931,2144,2100,2145,42,2140,2095,2094,0,2931,2930,2932,2145,2100,2099,42,2140,2094,2141,0,2931,2932,2933,2145,2099,2146,42,2141,2094,2142,0,2933,2932,2934,2146,2099,2147,42,2094,2143,2142,0,2932,2935,2934,2099,2148,2147,42,2094,2090,2143,0,2879,2875,2936,2099,2095,2148,42,2143,2090,2144,0,2936,2875,2937,2148,2095,2149,42,2090,2088,2144,0,2875,2873,2937,2095,2093,2149,42,2088,2085,2144,0,2873,2870,2937,2093,2090,2149,42,2144,2085,2081,0,2937,2870,2867,2149,2090,2086,42,2144,2081,2079,0,2938,2864,2862,2149,2086,2084,42,2145,2144,2079,0,2939,2938,2862,2150,2149,2084,42,2143,2144,2145,0,2935,2938,2939,2148,2149,2150,42,2142,2143,2145,0,2934,2935,2939,2147,2148,2150,42,2145,2078,2142,0,2939,2861,2934,2150,2083,2147,42,2145,2079,2078,0,2939,2862,2861,2150,2084,2083,42,2142,2078,2141,0,2934,2861,2933,2147,2083,2146,42,2141,2078,2146,0,2933,2861,2940,2146,2083,2151,42,2146,2078,2147,0,2940,2861,2941,2151,2083,2152,42,2147,2078,2148,0,2941,2861,2942,2152,2083,2153,42,2078,2076,2148,0,2861,2859,2942,2083,2081,2153,42,2148,2076,2070,0,2942,2859,2853,2153,2081,2075,42,2076,2071,2070,0,2859,2854,2853,2081,2076,2075,42,2148,2070,2149,0,2942,2853,2943,2153,2075,2154,42,2149,2070,2150,0,2943,2853,2944,2154,2075,2155,42,2150,2070,2057,0,2944,2853,2836,2155,2075,2062,42,2057,2070,2059,0,2836,2853,2838,2062,2075,2064,42,2070,2061,2059,0,2945,2840,2842,2075,2066,2064,42,2070,2064,2061,0,2945,2845,2840,2075,2069,2066,42,2150,2057,2055,0,2944,2836,2834,2155,2062,2060,42,2150,2055,2151,0,2944,2834,2946,2155,2060,2156,42,2152,2151,2055,0,2947,2946,2834,2157,2156,2060,42,2149,2151,2152,0,2943,2946,2947,2154,2156,2157,42,2151,2149,2150,0,2946,2943,2944,2156,2154,2155,42,2147,2149,2152,0,2941,2943,2947,2152,2154,2157,42,2148,2149,2147,0,2942,2943,2941,2153,2154,2152,42,2147,2152,2146,0,2941,2947,2940,2152,2157,2151,42,2146,2152,2153,0,2940,2947,2948,2151,2157,2158,42,2153,2152,2154,0,2948,2947,2949,2158,2157,2159,42,2152,2155,2154,0,2947,2950,2949,2157,2160,2159,42,2152,2055,2155,0,2947,2834,2950,2157,2060,2160,42,2055,2053,2155,0,2834,2832,2950,2060,2058,2160,42,2155,2053,2051,0,2950,2832,2830,2160,2058,2056,42,2154,2155,2051,0,2949,2950,2830,2159,2160,2056,42,2154,2051,2156,0,2949,2830,2951,2159,2056,2161,42,2156,2051,2049,0,2951,2830,2828,2161,2056,2054,42,2156,2049,2047,0,2951,2828,2826,2161,2054,2052,42,2156,2047,2157,0,2951,2826,2952,2161,2052,2162,42,2157,2047,2045,0,2952,2826,2824,2162,2052,2050,42,2158,2157,2045,0,2953,2952,2824,2163,2162,2050,42,2159,2157,2158,0,2954,2952,2953,2164,2162,2163,42,2160,2157,2159,0,2955,2952,2954,2165,2162,2164,42,2160,2161,2157,0,2955,2956,2952,2165,2166,2162,42,2162,2161,2160,0,2957,2958,2959,2167,2166,2165,42,2163,2161,2162,0,2960,2958,2957,2168,2166,2167,42,2163,2164,2161,0,2960,2961,2958,2168,2169,2166,42,2165,2164,2163,0,2962,2961,2960,2170,2169,2168,42,2165,2138,2164,0,2962,2925,2961,2170,2143,2169,42,2165,2137,2138,0,2962,2924,2925,2170,2142,2143,42,2136,2137,2165,0,2923,2924,2962,2141,2142,2170,42,2166,2136,2165,0,2963,2923,2962,2171,2141,2170,42,2167,2136,2166,0,2964,2923,2963,2172,2141,2171,42,2167,2135,2136,0,2964,2922,2923,2172,2140,2141,42,2134,2135,2167,0,2921,2922,2964,2139,2140,2172,42,2168,2134,2167,0,2965,2921,2964,2173,2139,2172,42,2169,2134,2168,0,2966,2921,2965,2174,2139,2173,42,2169,2133,2134,0,2966,2920,2921,2174,2138,2139,42,2170,2133,2169,0,2967,2920,2966,2175,2138,2174,42,2170,2132,2133,0,2967,2919,2920,2175,2137,2138,42,2131,2132,2170,0,2918,2919,2967,2136,2137,2175,42,2171,2131,2170,0,2968,2918,2967,2176,2136,2175,42,2129,2131,2171,0,2916,2918,2968,2134,2136,2176,42,2129,2130,2131,0,2916,2917,2918,2134,2135,2136,42,2129,2171,2172,0,2916,2968,2969,2134,2176,2177,42,2172,2171,2170,0,2969,2968,2967,2177,2176,2175,42,2172,2170,2173,0,2969,2967,2970,2177,2175,2178,42,2173,2170,2174,0,2970,2967,2971,2178,2175,2179,42,2170,2169,2174,0,2967,2966,2971,2175,2174,2179,42,2174,2169,2175,0,2971,2966,2972,2179,2174,2180,42,2169,2168,2175,0,2966,2965,2972,2174,2173,2180,42,2168,2167,2175,0,2965,2964,2972,2173,2172,2180,42,2175,2167,2176,0,2972,2964,2973,2180,2172,2181,42,2167,2166,2176,0,2964,2963,2973,2172,2171,2181,42,2166,2177,2176,0,2963,2974,2973,2171,2182,2181,42,2166,2163,2177,0,2963,2960,2974,2171,2168,2182,42,2166,2165,2163,0,2963,2962,2960,2171,2170,2168,42,2177,2163,2162,0,2974,2960,2957,2182,2168,2167,42,2177,2162,2178,0,2974,2957,2975,2182,2167,2183,42,2178,2162,2179,0,2975,2957,2976,2183,2167,2184,42,2162,2160,2179,0,2957,2959,2976,2167,2165,2184,42,2179,2160,2180,0,2976,2959,2977,2184,2165,2185,42,2160,2159,2180,0,2955,2954,2978,2165,2164,2185,42,2180,2159,2181,0,2978,2954,2979,2185,2164,2186,42,2159,2182,2181,0,2954,2980,2979,2164,2187,2186,42,2159,2158,2182,0,2954,2953,2980,2164,2163,2187,42,2158,2041,2182,0,2953,2820,2980,2163,2046,2187,42,2158,2042,2041,0,2953,2821,2820,2163,2047,2046,42,2158,2045,2042,0,2953,2824,2821,2163,2050,2047,42,2183,2182,2041,0,2981,2980,2820,2188,2187,2046,42,2184,2182,2183,0,2982,2980,2981,2189,2187,2188,42,2184,2181,2182,0,2982,2979,2980,2189,2186,2187,42,2184,2180,2181,0,2982,2978,2979,2189,2185,2186,42,2185,2180,2184,0,2983,2978,2982,2190,2185,2189,42,2185,2186,2180,0,2984,2985,2977,2190,2191,2185,42,2187,2186,2185,0,2986,2985,2984,2192,2191,2190,42,2187,2188,2186,0,2986,2987,2985,2192,2193,2191,42,2189,2188,2187,0,2988,2987,2986,2194,2193,2192,42,2190,2188,2189,0,2989,2987,2988,2195,2193,2194,42,2190,2191,2188,0,2989,2990,2987,2195,2196,2193,42,2192,2191,2190,0,2991,2990,2989,2197,2196,2195,42,2193,2191,2192,0,2992,2990,2991,2198,2196,2197,42,2194,2191,2193,0,2993,2990,2992,2199,2196,2198,42,2194,2195,2191,0,2993,2994,2990,2199,2200,2196,42,2194,2196,2195,0,2993,2995,2994,2199,2201,2200,42,2197,2196,2194,0,2996,2995,2993,2202,2201,2199,42,2175,2196,2197,0,2972,2995,2996,2180,2201,2202,42,2175,2176,2196,0,2972,2973,2995,2180,2181,2201,42,2176,2177,2196,0,2973,2974,2995,2181,2182,2201,42,2177,2178,2196,0,2974,2975,2995,2182,2183,2201,42,2196,2178,2195,0,2995,2975,2994,2201,2183,2200,42,2195,2178,2198,0,2994,2975,2997,2200,2183,2203,42,2178,2179,2198,0,2975,2976,2997,2183,2184,2203,42,2198,2179,2186,0,2997,2976,2985,2203,2184,2191,42,2179,2180,2186,0,2976,2977,2985,2184,2185,2191,42,2198,2186,2188,0,2997,2985,2987,2203,2191,2193,42,2191,2198,2188,0,2990,2997,2987,2196,2203,2193,42,2195,2198,2191,0,2994,2997,2990,2200,2203,2196,42,2175,2197,2199,0,2972,2996,2998,2180,2202,2204,42,2199,2197,2194,0,2998,2996,2993,2204,2202,2199,42,2199,2194,2200,0,2998,2993,2999,2204,2199,2205,42,2200,2194,2201,0,2999,2993,3000,2205,2199,2206,42,2201,2194,2193,0,3000,2993,2992,2206,2199,2198,42,2201,2193,2192,0,3000,2992,2991,2206,2198,2197,42,2201,2192,2202,0,3000,2991,3001,2206,2197,2207,42,2110,2202,2192,0,3002,3001,2991,2115,2207,2197,42,2112,2202,2110,0,3003,3001,3002,2117,2207,2115,42,2112,2203,2202,0,3003,3004,3001,2117,2208,2207,42,2112,2204,2203,0,3003,3005,3004,2117,2209,2208,42,2113,2204,2112,0,3006,3005,3003,2118,2209,2117,42,2115,2204,2113,0,3007,3005,3006,2120,2209,2118,42,2115,2205,2204,0,3007,3008,3005,2120,2210,2209,42,2115,2206,2205,0,3007,3009,3008,2120,2211,2210,42,2117,2206,2115,0,2904,3010,2902,2122,2211,2120,42,2117,2119,2206,0,2904,2906,3010,2122,2124,2211,42,2119,2207,2206,0,2906,3011,3010,2124,2212,2211,42,2119,2208,2207,0,2906,3012,3011,2124,2213,2212,42,2120,2208,2119,0,2907,3012,2906,2125,2213,2124,42,2120,2123,2208,0,2907,2910,3012,2125,2128,2213,42,2123,2209,2208,0,2910,3013,3012,2128,2214,2213,42,2124,2209,2123,0,2911,3013,2910,2129,2214,2128,42,2209,2210,2208,0,3013,3014,3012,2214,2215,2213,42,2208,2210,2211,0,3012,3014,3015,2213,2215,2216,42,2208,2211,2212,0,3012,3015,3016,2213,2216,2217,42,2211,2213,2212,0,3017,3018,3019,2216,2218,2217,42,2214,2213,2211,0,3020,3018,3017,2219,2218,2216,42,2215,2213,2214,0,3021,3018,3020,2220,2218,2219,42,2215,2216,2213,0,3021,3022,3018,2220,2221,2218,42,2217,2216,2215,0,3023,3022,3021,2222,2221,2220,42,2218,2216,2217,0,3024,3022,3023,2223,2221,2222,42,2218,2219,2216,0,3024,3025,3022,2223,2224,2221,42,2220,2219,2218,0,3026,3025,3024,2225,2224,2223,42,2221,2219,2220,0,3027,3025,3026,2226,2224,2225,42,2221,2222,2219,0,3027,3028,3025,2226,2227,2224,42,2221,2223,2222,0,3027,3029,3028,2226,2228,2227,42,2221,2224,2223,0,3027,3030,3029,2226,2229,2228,42,2225,2224,2221,0,3031,3030,3027,2230,2229,2226,42,2225,2226,2224,0,3031,3032,3030,2230,2231,2229,42,2225,2227,2226,0,3031,3033,3032,2230,2232,2231,42,2172,2227,2225,0,2969,3033,3031,2177,2232,2230,42,2172,2228,2227,0,2969,3034,3033,2177,2233,2232,42,2172,2173,2228,0,2969,2970,3034,2177,2178,2233,42,2173,2174,2228,0,2970,2971,3034,2178,2179,2233,42,2174,2199,2228,0,2971,2998,3034,2179,2204,2233,42,2174,2175,2199,0,2971,2972,2998,2179,2180,2204,42,2228,2199,2200,0,3034,2998,2999,2233,2204,2205,42,2228,2200,2229,0,3034,2999,3035,2233,2205,2234,42,2229,2200,2230,0,3035,2999,3036,2234,2205,2235,42,2230,2200,2201,0,3036,2999,3000,2235,2205,2206,42,2230,2201,2202,0,3036,3000,3001,2235,2206,2207,42,2230,2202,2203,0,3036,3001,3004,2235,2207,2208,42,2204,2230,2203,0,3005,3036,3004,2209,2235,2208,42,2231,2230,2204,0,3037,3036,3005,2236,2235,2209,42,2226,2230,2231,0,3032,3036,3037,2231,2235,2236,42,2226,2229,2230,0,3032,3035,3036,2231,2234,2235,42,2228,2229,2226,0,3034,3035,3032,2233,2234,2231,42,2227,2228,2226,0,3033,3034,3032,2232,2233,2231,42,2223,2226,2231,0,3029,3032,3037,2228,2231,2236,42,2224,2226,2223,0,3030,3032,3029,2229,2231,2228,42,2223,2231,2204,0,3029,3037,3005,2228,2236,2209,42,2223,2204,2205,0,3029,3005,3008,2228,2209,2210,42,2232,2223,2205,0,3038,3029,3008,2237,2228,2210,42,2222,2223,2232,0,3028,3029,3038,2227,2228,2237,42,2219,2222,2232,0,3025,3028,3038,2224,2227,2237,42,2219,2232,2233,0,3025,3038,3039,2224,2237,2238,42,2233,2232,2207,0,3039,3038,3040,2238,2237,2212,42,2206,2207,2232,0,3009,3040,3038,2211,2212,2237,42,2206,2232,2205,0,3009,3038,3008,2211,2237,2210,42,2213,2233,2207,0,3018,3039,3040,2218,2238,2212,42,2213,2219,2233,0,3018,3025,3039,2218,2224,2238,42,2216,2219,2213,0,3022,3025,3018,2221,2224,2218,42,2213,2207,2212,0,3018,3040,3019,2218,2212,2217,42,2208,2212,2207,0,3012,3016,3011,2213,2217,2212,42,2234,2172,2225,0,3041,2969,3031,2239,2177,2230,42,2234,2129,2172,0,3041,2916,2969,2239,2134,2177,42,2127,2129,2234,0,2914,2916,3041,2132,2134,2239,42,2127,2128,2129,0,2914,2915,2916,2132,2133,2134,42,2127,2234,2225,0,2914,3041,3031,2132,2239,2230,42,2127,2225,2235,0,2914,3031,3042,2132,2230,2240,42,2235,2225,2221,0,3042,3031,3027,2240,2230,2226,42,2236,2235,2221,0,3043,3042,3027,2241,2240,2226,42,2127,2235,2236,0,2914,3042,3043,2132,2240,2241,42,2236,2126,2127,0,3043,2913,2914,2241,2131,2132,42,2125,2126,2236,0,2912,2913,3043,2130,2131,2241,42,2237,2125,2236,0,3044,2912,3043,2242,2130,2241,42,2238,2125,2237,0,3045,2912,3044,2243,2130,2242,42,2238,2124,2125,0,3045,2911,2912,2243,2129,2130,42,2239,2238,2237,0,3046,3045,3044,2244,2243,2242,42,2237,2218,2239,0,3044,3024,3046,2242,2223,2244,42,2237,2236,2218,0,3044,3043,3024,2242,2241,2223,42,2236,2220,2218,0,3043,3026,3024,2241,2225,2223,42,2236,2221,2220,0,3043,3027,3026,2241,2226,2225,42,2239,2218,2217,0,3046,3024,3023,2244,2223,2222,42,2110,2192,2108,0,3002,2991,3047,2115,2197,2113,42,2108,2192,2106,0,3047,2991,3048,2113,2197,2111,42,2106,2192,2190,0,3048,2991,2989,2111,2197,2195,42,2106,2190,2189,0,3048,2989,2988,2111,2195,2194,42,2106,2189,2103,0,3048,2988,3049,2111,2194,2108,42,2103,2189,2102,0,3049,2988,3050,2108,2194,2107,42,2102,2189,2187,0,3050,2988,2986,2107,2194,2192,42,2102,2187,2240,0,3050,2986,3051,2107,2192,2245,42,2240,2187,2185,0,3051,2986,2984,2245,2192,2190,42,2240,2185,2241,0,3052,2983,3053,2245,2190,2246,42,2241,2185,2184,0,3053,2983,2982,2246,2190,2189,42,2241,2184,2242,0,3053,2982,3054,2246,2189,2247,42,2184,2243,2242,0,2982,3055,3054,2189,2248,2247,42,2243,2184,2244,0,3055,2982,3056,2248,2189,2249,42,2184,2183,2244,0,2982,2981,3056,2189,2188,2249,42,2244,2183,2041,0,3056,2981,2820,2249,2188,2046,42,2244,2041,2245,0,3056,2820,3057,2249,2046,2250,42,2245,2041,2039,0,3057,2820,2818,2250,2046,2044,42,2245,2039,2038,0,3057,2818,2817,2250,2044,2043,42,2245,2038,2246,0,3057,2817,3058,2250,2043,2251,42,2246,2038,2247,0,3058,2817,3059,2251,2043,2252,42,2247,2038,2035,0,3059,2817,2814,2252,2043,2040,42,2035,2248,2247,0,2814,3060,3059,2040,2253,2252,42,2248,2035,2033,0,3060,2814,2812,2253,2040,2038,42,2248,2033,2249,0,3060,2812,3061,2253,2038,2254,42,2249,2033,2032,0,3061,2812,2811,2254,2038,2037,42,2249,2032,2250,0,3062,3063,3064,2254,2037,2255,42,2032,2251,2250,0,3063,3065,3064,2037,2256,2255,42,2024,2251,2032,0,3066,3065,3063,2029,2256,2037,42,2024,2022,2251,0,3066,3067,3065,2029,2027,2256,42,2022,2252,2251,0,3067,3068,3065,2027,2257,2256,42,2022,2020,2252,0,3067,2797,3068,2027,2025,2257,42,2020,2019,2252,0,2797,2796,3068,2025,2024,2257,42,2019,2018,2252,0,2796,2793,3068,2024,2021,2257,42,2253,2252,2018,0,3069,3068,2793,2258,2257,2021,42,2252,2253,2254,0,3068,3069,3070,2257,2258,2259,42,2254,2253,2255,0,3070,3069,3071,2259,2258,2260,42,2255,2253,2256,0,3071,3069,3072,2260,2258,2261,42,2256,2253,2012,0,3072,3069,3073,2261,2258,2262,42,2012,2253,2018,0,3073,3069,2793,2262,2258,2021,42,2012,2018,2013,0,3073,2793,2795,2262,2021,2023,42,2256,2010,2257,0,3072,2788,3074,2261,2016,2263,42,2010,2009,2257,0,2788,2790,3074,2016,2018,2263,42,2258,2257,2009,0,3075,3074,2790,2264,2263,2018,42,2255,2257,2258,0,3071,3074,3075,2260,2263,2264,42,2255,2256,2257,0,3071,3072,3074,2260,2261,2263,42,2255,2258,2259,0,3071,3075,3076,2260,2264,2265,42,2260,2259,2258,0,3077,3076,3075,2266,2265,2264,42,2028,2259,2260,0,2807,3076,3077,2033,2265,2266,42,2028,2261,2259,0,2807,3078,3076,2033,2267,2265,42,2029,2261,2028,0,2808,3078,2807,2034,2267,2033,42,2029,2262,2261,0,2808,3079,3078,2034,2268,2267,42,2030,2262,2029,0,2809,3079,2808,2035,2268,2034,42,2034,2262,2030,0,2813,3079,2809,2039,2268,2035,42,2034,2036,2262,0,2813,2815,3079,2039,2041,2268,42,2036,2263,2262,0,2815,3080,3079,2041,2269,2268,42,2036,2264,2263,0,2815,3081,3080,2041,2270,2269,42,2037,2264,2036,0,2816,3081,2815,2042,2270,2041,42,2037,2265,2264,0,2816,3082,3081,2042,2271,2270,42,2037,2040,2265,0,2816,2819,3082,2042,2045,2271,42,2043,2265,2040,0,2822,3082,2819,2048,2271,2045,42,2043,2266,2265,0,2822,3083,3082,2048,2272,2271,42,2043,2267,2266,0,2822,3084,3083,2048,2273,2272,42,2044,2267,2043,0,2823,3084,2822,2049,2273,2048,42,2044,2268,2267,0,2823,3085,3084,2049,2274,2273,42,2046,2268,2044,0,2825,3085,2823,2051,2274,2049,42,2048,2268,2046,0,2827,3085,2825,2053,2274,2051,42,2048,2269,2268,0,2827,3086,3085,2053,2275,2274,42,2048,2050,2269,0,2827,2829,3086,2053,2055,2275,42,2050,2270,2269,0,2829,3087,3086,2055,2276,2275,42,2052,2270,2050,0,2831,3087,2829,2057,2276,2055,42,2052,2271,2270,0,2831,3088,3087,2057,2277,2276,42,2272,2271,2052,0,3089,3088,2831,2278,2277,2057,42,2272,2273,2271,0,3089,3090,3088,2278,2279,2277,42,2274,2273,2272,0,3091,3090,3089,2280,2279,2278,42,2274,2275,2273,0,3091,3092,3090,2280,2281,2279,42,2274,2276,2275,0,3093,3094,3095,2280,2282,2281,42,2277,2276,2274,0,3096,3094,3093,2283,2282,2280,42,2277,2278,2276,0,3096,3097,3094,2283,2284,2282,42,2277,2279,2278,0,3096,3098,3097,2283,2285,2284,42,2280,2279,2277,0,3099,3098,3096,2286,2285,2283,42,2280,2281,2279,0,3099,3100,3098,2286,2287,2285,42,2282,2281,2280,0,3101,3100,3099,2288,2287,2286,42,2282,2283,2281,0,3101,3102,3100,2288,2289,2287,42,2284,2283,2282,0,3103,3102,3101,2290,2289,2288,42,2284,2285,2283,0,3103,3104,3102,2290,2291,2289,42,2284,2247,2285,0,3103,3059,3104,2290,2252,2291,42,2246,2247,2284,0,3058,3059,3103,2251,2252,2290,42,2246,2284,2286,0,3058,3103,3105,2251,2290,2292,42,2286,2284,2066,0,3105,3103,2847,2292,2290,2071,42,2066,2284,2282,0,2847,3103,3101,2071,2290,2288,42,2066,2282,2065,0,2847,3101,2846,2071,2288,2070,42,2282,2280,2065,0,3101,3099,2846,2288,2286,2070,42,2065,2280,2287,0,2846,3099,3106,2070,2286,2293,42,2280,2288,2287,0,3107,3108,3109,2286,2294,2293,42,2056,2288,2280,0,2835,3108,3107,2061,2294,2286,42,2058,2288,2056,0,2837,3108,2835,2063,2294,2061,42,2058,2289,2288,0,2837,3110,3108,2063,2295,2294,42,2058,2290,2289,0,2837,3111,3110,2063,2296,2295,42,2058,2060,2290,0,2837,2839,3111,2063,2065,2296,42,2290,2060,2291,0,3111,2839,3112,2296,2065,2297,42,2062,2291,2060,0,2843,3113,2841,2067,2297,2065,42,2062,2292,2291,0,2843,3114,3113,2067,2298,2297,42,2062,2293,2292,0,2843,3115,3114,2067,2299,2298,42,2062,2063,2293,0,2843,2844,3115,2067,2068,2299,42,2063,2294,2293,0,2844,3116,3115,2068,2300,2299,42,2063,2287,2294,0,2844,3106,3116,2068,2293,2300,42,2065,2287,2063,0,2846,3106,2844,2070,2293,2068,42,2287,2289,2294,0,3109,3110,3117,2293,2295,2300,42,2287,2288,2289,0,3109,3108,3110,2293,2294,2295,42,2294,2289,2295,0,3117,3110,3118,2300,2295,2301,42,2290,2295,2289,0,3111,3118,3110,2296,2301,2295,42,2290,2296,2295,0,3111,3119,3118,2296,2302,2301,42,2291,2296,2290,0,3112,3119,3111,2297,2302,2296,42,2291,2297,2296,0,3112,3120,3119,2297,2303,2302,42,2292,2297,2291,0,3114,3121,3113,2298,2303,2297,42,2292,2298,2297,0,3114,3122,3121,2298,2304,2303,42,2292,2299,2298,0,3114,3123,3122,2298,2305,2304,42,2292,2300,2299,0,3114,3124,3123,2298,2306,2305,42,2292,2293,2300,0,3114,3115,3124,2298,2299,2306,42,2293,2301,2300,0,3115,3125,3124,2299,2307,2306,42,2294,2301,2293,0,3116,3125,3115,2300,2307,2299,42,2294,2295,2301,0,3117,3118,3126,2300,2301,2307,42,2301,2295,2302,0,3126,3118,3127,2307,2301,2308,42,2296,2302,2295,0,3119,3127,3118,2302,2308,2301,42,2296,2303,2302,0,3119,3128,3127,2302,2309,2308,42,2297,2303,2296,0,3120,3128,3119,2303,2309,2302,42,2304,2303,2297,0,3129,3128,3120,2310,2309,2303,42,2303,2304,2302,0,3128,3129,3127,2309,2310,2308,42,2302,2304,2305,0,3127,3129,3130,2308,2310,2311,42,2304,2306,2305,0,3129,3131,3130,2310,2312,2311,42,2304,2307,2306,0,3129,3132,3131,2310,2313,2312,42,2308,2307,2304,0,3133,3132,3129,2314,2313,2310,42,2309,2307,2308,0,3134,3132,3133,2315,2313,2314,42,2309,2310,2307,0,3134,3135,3132,2315,2316,2313,42,2311,2310,2309,0,3136,3135,3134,2317,2316,2315,42,2312,2310,2311,0,3137,3135,3136,2318,2316,2317,42,2312,2313,2310,0,3137,3138,3135,2318,2319,2316,42,2314,2313,2312,0,3139,3138,3137,2320,2319,2318,42,2315,2313,2314,0,3140,3138,3139,2321,2319,2320,42,2316,2313,2315,0,3141,3138,3140,2322,2319,2321,42,2316,2306,2313,0,3141,3131,3138,2322,2312,2319,42,2317,2306,2316,0,3142,3131,3141,2323,2312,2322,42,2317,2305,2306,0,3142,3130,3131,2323,2311,2312,42,2318,2305,2317,0,3143,3130,3142,2324,2311,2323,42,2318,2302,2305,0,3143,3127,3130,2324,2308,2311,42,2301,2302,2318,0,3126,3127,3143,2307,2308,2324,42,2300,2301,2318,0,3124,3125,3144,2306,2307,2324,42,2299,2300,2318,0,3123,3124,3144,2305,2306,2324,42,2317,2299,2318,0,3145,3123,3144,2323,2305,2324,42,2319,2299,2317,0,3146,3123,3145,2325,2305,2323,42,2320,2299,2319,0,3147,3123,3146,2326,2305,2325,42,2298,2299,2320,0,3122,3123,3147,2304,2305,2326,42,2298,2320,2321,0,3122,3147,3148,2304,2326,2327,42,2320,2308,2321,0,3147,3149,3148,2326,2314,2327,42,2320,2322,2308,0,3147,3150,3149,2326,2328,2314,42,2320,2319,2322,0,3147,3146,3150,2326,2325,2328,42,2322,2319,2323,0,3150,3146,3151,2328,2325,2329,42,2319,2316,2323,0,3146,3152,3151,2325,2322,2329,42,2319,2317,2316,0,3146,3145,3152,2325,2323,2322,42,2323,2316,2315,0,3151,3152,3153,2329,2322,2321,42,2324,2323,2315,0,3154,3151,3153,2330,2329,2321,42,2325,2323,2324,0,3155,3151,3154,2331,2329,2330,42,2325,2322,2323,0,3155,3150,3151,2331,2328,2329,42,2322,2325,2309,0,3150,3155,3156,2328,2331,2315,42,2325,2326,2309,0,3155,3157,3156,2331,2332,2315,42,2325,2327,2326,0,3155,3158,3157,2331,2333,2332,42,2325,2324,2327,0,3155,3154,3158,2331,2330,2333,42,2327,2324,2315,0,3158,3154,3153,2333,2330,2321,42,2327,2315,2314,0,3158,3153,3159,2333,2321,2320,42,2328,2327,2314,0,3160,3158,3159,2334,2333,2320,42,2326,2327,2328,0,3157,3158,3160,2332,2333,2334,42,2326,2328,2329,0,3157,3160,3161,2332,2334,2335,42,2329,2328,2330,0,3161,3160,3162,2335,2334,2336,42,2328,2331,2330,0,3160,3163,3162,2334,2337,2336,42,2328,2314,2331,0,3160,3159,3163,2334,2320,2337,42,2314,2312,2331,0,3139,3137,3164,2320,2318,2337,42,2331,2312,2332,0,3164,3137,3165,2337,2318,2338,42,2312,2333,2332,0,3137,3166,3165,2318,2339,2338,42,2334,2333,2312,0,3167,3166,3137,2340,2339,2318,42,2335,2333,2334,0,3168,3166,3167,2341,2339,2340,42,2336,2333,2335,0,3169,3166,3168,2342,2339,2341,42,2333,2337,2332,0,3166,3170,3165,2339,2343,2338,42,2332,2337,2338,0,3165,3170,3171,2338,2343,2344,42,2337,2339,2338,0,3170,3172,3171,2343,2345,2344,42,2343,2341,2342,0,3173,3174,3175,2346,2347,2348,42,2345,2343,2346,0,3176,3173,3177,2349,2346,2350,42,2346,2343,2342,0,3177,3173,3175,2350,2346,2348,42,2347,2346,2342,0,3178,3177,3175,2351,2350,2348,42,2348,2346,2347,0,3179,3177,3178,2352,2350,2351,42,2348,2349,2346,0,3179,3180,3177,2352,2353,2350,42,2351,2350,2348,0,3181,3182,3179,2354,2355,2352,42,2352,2354,2353,0,3183,3184,3185,2356,2357,2358,42,2357,2344,2354,0,3186,3187,3184,2359,2360,2357,42,2338,2344,2357,0,3171,3187,3186,2344,2360,2359,42,2358,2332,2338,0,3188,3165,3171,2361,2338,2344,42,2331,2332,2358,0,3164,3165,3188,2337,2338,2361,42,2330,2331,2358,0,3162,3163,3189,2336,2337,2361,42,2358,2357,2330,0,3189,3190,3162,2361,2359,2336,42,2330,2357,2359,0,3162,3190,3191,2336,2359,2362,42,2362,2352,2351,0,3192,3183,3181,2363,2356,2354,42,2362,2348,2363,0,3192,3179,3193,2363,2352,2364,42,2347,2363,2348,0,3178,3193,3179,2351,2364,2352,42,2363,2347,2364,0,3193,3178,3194,2364,2351,2365,42,2365,2364,2347,0,3195,3194,3178,2366,2365,2351,42,2369,2361,2363,0,3196,3197,3193,2367,2368,2364,42,2370,2361,2369,0,3198,3199,3200,2369,2368,2367,42,2370,2330,2361,0,3198,3162,3199,2369,2336,2368,42,2329,2330,2370,0,3161,3162,3198,2335,2336,2369,42,2329,2370,2371,0,3161,3198,3201,2335,2369,2370,42,2370,2369,2371,0,3198,3200,3201,2369,2367,2370,42,2369,2367,2371,0,3196,3202,3203,2367,2371,2370,42,2367,2369,2368,0,3202,3196,3204,2371,2367,2372,42,2372,2371,2367,0,3205,3203,3202,2373,2370,2371,42,2371,2372,2373,0,3203,3205,3206,2370,2373,2374,42,2373,2372,2334,0,3206,3205,3167,2374,2373,2340,42,2372,2335,2334,0,3205,3168,3167,2373,2341,2340,42,2366,2335,2372,0,3207,3168,3205,2375,2341,2373,42,2347,2342,2365,0,3178,3175,3195,2351,2348,2366,42,2367,2366,2372,0,3202,3207,3205,2371,2375,2373,42,2373,2334,2311,0,3206,3167,3136,2374,2340,2317,42,2311,2334,2312,0,3136,3167,3137,2317,2340,2318,42,2373,2311,2309,0,3206,3136,3134,2374,2317,2315,42,2326,2373,2309,0,3157,3208,3156,2332,2374,2315,42,2326,2329,2373,0,3157,3161,3208,2332,2335,2374,42,2329,2371,2373,0,3161,3201,3208,2335,2370,2374,42,2361,2330,2359,0,3199,3162,3191,2368,2336,2362,42,2361,2362,2363,0,3197,3192,3193,2368,2363,2364,42,2344,2345,2354,0,3187,3176,3184,2360,2349,2357,42,2349,2345,2346,0,3180,3176,3177,2353,2349,2350,42,2322,2309,2308,0,3150,3156,3149,2328,2315,2314,42,2304,2321,2308,0,3129,3209,3133,2310,2327,2314,42,2321,2304,2297,0,3209,3129,3120,2327,2310,2303,42,2298,2321,2297,0,3122,3148,3121,2304,2327,2303,42,2313,2306,2307,0,3138,3131,3132,2319,2312,2313,42,2310,2313,2307,0,3135,3138,3132,2316,2319,2313,42,2056,2280,2277,0,3210,3099,3096,2061,2286,2283,42,2056,2277,2274,0,3210,3096,3093,2061,2283,2280,42,2056,2274,2272,0,2835,3091,3089,2061,2280,2278,42,2056,2272,2054,0,2835,3089,2833,2061,2278,2059,42,2054,2272,2052,0,2833,3089,2831,2059,2278,2057,42,2066,2374,2286,0,2847,3211,3105,2071,2376,2292,42,2374,2066,2091,0,3211,2847,2876,2376,2071,2096,42,2091,2066,2067,0,2876,2847,2848,2096,2071,2072,42,2091,2067,2375,0,2876,2848,3212,2096,2072,2377,42,2375,2067,2376,0,3212,2848,3213,2377,2072,2378,42,2067,2068,2376,0,2848,2849,3213,2072,2073,2378,42,2068,2377,2376,0,2849,3214,3213,2073,2379,2378,42,2068,2378,2377,0,2849,3215,3214,2073,2380,2379,42,2068,2069,2378,0,2852,2851,3216,2073,2074,2380,42,2069,2072,2378,0,2851,2855,3216,2074,2077,2380,42,2378,2072,2379,0,3216,2855,3217,2380,2077,2381,42,2380,2379,2072,0,3218,3217,2855,2382,2381,2077,42,2381,2379,2380,0,3219,3217,3218,2383,2381,2382,42,2382,2379,2381,0,3220,3217,3219,2384,2381,2383,42,2382,2383,2379,0,3220,3221,3217,2384,2385,2381,42,2384,2383,2382,0,3222,3223,3224,2386,2385,2384,42,2384,2385,2383,0,3222,3225,3223,2386,2387,2385,42,2384,2386,2385,0,3222,3226,3225,2386,2388,2387,42,2387,2386,2384,0,3227,3226,3222,2389,2388,2386,42,2386,2387,2388,0,3226,3227,3228,2388,2389,2390,42,2387,2389,2388,0,3227,3229,3228,2389,2391,2390,42,2387,2390,2389,0,3227,3230,3229,2389,2392,2391,42,2387,2391,2390,0,3227,3231,3230,2389,2393,2392,42,2387,2384,2391,0,3227,3222,3231,2389,2386,2393,42,2391,2384,2382,0,3231,3222,3224,2393,2386,2384,42,2391,2382,2392,0,3231,3224,3232,2393,2384,2394,42,2382,2381,2392,0,3220,3219,3233,2384,2383,2394,42,2392,2381,2393,0,3233,3219,3234,2394,2383,2395,42,2394,2393,2381,0,3235,3234,3219,2396,2395,2383,42,2394,2395,2393,0,3235,3236,3234,2396,2397,2395,42,2395,2394,2389,0,3236,3235,3237,2397,2396,2391,42,2389,2394,2380,0,3237,3235,3218,2391,2396,2382,42,2380,2394,2381,0,3218,3235,3219,2382,2396,2383,42,2389,2380,2388,0,3237,3218,3238,2391,2382,2390,42,2074,2388,2380,0,2857,3238,3218,2079,2390,2382,42,2396,2388,2074,0,3239,3228,3240,2398,2390,2079,42,2396,2386,2388,0,3239,3226,3228,2398,2388,2390,42,2396,2385,2386,0,3239,3225,3226,2398,2387,2388,42,2396,2377,2385,0,3239,3214,3225,2398,2379,2387,42,2397,2377,2396,0,3241,3214,3239,2399,2379,2398,42,2397,2376,2377,0,3241,3213,3214,2399,2378,2379,42,2375,2376,2397,0,3212,3213,3241,2377,2378,2399,42,2375,2397,2077,0,3212,3241,3242,2377,2399,2082,42,2077,2397,2075,0,3242,3241,3243,2082,2399,2080,42,2397,2396,2075,0,3241,3239,3243,2399,2398,2080,42,2075,2396,2074,0,3243,3239,3240,2080,2398,2079,42,2375,2077,2398,0,3244,2860,3245,2377,2082,2400,42,2080,2398,2077,0,2863,3245,2860,2085,2400,2082,42,2080,2082,2398,0,2863,2865,3245,2085,2087,2400,42,2082,2399,2398,0,2865,3246,3245,2087,2401,2400,42,2082,2400,2399,0,2865,3247,3246,2087,2402,2401,42,2083,2400,2082,0,2866,3247,2865,2088,2402,2087,42,2083,2401,2400,0,2866,3248,3247,2088,2403,2402,42,2402,2401,2083,0,3249,3250,2869,2404,2403,2088,42,2403,2401,2402,0,3251,3250,3249,2405,2403,2404,42,2403,2404,2401,0,3251,3252,3250,2405,2406,2403,42,2403,2405,2404,0,3251,3253,3252,2405,2407,2406,42,2405,2403,2406,0,3253,3251,3254,2407,2405,2408,42,2406,2403,2407,0,3254,3251,3255,2408,2405,2409,42,2407,2403,2402,0,3255,3251,3249,2409,2405,2404,42,2402,2408,2407,0,3249,3256,3255,2404,2410,2409,42,2084,2408,2402,0,2868,3256,3249,2089,2410,2404,42,2084,2086,2408,0,2868,2871,3256,2089,2091,2410,42,2086,2409,2408,0,2871,3257,3256,2091,2411,2410,42,2410,2409,2086,0,3258,3257,2871,2412,2411,2091,42,2410,2398,2409,0,3259,3245,3260,2412,2400,2411,42,2375,2398,2410,0,3244,3245,3259,2377,2400,2412,42,2089,2375,2410,0,2874,3212,3258,2094,2377,2412,42,2091,2375,2089,0,2876,3212,2874,2096,2377,2094,42,2089,2410,2087,0,2874,3258,2872,2094,2412,2092,42,2087,2410,2086,0,2872,3258,2871,2092,2412,2091,42,2398,2399,2409,0,3245,3246,3260,2400,2401,2411,42,2409,2399,2411,0,3260,3246,3261,2411,2401,2413,42,2411,2399,2412,0,3261,3246,3262,2413,2401,2414,42,2400,2412,2399,0,3247,3262,3246,2402,2414,2401,42,2413,2412,2400,0,3263,3262,3247,2415,2414,2402,42,2414,2412,2413,0,3264,3262,3263,2416,2414,2415,42,2414,2411,2412,0,3264,3261,3262,2416,2413,2414,42,2407,2411,2414,0,3255,3265,3266,2409,2413,2416,42,2407,2408,2411,0,3255,3256,3265,2409,2410,2413,42,2408,2409,2411,0,3256,3257,3265,2410,2411,2413,42,2406,2407,2414,0,3254,3255,3266,2408,2409,2416,42,2406,2414,2415,0,3254,3266,3267,2408,2416,2417,42,2414,2413,2415,0,3264,3263,3268,2416,2415,2417,42,2415,2413,2416,0,3268,3263,3269,2417,2415,2418,42,2416,2413,2417,0,3269,3263,3270,2418,2415,2419,42,2417,2413,2400,0,3270,3263,3247,2419,2415,2402,42,2404,2417,2400,0,3271,3270,3247,2406,2419,2402,42,2418,2417,2404,0,3272,3270,3271,2420,2419,2406,42,2418,2419,2417,0,3272,3273,3270,2420,2421,2419,42,2418,2420,2419,0,3272,3274,3273,2420,2422,2421,42,2418,2421,2420,0,3272,3275,3274,2420,2423,2422,42,2422,2421,2418,0,3276,3277,3278,2424,2423,2420,42,2422,2423,2421,0,3276,3279,3277,2424,2425,2423,42,2424,2423,2422,0,3280,3279,3276,2426,2425,2424,42,2425,2423,2424,0,3281,3279,3280,2427,2425,2426,42,2425,2426,2423,0,3281,3282,3279,2427,2428,2425,42,2425,2427,2426,0,3281,3283,3282,2427,2429,2428,42,2427,2425,2428,0,3283,3281,3284,2429,2427,2430,42,2428,2425,2429,0,3284,3281,3285,2430,2427,2431,42,2425,2424,2429,0,3281,3280,3285,2427,2426,2431,42,2429,2424,2430,0,3285,3280,3286,2431,2426,2432,42,2424,2422,2430,0,3280,3276,3286,2426,2424,2432,42,2422,2431,2430,0,3276,3287,3286,2424,2433,2432,42,2405,2431,2422,0,3253,3287,3276,2407,2433,2424,42,2405,2406,2431,0,3253,3254,3287,2407,2408,2433,42,2406,2415,2431,0,3254,3267,3287,2408,2417,2433,42,2431,2415,2432,0,3287,3267,3288,2433,2417,2434,42,2432,2415,2416,0,3289,3268,3269,2434,2417,2418,42,2432,2416,2433,0,3289,3269,3290,2434,2418,2435,42,2420,2433,2416,0,3274,3290,3269,2422,2435,2418,42,2434,2433,2420,0,3291,3290,3274,2436,2435,2422,42,2432,2433,2434,0,3289,3290,3291,2434,2435,2436,42,2435,2432,2434,0,3292,3289,3291,2437,2434,2436,42,2430,2432,2435,0,3286,3288,3293,2432,2434,2437,42,2431,2432,2430,0,3287,3288,3286,2433,2434,2432,42,2429,2430,2435,0,3285,3286,3293,2431,2432,2437,42,2429,2435,2436,0,3285,3293,3294,2431,2437,2438,42,2436,2435,2434,0,3295,3292,3291,2438,2437,2436,42,2436,2434,2437,0,3295,3291,3296,2438,2436,2439,42,2437,2434,2438,0,3296,3291,3297,2439,2436,2440,42,2438,2434,2420,0,3297,3291,3274,2440,2436,2422,42,2438,2420,2423,0,3297,3274,3298,2440,2422,2425,42,2423,2420,2421,0,3298,3274,3275,2425,2422,2423,42,2439,2438,2423,0,3299,3297,3298,2441,2440,2425,42,2439,2437,2438,0,3299,3296,3297,2441,2439,2440,42,2440,2437,2439,0,3300,3296,3299,2442,2439,2441,42,2440,2441,2437,0,3300,3301,3296,2442,2443,2439,42,2442,2441,2440,0,3302,3301,3300,2444,2443,2442,42,2442,2443,2441,0,3302,3303,3301,2444,2445,2443,42,2448,2441,2447,0,3304,3301,3305,2446,2443,2447,42,2448,2437,2441,0,3304,3296,3301,2446,2439,2443,42,2449,2437,2448,0,3306,3296,3304,2448,2439,2446,42,2436,2437,2449,0,3295,3296,3306,2438,2439,2448,42,2428,2436,2449,0,3284,3294,3307,2430,2438,2448,42,2428,2429,2436,0,3284,3285,3294,2430,2431,2438,42,2450,2428,2449,0,3308,3284,3307,2449,2430,2448,42,2450,2427,2428,0,3308,3283,3284,2449,2429,2430,42,2450,2451,2427,0,3308,3309,3283,2449,2450,2429,42,2451,2450,2452,0,3309,3308,3310,2450,2449,2451,42,2452,2450,2453,0,3310,3308,3311,2451,2449,2452,42,2450,2454,2453,0,3308,3312,3311,2449,2453,2452,42,2450,2455,2454,0,3308,3313,3312,2449,2454,2453,42,2450,2449,2455,0,3308,3307,3313,2449,2448,2454,42,2449,2448,2455,0,3306,3304,3314,2448,2446,2454,42,2455,2448,2456,0,3314,3304,3315,2454,2446,2455,42,2456,2448,2447,0,3315,3304,3305,2455,2446,2447,42,2456,2447,2457,0,3315,3305,3316,2455,2447,2456,42,2456,2458,2454,0,3315,3317,3318,2455,2457,2453,42,2461,2445,2444,0,3319,3320,3321,2458,2459,2460,42,2462,2461,2444,0,3322,3319,3321,2461,2458,2460,42,2460,2461,2462,0,3323,3319,3322,2462,2458,2461,42,2463,2460,2462,0,3324,3323,3322,2463,2462,2461,42,2472,2463,2462,0,3325,3324,3322,2464,2463,2461,42,2472,2462,2473,0,3325,3322,3326,2464,2461,2465,42,2473,2462,2444,0,3326,3322,3321,2465,2461,2460,42,2473,2444,2474,0,3326,3321,3327,2465,2460,2466,42,2476,2475,2442,0,3328,3329,3302,2467,2468,2444,42,2477,2475,2476,0,3330,3329,3328,2469,2468,2467,42,2481,2452,2480,0,3331,3332,3333,2470,2451,2471,42,2451,2452,2481,0,3309,3310,3334,2450,2451,2470,42,2451,2481,2482,0,3309,3334,3335,2450,2470,2472,42,2481,2477,2482,0,3331,3330,3336,2470,2469,2472,42,2481,2479,2477,0,3331,3337,3330,2470,2473,2469,42,2477,2476,2482,0,3330,3328,3336,2469,2467,2472,42,2482,2476,2426,0,3336,3328,3338,2472,2467,2428,42,2476,2440,2426,0,3328,3300,3338,2467,2442,2428,42,2476,2442,2440,0,3328,3302,3300,2467,2444,2442,42,2426,2440,2439,0,3338,3300,3299,2428,2442,2441,42,2426,2439,2423,0,3338,3299,3298,2428,2441,2425,42,2427,2482,2426,0,3283,3335,3282,2429,2472,2428,42,2451,2482,2427,0,3309,3335,3283,2450,2472,2429,42,2420,2416,2419,0,3274,3269,3273,2422,2418,2421,42,2416,2417,2419,0,3269,3270,3273,2418,2419,2421,42,2405,2422,2418,0,3253,3276,3278,2407,2424,2420,42,2405,2418,2404,0,3253,3278,3252,2407,2420,2406,42,2404,2400,2401,0,3271,3247,3248,2406,2402,2403,42,2084,2402,2083,0,2868,3249,2869,2089,2404,2088,42,2377,2378,2385,0,3214,3215,3225,2379,2380,2387,42,2385,2378,2383,0,3225,3215,3223,2387,2380,2385,42,2378,2379,2383,0,3216,3217,3221,2380,2381,2385,42,2073,2074,2380,0,2856,2857,3218,2078,2079,2382,42,2073,2380,2072,0,2856,3218,2855,2078,2382,2077,42,2483,2395,2389,0,3339,3236,3237,2474,2397,2391,42,2483,2484,2395,0,3339,3340,3236,2474,2475,2397,42,2483,2485,2484,0,3339,3341,3340,2474,2476,2475,42,2390,2485,2483,0,3230,3342,3343,2392,2476,2474,42,2390,2486,2485,0,3230,3344,3342,2392,2477,2476,42,2390,2487,2486,0,3230,3345,3344,2392,2478,2477,42,2390,2391,2487,0,3230,3231,3345,2392,2393,2478,42,2487,2391,2392,0,3345,3231,3232,2478,2393,2394,42,2487,2392,2488,0,3345,3232,3346,2478,2394,2479,42,2392,2393,2488,0,3233,3234,3347,2394,2395,2479,42,2488,2393,2489,0,3347,3234,3348,2479,2395,2480,42,2484,2489,2393,0,3340,3348,3234,2475,2480,2395,42,2490,2489,2484,0,3349,3348,3340,2481,2480,2475,42,2491,2489,2490,0,3350,3348,3349,2482,2480,2481,42,2488,2489,2491,0,3347,3348,3350,2479,2480,2482,42,2492,2488,2491,0,3351,3346,3352,2483,2479,2482,42,2492,2487,2488,0,3351,3345,3346,2483,2478,2479,42,2486,2487,2492,0,3344,3345,3351,2477,2478,2483,42,2493,2486,2492,0,3353,3344,3351,2484,2477,2483,42,2493,2494,2486,0,3353,3354,3344,2484,2485,2477,42,2493,2495,2494,0,3353,3355,3354,2484,2486,2485,42,2495,2493,2496,0,3355,3353,3356,2486,2484,2487,42,2496,2493,2492,0,3356,3353,3351,2487,2484,2483,42,2496,2492,2491,0,3356,3351,3352,2487,2483,2482,42,2496,2491,2497,0,3356,3352,3357,2487,2482,2488,42,2497,2491,2490,0,3358,3350,3349,2488,2482,2481,42,2497,2490,2498,0,3358,3349,3359,2488,2481,2489,42,2498,2490,2499,0,3359,3349,3360,2489,2481,2490,42,2499,2490,2484,0,3360,3349,3340,2490,2481,2475,42,2494,2499,2484,0,3361,3360,3340,2485,2490,2475,42,2500,2499,2494,0,3362,3360,3361,2491,2490,2485,42,2500,2498,2499,0,3362,3359,3360,2491,2489,2490,42,2501,2498,2500,0,3363,3359,3362,2492,2489,2491,42,2501,2502,2498,0,3363,3364,3359,2492,2493,2489,42,2501,2503,2502,0,3363,3365,3364,2492,2494,2493,42,2504,2503,2501,0,3366,3365,3363,2495,2494,2492,42,2504,2505,2503,0,3366,3367,3365,2495,2496,2494,42,2506,2505,2504,0,3368,3367,3366,2497,2496,2495,42,2509,2510,2507,0,3369,3370,3371,2498,2499,2500,42,2509,2511,2510,0,3369,3372,3370,2498,2501,2499,42,2509,2512,2511,0,3369,3373,3372,2498,2502,2501,42,2513,2512,2509,0,3374,3373,3369,2503,2502,2498,42,2513,2516,2515,0,3375,3376,3377,2503,2504,2505,42,2517,2516,2513,0,3378,3376,3375,2506,2504,2503,42,2517,2518,2516,0,3378,3379,3376,2506,2507,2504,42,2518,2517,2519,0,3379,3378,3380,2507,2506,2508,42,2517,2520,2519,0,3378,3381,3380,2506,2509,2508,42,2517,2513,2520,0,3378,3375,3381,2506,2503,2509,42,2520,2513,2509,0,3382,3374,3369,2509,2503,2498,42,2520,2508,2506,0,3382,3383,3368,2509,2510,2497,42,2519,2520,2506,0,3384,3382,3368,2508,2509,2497,42,2519,2506,2504,0,3384,3368,3366,2508,2497,2495,42,2519,2504,2521,0,3384,3366,3385,2508,2495,2511,42,2504,2501,2521,0,3366,3363,3385,2495,2492,2511,42,2521,2501,2500,0,3385,3363,3362,2511,2492,2491,42,2521,2500,2494,0,3385,3362,3361,2511,2491,2485,42,2495,2521,2494,0,3355,3386,3354,2486,2511,2485,42,2518,2521,2495,0,3379,3386,3355,2507,2511,2486,42,2518,2519,2521,0,3379,3380,3386,2507,2508,2511,42,2518,2495,2522,0,3379,3355,3387,2507,2486,2512,42,2522,2495,2496,0,3387,3355,3356,2512,2486,2487,42,2522,2496,2497,0,3387,3356,3357,2512,2487,2488,42,2522,2497,2523,0,3387,3357,3388,2512,2488,2513,42,2523,2497,2498,0,3389,3358,3359,2513,2488,2489,42,2523,2498,2524,0,3389,3359,3390,2513,2489,2514,42,2524,2498,2502,0,3390,3359,3364,2514,2489,2493,42,2524,2502,2525,0,3390,3364,3391,2514,2493,2515,42,2503,2526,2502,0,3365,3392,3364,2494,2516,2493,42,2529,2528,2527,0,3393,3394,3395,2517,2518,2519,42,2532,2525,2531,0,3396,3391,3397,2520,2515,2521,42,2532,2524,2525,0,3396,3390,3391,2520,2514,2515,42,2533,2524,2532,0,3398,3390,3396,2522,2514,2520,42,2523,2524,2533,0,3389,3390,3398,2513,2514,2522,42,2516,2523,2533,0,3376,3388,3399,2504,2513,2522,42,2516,2522,2523,0,3376,3387,3388,2504,2512,2513,42,2516,2518,2522,0,3376,3379,3387,2504,2507,2512,42,2516,2533,2534,0,3376,3399,3400,2504,2522,2523,42,2532,2535,2534,0,3396,3401,3402,2520,2524,2523,42,2536,2529,2537,0,3403,3393,3404,2525,2517,2526,42,2537,2529,2527,0,3404,3393,3395,2526,2517,2519,42,2510,2537,2527,0,3370,3404,3395,2499,2526,2519,42,2511,2537,2510,0,3372,3404,3370,2501,2526,2499,42,2511,2538,2537,0,3372,3405,3404,2501,2527,2526,42,2512,2541,2540,0,3373,3406,3407,2502,2528,2529,42,2516,2534,2515,0,3376,3400,3377,2504,2523,2505,42,2534,2535,2544,0,3402,3401,3408,2523,2524,2530,42,2544,2535,2536,0,3408,3401,3403,2530,2524,2525,42,2538,2536,2537,0,3405,3403,3404,2527,2525,2526,42,2510,2527,2546,0,3370,3395,3409,2499,2519,2531,42,2507,2510,2546,0,3371,3370,3409,2500,2499,2531,42,2494,2484,2485,0,3361,3340,3341,2485,2475,2476,42,2486,2494,2485,0,3344,3354,3342,2477,2485,2476,42,2395,2484,2393,0,3236,3340,3234,2397,2475,2395,42,2390,2483,2389,0,3230,3343,3229,2392,2474,2391,42,2374,2091,2092,0,3211,2876,2877,2376,2096,2097,42,2243,2374,2092,0,3055,3211,2877,2248,2376,2097,42,2374,2243,2547,0,3211,3055,3410,2376,2248,2532,42,2243,2244,2547,0,3055,3056,3410,2248,2249,2532,42,2547,2244,2245,0,3410,3056,3057,2532,2249,2250,42,2547,2245,2246,0,3410,3057,3058,2532,2250,2251,42,2547,2246,2286,0,3410,3058,3105,2532,2251,2292,42,2374,2547,2286,0,3211,3410,3105,2376,2532,2292,42,2243,2092,2242,0,3055,2877,3054,2248,2097,2247,42,2096,2242,2092,0,2881,3054,2877,2101,2247,2097,42,2098,2242,2096,0,2883,3054,2881,2103,2247,2101,42,2098,2241,2242,0,2883,3053,3054,2103,2246,2247,42,2098,2240,2241,0,2883,3052,3053,2103,2245,2246,42,2100,2240,2098,0,2885,3052,2883,2105,2245,2103,42,2100,2102,2240,0,2887,2889,3411,2105,2107,2245,42,2093,2096,2092,0,2878,2881,2877,2098,2101,2097,42,2247,2248,2285,0,3059,3060,3104,2252,2253,2291,42,2285,2248,2283,0,3104,3060,3102,2291,2253,2289,42,2248,2548,2283,0,3060,3412,3102,2253,2533,2289,42,2248,2549,2548,0,3060,3413,3412,2253,2534,2533,42,2549,2248,2249,0,3413,3060,3061,2534,2253,2254,42,2549,2249,2550,0,3414,3062,3415,2534,2254,2535,42,2249,2551,2550,0,3062,3416,3415,2254,2536,2535,42,2249,2250,2551,0,3062,3064,3416,2254,2255,2536,42,2551,2250,2552,0,3416,3064,3417,2536,2255,2537,42,2552,2250,2553,0,3417,3064,3418,2537,2255,2538,42,2250,2251,2553,0,3064,3065,3418,2255,2256,2538,42,2251,2252,2553,0,3065,3068,3418,2256,2257,2538,42,2252,2254,2553,0,3068,3070,3418,2257,2259,2538,42,2553,2254,2255,0,3418,3070,3071,2538,2259,2260,42,2554,2553,2255,0,3419,3418,3071,2539,2538,2260,42,2555,2553,2554,0,3420,3418,3419,2540,2538,2539,42,2552,2553,2555,0,3417,3418,3420,2537,2538,2540,42,2556,2552,2555,0,3421,3417,3420,2541,2537,2540,42,2557,2552,2556,0,3422,3417,3421,2542,2537,2541,42,2557,2551,2552,0,3422,3416,3417,2542,2536,2537,42,2550,2551,2557,0,3415,3416,3422,2535,2536,2542,42,2550,2557,2558,0,3415,3422,3423,2535,2542,2543,42,2558,2557,2266,0,3423,3422,3083,2543,2542,2272,42,2266,2557,2556,0,3083,3422,3421,2272,2542,2541,42,2266,2556,2264,0,3083,3421,3081,2272,2541,2270,42,2556,2555,2264,0,3421,3420,3081,2541,2540,2270,42,2264,2555,2263,0,3081,3420,3080,2270,2540,2269,42,2555,2554,2263,0,3420,3419,3080,2540,2539,2269,42,2263,2554,2261,0,3080,3419,3078,2269,2539,2267,42,2554,2259,2261,0,3419,3076,3078,2539,2265,2267,42,2554,2255,2259,0,3419,3071,3076,2539,2260,2265,42,2262,2263,2261,0,3079,3080,3078,2268,2269,2267,42,2266,2264,2265,0,3083,3081,3082,2272,2270,2271,42,2267,2558,2266,0,3084,3423,3083,2273,2543,2272,42,2268,2558,2267,0,3085,3423,3084,2274,2543,2273,42,2268,2550,2558,0,3085,3415,3423,2274,2535,2543,42,2269,2550,2268,0,3086,3415,3085,2275,2535,2274,42,2269,2549,2550,0,3086,3414,3415,2275,2534,2535,42,2548,2549,2269,0,3412,3413,3424,2533,2534,2275,42,2269,2270,2548,0,3086,3087,3425,2275,2276,2533,42,2548,2270,2283,0,3412,3426,3102,2533,2276,2289,42,2283,2270,2281,0,3102,3426,3100,2289,2276,2287,42,2270,2559,2281,0,3426,3427,3100,2276,2544,2287,42,2270,2560,2559,0,3087,3428,3429,2276,2545,2544,42,2271,2560,2270,0,3088,3428,3087,2277,2545,2276,42,2273,2560,2271,0,3090,3428,3088,2279,2545,2277,42,2273,2561,2560,0,3090,3430,3428,2279,2546,2545,42,2273,2562,2561,0,3090,3431,3430,2279,2547,2546,42,2275,2562,2273,0,3092,3431,3090,2281,2547,2279,42,2275,2563,2562,0,3092,3432,3431,2281,2548,2547,42,2275,2564,2563,0,3092,3433,3432,2281,2549,2548,42,2276,2564,2275,0,3094,3434,3095,2282,2549,2281,42,2276,2565,2564,0,3094,3435,3434,2282,2550,2549,42,2276,2566,2565,0,3094,3436,3435,2282,2551,2550,42,2276,2278,2566,0,3094,3097,3436,2282,2284,2551,42,2278,2567,2566,0,3097,3437,3436,2284,2552,2551,42,2278,2559,2567,0,3097,3427,3437,2284,2544,2552,42,2279,2559,2278,0,3098,3427,3097,2285,2544,2284,42,2281,2559,2279,0,3100,3427,3098,2287,2544,2285,42,2559,2560,2567,0,3429,3428,3438,2544,2545,2552,42,2560,2561,2567,0,3428,3430,3438,2545,2546,2552,42,2567,2561,2568,0,3438,3430,3439,2552,2546,2553,42,2563,2568,2561,0,3432,3439,3430,2548,2553,2546,42,2563,2569,2568,0,3432,3440,3439,2548,2554,2553,42,2563,2570,2569,0,3432,3441,3440,2548,2555,2554,42,2571,2570,2563,0,3442,3441,3432,2556,2555,2548,42,2571,2572,2570,0,3442,3443,3441,2556,2557,2555,42,2571,2573,2572,0,3442,3444,3443,2556,2558,2557,42,2571,2574,2573,0,3445,3446,3447,2556,2559,2558,42,2575,2574,2571,0,3448,3446,3445,2560,2559,2556,42,2575,2576,2574,0,3448,3449,3446,2560,2561,2559,42,2575,2577,2576,0,3448,3450,3449,2560,2562,2561,42,2565,2577,2575,0,3435,3450,3448,2550,2562,2560,42,2565,2566,2577,0,3435,3436,3450,2550,2551,2562,42,2577,2566,2578,0,3450,3436,3451,2562,2551,2563,42,2567,2578,2566,0,3437,3451,3436,2552,2563,2551,42,2567,2568,2578,0,3438,3439,3452,2552,2553,2563,42,2578,2568,2579,0,3452,3439,3453,2563,2553,2564,42,2568,2569,2579,0,3439,3440,3453,2553,2554,2564,42,2579,2569,2580,0,3453,3440,3454,2564,2554,2565,42,2569,2581,2580,0,3440,3455,3454,2554,2566,2565,42,2570,2581,2569,0,3441,3455,3440,2555,2566,2554,42,2570,2572,2581,0,3441,3443,3455,2555,2557,2566,42,2572,2582,2581,0,3443,3456,3455,2557,2567,2566,42,2573,2582,2572,0,3444,3456,3443,2558,2567,2557,42,2573,2583,2582,0,3444,3457,3456,2558,2568,2567,42,2574,2583,2573,0,3446,3458,3447,2559,2568,2558,42,2574,2584,2583,0,3446,3459,3458,2559,2569,2568,42,2574,2585,2584,0,3446,3460,3459,2559,2570,2569,42,2574,2576,2585,0,3446,3449,3460,2559,2561,2570,42,2576,2580,2585,0,3449,3461,3460,2561,2565,2570,42,2576,2579,2580,0,3449,3462,3461,2561,2564,2565,42,2577,2579,2576,0,3450,3462,3449,2562,2564,2561,42,2577,2578,2579,0,3450,3451,3462,2562,2563,2564,42,2585,2580,2586,0,3460,3461,3463,2570,2565,2571,42,2580,2587,2586,0,3454,3464,3465,2565,2572,2571,42,2580,2581,2587,0,3454,3455,3464,2565,2566,2572,42,2582,2587,2581,0,3456,3464,3455,2567,2572,2566,42,2588,2587,2582,0,3466,3464,3456,2573,2572,2567,42,2589,2587,2588,0,3467,3464,3466,2574,2572,2573,42,2586,2587,2589,0,3465,3464,3467,2571,2572,2574,42,2590,2586,2589,0,3468,3463,3469,2575,2571,2574,42,2590,2585,2586,0,3468,3460,3463,2575,2570,2571,42,2590,2584,2585,0,3468,3459,3460,2575,2569,2570,42,2591,2584,2590,0,3470,3459,3468,2576,2569,2575,42,2584,2591,2583,0,3459,3470,3458,2569,2576,2568,42,2591,2592,2583,0,3470,3471,3458,2576,2577,2568,42,2591,2593,2592,0,3470,3472,3471,2576,2578,2577,42,2591,2594,2593,0,3470,3473,3472,2576,2579,2578,42,2591,2590,2594,0,3470,3468,3473,2576,2575,2579,42,2590,2589,2594,0,3468,3469,3473,2575,2574,2579,42,2594,2589,2595,0,3473,3469,3474,2579,2574,2580,42,2589,2588,2595,0,3467,3466,3475,2574,2573,2580,42,2588,2596,2595,0,3466,3476,3475,2573,2581,2580,42,2597,2596,2588,0,3477,3476,3466,2582,2581,2573,42,2597,2598,2596,0,3477,3478,3476,2582,2583,2581,42,2592,2598,2597,0,3479,3478,3477,2577,2583,2582,42,2599,2598,2592,0,3480,3478,3479,2584,2583,2577,42,2598,2599,2600,0,3478,3480,3481,2583,2584,2585,42,2599,2601,2600,0,3480,3482,3481,2584,2586,2585,42,2599,2602,2601,0,3480,3483,3482,2584,2587,2586,42,2599,2603,2602,0,3484,3485,3486,2584,2588,2587,42,2593,2603,2599,0,3472,3485,3484,2578,2588,2584,42,2593,2604,2603,0,3472,3487,3485,2578,2589,2588,42,2593,2594,2604,0,3472,3473,3487,2578,2579,2589,42,2594,2595,2604,0,3473,3474,3487,2579,2580,2589,42,2595,2605,2604,0,3474,3488,3487,2580,2590,2589,42,2595,2596,2605,0,3475,3476,3489,2580,2581,2590,42,2596,2606,2605,0,3476,3490,3489,2581,2591,2590,42,2596,2607,2606,0,3476,3491,3490,2581,2592,2591,42,2600,2607,2596,0,3481,3491,3476,2585,2592,2581,42,2608,2607,2600,0,3492,3491,3481,2593,2592,2585,42,2609,2607,2608,0,3493,3491,3492,2594,2592,2593,42,2607,2610,2606,0,3491,3494,3490,2592,2595,2591,42,2606,2610,2611,0,3490,3494,3495,2591,2595,2596,42,2610,2612,2611,0,3494,3496,3495,2595,2597,2596,42,2617,2615,2616,0,3497,3498,3499,2598,2599,2600,42,2617,2618,2615,0,3497,3500,3498,2598,2601,2599,42,2619,2618,2617,0,3501,3500,3497,2602,2601,2598,42,2620,2618,2619,0,3502,3500,3501,2603,2601,2602,42,2620,2621,2618,0,3502,3503,3500,2603,2604,2601,42,2630,2628,2629,0,3504,3505,3506,2605,2606,2607,42,2630,2631,2628,0,3504,3507,3505,2605,2608,2606,42,2632,2631,2630,0,3508,3507,3504,2609,2608,2605,42,2606,2611,2632,0,3490,3495,3509,2591,2596,2609,42,2605,2606,2632,0,3489,3490,3509,2590,2591,2609,42,2605,2632,2630,0,3488,3508,3504,2590,2609,2605,42,2605,2630,2604,0,3488,3504,3487,2590,2605,2589,42,2603,2604,2630,0,3485,3487,3504,2588,2589,2605,42,2603,2630,2633,0,3485,3504,3510,2588,2605,2610,42,2633,2630,2629,0,3510,3504,3506,2610,2605,2607,42,2634,2633,2629,0,3511,3510,3506,2611,2610,2607,42,2602,2633,2634,0,3486,3510,3511,2587,2610,2611,42,2603,2633,2602,0,3485,3510,3486,2588,2610,2587,42,2602,2634,2635,0,3483,3512,3513,2587,2611,2612,42,2635,2634,2636,0,3513,3512,3514,2612,2611,2613,42,2634,2629,2637,0,3512,3515,3516,2611,2607,2614,42,2629,2625,2637,0,3515,3517,3516,2607,2615,2614,42,2625,2620,2637,0,3517,3502,3516,2615,2603,2614,42,2619,2637,2620,0,3501,3516,3502,2602,2614,2603,42,2601,2635,2639,0,3482,3513,3518,2586,2612,2616,42,2601,2602,2635,0,3482,3483,3513,2586,2587,2612,42,2639,2608,2601,0,3518,3492,3482,2616,2593,2586,42,2640,2619,2617,0,3519,3501,3497,2617,2602,2598,42,2601,2608,2600,0,3482,3492,3481,2586,2593,2585,42,2611,2614,2631,0,3495,3520,3521,2596,2618,2608,42,2631,2614,2641,0,3521,3520,3522,2608,2618,2619,42,2641,2614,2642,0,3522,3520,3523,2619,2618,2620,42,2618,2642,2615,0,3500,3523,3498,2601,2620,2599,42,2618,2621,2642,0,3500,3503,3523,2601,2604,2620,42,2598,2600,2596,0,3478,3481,3476,2583,2585,2581,42,2592,2593,2599,0,3471,3472,3484,2577,2578,2584,42,2592,2597,2582,0,3479,3477,3456,2577,2582,2567,42,2582,2597,2588,0,3456,3477,3466,2567,2582,2573,42,2592,2582,2583,0,3479,3456,3457,2577,2567,2568,42,2565,2575,2564,0,3435,3448,3434,2550,2560,2549,42,2564,2575,2571,0,3434,3448,3445,2549,2560,2556,42,2571,2563,2564,0,3442,3432,3433,2556,2548,2549,42,2562,2563,2561,0,3431,3432,3430,2547,2548,2546,42,2034,2030,2031,0,2813,2809,2810,2039,2035,2036,42,2028,2260,2645,0,2807,3077,3524,2033,2266,2621,42,2260,2009,2645,0,3077,3525,3524,2266,2018,2621,42,2260,2258,2009,0,3077,3075,2790,2266,2264,2018,42,2009,1999,2645,0,3525,3526,3524,2018,2622,2621,42,2009,1997,1999,0,3525,3527,3526,2018,2008,2622,42,2009,1996,1997,0,2790,2779,2780,2018,2007,2008,42,2645,1999,2002,0,3524,3526,3528,2621,2622,2011,42,2645,2002,2021,0,3524,3528,2800,2621,2011,2026,42,2023,2645,2021,0,2802,3524,2800,2028,2621,2026,42,2027,2645,2023,0,2806,3524,2802,2032,2621,2028,42,2028,2645,2027,0,2807,3524,2806,2033,2621,2032,42,2139,2164,2138,0,2929,3529,2926,2144,2169,2143,42,2139,2646,2164,0,2929,3530,3529,2144,2623,2169,42,2139,2647,2646,0,2929,3531,3530,2144,2624,2623,42,2140,2647,2139,0,2931,3531,2929,2145,2624,2144,42,2141,2647,2140,0,2933,3531,2931,2146,2624,2145,42,2141,2146,2647,0,2933,2940,3531,2146,2151,2624,42,2146,2153,2647,0,2940,2948,3531,2151,2158,2624,42,2647,2153,2646,0,3531,2948,3530,2624,2158,2623,42,2646,2153,2648,0,3530,2948,3532,2623,2158,2625,42,2153,2154,2648,0,2948,2949,3532,2158,2159,2625,42,2648,2154,2649,0,3532,2949,3533,2625,2159,2626,42,2649,2154,2156,0,3533,2949,2951,2626,2159,2161,42,2649,2156,2157,0,3533,2951,2952,2626,2161,2162,42,2649,2157,2161,0,3533,2952,2956,2626,2162,2166,42,2161,2648,2649,0,2956,3532,3533,2166,2625,2626,42,2164,2648,2161,0,3529,3532,2956,2169,2625,2166,42,2646,2648,2164,0,3530,3532,3529,2623,2625,2169,42,2002,2016,2017,0,2783,3534,2794,2011,2627,2022,42,2005,2014,2004,0,2785,2792,2784,2013,2020,2012,42,1988,1989,1987,3,3535,3536,3537,2000,2002,1999,42,1991,1990,1988,3,3538,3539,3540,2003,2001,2000,42,1993,1992,1991,3,3541,3542,3543,2628,2004,2003,42,1994,1992,1993,3,3544,3545,3546,2006,2004,2628,42,1995,1989,1992,3,3547,3548,3549,2005,2002,2004,42,1985,1989,1995,3,3550,3551,3552,1997,2002,2005,42,1985,1987,1989,3,3553,3554,3555,1997,1999,2002,42,1985,1995,1994,3,3556,3557,3558,1997,2005,2006,42,1997,1994,1998,3,3559,3560,3561,2008,2006,2629,42,1998,1994,1993,3,3562,3563,3564,2629,2006,2628,42,1998,1993,1999,3,3565,3566,3567,2629,2628,2622,42,2000,1999,1993,3,3568,3569,3570,2630,2622,2628,42,2001,1999,2000,3,3571,3572,3573,2009,2622,2630,42,1999,2001,2002,3,3574,3575,3576,2622,2009,2011,42,2001,2000,1991,3,3577,3578,3579,2009,2630,2003,42,1993,1991,2000,3,3580,3581,3582,2628,2003,2630,42,2006,1986,2007,3,3583,3584,3585,2014,1998,2015,42,1986,1985,1996,3,3586,3587,3588,1998,1997,2007,42,2007,1996,2008,3,3589,3590,3591,2015,2007,2017,42,2009,2008,1996,3,3592,3593,3594,2018,2017,2007,42,2008,2010,2007,3,3595,3596,3597,2017,2016,2015,42,2011,2007,2010,3,3598,3599,3600,2631,2015,2016,42,2011,2006,2007,3,3601,3602,3603,2631,2014,2015,42,2005,2006,2011,3,3604,3605,3606,2013,2014,2631,42,2012,2005,2011,3,3607,3608,3609,2262,2013,2631,42,2013,2005,2012,3,3610,3611,3612,2023,2013,2262,42,2013,2014,2005,3,3613,3614,3615,2023,2020,2013,42,2015,2014,2013,3,3616,3617,3618,2019,2020,2023,42,2015,2016,2003,3,3619,3620,3621,2019,2627,2010,42,2015,2017,2016,3,3622,3623,3624,2019,2022,2627,42,2013,2017,2015,3,3625,3626,3627,2023,2022,2019,42,2256,2012,2011,3,3628,3629,3630,2261,2262,2631,42,2011,2010,2256,3,3631,3632,3633,2631,2016,2261,42,2337,2333,2336,3,3634,3635,3636,2343,2339,2342,42,2339,2337,2340,3,3637,3638,3639,2345,2343,2632,42,2340,2337,2336,3,3640,3641,3642,2632,2343,2342,42,2336,2341,2340,3,3643,3644,3645,2342,2347,2632,42,2342,2341,2336,3,3646,3647,3648,2348,2347,2342,42,2341,2343,2340,3,3649,3650,3651,2347,2346,2632,42,2340,2343,2344,3,3652,3653,3654,2632,2346,2360,42,2343,2345,2344,3,3655,3656,3657,2346,2349,2360,42,2348,2350,2349,3,3658,3659,3660,2352,2355,2353,42,2352,2350,2351,3,3661,3662,3663,2356,2355,2354,42,2352,2353,2350,3,3664,3665,3666,2356,2358,2355,42,2355,2354,2352,3,3667,3668,3669,2633,2357,2356,42,2356,2354,2355,3,3670,3671,3672,2634,2357,2633,42,2357,2354,2356,3,3673,3674,3675,2359,2357,2634,42,2338,2339,2344,3,3676,3677,3678,2344,2345,2360,42,2344,2339,2340,3,3679,3680,3681,2360,2345,2632,42,2358,2338,2357,3,3682,3683,3684,2361,2344,2359,42,2359,2357,2356,3,3685,3686,3687,2362,2359,2634,42,2355,2359,2356,3,3688,3689,3690,2633,2362,2634,42,2360,2359,2355,3,3691,3692,3693,2635,2362,2633,42,2360,2361,2359,3,3694,3695,3696,2635,2368,2362,42,2360,2362,2361,3,3697,3698,3699,2635,2363,2368,42,2360,2355,2362,3,3700,3701,3702,2635,2633,2363,42,2362,2355,2352,3,3703,3704,3705,2363,2633,2356,42,2362,2351,2348,3,3706,3707,3708,2363,2354,2352,42,2366,2364,2365,3,3709,3710,3711,2375,2365,2366,42,2367,2364,2366,3,3712,3713,3714,2371,2365,2375,42,2368,2364,2367,3,3715,3716,3717,2372,2365,2371,42,2363,2364,2368,3,3718,3719,3720,2364,2365,2372,42,2369,2363,2368,3,3721,3722,3723,2367,2364,2372,42,2366,2342,2335,3,3724,3725,3726,2375,2348,2341,42,2366,2365,2342,3,3727,3728,3729,2375,2366,2348,42,2342,2336,2335,3,3730,3731,3732,2348,2342,2341,42,2345,2353,2354,3,3733,3734,3735,2349,2358,2357,42,2350,2353,2345,3,3736,3737,3738,2355,2358,2349,42,2350,2345,2349,3,3739,3740,3741,2355,2349,2353,42,2444,2443,2442,3,3742,3743,3744,2460,2445,2444,42,2445,2443,2444,3,3745,3746,3747,2459,2445,2460,42,2446,2443,2445,3,3748,3749,3750,2636,2445,2459,42,2447,2443,2446,3,3751,3752,3753,2447,2445,2636,42,2447,2441,2443,3,3754,3755,3756,2447,2443,2445,42,2457,2447,2446,3,3757,3758,3759,2456,2447,2636,42,2458,2457,2446,3,3760,3761,3762,2457,2456,2636,42,2458,2456,2457,3,3763,3764,3765,2457,2455,2456,42,2454,2458,2459,3,3766,3767,3768,2453,2457,2637,42,2459,2458,2460,3,3769,3770,3771,2637,2457,2462,42,2458,2461,2460,3,3772,3773,3774,2457,2458,2462,42,2458,2446,2461,3,3775,3776,3777,2457,2636,2458,42,2446,2445,2461,3,3778,3779,3780,2636,2459,2458,42,2464,2460,2463,3,3781,3782,3783,2638,2462,2463,42,2464,2465,2460,3,3784,3785,3786,2638,2639,2462,42,2466,2465,2464,3,3787,3788,3789,2640,2639,2638,42,2466,2459,2465,3,3790,3791,3792,2640,2637,2639,42,2467,2459,2466,3,3793,3794,3795,2641,2637,2640,42,2467,2468,2459,3,3796,3797,3798,2641,2642,2637,42,2453,2468,2467,3,3799,3800,3801,2452,2642,2641,42,2468,2453,2454,3,3800,3799,3802,2642,2452,2453,42,2454,2459,2468,3,3803,3804,3805,2453,2637,2642,42,2467,2452,2453,3,3806,3807,3808,2641,2451,2452,42,2452,2467,2469,3,3807,3806,3809,2451,2641,2643,42,2469,2467,2470,3,3810,3811,3812,2643,2641,2644,42,2470,2467,2466,3,3813,3814,3815,2644,2641,2640,42,2470,2466,2471,3,3816,3817,3818,2644,2640,2645,42,2471,2466,2464,3,3819,3820,3821,2645,2640,2638,42,2471,2464,2472,3,3822,3823,3824,2645,2638,2464,42,2464,2463,2472,3,3825,3826,3827,2638,2463,2464,42,2474,2444,2475,3,3828,3829,3830,2466,2460,2468,42,2475,2444,2442,3,3831,3832,3833,2468,2460,2444,42,2477,2478,2475,3,3834,3835,3836,2469,2646,2468,42,2479,2478,2477,3,3837,3838,3839,2473,2646,2469,42,2480,2478,2479,3,3840,3841,3842,2471,2646,2473,42,2480,2473,2478,3,3843,3844,3845,2471,2465,2646,42,2480,2472,2473,3,3846,3847,3848,2471,2464,2465,42,2480,2470,2472,3,3849,3850,3851,2471,2644,2464,42,2452,2470,2480,3,3852,3853,3854,2451,2644,2471,42,2452,2469,2470,3,3855,3856,3857,2451,2643,2644,42,2481,2480,2479,3,3858,3859,3860,2470,2471,2473,42,2472,2470,2471,3,3861,3862,3863,2464,2644,2645,42,2478,2473,2474,3,3864,3865,3866,2646,2465,2466,42,2478,2474,2475,3,3867,3868,3869,2646,2466,2468,42,2459,2460,2465,3,3870,3871,3872,2637,2462,2639,42,2455,2456,2454,3,3873,3874,3875,2454,2455,2453,42,2506,2507,2505,3,3876,3877,3878,2497,2500,2496,42,2508,2507,2506,3,3879,3880,3881,2510,2500,2497,42,2509,2507,2508,3,3882,3883,3884,2498,2500,2510,42,2513,2514,2512,3,3885,3886,3887,2503,2647,2502,42,2514,2513,2515,3,3888,3889,3890,2647,2503,2505,42,2520,2509,2508,3,3891,3892,3893,2509,2498,2510,42,2525,2502,2526,3,3894,3895,3896,2515,2493,2516,42,2527,2526,2503,3,3897,3898,3899,2519,2516,2494,42,2527,2528,2526,3,3900,3901,3902,2519,2518,2516,42,2530,2528,2529,3,3903,3904,3905,2648,2518,2517,42,2530,2526,2528,3,3906,3907,3908,2648,2516,2518,42,2530,2525,2526,3,3909,3910,3911,2648,2515,2516,42,2531,2525,2530,3,3912,3913,3914,2521,2515,2648,42,2533,2532,2534,3,3915,3916,3917,2522,2520,2523,42,2532,2531,2535,3,3918,3919,3920,2520,2521,2524,42,2535,2531,2530,3,3921,3922,3923,2524,2521,2648,42,2535,2530,2529,3,3924,3925,3926,2524,2648,2517,42,2535,2529,2536,3,3927,3928,3929,2524,2517,2525,42,2511,2539,2538,3,3930,3931,3932,2501,2649,2527,42,2540,2539,2511,3,3933,3934,3935,2529,2649,2501,42,2540,2541,2539,3,3936,3937,3938,2529,2528,2649,42,2512,2542,2541,3,3939,3940,3941,2502,2650,2528,42,2514,2542,2512,3,3942,3943,3944,2647,2650,2502,42,2514,2515,2542,3,3945,3946,3947,2647,2505,2650,42,2542,2515,2543,3,3948,3949,3950,2650,2505,2651,42,2515,2534,2543,3,3951,3952,3953,2505,2523,2651,42,2534,2544,2543,3,3954,3955,3956,2523,2530,2651,42,2544,2536,2545,3,3957,3958,3959,2530,2525,2652,42,2539,2545,2536,3,3960,3961,3962,2649,2652,2525,42,2545,2539,2541,3,3963,3964,3965,2652,2649,2528,42,2544,2545,2541,3,3966,3967,3968,2530,2652,2528,42,2541,2542,2544,3,3969,3970,3971,2528,2650,2530,42,2542,2543,2544,3,3972,3973,3974,2650,2651,2530,42,2539,2536,2538,3,3975,3976,3977,2649,2525,2527,42,2511,2512,2540,3,3978,3979,3980,2501,2502,2529,42,2546,2527,2505,3,3981,3982,3983,2531,2519,2496,42,2505,2527,2503,3,3984,3985,3986,2496,2519,2494,42,2507,2546,2505,3,3987,3988,3989,2500,2531,2496,42,2610,2607,2609,3,3990,3991,3992,2595,2592,2594,42,2613,2612,2610,3,3993,3994,3995,2653,2597,2595,42,2613,2614,2612,3,3996,3997,3998,2653,2618,2597,42,2613,2615,2614,3,3999,4000,4001,2653,2599,2618,42,2616,2615,2613,3,4002,4003,4004,2600,2599,2653,42,2620,2622,2621,3,4005,4006,4007,2603,2654,2604,42,2623,2622,2620,3,4008,4009,4010,2655,2654,2603,42,2623,2624,2622,3,4011,4012,4013,2655,2656,2654,42,2625,2624,2623,3,4014,4015,4016,2615,2656,2655,42,2625,2626,2624,3,4017,4018,4019,2615,2657,2656,42,2627,2626,2625,3,4020,4021,4022,2658,2657,2615,42,2627,2628,2626,3,4023,4024,4025,2658,2606,2657,42,2629,2628,2627,3,4026,4027,4028,2607,2606,2658,42,2632,2611,2631,3,4029,4030,4031,2609,2596,2608,42,2634,2637,2636,3,4032,4033,4034,2611,2614,2613,42,2629,2627,2625,3,4035,4036,4037,2607,2658,2615,42,2625,2623,2620,3,4038,4039,4040,2615,2655,2603,42,2638,2637,2619,3,4041,4042,4043,2659,2614,2602,42,2638,2636,2637,3,4044,4045,4046,2659,2613,2614,42,2635,2636,2638,3,4047,4048,4049,2612,2613,2659,42,2639,2635,2638,3,4050,4051,4052,2616,2612,2659,42,2639,2617,2608,3,4053,4054,4055,2616,2598,2593,42,2639,2640,2617,3,4056,4057,4058,2616,2617,2598,42,2639,2638,2640,3,4059,4060,4061,2616,2659,2617,42,2640,2638,2619,3,4062,4063,4064,2617,2659,2602,42,2608,2617,2609,3,4065,4066,4067,2593,2598,2594,42,2617,2616,2609,3,4068,4069,4070,2598,2600,2594,42,2616,2613,2609,3,4071,4072,4073,2600,2653,2594,42,2609,2613,2610,3,4074,4075,4076,2594,2653,2595,42,2611,2612,2614,3,4077,4078,4079,2596,2597,2618,42,2615,2642,2614,3,4080,4081,4082,2599,2620,2618,42,2621,2622,2642,3,4083,4084,4085,2604,2654,2620,42,2622,2643,2642,3,4086,4087,4088,2654,2660,2620,42,2624,2643,2622,3,4089,4090,4091,2656,2660,2654,42,2624,2641,2643,3,4092,4093,4094,2656,2619,2660,42,2626,2641,2624,3,4095,4096,4097,2657,2619,2656,42,2626,2644,2641,3,4098,4099,4100,2657,2661,2619,42,2628,2644,2626,3,4101,4102,4103,2606,2661,2657,42,2628,2631,2644,3,4104,4105,4106,2606,2608,2661,42,2631,2641,2644,3,4107,4108,4109,2608,2619,2661,42,2641,2642,2643,3,4110,4111,4112,2619,2620,2660,42,1997,1998,1999,3,4113,4114,4115,2008,2629,2622,42,2003,2016,2002,3,4116,4117,4118,2010,2627,2011,42,1990,1992,1989,3,4119,4120,4121,2001,2004,2002,42,2650,2651,2652,0,4122,4123,4124,2662,2663,2664,42,2651,2650,2653,0,4123,4122,4125,2663,2662,2665,42,2653,2654,2651,0,4125,4126,4123,2665,2666,2663,42,2655,2654,2653,0,4127,4126,4125,2667,2666,2665,42,2655,2656,2654,0,4127,4128,4126,2667,2668,2666,42,2655,2657,2656,0,4127,4129,4128,2667,2669,2668,42,2657,2655,2658,0,4129,4127,4130,2669,2667,2670,42,2655,2659,2658,0,4127,4131,4130,2667,2671,2670,42,2659,2655,2653,0,4131,4127,4125,2671,2667,2665,42,2659,2653,2660,0,4131,4125,4132,2671,2665,2672,42,2660,2653,2661,0,4132,4125,4133,2672,2665,2673,42,2653,2650,2661,0,4125,4122,4133,2665,2662,2673,42,2650,2652,2661,0,4122,4124,4133,2662,2664,2673,42,2652,2662,2661,0,4124,4134,4133,2664,2674,2673,42,2663,2662,2652,0,4135,4134,4124,2675,2674,2664,42,2663,2664,2662,0,4135,4136,4134,2675,2676,2674,42,2665,2664,2663,0,4137,4136,4135,2677,2676,2675,42,2666,2664,2665,0,4138,4136,4137,2678,2676,2677,42,2667,2664,2666,0,4139,4136,4138,2679,2676,2678,42,2664,2667,2668,0,4136,4139,4140,2676,2679,2680,42,2667,2669,2668,0,4139,4141,4140,2679,2681,2680,42,2670,2669,2667,0,4142,4141,4139,2682,2681,2679,42,2671,2669,2670,0,4143,4141,4142,2683,2681,2682,42,2671,2672,2669,0,4143,4144,4141,2683,2684,2681,42,2671,2673,2672,0,4143,4145,4144,2683,2685,2684,42,2671,2674,2673,0,4146,4147,4148,2683,2686,2685,42,2675,2674,2671,0,4149,4147,4146,2687,2686,2683,42,2676,2674,2675,0,4150,4147,4149,2688,2686,2687,42,2676,2677,2674,0,4150,4151,4147,2688,2689,2686,42,2678,2677,2676,0,4152,4151,4150,2690,2689,2688,42,2678,2679,2677,0,4152,4153,4151,2690,2691,2689,42,2680,2679,2678,0,4154,4153,4152,2692,2691,2690,42,2680,2681,2679,0,4154,4155,4153,2692,2693,2691,42,2682,2681,2680,0,4156,4155,4154,2694,2693,2692,42,2682,2683,2681,0,4156,4157,4155,2694,2695,2693,42,2683,2682,2684,0,4157,4156,4158,2695,2694,2696,42,2685,2684,2682,0,4159,4158,4156,2697,2696,2694,42,2685,2686,2684,0,4159,4160,4158,2697,2698,2696,42,2687,2686,2685,0,4161,4160,4159,2699,2698,2697,42,2687,2688,2686,0,4161,4162,4160,2699,2700,2698,42,2689,2688,2687,0,4163,4164,4165,2701,2700,2699,42,2689,2690,2688,0,4163,4166,4164,2701,2702,2700,42,2689,2691,2690,0,4167,4168,4169,2701,2703,2702,42,2689,2692,2691,0,4167,4170,4168,2701,2704,2703,42,2693,2692,2689,0,4171,4170,4167,2705,2704,2701,42,2693,2694,2692,0,4171,4172,4170,2705,2706,2704,42,2695,2694,2693,0,4173,4172,4171,2707,2706,2705,42,2695,2696,2694,0,4173,4174,4172,2707,2708,2706,42,2697,2696,2695,0,4175,4174,4173,2709,2708,2707,42,2697,2698,2696,0,4175,4176,4174,2709,2710,2708,42,2697,2699,2698,0,4175,4177,4176,2709,2711,2710,42,2697,2700,2699,0,4178,4179,4180,2709,2712,2711,42,2700,2697,2701,0,4179,4178,4181,2712,2709,2713,42,2697,2702,2701,0,4178,4182,4181,2709,2714,2713,42,2702,2697,2695,0,4183,4175,4173,2714,2709,2707,42,2703,2702,2695,0,4184,4183,4173,2715,2714,2707,42,2701,2702,2703,0,4181,4182,4185,2713,2714,2715,42,2701,2703,2704,0,4181,4185,4186,2713,2715,2716,42,2704,2703,2705,0,4186,4185,4187,2716,2715,2717,42,2703,2706,2705,0,4185,4188,4187,2715,2718,2717,42,2706,2703,2707,0,4189,4184,4190,2718,2715,2719,42,2703,2695,2707,0,4184,4173,4190,2715,2707,2719,42,2708,2707,2695,0,4191,4192,4193,2720,2720,2720,42,2708,2709,2707,0,4191,4194,4192,2721,2721,2721,42,2704,2709,2708,0,4186,4195,4196,2716,2722,2723,42,2705,2709,2704,0,4187,4195,4186,2717,2722,2716,42,2705,2710,2709,0,4187,4197,4195,2717,2724,2722,42,2706,2710,2705,0,4198,4199,4200,2725,2725,2725,42,2706,2711,2710,0,4198,4201,4199,2726,2726,2726,42,2706,2707,2711,0,4189,4190,4202,2718,2719,2727,42,2709,2711,2707,0,4194,4201,4192,2728,2728,2728,42,2709,2710,2711,0,4194,4199,4201,2729,2729,2729,42,2701,2704,2708,0,4181,4186,4196,2713,2716,2723,42,2700,2701,2708,0,4179,4181,4196,2712,2713,2723,42,2700,2708,2712,0,4179,4196,4203,2712,2723,2730,42,2712,2708,2713,0,4203,4196,4204,2730,2723,2731,42,2708,2714,2713,0,4196,4205,4204,2723,2732,2731,42,2708,2693,2714,0,4191,4206,4207,2723,2705,2732,42,2708,2695,2693,0,4191,4193,4206,2723,2707,2705,42,2714,2693,2689,0,4207,4206,4163,2732,2705,2701,42,2714,2689,2687,0,4207,4163,4165,2732,2701,2699,42,2714,2687,2685,0,4205,4161,4159,2732,2699,2697,42,2713,2714,2685,0,4204,4205,4159,2731,2732,2697,42,2713,2685,2682,0,4204,4159,4156,2731,2697,2694,42,2713,2682,2680,0,4204,4156,4154,2731,2694,2692,42,2713,2680,2678,0,4204,4154,4152,2731,2692,2690,42,2712,2713,2678,0,4203,4204,4152,2730,2731,2690,42,2712,2678,2715,0,4203,4152,4208,2730,2690,2733,42,2715,2678,2676,0,4208,4152,4150,2733,2690,2688,42,2715,2676,2675,0,4208,4150,4149,2733,2688,2687,42,2715,2675,2716,0,4208,4149,4209,2733,2687,2734,42,2716,2675,2717,0,4209,4149,4210,2734,2687,2735,42,2717,2675,2671,0,4210,4149,4146,2735,2687,2683,42,2717,2671,2670,0,4211,4143,4142,2735,2683,2682,42,2717,2670,2718,0,4211,4142,4212,2735,2682,2736,42,2718,2670,2719,0,4212,4142,4213,2736,2682,2737,42,2670,2667,2719,0,4142,4139,4213,2682,2679,2737,42,2719,2667,2666,0,4213,4139,4138,2737,2679,2678,42,2720,2719,2666,0,4214,4213,4138,2738,2737,2678,42,2721,2719,2720,0,4215,4213,4214,2739,2737,2738,42,2718,2719,2721,0,4216,4213,4215,2736,2737,2739,42,2722,2718,2721,0,4217,4216,4215,2740,2736,2739,42,2722,2723,2718,0,4217,4218,4216,2740,2741,2736,42,2722,2724,2723,0,4219,4220,4221,2740,2742,2741,42,2659,2724,2722,0,4131,4220,4219,2671,2742,2740,42,2724,2659,2725,0,4220,4131,4222,2742,2671,2743,42,2659,2660,2725,0,4131,4132,4222,2671,2672,2743,42,2725,2660,2726,0,4222,4132,4223,2743,2672,2744,42,2726,2660,2661,0,4223,4132,4133,2744,2672,2673,42,2661,2668,2726,0,4133,4140,4223,2673,2680,2744,42,2661,2662,2668,0,4133,4134,4140,2673,2674,2680,42,2664,2668,2662,0,4136,4140,4134,2676,2680,2674,42,2726,2668,2727,0,4223,4140,4224,2744,2680,2745,42,2668,2672,2727,0,4140,4144,4224,2680,2684,2745,42,2669,2672,2668,0,4141,4144,4140,2681,2684,2680,42,2727,2672,2728,0,4224,4144,4225,2745,2684,2746,42,2672,2673,2728,0,4144,4145,4225,2684,2685,2746,42,2728,2673,2729,0,4226,4148,4227,2746,2685,2747,42,2673,2674,2729,0,4148,4147,4227,2685,2686,2747,42,2729,2674,2730,0,4227,4147,4228,2747,2686,2748,42,2674,2677,2730,0,4147,4151,4228,2686,2689,2748,42,2730,2677,2731,0,4228,4151,4229,2748,2689,2749,42,2677,2679,2731,0,4151,4153,4229,2689,2691,2749,42,2731,2679,2732,0,4229,4153,4230,2749,2691,2750,42,2679,2681,2732,0,4153,4155,4230,2691,2693,2750,42,2732,2681,2733,0,4230,4155,4231,2750,2693,2751,42,2681,2683,2733,0,4155,4157,4231,2693,2695,2751,42,2683,2734,2733,0,4157,4232,4231,2695,2752,2751,42,2734,2683,2735,0,4232,4157,4233,2752,2695,2753,42,2683,2736,2735,0,4157,4234,4233,2695,2754,2753,42,2683,2684,2736,0,4157,4158,4234,2695,2696,2754,42,2686,2736,2684,0,4160,4234,4158,2698,2754,2696,42,2686,2737,2736,0,4160,4235,4234,2698,2755,2754,42,2688,2737,2686,0,4162,4235,4160,2700,2755,2698,42,2688,2738,2737,0,4162,4236,4235,2700,2756,2755,42,2690,2738,2688,0,4166,4237,4164,2702,2756,2700,42,2690,2739,2738,0,4166,4238,4237,2702,2757,2756,42,2740,2739,2690,0,4239,4240,4169,2758,2757,2702,42,2740,2738,2739,0,4239,4236,4240,2758,2756,2757,42,2737,2738,2740,0,4235,4236,4239,2755,2756,2758,42,2735,2737,2740,0,4233,4235,4239,2753,2755,2758,42,2736,2737,2735,0,4234,4235,4233,2754,2755,2753,42,2691,2735,2740,0,4168,4233,4239,2703,2753,2758,42,2734,2735,2691,0,4232,4233,4168,2752,2753,2703,42,2692,2734,2691,0,4170,4232,4168,2704,2752,2703,42,2692,2733,2734,0,4170,4231,4232,2704,2751,2752,42,2694,2733,2692,0,4172,4231,4170,2706,2751,2704,42,2694,2732,2733,0,4172,4230,4231,2706,2750,2751,42,2694,2731,2732,0,4172,4229,4230,2706,2749,2750,42,2696,2731,2694,0,4174,4229,4172,2708,2749,2706,42,2696,2698,2731,0,4174,4176,4229,2708,2710,2749,42,2698,2730,2731,0,4176,4228,4229,2710,2748,2749,42,2698,2729,2730,0,4176,4227,4228,2710,2747,2748,42,2698,2741,2729,0,4176,4241,4227,2710,2759,2747,42,2742,2741,2698,0,4242,4241,4176,2760,2759,2710,42,2742,2743,2741,0,4242,4243,4241,2760,2761,2759,42,2742,2744,2743,0,4242,4244,4243,2760,2762,2761,42,2745,2744,2742,0,4245,4246,4247,2763,2762,2760,42,2723,2744,2745,0,4221,4248,4249,2741,2762,2763,42,2723,2746,2744,0,4221,4250,4248,2741,2764,2762,42,2724,2746,2723,0,4220,4250,4221,2742,2764,2741,42,2746,2724,2725,0,4250,4220,4222,2764,2742,2743,42,2746,2725,2747,0,4250,4222,4251,2764,2743,2765,42,2747,2725,2727,0,4251,4222,4224,2765,2743,2745,42,2727,2725,2726,0,4224,4222,4223,2745,2743,2744,42,2728,2747,2727,0,4225,4251,4224,2746,2765,2745,42,2743,2747,2728,0,4252,4251,4225,2761,2765,2746,42,2743,2746,2747,0,4252,4250,4251,2761,2764,2765,42,2744,2746,2743,0,4248,4250,4252,2762,2764,2761,42,2741,2743,2728,0,4241,4243,4226,2759,2761,2746,42,2741,2728,2729,0,4241,4226,4227,2759,2746,2747,42,2723,2745,2748,0,4218,4253,4254,2741,2763,2766,42,2745,2749,2748,0,4245,4255,4256,2763,2767,2766,42,2745,2750,2749,0,4245,4257,4255,2763,2768,2767,42,2745,2742,2750,0,4245,4247,4257,2763,2760,2768,42,2699,2750,2742,0,4180,4257,4247,2711,2768,2760,42,2699,2751,2750,0,4180,4258,4257,2711,2769,2768,42,2699,2700,2751,0,4180,4179,4258,2711,2712,2769,42,2700,2715,2751,0,4179,4208,4258,2712,2733,2769,42,2700,2712,2715,0,4179,4203,4208,2712,2730,2733,42,2751,2715,2716,0,4258,4208,4209,2769,2733,2734,42,2751,2716,2749,0,4258,4209,4255,2769,2734,2767,42,2749,2716,2748,0,4255,4209,4256,2767,2734,2766,42,2748,2716,2717,0,4256,4209,4210,2766,2734,2735,42,2718,2748,2717,0,4212,4254,4211,2736,2766,2735,42,2723,2748,2718,0,4218,4254,4212,2741,2766,2736,42,2751,2749,2750,0,4258,4255,4257,2769,2767,2768,42,2699,2742,2698,0,4177,4242,4176,2711,2760,2710,42,2691,2740,2690,0,4168,4239,4169,2703,2758,2702,42,2659,2722,2658,0,4131,4219,4130,2671,2740,2670,42,2658,2722,2721,0,4259,4217,4215,2670,2740,2739,42,2658,2721,2720,0,4259,4215,4214,2670,2739,2738,42,2657,2658,2720,0,4260,4259,4214,2669,2670,2738,42,2657,2720,2752,0,4260,4214,4261,2669,2738,2770,42,2720,2665,2752,0,4214,4137,4261,2738,2677,2770,42,2720,2666,2665,0,4214,4138,4137,2738,2678,2677,42,2752,2665,2753,0,4261,4137,4262,2770,2677,2771,42,2753,2665,2754,0,4262,4137,4263,2771,2677,2772,42,2665,2755,2754,0,4137,4264,4263,2677,2773,2772,42,2665,2663,2755,0,4137,4135,4264,2677,2675,2773,42,2652,2755,2663,0,4124,4264,4135,2664,2773,2675,42,2652,2756,2755,0,4124,4265,4264,2664,2774,2773,42,2651,2756,2652,0,4123,4265,4124,2663,2774,2664,42,2757,2756,2651,0,4266,4265,4123,2775,2774,2663,42,2757,2758,2756,0,4266,4267,4265,2775,2776,2774,42,2759,2758,2757,0,4268,4267,4266,2777,2776,2775,42,2760,2758,2759,0,4269,4267,4268,2778,2776,2777,42,2760,2756,2758,0,4269,4265,4267,2778,2774,2776,42,2755,2756,2760,0,4264,4265,4269,2773,2774,2778,42,2754,2755,2760,0,4263,4264,4269,2772,2773,2778,42,2754,2760,2761,0,4263,4269,4270,2772,2778,2779,42,2761,2760,2762,0,4270,4269,4271,2779,2778,2780,42,2759,2762,2760,0,4268,4271,4269,2777,2780,2778,42,2763,2762,2759,0,4272,4271,4268,2781,2780,2777,42,2764,2762,2763,0,4273,4271,4272,2782,2780,2781,42,2765,2762,2764,0,4274,4271,4273,2783,2780,2782,42,2761,2762,2765,0,4270,4271,4274,2779,2780,2783,42,2766,2761,2765,0,4275,4270,4274,2784,2779,2783,42,2766,2754,2761,0,4275,4263,4270,2784,2772,2779,42,2767,2754,2766,0,4276,4263,4275,2785,2772,2784,42,2753,2754,2767,0,4262,4263,4276,2771,2772,2785,42,2768,2753,2767,0,4277,4262,4276,2786,2771,2785,42,2768,2752,2753,0,4277,4261,4262,2786,2770,2771,42,2768,2657,2752,0,4277,4260,4261,2786,2669,2770,42,2657,2768,2656,0,4129,4278,4128,2669,2786,2668,42,2768,2769,2656,0,4278,4279,4128,2786,2787,2668,42,2769,2768,2770,0,4279,4278,4280,2787,2786,2788,42,2770,2768,2767,0,4281,4277,4276,2788,2786,2785,42,2766,2770,2767,0,4275,4281,4276,2784,2788,2785,42,2771,2770,2766,0,4282,4281,4275,2789,2788,2784,42,2771,2772,2770,0,4283,4284,4280,2789,2790,2788,42,2773,2772,2771,0,4285,4284,4283,2791,2790,2789,42,2774,2772,2773,0,4286,4284,4285,2792,2790,2791,42,2774,2775,2772,0,4286,4287,4284,2792,2793,2790,42,2774,2776,2775,0,4286,4288,4287,2792,2794,2793,42,2777,2776,2774,0,4289,4288,4286,2795,2794,2792,42,2777,2778,2776,0,4289,4290,4288,2795,2796,2794,42,2779,2778,2777,0,4291,4290,4289,2797,2796,2795,42,2779,2780,2778,0,4291,4292,4290,2797,2798,2796,42,2781,2780,2779,0,4293,4292,4291,2799,2798,2797,42,2781,2782,2780,0,4293,4294,4292,2799,2800,2798,42,2781,2783,2782,0,4293,4295,4294,2799,2801,2800,42,2783,2781,2784,0,4295,4293,4296,2801,2799,2802,42,2781,2785,2784,0,4293,4297,4296,2799,2803,2802,42,2781,2779,2785,0,4293,4291,4297,2799,2797,2803,42,2785,2779,2786,0,4297,4291,4298,2803,2797,2804,42,2779,2777,2786,0,4291,4289,4298,2797,2795,2804,42,2786,2777,2774,0,4298,4289,4286,2804,2795,2792,42,2786,2774,2773,0,4298,4286,4285,2804,2792,2791,42,2786,2773,2787,0,4299,4300,4301,2804,2791,2805,42,2773,2766,2787,0,4300,4275,4301,2791,2784,2805,42,2773,2771,2766,0,4300,4282,4275,2791,2789,2784,42,2787,2766,2765,0,4301,4275,4274,2805,2784,2783,42,2787,2765,2788,0,4301,4274,4302,2805,2783,2806,42,2788,2765,2764,0,4302,4274,4273,2806,2783,2782,42,2788,2764,2789,0,4302,4273,4303,2806,2782,2807,42,2790,2789,2764,0,4304,4303,4273,2808,2807,2782,42,2791,2789,2790,0,4305,4303,4304,2809,2807,2808,42,2792,2789,2791,0,4306,4303,4305,2810,2807,2809,42,2792,2788,2789,0,4306,4302,4303,2810,2806,2807,42,2793,2788,2792,0,4307,4302,4306,2811,2806,2810,42,2793,2794,2788,0,4307,4308,4302,2811,2812,2806,42,2785,2794,2793,0,4309,4308,4307,2803,2812,2811,42,2785,2786,2794,0,4309,4299,4308,2803,2804,2812,42,2786,2787,2794,0,4299,4301,4308,2804,2805,2812,42,2794,2787,2788,0,4308,4301,4302,2812,2805,2806,42,2784,2785,2793,0,4310,4309,4307,2802,2803,2811,42,2784,2793,2795,0,4310,4307,4311,2802,2811,2813,42,2795,2793,2792,0,4311,4307,4306,2813,2811,2810,42,2795,2792,2796,0,4311,4306,4312,2813,2810,2814,42,2796,2792,2791,0,4312,4306,4305,2814,2810,2809,42,2796,2791,2797,0,4312,4305,4313,2814,2809,2815,42,2797,2791,2798,0,4313,4305,4314,2815,2809,2816,42,2798,2791,2790,0,4314,4305,4304,2816,2809,2808,42,2798,2790,2799,0,4314,4304,4315,2816,2808,2817,42,2799,2790,2800,0,4315,4304,4316,2817,2808,2818,42,2790,2763,2800,0,4304,4272,4316,2808,2781,2818,42,2790,2764,2763,0,4304,4273,4272,2808,2782,2781,42,2800,2763,2801,0,4316,4272,4317,2818,2781,2819,42,2763,2759,2801,0,4272,4268,4317,2781,2777,2819,42,2801,2759,2757,0,4317,4268,4266,2819,2777,2775,42,2802,2801,2757,0,4318,4317,4266,2820,2819,2775,42,2802,2800,2801,0,4318,4316,4317,2820,2818,2819,42,2802,2775,2800,0,4318,4287,4316,2820,2793,2818,42,2772,2775,2802,0,4284,4287,4318,2790,2793,2820,42,2772,2802,2654,0,4284,4318,4126,2790,2820,2666,42,2654,2802,2757,0,4126,4318,4266,2666,2820,2775,42,2654,2757,2651,0,4126,4266,4123,2666,2775,2663,42,2769,2772,2654,0,4279,4284,4126,2787,2790,2666,42,2772,2769,2770,0,4284,4279,4280,2790,2787,2788,42,2656,2769,2654,0,4128,4279,4126,2668,2787,2666,42,2776,2800,2775,0,4288,4316,4287,2794,2818,2793,42,2776,2799,2800,0,4288,4315,4316,2794,2817,2818,42,2776,2803,2799,0,4288,4319,4315,2794,2821,2817,42,2776,2778,2803,0,4288,4290,4319,2794,2796,2821,42,2778,2804,2803,0,4290,4320,4319,2796,2822,2821,42,2778,2780,2804,0,4290,4292,4320,2796,2798,2822,42,2780,2805,2804,0,4292,4321,4320,2798,2823,2822,42,2780,2782,2805,0,4292,4294,4321,2798,2800,2823,42,2782,2806,2805,0,4294,4322,4321,2800,2824,2823,42,2807,2806,2782,0,4323,4322,4294,2825,2824,2800,42,2783,2807,2782,0,4295,4323,4294,2801,2825,2800,42,2808,2807,2783,0,4324,4323,4295,2826,2825,2801,42,2808,2783,2809,0,4324,4295,4325,2826,2801,2827,42,2783,2784,2809,0,4295,4296,4325,2801,2802,2827,42,2809,2784,2795,0,4326,4310,4311,2827,2802,2813,42,2809,2795,2810,0,4326,4311,4327,2827,2813,2828,42,2795,2796,2810,0,4311,4312,4327,2813,2814,2828,42,2810,2796,2811,0,4327,4312,4328,2828,2814,2829,42,2796,2797,2811,0,4312,4313,4328,2814,2815,2829,42,2811,2797,2812,0,4328,4313,4329,2829,2815,2830,42,2812,2797,2813,0,4329,4313,4330,2830,2815,2831,42,2813,2797,2798,0,4330,4313,4314,2831,2815,2816,42,2813,2798,2803,0,4330,4314,4319,2831,2816,2821,42,2803,2798,2799,0,4319,4314,4315,2821,2816,2817,42,2804,2813,2803,0,4320,4330,4319,2822,2831,2821,42,2814,2813,2804,0,4331,4330,4320,2832,2831,2822,42,2814,2812,2813,0,4331,4329,4330,2832,2830,2831,42,2815,2812,2814,0,4332,4329,4331,2833,2830,2832,42,2816,2812,2815,0,4333,4329,4332,2834,2830,2833,42,2811,2812,2816,0,4328,4329,4333,2829,2830,2834,42,2817,2811,2816,0,4334,4328,4333,2835,2829,2834,42,2810,2811,2817,0,4327,4328,4334,2828,2829,2835,42,2818,2810,2817,0,4335,4327,4334,2836,2828,2835,42,2818,2809,2810,0,4335,4326,4327,2836,2827,2828,42,2808,2809,2818,0,4324,4325,4336,2826,2827,2836,42,2819,2815,2814,0,4337,4332,4331,2837,2833,2832,42,2819,2814,2805,0,4337,4331,4321,2837,2832,2823,42,2805,2814,2804,0,4321,4331,4320,2823,2832,2822,42,2806,2819,2805,0,4322,4337,4321,2824,2837,2823,42,2820,2821,2822,4,4338,4339,4340,2838,2839,2840,42,2820,2823,2821,4,4341,4342,4343,2838,2841,2839,42,2823,2820,2824,4,4344,4345,4346,2841,2838,2842,42,2824,2820,2825,4,4346,4345,4347,2842,2838,2843,42,2820,2826,2825,4,4345,4348,4347,2838,2844,2843,42,2820,2822,2826,4,4338,4340,4349,2838,2840,2844,42,2826,2822,2827,4,4349,4340,4350,2844,2840,2845,42,2822,2828,2827,4,4351,4352,4353,2840,2846,2845,42,2822,2829,2828,4,4351,4354,4352,2840,2847,2846,42,2822,2830,2829,4,4351,4355,4354,2840,2848,2847,42,2822,2831,2830,4,4351,4356,4355,2840,2849,2848,42,2821,2831,2822,4,4339,4357,4340,2839,2849,2840,42,2821,2832,2831,4,4339,4358,4357,2839,2850,2849,42,2821,2833,2832,4,4339,4359,4358,2839,2851,2850,42,2823,2833,2821,4,4342,4360,4343,2841,2851,2839,42,2823,2834,2833,4,4342,4361,4360,2841,2852,2851,42,2835,2834,2823,4,4362,4363,4344,2853,2852,2841,42,2835,2836,2834,4,4362,4364,4363,2853,2854,2852,42,2836,2835,2837,4,4365,4366,4367,2854,2853,2855,42,2837,2835,2824,4,4367,4366,4368,2855,2853,2842,42,2835,2823,2824,4,4362,4344,4346,2853,2841,2842,42,2838,2837,2824,4,4369,4367,4368,2856,2855,2842,42,2837,2838,2839,4,4367,4369,4370,2855,2856,2857,42,2839,2838,2840,4,4370,4369,4371,2857,2856,2858,42,2838,2841,2840,4,4369,4372,4371,2856,2859,2858,42,2841,2838,2842,4,4372,4369,4373,2859,2856,2860,42,2838,2843,2842,4,4369,4374,4373,2856,2861,2860,42,2838,2824,2843,4,4369,4368,4375,2856,2842,2861,42,2843,2824,2844,4,4375,4368,4376,2861,2842,2862,42,2824,2825,2844,4,4368,4377,4376,2842,2843,2862,42,2825,2845,2844,4,4377,4378,4376,2843,2863,2862,42,2825,2846,2845,4,4377,4379,4378,2843,2864,2863,42,2825,2826,2846,4,4347,4348,4380,2843,2844,2864,42,2826,2847,2846,4,4349,4381,4382,2844,2865,2864,42,2826,2827,2847,4,4349,4350,4381,2844,2845,2865,42,2847,2827,2828,4,4383,4353,4352,2865,2845,2846,42,2847,2828,2848,4,4384,4385,4386,2865,2846,2866,42,2848,2828,2849,4,4386,4385,4387,2866,2846,2867,42,2850,2849,2828,4,4388,4387,4385,2868,2867,2846,42,2849,2850,2851,4,4387,4388,4389,2867,2868,2869,42,2852,2851,2850,4,4390,4389,4388,2870,2869,2868,42,2852,2853,2851,4,4390,4391,4389,2870,2871,2869,42,2854,2853,2852,4,4392,4391,4390,2872,2871,2870,42,2854,2855,2853,4,4392,4393,4391,2872,2873,2871,42,2854,2856,2855,4,4392,4394,4393,2872,2874,2873,42,2857,2856,2854,4,4395,4394,4392,2875,2874,2872,42,2857,2858,2856,4,4395,4396,4394,2875,2876,2874,42,2857,2859,2858,4,4395,4397,4396,2875,2877,2876,42,2857,2860,2859,4,4395,4398,4397,2875,2878,2877,42,2861,2860,2857,4,4399,4398,4395,2879,2878,2875,42,2862,2860,2861,4,4400,4401,4402,2880,2878,2879,42,2862,2863,2860,4,4400,4403,4401,2880,2881,2878,42,2864,2863,2862,4,4404,4405,4406,2882,2881,2880,42,2864,2865,2863,4,4404,4407,4405,2882,2883,2881,42,2864,2866,2865,4,4404,4408,4407,2882,2884,2883,42,2867,2866,2864,4,4409,4408,4404,2885,2884,2882,42,2868,2866,2867,4,4410,4411,4412,2886,2884,2885,42,2868,2869,2866,4,4410,4413,4411,2886,2887,2884,42,2868,2870,2869,4,4414,4415,4416,2886,2888,2887,42,2871,2870,2868,4,4417,4415,4414,2889,2888,2886,42,2872,2870,2871,4,4418,4419,4420,2890,2888,2889,42,2872,2873,2870,4,4418,4421,4419,2890,2891,2888,42,2872,2874,2873,4,4422,4423,4424,2890,2892,2891,42,2872,2875,2874,4,4422,4425,4423,2890,2893,2892,42,2836,2875,2872,4,4365,4425,4422,2854,2893,2890,42,2837,2875,2836,4,4367,4425,4365,2855,2893,2854,42,2875,2837,2839,4,4425,4367,4370,2893,2855,2857,42,2875,2839,2874,4,4425,4370,4423,2893,2857,2892,42,2874,2839,2876,4,4423,4370,4426,2892,2857,2894,42,2876,2839,2877,4,4427,4428,4429,2894,2857,2895,42,2877,2839,2840,4,4430,4370,4371,2895,2857,2858,42,2877,2840,2878,4,4430,4371,4431,2895,2858,2896,42,2840,2879,2878,4,4371,4432,4431,2858,2897,2896,42,2879,2880,2878,4,4432,4433,4431,2897,2898,2896,42,2881,2878,2880,4,4434,4431,4433,2899,2896,2898,42,2877,2878,2881,4,4430,4431,4434,2895,2896,2899,42,2882,2877,2881,4,4435,4430,4434,2900,2895,2899,42,2883,2877,2882,4,4436,4429,4437,2901,2895,2900,42,2884,2877,2883,4,4438,4429,4436,2902,2895,2901,42,2884,2876,2877,4,4438,4427,4429,2902,2894,2895,42,2874,2876,2884,4,4423,4426,4439,2892,2894,2902,42,2885,2874,2884,4,4440,4423,4439,2903,2892,2902,42,2873,2874,2885,4,4424,4423,4440,2891,2892,2903,42,2873,2885,2886,4,4424,4440,4441,2891,2903,2904,42,2885,2887,2886,4,4440,4442,4441,2903,2905,2904,42,2885,2884,2887,4,4440,4439,4442,2903,2902,2905,42,2887,2884,2888,4,4442,4439,4443,2905,2902,2906,42,2888,2884,2883,4,4444,4438,4436,2906,2902,2901,42,2888,2883,2889,4,4444,4436,4445,2906,2901,2907,42,2889,2883,2890,4,4445,4436,4446,2907,2901,2908,42,2883,2882,2890,4,4436,4437,4446,2901,2900,2908,42,2882,2891,2890,4,4435,4447,4448,2900,2909,2908,42,2882,2881,2891,4,4435,4434,4447,2900,2899,2909,42,2881,2880,2891,4,4434,4433,4447,2899,2898,2909,42,2880,2892,2891,4,4433,4449,4447,2898,2910,2909,42,2891,2892,2893,4,4447,4449,4450,2909,2910,2911,42,2891,2893,2894,4,4447,4450,4451,2909,2911,2912,42,2894,2893,2895,4,4451,4450,4452,2912,2911,2913,42,2894,2895,2896,4,4451,4452,4453,2912,2913,2914,42,2896,2895,2897,4,4453,4452,4454,2914,2913,2915,42,2896,2897,2898,4,4453,4454,4455,2914,2915,2916,42,2899,2896,2898,4,4456,4453,4455,2917,2914,2916,42,2900,2896,2899,4,4457,4453,4456,2918,2914,2917,42,2900,2894,2896,4,4457,4451,4453,2918,2912,2914,42,2890,2894,2900,4,4448,4451,4457,2908,2912,2918,42,2894,2890,2891,4,4451,4448,4447,2912,2908,2909,42,2900,2889,2890,4,4458,4445,4446,2918,2907,2908,42,2901,2889,2900,4,4459,4445,4458,2919,2907,2918,42,2888,2889,2901,4,4444,4445,4459,2906,2907,2919,42,2902,2888,2901,4,4460,4444,4459,2920,2906,2919,42,2887,2888,2902,4,4442,4443,4461,2905,2906,2920,42,2887,2902,2903,4,4442,4461,4462,2905,2920,2921,42,2904,2903,2902,4,4463,4462,4461,2922,2921,2920,42,2903,2904,2905,4,4462,4463,4464,2921,2922,2923,42,2906,2905,2904,4,4465,4464,4463,2924,2923,2922,42,2905,2906,2907,4,4464,4465,4466,2923,2924,2925,42,2905,2907,2908,4,4464,4466,4467,2923,2925,2926,42,2908,2907,2909,4,4467,4466,4468,2926,2925,2927,42,2908,2909,2910,4,4467,4468,4469,2926,2927,2928,42,2910,2909,2911,4,4469,4468,4470,2928,2927,2929,42,2912,2908,2910,4,4471,4467,4469,2930,2926,2928,42,2913,2908,2912,4,4472,4467,4471,2931,2926,2930,42,2913,2905,2908,4,4472,4464,4467,2931,2923,2926,42,2903,2905,2913,4,4462,4464,4472,2921,2923,2931,42,2886,2903,2913,4,4441,4462,4472,2904,2921,2931,42,2886,2887,2903,4,4441,4442,4462,2904,2905,2921,42,2886,2913,2914,4,4441,4472,4473,2904,2931,2932,42,2914,2913,2912,4,4473,4472,4471,2932,2931,2930,42,2914,2912,2915,4,4473,4471,4474,2932,2930,2933,42,2915,2912,2916,4,4474,4471,4475,2933,2930,2934,42,2916,2912,2917,4,4475,4471,4476,2934,2930,2935,42,2916,2917,2918,4,4475,4476,4477,2934,2935,2936,42,2918,2917,2919,4,4477,4476,4478,2936,2935,2937,42,2918,2919,2920,4,4477,4478,4479,2936,2937,2938,42,2918,2920,2921,4,4480,4481,4482,2936,2938,2939,42,2918,2921,2922,4,4480,4482,4483,2936,2939,2940,42,2923,2918,2922,4,4484,4480,4483,2941,2936,2940,42,2916,2918,2923,4,4485,4480,4484,2934,2936,2941,42,2924,2916,2923,4,4486,4485,4484,2942,2934,2941,42,2915,2916,2924,4,4487,4485,4486,2933,2934,2942,42,2870,2915,2924,4,4415,4487,4486,2888,2933,2942,42,2873,2915,2870,4,4421,4474,4419,2891,2933,2888,42,2873,2914,2915,4,4421,4473,4474,2891,2932,2933,42,2873,2886,2914,4,4488,4441,4473,2891,2904,2932,42,2870,2924,2869,4,4415,4486,4416,2888,2942,2887,42,2869,2924,2925,4,4489,4490,4491,2887,2942,2943,42,2923,2925,2924,4,4492,4491,4490,2941,2943,2942,42,2925,2923,2926,4,4491,4492,4493,2943,2941,2944,42,2923,2927,2926,4,4492,4494,4493,2941,2945,2944,42,2928,2926,2927,4,4495,4493,4494,2946,2944,2945,42,2926,2928,2929,4,4496,4497,4498,2944,2946,2947,42,2929,2928,2930,4,4498,4497,4499,2947,2946,2948,42,2928,2931,2930,4,4497,4500,4499,2946,2949,2948,42,2931,2928,2932,4,4501,4495,4502,2949,2946,2950,42,2932,2928,2927,4,4502,4495,4494,2950,2946,2945,42,2930,2931,2933,4,4499,4500,4503,2948,2949,2951,42,2934,2930,2933,4,4504,4505,4506,2952,2948,2951,42,2935,2930,2934,4,4507,4505,4504,2953,2948,2952,42,2929,2930,2935,4,4508,4505,4507,2947,2948,2953,42,2936,2929,2935,4,4509,4508,4507,2954,2947,2953,42,2937,2929,2936,4,4510,4508,4509,2955,2947,2954,42,2937,2926,2929,4,4511,4496,4498,2955,2944,2947,42,2925,2926,2937,4,4512,4496,4511,2943,2944,2955,42,2869,2925,2937,4,4413,4512,4511,2887,2943,2955,42,2869,2937,2866,4,4413,4511,4411,2887,2955,2884,42,2866,2937,2936,4,4408,4510,4509,2884,2955,2954,42,2866,2936,2865,4,4408,4509,4407,2884,2954,2883,42,2865,2936,2863,4,4407,4509,4405,2883,2954,2881,42,2863,2936,2938,4,4405,4509,4513,2881,2954,2956,42,2936,2935,2938,4,4509,4507,4513,2954,2953,2956,42,2938,2935,2939,4,4513,4507,4514,2956,2953,2957,42,2935,2934,2939,4,4507,4504,4514,2953,2952,2957,42,2939,2934,2940,4,4514,4504,4515,2957,2952,2958,42,2934,2941,2940,4,4504,4516,4515,2952,2959,2958,42,2940,2941,2942,4,4515,4516,4517,2958,2959,2960,42,2940,2942,2943,4,4518,4519,4520,2958,2960,2961,42,2942,2944,2943,4,4519,4521,4520,2960,2962,2961,42,2945,2940,2943,4,4522,4518,4520,2963,2958,2961,42,2939,2940,2945,4,4523,4518,4522,2957,2958,2963,42,2938,2939,2945,4,4524,4523,4522,2956,2957,2963,42,2938,2945,2946,4,4524,4522,4525,2956,2963,2964,42,2946,2945,2947,4,4526,4527,4528,2964,2963,2965,42,2945,2943,2947,4,4527,4529,4528,2963,2961,2965,42,2947,2943,2948,4,4528,4529,4530,2965,2961,2966,42,2948,2943,2949,4,4530,4529,4531,2966,2961,2967,42,2948,2949,2950,4,4530,4531,4532,2966,2967,2968,42,2948,2950,2951,4,4533,4534,4535,2966,2968,2969,42,2951,2950,2952,4,4535,4534,4536,2969,2968,2970,42,2951,2952,2953,4,4535,4536,4537,2969,2970,2971,42,2952,2954,2953,4,4536,4538,4537,2970,2972,2971,42,2954,2955,2953,4,4538,4539,4537,2972,2973,2971,42,2955,2956,2953,4,4539,4540,4537,2973,2974,2971,42,2953,2956,2957,4,4537,4540,4541,2971,2974,2975,42,2956,2958,2957,4,4540,4542,4541,2974,2976,2975,42,2958,2956,2959,4,4542,4540,4543,2976,2974,2977,42,2956,2960,2959,4,4540,4544,4543,2974,2978,2977,42,2959,2960,2961,4,4543,4544,4545,2977,2978,2979,42,2959,2961,2962,4,4546,4547,4548,2977,2979,2980,42,2962,2961,2963,4,4548,4547,4549,2980,2979,2981,42,2964,2962,2963,4,4550,4548,4549,2982,2980,2981,42,2965,2962,2964,4,4551,4548,4550,2983,2980,2982,42,2966,2962,2965,4,4552,4548,4551,2984,2980,2983,42,2967,2962,2966,4,4553,4548,4552,2985,2980,2984,42,2967,2959,2962,4,4553,4546,4548,2985,2977,2980,42,2959,2967,2958,4,4546,4553,4554,2977,2985,2976,42,2958,2967,2968,4,4554,4553,4555,2976,2985,2986,42,2969,2968,2967,4,4556,4555,4553,2987,2986,2985,42,2970,2968,2969,4,4557,4555,4556,2988,2986,2987,42,2971,2968,2970,4,4558,4555,4557,2989,2986,2988,42,2972,2968,2971,4,4559,4555,4558,2990,2986,2989,42,2972,2973,2968,4,4559,4560,4555,2990,2991,2986,42,2974,2973,2972,4,4561,4562,4563,2992,2991,2990,42,2974,2975,2973,4,4561,4564,4562,2992,2993,2991,42,2976,2975,2974,4,4565,4564,4561,2994,2993,2992,42,2977,2975,2976,4,4566,4564,4565,2995,2993,2994,42,2977,2957,2975,4,4566,4541,4564,2995,2975,2993,42,2953,2957,2977,4,4537,4541,4566,2971,2975,2995,42,2977,2951,2953,4,4566,4535,4537,2995,2969,2971,42,2978,2951,2977,4,4567,4535,4566,2996,2969,2995,42,2978,2948,2951,4,4567,4533,4535,2996,2966,2969,42,2947,2948,2978,4,4568,4533,4567,2965,2966,2996,42,2979,2947,2978,4,4569,4568,4567,2997,2965,2996,42,2946,2947,2979,4,4570,4568,4569,2964,2965,2997,42,2859,2946,2979,4,4397,4570,4569,2877,2964,2997,42,2860,2946,2859,4,4398,4570,4397,2878,2964,2877,42,2860,2938,2946,4,4401,4524,4525,2878,2956,2964,42,2863,2938,2860,4,4403,4524,4401,2881,2956,2878,42,2859,2979,2858,4,4397,4569,4396,2877,2997,2876,42,2858,2979,2976,4,4396,4569,4565,2876,2997,2994,42,2979,2978,2976,4,4569,4567,4565,2997,2996,2994,42,2976,2978,2977,4,4565,4567,4566,2994,2996,2995,42,2858,2976,2974,4,4396,4565,4561,2876,2994,2992,42,2858,2974,2856,4,4396,4561,4394,2876,2992,2874,42,2856,2974,2972,4,4394,4561,4563,2874,2992,2990,42,2856,2972,2980,4,4394,4563,4571,2874,2990,2998,42,2980,2972,2971,4,4572,4559,4558,2998,2990,2989,42,2980,2971,2981,4,4572,4558,4573,2998,2989,2999,42,2981,2971,2970,4,4573,4558,4557,2999,2989,2988,42,2981,2970,2982,4,4573,4557,4574,2999,2988,3000,42,2981,2982,2983,4,4573,4574,4575,2999,3000,3001,42,2983,2982,2984,4,4575,4574,4576,3001,3000,3002,42,2983,2984,2985,4,4575,4576,4577,3001,3002,3003,42,2986,2983,2985,4,4578,4575,4577,3004,3001,3003,42,2987,2983,2986,4,4579,4575,4578,3005,3001,3004,42,2987,2981,2983,4,4579,4573,4575,3005,2999,3001,42,2980,2981,2987,4,4572,4573,4579,2998,2999,3005,42,2855,2980,2987,4,4393,4571,4580,2873,2998,3005,42,2856,2980,2855,4,4394,4571,4393,2874,2998,2873,42,2855,2987,2853,4,4393,4580,4391,2873,3005,2871,42,2987,2986,2853,4,4580,4581,4391,3005,3004,2871,42,2853,2986,2851,4,4391,4581,4389,2871,3004,2869,42,2986,2985,2851,4,4578,4577,4582,3004,3003,2869,42,2851,2985,2988,4,4582,4577,4583,2869,3003,3006,42,2988,2985,2989,4,4584,4585,4586,3006,3003,3007,42,2985,2990,2989,4,4585,4587,4586,3003,3008,3007,42,2985,2991,2990,4,4585,4588,4587,3003,3009,3008,42,2991,2992,2990,4,4588,4589,4587,3009,3010,3008,42,2990,2992,2993,4,4587,4589,4590,3008,3010,3011,42,2993,2992,2994,4,4590,4589,4591,3011,3010,3012,42,2992,2995,2994,4,4589,4592,4591,3010,3013,3012,42,2995,2996,2994,4,4592,4593,4591,3013,3014,3012,42,2995,2997,2996,4,4592,4594,4593,3013,3015,3014,42,2997,2998,2996,4,4594,4595,4593,3015,3016,3014,42,2997,2999,2998,4,4594,4596,4595,3015,3017,3016,42,2999,3000,2998,4,4596,4597,4595,3017,3018,3016,42,2999,3001,3000,4,4596,4598,4597,3017,3019,3018,42,2998,3000,3002,4,4595,4597,4599,3016,3018,3020,42,2998,3002,3003,4,4595,4599,4600,3016,3020,3021,42,3003,3002,3004,4,4601,4602,4603,3021,3020,3022,42,3005,3003,3004,4,4604,4601,4603,3023,3021,3022,42,2996,3003,3005,4,4593,4600,4605,3014,3021,3023,42,2998,3003,2996,4,4595,4600,4593,3016,3021,3014,42,2994,2996,3005,4,4591,4593,4605,3012,3014,3023,42,2994,3005,3006,4,4591,4605,4606,3012,3023,3024,42,3006,3005,3007,4,4607,4604,4608,3024,3023,3025,42,3005,3004,3007,4,4604,4603,4608,3023,3022,3025,42,3007,3004,3008,4,4609,4610,4611,3025,3022,3026,42,3004,3009,3008,4,4610,4612,4611,3022,3027,3026,42,3004,3010,3009,4,4610,4613,4612,3022,3028,3027,42,3010,3011,3009,4,4613,4614,4612,3028,3029,3027,42,3009,3011,3012,4,4612,4614,4615,3027,3029,3030,42,3009,3012,3013,4,4612,4615,4616,3027,3030,3031,42,3013,3012,3014,4,4616,4615,4617,3031,3030,3032,42,3015,3013,3014,4,4618,4616,4617,3033,3031,3032,42,3016,3013,3015,4,4619,4616,4618,3034,3031,3033,42,3008,3013,3016,4,4611,4616,4619,3026,3031,3034,42,3008,3009,3013,4,4611,4612,4616,3026,3027,3031,42,3017,3008,3016,4,4620,4611,4619,3035,3026,3034,42,3007,3008,3017,4,4609,4611,4620,3025,3026,3035,42,3018,3007,3017,4,4621,4609,4620,3036,3025,3035,42,3006,3007,3018,4,4607,4608,4622,3024,3025,3036,42,3006,3018,3019,4,4607,4622,4623,3024,3036,3037,42,3019,3018,3020,4,4624,4621,4625,3037,3036,3038,42,3018,3017,3020,4,4621,4620,4625,3036,3035,3038,42,3020,3017,3021,4,4625,4620,4626,3038,3035,3039,42,3017,3016,3021,4,4620,4619,4626,3035,3034,3039,42,3021,3016,3022,4,4626,4619,4627,3039,3034,3040,42,3016,3015,3022,4,4619,4618,4627,3034,3033,3040,42,3022,3015,3023,4,4627,4618,4628,3040,3033,3041,42,3015,3024,3023,4,4618,4629,4628,3033,3042,3041,42,3015,3025,3024,4,4618,4630,4629,3033,3043,3042,42,3025,3026,3024,4,4630,4631,4629,3043,3044,3042,42,3022,3023,3027,4,4627,4628,4632,3040,3041,3045,42,3021,3022,3027,4,4626,4627,4632,3039,3040,3045,42,3028,3021,3027,4,4633,4626,4632,3046,3039,3045,42,3029,3021,3028,4,4634,4626,4633,3047,3039,3046,42,3020,3021,3029,4,4625,4626,4634,3038,3039,3047,42,3020,3029,3030,4,4625,4634,4635,3038,3047,3048,42,3030,3029,3031,4,4635,4634,4636,3048,3047,3049,42,3031,3029,3032,4,4636,4634,4637,3049,3047,3050,42,3032,3029,3028,4,4637,4634,4633,3050,3047,3046,42,3033,3031,3032,4,4638,4636,4637,3051,3049,3050,42,3034,3031,3033,4,4639,4636,4638,3052,3049,3051,42,3035,3031,3034,4,4640,4636,4639,3053,3049,3052,42,3030,3031,3035,4,4635,4636,4640,3048,3049,3053,42,3036,3030,3035,4,4641,4635,4640,3054,3048,3053,42,3036,3019,3030,4,4641,4624,4635,3054,3037,3048,42,2993,3019,3036,4,4590,4624,4641,3011,3037,3054,42,2993,3006,3019,4,4590,4606,4624,3011,3024,3037,42,2993,2994,3006,4,4590,4591,4606,3011,3012,3024,42,2990,2993,3036,4,4587,4590,4641,3008,3011,3054,42,2990,3036,2989,4,4587,4641,4586,3008,3054,3007,42,3036,3035,2989,4,4641,4640,4586,3054,3053,3007,42,2989,3035,3037,4,4586,4640,4642,3007,3053,3055,42,3037,3035,3038,4,4642,4640,4643,3055,3053,3056,42,3035,3034,3038,4,4640,4639,4643,3053,3052,3056,42,3038,3034,3039,4,4643,4639,4644,3056,3052,3057,42,3039,3034,3040,4,4644,4639,4645,3057,3052,3058,42,3040,3034,3033,4,4645,4639,4638,3058,3052,3051,42,3041,3039,3040,4,4646,4644,4645,3059,3057,3058,42,3042,3039,3041,4,4647,4644,4646,3060,3057,3059,42,3038,3039,3042,4,4643,4644,4647,3056,3057,3060,42,3038,3042,3043,4,4643,4647,4648,3056,3060,3061,42,3044,3043,3042,4,4649,4648,4647,3062,3061,3060,42,3044,3045,3043,4,4649,4650,4648,3062,3063,3061,42,3045,3044,3046,4,4651,4652,4653,3063,3062,3064,42,3046,3044,3047,4,4653,4652,4654,3064,3062,3065,42,3044,3048,3047,4,4655,4656,4657,3062,3066,3065,42,3044,3049,3048,4,4655,4658,4656,3062,3067,3066,42,3049,3044,3042,4,4659,4649,4647,3067,3062,3060,42,3049,3042,3041,4,4660,4647,4646,3067,3060,3059,42,3049,3041,3048,4,4658,4661,4656,3067,3059,3066,42,3048,3041,3050,4,4656,4661,4662,3066,3059,3068,42,3050,3041,3051,4,4663,4664,4665,3068,3059,3069,42,3052,3050,3051,4,4666,4663,4665,3070,3068,3069,42,3053,3050,3052,4,4667,4662,4668,3071,3068,3070,42,3053,3048,3050,4,4667,4656,4662,3071,3066,3068,42,3047,3048,3053,4,4657,4656,4667,3065,3066,3071,42,3054,3047,3053,4,4669,4657,4667,3072,3065,3071,42,3055,3047,3054,4,4670,4654,4671,3073,3065,3072,42,3055,3046,3047,4,4670,4653,4654,3073,3064,3065,42,3056,3046,3055,4,4672,4653,4670,3074,3064,3073,42,3056,3057,3046,4,4672,4673,4653,3074,3075,3064,42,2844,3057,3056,4,4674,4675,4676,2862,3075,3074,42,2844,2845,3057,4,4674,4677,4675,2862,2863,3075,42,2845,3058,3057,4,4677,4678,4675,2863,3076,3075,42,2845,2848,3058,4,4677,4679,4678,2863,2866,3076,42,2846,2848,2845,4,4379,4680,4378,2864,2866,2863,42,2846,2847,2848,4,4379,4681,4680,2864,2865,2866,42,2848,2849,3059,4,4682,4683,4684,2866,2867,3077,42,2849,2988,3059,4,4683,4583,4684,2867,3006,3077,42,2849,2851,2988,4,4683,4582,4583,2867,2869,3006,42,3059,2988,3037,4,4685,4584,4642,3077,3006,3055,42,2988,2989,3037,4,4584,4586,4642,3006,3007,3055,42,3059,3037,3060,4,4685,4642,4686,3077,3055,3078,42,3037,3038,3060,4,4642,4643,4686,3055,3056,3078,42,3060,3038,3043,4,4686,4643,4648,3078,3056,3061,42,3045,3060,3043,4,4650,4686,4648,3063,3078,3061,42,3058,3060,3045,4,4687,4686,4650,3076,3078,3063,42,3058,3059,3060,4,4687,4685,4686,3076,3077,3078,42,3058,3045,3057,4,4688,4651,4673,3076,3063,3075,42,3057,3045,3046,4,4673,4651,4653,3075,3063,3064,42,2843,2844,3056,4,4374,4674,4676,2861,2862,3074,42,2842,2843,3056,4,4373,4374,4676,2860,2861,3074,42,2842,3056,3061,4,4689,4672,4690,2860,3074,3079,42,3061,3056,3062,4,4690,4672,4691,3079,3074,3080,42,3062,3056,3055,4,4691,4672,4670,3080,3074,3073,42,3062,3055,3054,4,4691,4670,4671,3080,3073,3072,42,3062,3054,3063,4,4691,4671,4692,3080,3072,3081,42,3054,3053,3063,4,4669,4667,4693,3072,3071,3081,42,3063,3053,3064,4,4693,4667,4694,3081,3071,3082,42,3064,3053,3052,4,4694,4667,4668,3082,3071,3070,42,3064,3052,3065,4,4694,4668,4695,3082,3070,3083,42,3065,3052,3066,4,4695,4668,4696,3083,3070,3084,42,3052,3067,3066,4,4666,4697,4698,3070,3085,3084,42,3052,3051,3067,4,4666,4665,4697,3070,3069,3085,42,3066,3067,3068,4,4698,4697,4699,3084,3085,3086,42,3066,3068,3069,4,4698,4699,4700,3084,3086,3087,42,3066,3069,3070,4,4698,4700,4701,3084,3087,3088,42,3070,3069,3071,4,4701,4700,4702,3088,3087,3089,42,3070,3071,3072,4,4701,4702,4703,3088,3089,3090,42,3072,3071,3073,4,4703,4702,4704,3090,3089,3091,42,3072,3073,3074,4,4703,4704,4705,3090,3091,3092,42,3074,3073,3075,4,4705,4704,4706,3092,3091,3093,42,3065,3066,3076,4,4695,4696,4707,3083,3084,3094,42,3076,3066,3077,4,4707,4696,4708,3094,3084,3095,42,3076,3077,3078,4,4707,4708,4709,3094,3095,3096,42,3078,3077,3079,4,4709,4708,4710,3096,3095,3097,42,3077,3080,3079,4,4708,4711,4710,3095,3098,3097,42,3079,3080,3081,4,4710,4711,4712,3097,3098,3099,42,3081,3080,3082,4,4712,4711,4713,3099,3098,3100,42,3083,3081,3082,4,4714,4712,4713,3101,3099,3100,42,3083,3084,3081,4,4714,4715,4712,3101,3102,3099,42,3078,3081,3084,4,4709,4712,4715,3096,3099,3102,42,3081,3078,3079,4,4712,4709,4710,3099,3096,3097,42,3076,3078,3085,4,4716,4717,4718,3094,3096,3103,42,3085,3078,3086,4,4718,4717,4719,3103,3096,3104,42,3086,3078,3087,4,4719,4717,4720,3104,3096,3105,42,3078,3088,3087,4,4721,4722,4723,3096,3106,3105,42,3087,3088,3089,4,4723,4722,4724,3105,3106,3107,42,3088,3090,3089,4,4722,4725,4724,3106,3108,3107,42,3089,3090,3091,4,4724,4725,4726,3107,3108,3109,42,3090,3092,3091,4,4725,4727,4726,3108,3110,3109,42,3091,3092,3093,4,4726,4727,4728,3109,3110,3111,42,3092,3094,3093,4,4727,4729,4728,3110,3112,3111,42,3089,3091,3095,4,4730,4731,4732,3107,3109,3113,42,3095,3091,3096,4,4732,4731,4733,3113,3109,3114,42,3091,3097,3096,4,4731,4734,4733,3109,3115,3114,42,3098,3095,3096,4,4735,4732,4733,3116,3113,3114,42,3099,3095,3098,4,4736,4732,4735,3117,3113,3116,42,3099,3100,3095,4,4736,4737,4732,3117,3118,3113,42,3099,3101,3100,4,4736,4738,4737,3117,3119,3118,42,3101,3099,3102,4,4738,4736,4739,3119,3117,3120,42,3102,3099,3103,4,4739,4736,4740,3120,3117,3121,42,3102,3103,3104,4,4739,4740,4741,3120,3121,3122,42,3105,3102,3104,4,4742,4739,4741,3123,3120,3122,42,3105,3106,3102,4,4742,4743,4739,3123,3124,3120,42,3106,3105,3107,4,4743,4742,4744,3124,3123,3125,42,3107,3105,3108,4,4744,4742,4745,3125,3123,3126,42,3105,3109,3108,4,4742,4746,4745,3123,3127,3126,42,3109,3105,3104,4,4746,4742,4741,3127,3123,3122,42,3108,3109,3110,4,4745,4746,4747,3126,3127,3128,42,3111,3106,3107,4,4748,4743,4744,3129,3124,3125,42,3111,3112,3106,4,4748,4749,4743,3129,3130,3124,42,3113,3112,3111,4,4750,4749,4748,3131,3130,3129,42,3114,3112,3113,4,4751,4749,4750,3132,3130,3131,42,3114,3115,3112,4,4751,4752,4749,3132,3133,3130,42,3114,3116,3115,4,4751,4753,4752,3132,3134,3133,42,3117,3116,3114,4,4754,4753,4751,3135,3134,3132,42,3117,3118,3116,4,4754,4755,4753,3135,3136,3134,42,3119,3118,3117,4,4756,4755,4754,3137,3136,3135,42,3119,3120,3118,4,4756,4757,4755,3137,3138,3136,42,3121,3120,3119,4,4758,4757,4756,3139,3138,3137,42,3121,3062,3120,4,4758,4691,4757,3139,3080,3138,42,3121,3061,3062,4,4758,4690,4691,3139,3079,3080,42,2841,3061,3121,4,4759,4690,4758,2859,3079,3139,42,2841,2842,3061,4,4759,4689,4690,2859,2860,3079,42,2841,3121,2840,4,4759,4758,4760,2859,3139,2858,42,3121,3119,2840,4,4758,4756,4760,3139,3137,2858,42,2840,3119,3117,4,4760,4756,4754,2858,3137,3135,42,2840,3117,3122,4,4760,4754,4761,2858,3135,3140,42,3122,3117,3114,4,4761,4754,4751,3140,3135,3132,42,3122,3114,3113,4,4761,4751,4750,3140,3132,3131,42,3120,3062,3123,4,4757,4691,4762,3138,3080,3141,42,3123,3062,3063,4,4762,4691,4692,3141,3080,3081,42,3063,3065,3123,4,4693,4695,4763,3081,3083,3141,42,3063,3064,3065,4,4693,4694,4695,3081,3082,3083,42,3076,3123,3065,4,4707,4763,4695,3094,3141,3083,42,3123,3076,3118,4,4762,4716,4755,3141,3094,3136,42,3118,3076,3085,4,4755,4716,4718,3136,3094,3103,42,3124,3118,3085,4,4764,4755,4718,3142,3136,3103,42,3116,3118,3124,4,4753,4755,4764,3134,3136,3142,42,3115,3116,3124,4,4752,4753,4764,3133,3134,3142,42,3115,3124,3125,4,4752,4764,4765,3133,3142,3143,42,3125,3124,3085,4,4765,4764,4718,3143,3142,3103,42,3125,3085,3086,4,4765,4718,4719,3143,3103,3104,42,3101,3125,3086,4,4738,4765,4719,3119,3143,3104,42,3125,3101,3126,4,4765,4738,4766,3143,3119,3144,42,3126,3101,3102,4,4766,4738,4739,3144,3119,3120,42,3106,3126,3102,4,4743,4766,4739,3124,3144,3120,42,3106,3112,3126,4,4743,4749,4766,3124,3130,3144,42,3112,3115,3126,4,4749,4752,4766,3130,3133,3144,42,3126,3115,3125,4,4766,4752,4765,3144,3133,3143,42,3101,3086,3100,4,4738,4719,4737,3119,3104,3118,42,3086,3087,3100,4,4719,4720,4737,3104,3105,3118,42,3087,3089,3100,4,4720,4730,4737,3105,3107,3118,42,3100,3089,3095,4,4737,4730,4732,3118,3107,3113,42,3120,3123,3118,4,4757,4762,4755,3138,3141,3136,42,3019,3020,3030,4,4624,4625,4635,3037,3038,3048,42,2975,2957,2973,4,4564,4541,4562,2993,2975,2991,42,2973,2957,2958,4,4562,4541,4542,2991,2975,2976,42,2958,2968,2973,4,4554,4555,4560,2976,2986,2991,42,2969,2967,2966,4,4556,4553,4552,2987,2985,2984,42,2933,3127,2934,4,4506,4767,4504,2951,3145,2952,42,2906,2904,3128,4,4768,4769,4770,2924,2922,3146,42,3128,2904,3129,4,4770,4769,4771,3146,2922,3147,42,2904,2902,3129,4,4769,4460,4771,2922,2920,3147,42,3129,2902,2901,4,4771,4460,4459,3147,2920,2919,42,2899,2901,2900,4,4772,4459,4458,2917,2919,2918,42,3130,2901,2899,4,4773,4459,4772,3148,2919,2917,42,3131,3130,2899,4,4774,4773,4772,3149,3148,2917,42,3132,3131,2899,4,4775,4774,4772,3150,3149,2917,42,2899,2898,3132,4,4456,4455,4776,2917,2916,3150,42,2836,2872,2834,4,4364,4418,4363,2854,2890,2852,42,2834,2872,2871,4,4363,4418,4420,2852,2890,2889,42,2834,2871,2868,4,4361,4417,4414,2852,2889,2886,42,2834,2868,2833,4,4361,4414,4360,2852,2886,2851,42,2833,2868,2867,4,4359,4410,4412,2851,2886,2885,42,2833,2867,2832,4,4359,4412,4358,2851,2885,2850,42,2832,2867,2864,4,4777,4409,4404,2850,2885,2882,42,2832,2864,3133,4,4777,4404,4778,2850,2882,3151,42,3133,2864,2862,4,4778,4404,4406,3151,2882,2880,42,3133,2862,2861,4,4779,4400,4402,3151,2880,2879,42,3133,2861,3134,4,4779,4402,4780,3151,2879,3152,42,3134,2861,2854,4,4781,4399,4392,3152,2879,2872,42,2854,2861,2857,4,4392,4399,4395,2872,2879,2875,42,2852,3134,2854,4,4390,4781,4392,2870,3152,2872,42,3134,2852,2830,4,4781,4390,4782,3152,2870,2848,42,2830,2852,2829,4,4782,4390,4783,2848,2870,2847,42,2852,2850,2829,4,4390,4388,4783,2870,2868,2847,42,2828,2829,2850,4,4385,4783,4388,2846,2847,2868,42,2831,3134,2830,4,4356,4780,4355,2849,3152,2848,42,2831,3133,3134,4,4356,4779,4780,2849,3151,3152,42,2832,3133,2831,4,4777,4778,4784,2850,3151,2849,42,2848,3059,3058,5,4785,4786,4787,2866,3077,3076,42,3135,3136,3137,4,4788,4789,4790,3153,3154,3155,42,3135,3138,3136,4,4788,4791,4789,3153,3156,3154,42,3137,3136,3139,4,4790,4789,4792,3155,3154,3157,42,3140,3141,3142,4,4793,4794,4795,3158,3159,3160,42,3140,3143,3141,4,4793,4796,4794,3158,3161,3159,42,3143,3140,3144,4,4796,4793,4797,3161,3158,3162,42,3144,3145,3143,4,4797,4798,4796,3162,3163,3161,42,3144,3146,3145,4,4797,4799,4798,3162,3164,3163,42,3147,3146,3144,4,4800,4799,4797,3165,3164,3162,42,3147,3144,3148,4,4800,4797,4801,3165,3162,3166,42,3144,3140,3148,4,4797,4793,4801,3162,3158,3166,42,3148,3140,3149,4,4801,4793,4802,3166,3158,3167,42,3140,3142,3149,4,4793,4795,4802,3158,3160,3167,42,3149,3142,3150,4,4802,4795,4803,3167,3160,3168,42,3142,3151,3150,4,4795,4804,4803,3160,3169,3168,42,3142,3152,3151,4,4795,4805,4804,3160,3170,3169,42,3142,3141,3152,4,4795,4794,4805,3160,3159,3170,42,3152,3153,3151,4,4805,4806,4804,3170,3171,3169,42,3151,3153,3154,4,4804,4806,4807,3169,3171,3172,42,3153,3155,3154,4,4806,4808,4807,3171,3173,3172,42,3154,3155,3156,4,4807,4808,4809,3172,3173,3174,42,3157,3156,3155,4,4810,4809,4808,3175,3174,3173,42,3157,3158,3156,4,4810,4811,4809,3175,3176,3174,42,3157,3159,3158,4,4810,4812,4811,3175,3177,3176,42,3160,3159,3157,4,4813,4812,4810,3178,3177,3175,42,3159,3161,3158,4,4812,4814,4811,3177,3179,3176,42,3161,3159,3162,4,4814,4812,4815,3179,3177,3180,42,3156,3158,3161,4,4809,4811,4814,3174,3176,3179,42,3156,3161,3163,4,4809,4814,4816,3174,3179,3181,42,3154,3156,3163,4,4807,4809,4816,3172,3174,3181,42,3151,3154,3164,4,4804,4807,4817,3169,3172,3182,42,3164,3154,3165,4,4817,4807,4818,3182,3172,3183,42,3154,3166,3165,4,4807,4819,4818,3172,3184,3183,42,3165,3166,3167,4,4818,4819,4820,3183,3184,3185,42,3168,3167,3166,4,4821,4820,4819,3186,3185,3184,42,3168,3169,3167,4,4821,4822,4820,3186,3187,3185,42,3170,3169,3168,4,4823,4822,4821,3188,3187,3186,42,3170,3171,3169,4,4823,4824,4822,3188,3189,3187,42,3171,3172,3169,4,4824,4825,4822,3189,3190,3187,42,3172,3173,3169,4,4825,4826,4822,3190,3191,3187,42,3169,3173,3167,4,4822,4826,4820,3187,3191,3185,42,3173,3174,3167,4,4826,4827,4820,3191,3192,3185,42,3173,3175,3174,4,4826,4828,4827,3191,3193,3192,42,3173,3176,3175,4,4826,4829,4828,3191,3194,3193,42,3177,3176,3173,4,4830,4829,4826,3195,3194,3191,42,3176,3178,3175,4,4829,4831,4828,3194,3196,3193,42,3175,3178,3179,4,4828,4831,4832,3193,3196,3197,42,3180,3175,3179,4,4833,4828,4832,3198,3193,3197,42,3174,3175,3180,4,4827,4828,4833,3192,3193,3198,42,3181,3174,3180,4,4834,4827,4833,3199,3192,3198,42,3165,3174,3181,4,4818,4827,4834,3183,3192,3199,42,3165,3167,3174,4,4818,4820,4827,3183,3185,3192,42,3182,3165,3181,4,4835,4818,4834,3200,3183,3199,42,3164,3165,3182,4,4817,4818,4835,3182,3183,3200,42,3183,3164,3182,4,4836,4817,4835,3201,3182,3200,42,3150,3164,3183,4,4803,4817,4836,3168,3182,3201,42,3150,3151,3164,4,4803,4804,4817,3168,3169,3182,42,3184,3150,3183,4,4837,4803,4836,3202,3168,3201,42,3149,3150,3184,4,4802,4803,4837,3167,3168,3202,42,3185,3149,3184,4,4838,4802,4837,3203,3167,3202,42,3148,3149,3185,4,4801,4802,4838,3166,3167,3203,42,3186,3148,3185,4,4839,4801,4838,3204,3166,3203,42,3147,3148,3186,4,4800,4801,4839,3165,3166,3204,42,3185,3187,3186,4,4840,4841,4842,3203,3205,3204,42,3185,3188,3187,4,4840,4843,4841,3203,3206,3205,42,3185,3184,3188,4,4840,4844,4843,3203,3202,3206,42,3188,3184,3189,4,4843,4844,4845,3206,3202,3207,42,3184,3183,3189,4,4844,4846,4845,3202,3201,3207,42,3189,3183,3190,4,4845,4846,4847,3207,3201,3208,42,3190,3183,3182,4,4847,4846,4848,3208,3201,3200,42,3190,3182,3191,4,4847,4848,4849,3208,3200,3209,42,3182,3181,3191,4,4848,4850,4849,3200,3199,3209,42,3191,3181,3192,4,4849,4850,4851,3209,3199,3210,42,3192,3181,3193,4,4851,4850,4852,3210,3199,3211,42,3181,3194,3193,4,4850,4853,4852,3199,3212,3211,42,3181,3180,3194,4,4850,4854,4853,3199,3198,3212,42,3180,3195,3194,4,4854,4855,4853,3198,3213,3212,42,3180,3179,3195,4,4854,4856,4855,3198,3197,3213,42,3179,3196,3195,4,4856,4857,4855,3197,3214,3213,42,3196,3197,3195,4,4857,4858,4855,3214,3215,3213,42,3195,3197,3198,4,4855,4858,4859,3213,3215,3216,42,3195,3198,3199,4,4855,4859,4860,3213,3216,3217,42,3194,3195,3199,4,4853,4855,4860,3212,3213,3217,42,3194,3199,3200,4,4853,4860,4861,3212,3217,3218,42,3193,3194,3200,4,4852,4853,4861,3211,3212,3218,42,3193,3200,3201,4,4852,4861,4862,3211,3218,3219,42,3201,3200,3202,4,4862,4861,4863,3219,3218,3220,42,3203,3201,3202,4,4864,4862,4863,3221,3219,3220,42,3201,3203,3204,4,4862,4864,4865,3219,3221,3222,42,3203,3205,3204,4,4864,4866,4865,3221,3223,3222,42,3203,3206,3205,4,4864,4867,4866,3221,3224,3223,42,3207,3206,3203,4,4868,4867,4864,3225,3224,3221,42,3207,3203,3202,4,4868,4864,4863,3225,3221,3220,42,3201,3204,3208,4,4862,4865,4869,3219,3222,3226,42,3192,3201,3208,4,4851,4862,4869,3210,3219,3226,42,3192,3193,3201,4,4851,4852,4862,3210,3211,3219,42,3146,3209,3145,4,4799,4870,4798,3164,3227,3163,42,3210,3211,3212,4,4871,4872,4873,3228,3229,3230,42,3211,3213,3212,4,4872,4874,4873,3229,3231,3230,42,3212,3213,3214,4,4873,4874,4875,3230,3231,3232,42,3213,3215,3214,4,4874,4876,4875,3231,3233,3232,42,3213,3216,3215,4,4874,4877,4876,3231,3234,3233,42,3210,3212,3217,4,4871,4873,4878,3228,3230,3235,42,3217,3212,3218,4,4878,4873,4879,3235,3230,3236,42,3212,3219,3218,4,4873,4880,4879,3230,3237,3236,42,3218,3219,3220,4,4879,4880,4881,3236,3237,3238,42,3219,3221,3220,4,4880,4882,4881,3237,3239,3238,42,3222,3221,3219,4,4883,4882,4880,3240,3239,3237,42,3217,3218,3223,4,4878,4879,4884,3235,3236,3241,42,3223,3218,3224,4,4884,4879,4885,3241,3236,3242,42,3224,3218,3225,4,4885,4879,4886,3242,3236,3243,42,3218,3226,3225,4,4879,4887,4886,3236,3244,3243,42,3226,3227,3225,4,4887,4888,4886,3244,3245,3243,42,3228,3227,3226,4,4889,4888,4887,3246,3245,3244,42,3228,3229,3227,4,4889,4890,4888,3246,3247,3245,42,3224,3225,3230,4,4885,4886,4891,3242,3243,3248,42,3230,3225,3231,4,4891,4886,4892,3248,3243,3249,42,3225,3232,3231,4,4886,4893,4892,3243,3250,3249,42,3225,3233,3232,4,4886,4894,4893,3243,3251,3250,42,3233,3234,3232,4,4894,4895,4893,3251,3252,3250,42,3235,3234,3233,4,4896,4895,4894,3253,3252,3251,42,3230,3231,3236,4,4891,4892,4897,3248,3249,3254,42,3236,3231,3237,4,4897,4892,4898,3254,3249,3255,42,3237,3231,3238,4,4898,4892,4899,3255,3249,3256,42,3231,3239,3238,4,4892,4900,4899,3249,3257,3256,42,3239,3240,3238,4,4900,4901,4899,3257,3258,3256,42,3239,3241,3240,4,4900,4902,4901,3257,3259,3258,42,3237,3242,3236,4,4898,4903,4897,3255,3260,3254,42,3242,3237,3243,4,4903,4898,4904,3260,3255,3261,42,3237,3244,3243,4,4898,4905,4904,3255,3262,3261,42,3244,3237,3245,4,4905,4898,4906,3262,3255,3263,42,3246,3244,3245,4,4907,4905,4906,3264,3262,3263,42,3245,3247,3246,4,4906,4908,4907,3263,3265,3264,42,3248,3236,3242,4,4909,4897,4903,3266,3254,3260,42,3236,3248,3249,4,4897,4909,4910,3254,3266,3267,42,3250,3249,3248,4,4911,4910,4909,3268,3267,3266,42,3250,3251,3249,4,4911,4912,4910,3268,3269,3267,42,3252,3251,3250,4,4913,4912,4911,3270,3269,3268,42,3252,3253,3251,4,4913,4914,4912,3270,3271,3269,42,3253,3254,3251,4,4914,4915,4912,3271,3272,3269,42,3253,3255,3254,4,4914,4916,4915,3271,3273,3272,42,3255,3256,3254,4,4916,4917,4915,3273,3274,3272,42,3257,3256,3255,4,4918,4917,4916,3275,3274,3273,42,3257,3258,3256,4,4918,4919,4917,3275,3276,3274,42,3259,3258,3257,4,4920,4919,4918,3277,3276,3275,42,3259,3260,3258,4,4920,4921,4919,3277,3278,3276,42,3261,3260,3259,4,4922,4921,4920,3279,3278,3277,42,3262,3260,3261,4,4923,4921,4922,3280,3278,3279,42,3262,3263,3260,4,4923,4924,4921,3280,3281,3278,42,3260,3263,3264,4,4921,4924,4925,3278,3281,3282,42,3263,3210,3264,4,4924,4871,4925,3281,3228,3282,42,3264,3210,3217,4,4925,4871,4878,3282,3228,3235,42,3264,3217,3265,4,4925,4878,4926,3282,3235,3283,42,3265,3217,3223,4,4926,4878,4884,3283,3235,3241,42,3265,3223,3266,4,4926,4884,4927,3283,3241,3284,42,3266,3223,3224,4,4927,4884,4885,3284,3241,3242,42,3266,3224,3267,4,4927,4885,4928,3284,3242,3285,42,3267,3224,3230,4,4928,4885,4891,3285,3242,3248,42,3249,3267,3230,4,4910,4928,4891,3267,3285,3248,42,3251,3267,3249,4,4912,4928,4910,3269,3285,3267,42,3251,3254,3267,4,4912,4915,4928,3269,3272,3285,42,3254,3266,3267,4,4915,4927,4928,3272,3284,3285,42,3254,3256,3266,4,4915,4917,4927,3272,3274,3284,42,3256,3265,3266,4,4917,4926,4927,3274,3283,3284,42,3258,3265,3256,4,4919,4926,4917,3276,3283,3274,42,3258,3264,3265,4,4919,4925,4926,3276,3282,3283,42,3260,3264,3258,4,4921,4925,4919,3278,3282,3276,42,3249,3230,3236,4,4910,4891,4897,3267,3248,3254,42,3268,3262,3261,4,4929,4923,4922,3286,3280,3279,42,3269,3270,3271,4,4930,4931,4932,3287,3288,3289,42,3269,3272,3270,4,4930,4933,4931,3287,3290,3288,42,3269,3271,3273,4,4930,4932,4934,3287,3289,3291]

}
;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Larry Battle / http://bateru.com/news
 * @author bhouston / http://exocortex.com
 */


var THREE = { REVISION: '65' };

self.console = self.console || {

	info: function () {},
	log: function () {},
	debug: function () {},
	warn: function () {},
	error: function () {}

};

String.prototype.trim = String.prototype.trim || function () {

	return this.replace( /^\s+|\s+$/g, '' );

};

// based on https://github.com/documentcloud/underscore/blob/bf657be243a075b5e72acc8a83e6f12a564d8f55/underscore.js#L767
THREE.extend = function ( obj, source ) {

	// ECMAScript5 compatibility based on: http://www.nczonline.net/blog/2012/12/11/are-your-mixins-ecmascript-5-compatible/
	if ( Object.keys ) {

		var keys = Object.keys( source );

		for (var i = 0, il = keys.length; i < il; i++) {

			var prop = keys[i];
			Object.defineProperty( obj, prop, Object.getOwnPropertyDescriptor( source, prop ) );

		}

	} else {

		var safeHasOwnProperty = {}.hasOwnProperty;

		for ( var prop in source ) {

			if ( safeHasOwnProperty.call( source, prop ) ) {

				obj[prop] = source[prop];

			}

		}

	}

	return obj;

};

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik Möller
// fixes from Paul Irish and Tino Zijdel
// using 'self' instead of 'window' for compatibility with both NodeJS and IE10.
( function () {

	var lastTime = 0;
	var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

	for ( var x = 0; x < vendors.length && !self.requestAnimationFrame; ++ x ) {

		self.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];
		self.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];

	}

	if ( self.requestAnimationFrame === undefined && self['setTimeout'] !== undefined ) {

		self.requestAnimationFrame = function ( callback ) {

			var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
			var id = self.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );
			lastTime = currTime + timeToCall;
			return id;

		};

	}

	if( self.cancelAnimationFrame === undefined && self['clearTimeout'] !== undefined ) {

		self.cancelAnimationFrame = function ( id ) { self.clearTimeout( id ) };

	}

}() );

// GL STATE CONSTANTS

THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;

THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;

// SHADOWING TYPES

THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;

// MATERIAL CONSTANTS

// side

THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;

// shading

THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;

// colors

THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;

// blending modes

THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;

// custom blending equations
// (numbers start from 100 not to clash with other
//  mappings to OpenGL constants defined in Texture.js)

THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;

// custom blending destination factors

THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;

// custom blending source factors

//THREE.ZeroFactor = 200;
//THREE.OneFactor = 201;
//THREE.SrcAlphaFactor = 204;
//THREE.OneMinusSrcAlphaFactor = 205;
//THREE.DstAlphaFactor = 206;
//THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;


// TEXTURE CONSTANTS

THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;

// Mapping modes

THREE.UVMapping = function () {};

THREE.CubeReflectionMapping = function () {};
THREE.CubeRefractionMapping = function () {};

THREE.SphericalReflectionMapping = function () {};
THREE.SphericalRefractionMapping = function () {};

// Wrapping modes

THREE.RepeatWrapping = 1000;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;

// Filters

THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;

// Data types

THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;

// Pixel types

//THREE.UnsignedByteType = 1009;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;

// Pixel formats

THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;

// Compressed texture formats

THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;

/*
// Potential future PVRTC compressed texture formats
THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
*/

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Color = function ( value ) {

	if ( value !== undefined ) this.set( value );

	return this;

};

THREE.Color.prototype = {

	constructor: THREE.Color,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value instanceof THREE.Color ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function ( h, s, l ) {

		// h,s,l ranges are in 0.0 - 1.0

		if ( s === 0 ) {

			this.r = this.g = this.b = l;

		} else {

			var hue2rgb = function ( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			};

			var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
			var q = ( 2 * l ) - p;

			this.r = hue2rgb( q, p, h + 1 / 3 );
			this.g = hue2rgb( q, p, h );
			this.b = hue2rgb( q, p, h - 1 / 3 );

		}

		return this;

	},

	setStyle: function ( style ) {

		// rgb(255,0,0)

		if ( /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test( style ) ) {

			var color = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec( style );

			this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
			this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
			this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

			return this;

		}

		// rgb(100%,0%,0%)

		if ( /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test( style ) ) {

			var color = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec( style );

			this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
			this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
			this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

			return this;

		}

		// #ff0000

		if ( /^\#([0-9a-f]{6})$/i.test( style ) ) {

			var color = /^\#([0-9a-f]{6})$/i.exec( style );

			this.setHex( parseInt( color[ 1 ], 16 ) );

			return this;

		}

		// #f00

		if ( /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {

			var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );

			this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );

			return this;

		}

		// red

		if ( /^(\w+)$/i.test( style ) ) {

			this.setHex( THREE.ColorKeywords[ style ] );

			return this;

		}


	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color ) {

		this.r = color.r * color.r;
		this.g = color.g * color.g;
		this.b = color.b * color.b;

		return this;

	},

	copyLinearToGamma: function ( color ) {

		this.r = Math.sqrt( color.r );
		this.g = Math.sqrt( color.g );
		this.b = Math.sqrt( color.b );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array ) {

		this.r = array[ 0 ];
		this.g = array[ 1 ];
		this.b = array[ 2 ];

		return this;

	},

	toArray: function () {

		return [ this.r, this.g, this.b ];

	},

	clone: function () {

		return new THREE.Color().setRGB( this.r, this.g, this.b );

	}

};

THREE.ColorKeywords = { "aliceblue": 0xF0F8FF, "antiquewhite": 0xFAEBD7, "aqua": 0x00FFFF, "aquamarine": 0x7FFFD4, "azure": 0xF0FFFF,
"beige": 0xF5F5DC, "bisque": 0xFFE4C4, "black": 0x000000, "blanchedalmond": 0xFFEBCD, "blue": 0x0000FF, "blueviolet": 0x8A2BE2,
"brown": 0xA52A2A, "burlywood": 0xDEB887, "cadetblue": 0x5F9EA0, "chartreuse": 0x7FFF00, "chocolate": 0xD2691E, "coral": 0xFF7F50,
"cornflowerblue": 0x6495ED, "cornsilk": 0xFFF8DC, "crimson": 0xDC143C, "cyan": 0x00FFFF, "darkblue": 0x00008B, "darkcyan": 0x008B8B,
"darkgoldenrod": 0xB8860B, "darkgray": 0xA9A9A9, "darkgreen": 0x006400, "darkgrey": 0xA9A9A9, "darkkhaki": 0xBDB76B, "darkmagenta": 0x8B008B,
"darkolivegreen": 0x556B2F, "darkorange": 0xFF8C00, "darkorchid": 0x9932CC, "darkred": 0x8B0000, "darksalmon": 0xE9967A, "darkseagreen": 0x8FBC8F,
"darkslateblue": 0x483D8B, "darkslategray": 0x2F4F4F, "darkslategrey": 0x2F4F4F, "darkturquoise": 0x00CED1, "darkviolet": 0x9400D3,
"deeppink": 0xFF1493, "deepskyblue": 0x00BFFF, "dimgray": 0x696969, "dimgrey": 0x696969, "dodgerblue": 0x1E90FF, "firebrick": 0xB22222,
"floralwhite": 0xFFFAF0, "forestgreen": 0x228B22, "fuchsia": 0xFF00FF, "gainsboro": 0xDCDCDC, "ghostwhite": 0xF8F8FF, "gold": 0xFFD700,
"goldenrod": 0xDAA520, "gray": 0x808080, "green": 0x008000, "greenyellow": 0xADFF2F, "grey": 0x808080, "honeydew": 0xF0FFF0, "hotpink": 0xFF69B4,
"indianred": 0xCD5C5C, "indigo": 0x4B0082, "ivory": 0xFFFFF0, "khaki": 0xF0E68C, "lavender": 0xE6E6FA, "lavenderblush": 0xFFF0F5, "lawngreen": 0x7CFC00,
"lemonchiffon": 0xFFFACD, "lightblue": 0xADD8E6, "lightcoral": 0xF08080, "lightcyan": 0xE0FFFF, "lightgoldenrodyellow": 0xFAFAD2, "lightgray": 0xD3D3D3,
"lightgreen": 0x90EE90, "lightgrey": 0xD3D3D3, "lightpink": 0xFFB6C1, "lightsalmon": 0xFFA07A, "lightseagreen": 0x20B2AA, "lightskyblue": 0x87CEFA,
"lightslategray": 0x778899, "lightslategrey": 0x778899, "lightsteelblue": 0xB0C4DE, "lightyellow": 0xFFFFE0, "lime": 0x00FF00, "limegreen": 0x32CD32,
"linen": 0xFAF0E6, "magenta": 0xFF00FF, "maroon": 0x800000, "mediumaquamarine": 0x66CDAA, "mediumblue": 0x0000CD, "mediumorchid": 0xBA55D3,
"mediumpurple": 0x9370DB, "mediumseagreen": 0x3CB371, "mediumslateblue": 0x7B68EE, "mediumspringgreen": 0x00FA9A, "mediumturquoise": 0x48D1CC,
"mediumvioletred": 0xC71585, "midnightblue": 0x191970, "mintcream": 0xF5FFFA, "mistyrose": 0xFFE4E1, "moccasin": 0xFFE4B5, "navajowhite": 0xFFDEAD,
"navy": 0x000080, "oldlace": 0xFDF5E6, "olive": 0x808000, "olivedrab": 0x6B8E23, "orange": 0xFFA500, "orangered": 0xFF4500, "orchid": 0xDA70D6,
"palegoldenrod": 0xEEE8AA, "palegreen": 0x98FB98, "paleturquoise": 0xAFEEEE, "palevioletred": 0xDB7093, "papayawhip": 0xFFEFD5, "peachpuff": 0xFFDAB9,
"peru": 0xCD853F, "pink": 0xFFC0CB, "plum": 0xDDA0DD, "powderblue": 0xB0E0E6, "purple": 0x800080, "red": 0xFF0000, "rosybrown": 0xBC8F8F,
"royalblue": 0x4169E1, "saddlebrown": 0x8B4513, "salmon": 0xFA8072, "sandybrown": 0xF4A460, "seagreen": 0x2E8B57, "seashell": 0xFFF5EE,
"sienna": 0xA0522D, "silver": 0xC0C0C0, "skyblue": 0x87CEEB, "slateblue": 0x6A5ACD, "slategray": 0x708090, "slategrey": 0x708090, "snow": 0xFFFAFA,
"springgreen": 0x00FF7F, "steelblue": 0x4682B4, "tan": 0xD2B48C, "teal": 0x008080, "thistle": 0xD8BFD8, "tomato": 0xFF6347, "turquoise": 0x40E0D0,
"violet": 0xEE82EE, "wheat": 0xF5DEB3, "white": 0xFFFFFF, "whitesmoke": 0xF5F5F5, "yellow": 0xFFFF00, "yellowgreen": 0x9ACD32 };

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Quaternion = function ( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

};

THREE.Quaternion.prototype = {

	constructor: THREE.Quaternion,

	_x: 0,_y: 0, _z: 0, _w: 0,

	_euler: undefined,

	_updateEuler: function ( callback ) {

		if ( this._euler !== undefined ) {

			this._euler.setFromQuaternion( this, undefined, false );

		}

	},

	get x () {

		return this._x;

	},

	set x ( value ) {

		this._x = value;
		this._updateEuler();

	},

	get y () {

		return this._y;

	},

	set y ( value ) {

		this._y = value;
		this._updateEuler();

	},

	get z () {

		return this._z;

	},

	set z ( value ) {

		this._z = value;
		this._updateEuler();

	},

	get w () {

		return this._w;

	},

	set w ( value ) {

		this._w = value;
		this._updateEuler();

	},

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._updateEuler();

		return this;

	},

	copy: function ( quaternion ) {

		this._x = quaternion._x;
		this._y = quaternion._y;
		this._z = quaternion._z;
		this._w = quaternion._w;

		this._updateEuler();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( euler instanceof THREE.Euler === false ) {

			throw new Error( 'ERROR: Quaternion\'s .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );
		}

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var c1 = Math.cos( euler._x / 2 );
		var c2 = Math.cos( euler._y / 2 );
		var c3 = Math.cos( euler._z / 2 );
		var s1 = Math.sin( euler._x / 2 );
		var s2 = Math.sin( euler._y / 2 );
		var s3 = Math.sin( euler._z / 2 );

		if ( euler.order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( euler.order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( euler.order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this._updateEuler();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
		// axis have to be normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._updateEuler();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = (m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = (m12 + m21 ) / s;
			this._z = (m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = (m13 - m31 ) / s;
			this._x = (m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = (m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._updateEuler();

		return this;

	},

	inverse: function () {

		this.conjugate().normalize();

		return this;

	},

	conjugate: function () {

		this._x *= -1;
		this._y *= -1;
		this._z *= -1;

		this._updateEuler();

		return this;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'DEPRECATED: Quaternion\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._updateEuler();

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'DEPRECATED: Quaternion\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	},

	slerp: function ( qb, t ) {

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = -qb._w;
			this._x = -qb._x;
			this._y = -qb._y;
			this._z = -qb._z;

			cosHalfTheta = -cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var halfTheta = Math.acos( cosHalfTheta );
		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
		ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._updateEuler();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		this._w = array[ 3 ];

		this._updateEuler();

		return this;

	},

	toArray: function () {

		return [ this._x, this._y, this._z, this._w ];

	},

	clone: function () {

		return new THREE.Quaternion( this._x, this._y, this._z, this._w );

	}

};

THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {

	return qm.copy( qa ).slerp( qb, t );

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.Vector2 = function ( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

};

THREE.Vector2.prototype = {

	constructor: THREE.Vector2,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},


	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector2\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector2\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.x *= s;
		this.y *= s;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;

		}

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		return this;

	},

	negate: function() {

		return this.multiplyScalar( - 1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	equals: function( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array ) {

		this.x = array[ 0 ];
		this.y = array[ 1 ];

		return this;

	},

	toArray: function () {

		return [ this.x, this.y ];

	},

	clone: function () {

		return new THREE.Vector2( this.x, this.y );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author *kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector3 = function ( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

};

THREE.Vector3.prototype = {

	constructor: THREE.Vector3,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector3\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector3\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector3\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyMatrix3: function ( m ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;

		var e = m.elements;

		this.x = e[0] * x + e[3] * y + e[6] * z;
		this.y = e[1] * x + e[4] * y + e[7] * z;
		this.z = e[2] * x + e[5] * y + e[8] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		// input: THREE.Matrix4 affine matrix

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;

		this.x = e[0] * x + e[4] * y + e[8]  * z + e[12];
		this.y = e[1] * x + e[5] * y + e[9]  * z + e[13];
		this.z = e[2] * x + e[6] * y + e[10] * z + e[14];

		return this;

	},

	applyProjection: function ( m ) {

		// input: THREE.Matrix4 projection matrix

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;
		var d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide

		this.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;
		this.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;
		this.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;

		var qx = q.x;
		var qy = q.y;
		var qz = q.z;
		var qw = q.w;

		// calculate quat * vector

		var ix =  qw * x + qy * z - qz * y;
		var iy =  qw * y + qz * x - qx * z;
		var iz =  qw * z + qx * y - qy * x;
		var iw = -qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
		this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
		this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

		return this;

	},

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;

		this.x = e[0] * x + e[4] * y + e[8]  * z;
		this.y = e[1] * x + e[5] * y + e[9]  * z;
		this.z = e[2] * x + e[6] * y + e[10] * z;

		this.normalize();

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;
			this.z *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;

		}

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		return this;

	},

	negate: function () {

		return this.multiplyScalar( - 1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength  ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector3\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		var x = this.x, y = this.y, z = this.z;

		this.x = y * v.z - z * v.y;
		this.y = z * v.x - x * v.z;
		this.z = x * v.y - y * v.x;

		return this;

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( this.length() * v.length() );

		// clamp, to handle numerical problems

		return Math.acos( THREE.Math.clamp( theta, -1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x;
		var dy = this.y - v.y;
		var dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	setEulerFromRotationMatrix: function ( m, order ) {

		console.error( "REMOVED: Vector3\'s setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.");

	},

	setEulerFromQuaternion: function ( q, order ) {

		console.error( "REMOVED: Vector3\'s setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.");

	},

	getPositionFromMatrix: function ( m ) {

		console.warn( "DEPRECATED: Vector3\'s .getPositionFromMatrix() has been renamed to .setFromMatrixPosition(). Please update your code." );

		return this.setFromMatrixPosition( m );

	},

	getScaleFromMatrix: function ( m ) {

		console.warn( "DEPRECATED: Vector3\'s .getScaleFromMatrix() has been renamed to .setFromMatrixScale(). Please update your code." );

		return this.setFromMatrixScale( m );
	},

	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( "DEPRECATED: Vector3\'s .getColumnFromMatrix() has been renamed to .setFromMatrixColumn(). Please update your code." );

		return this.setFromMatrixColumn( index, matrix );

	},

	setFromMatrixPosition: function ( m ) {

		this.x = m.elements[ 12 ];
		this.y = m.elements[ 13 ];
		this.z = m.elements[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();
		var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();
		var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;
	},

	setFromMatrixColumn: function ( index, matrix ) {

		var offset = index * 4;

		var me = matrix.elements;

		this.x = me[ offset ];
		this.y = me[ offset + 1 ];
		this.z = me[ offset + 2 ];

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array ) {

		this.x = array[ 0 ];
		this.y = array[ 1 ];
		this.z = array[ 2 ];

		return this;

	},

	toArray: function () {

		return [ this.x, this.y, this.z ];

	},

	clone: function () {

		return new THREE.Vector3( this.x, this.y, this.z );

	}

};

THREE.extend( THREE.Vector3.prototype, {

	applyEuler: function () {

		var quaternion = new THREE.Quaternion();

		return function ( euler ) {

			if ( euler instanceof THREE.Euler === false ) {

				console.error( 'ERROR: Vector3\'s .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );

			}

			this.applyQuaternion( quaternion.setFromEuler( euler ) );

			return this;

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new THREE.Quaternion();

		return function ( axis, angle ) {

			this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			return this;

		};

	}(),

	projectOnVector: function () {

		var v1 = new THREE.Vector3();

		return function ( vector ) {

			v1.copy( vector ).normalize();
			var d = this.dot( v1 );
			return this.copy( v1 ).multiplyScalar( d );

		};

	}(),

	projectOnPlane: function () {

		var v1 = new THREE.Vector3();

		return function ( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		}

	}(),

	reflect: function () {

		var v1 = new THREE.Vector3();

		return function ( vector ) {

		    v1.copy( this ).projectOnVector( vector ).multiplyScalar( 2 );

		    return this.subVectors( v1, this );

		}

	}()

} );

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector4 = function ( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

};

THREE.Vector4.prototype = {

	constructor: THREE.Vector4,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( "index is out of range: " + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector4\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'DEPRECATED: Vector4\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;

		var e = m.elements;

		this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
		this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
		this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
		this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;
			this.z *= invScalar;
			this.w *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 1;

		}

		return this;

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			 this.x = 1;
			 this.y = 0;
			 this.z = 0;

		} else {

			 this.x = q.x / s;
			 this.y = q.y / s;
			 this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10];

		if ( ( Math.abs( m12 - m21 ) < epsilon )
		  && ( Math.abs( m13 - m31 ) < epsilon )
		  && ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 )
			  && ( Math.abs( m13 + m31 ) < epsilon2 )
			  && ( Math.abs( m23 + m32 ) < epsilon2 )
			  && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) { // m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else { // m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
						 + ( m13 - m31 ) * ( m13 - m31 )
						 + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		if ( this.w > v.w ) {

			this.w = v.w;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		if ( this.w < v.w ) {

			this.w = v.w;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		if ( this.w < min.w ) {

			this.w = min.w;

		} else if ( this.w > max.w ) {

			this.w = max.w;

		}

		return this;

	},

	negate: function() {

		return this.multiplyScalar( -1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength ) {

			this.multiplyScalar( l / oldLength );

		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array ) {

		this.x = array[ 0 ];
		this.y = array[ 1 ];
		this.z = array[ 2 ];
		this.w = array[ 3 ];

		return this;

	},

	toArray: function () {

		return [ this.x, this.y, this.z, this.w ];

	},

	clone: function () {

		return new THREE.Vector4( this.x, this.y, this.z, this.w );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Euler = function ( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || THREE.Euler.DefaultOrder;

};

THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

THREE.Euler.DefaultOrder = 'XYZ';

THREE.Euler.prototype = {

	constructor: THREE.Euler,

	_x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,

	_quaternion: undefined,

	_updateQuaternion: function () {

		if ( this._quaternion !== undefined ) {

			this._quaternion.setFromEuler( this, false );

		}

	},

	get x () {

		return this._x;

	},

	set x ( value ) {

		this._x = value;
		this._updateQuaternion();

	},

	get y () {

		return this._y;

	},

	set y ( value ) {

		this._y = value;
		this._updateQuaternion();

	},

	get z () {

		return this._z;

	},

	set z ( value ) {

		this._z = value;
		this._updateQuaternion();

	},

	get order () {

		return this._order;

	},

	set order ( value ) {

		this._order = value;
		this._updateQuaternion();

	},

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this._updateQuaternion();

		return this;

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this._updateQuaternion();

		return this;

	},

	setFromRotationMatrix: function ( m, order ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		// clamp, to handle numerical problems

		function clamp( x ) {

			return Math.min( Math.max( x, -1 ), 1 );

		}

		var te = m.elements;
		var m11 = te[0], m12 = te[4], m13 = te[8];
		var m21 = te[1], m22 = te[5], m23 = te[9];
		var m31 = te[2], m32 = te[6], m33 = te[10];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'WARNING: Euler.setFromRotationMatrix() given unsupported order: ' + order )

		}

		this._order = order;

		this._updateQuaternion();

		return this;

	},

	setFromQuaternion: function ( q, order, update ) {

		// q is assumed to be normalized

		// clamp, to handle numerical problems

		function clamp( x ) {

			return Math.min( Math.max( x, -1 ), 1 );

		}

		// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m

		var sqx = q.x * q.x;
		var sqy = q.y * q.y;
		var sqz = q.z * q.z;
		var sqw = q.w * q.w;

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );
			this._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );
			this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order ===  'YXZ' ) {

			this._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );
			this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );
			this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );
			this._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );
			this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZYX' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );
			this._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );
			this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order === 'YZX' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );
			this._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );
			this._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );

		} else if ( order === 'XZY' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );
			this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );
			this._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );

		} else {

			console.warn( 'WARNING: Euler.setFromQuaternion() given unsupported order: ' + order )

		}

		this._order = order;

		if ( update !== false ) this._updateQuaternion();

		return this;

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new THREE.Quaternion();

		return function ( newOrder ) {

			q.setFromEuler( this );
			this.setFromQuaternion( q, newOrder );

		};


	}(),

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this._updateQuaternion();

		return this;

	},

	toArray: function () {

		return [ this._x, this._y, this._z, this._order ];

	},

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	clone: function () {

		return new THREE.Euler( this._x, this._y, this._z, this._order );

	}

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Line3 = function ( start, end ) {

	this.start = ( start !== undefined ) ? start : new THREE.Vector3();
	this.end = ( end !== undefined ) ? end : new THREE.Vector3();

};

THREE.Line3.prototype = {

	constructor: THREE.Line3,

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function() {

		var startP = new THREE.Vector3();
		var startEnd = new THREE.Vector3();

		return function ( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = THREE.Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new THREE.Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	},

	clone: function () {

		return new THREE.Line3().copy( this );

	}

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Box2 = function ( min, max ) {

	this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
	this.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );

};

THREE.Box2.prototype = {

	constructor: THREE.Box2,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		if ( points.length > 0 ) {

			var point = points[ 0 ];

			this.min.copy( point );
			this.max.copy( point );

			for ( var i = 1, il = points.length; i < il; i ++ ) {

				point = points[ i ];

				if ( point.x < this.min.x ) {

					this.min.x = point.x;

				} else if ( point.x > this.max.x ) {

					this.max.x = point.x;

				}

				if ( point.y < this.min.y ) {

					this.min.y = point.y;

				} else if ( point.y > this.max.y ) {

					this.max.y = point.y;

				}

			}

		} else {

			this.makeEmpty();

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new THREE.Vector2();

		return function ( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = Infinity;
		this.max.x = this.max.y = -Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;
	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;
	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( -scalar );
		this.max.addScalar( scalar );

		return this;
	},

	containsPoint: function ( point ) {

		if ( point.x < this.min.x || point.x > this.max.x ||
		     point.y < this.min.y || point.y > this.max.y ) {

			return false;

		}

		return true;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
		     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new THREE.Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
		     box.max.y < this.min.y || box.min.y > this.max.y ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new THREE.Vector2();

		return function ( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box2().copy( this );

	}

};

/**
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Box3 = function ( min, max ) {

	this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
	this.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );

};

THREE.Box3.prototype = {

	constructor: THREE.Box3,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	addPoint: function ( point ) {

		if ( point.x < this.min.x ) {

			this.min.x = point.x;

		} else if ( point.x > this.max.x ) {

			this.max.x = point.x;

		}

		if ( point.y < this.min.y ) {

			this.min.y = point.y;

		} else if ( point.y > this.max.y ) {

			this.max.y = point.y;

		}

		if ( point.z < this.min.z ) {

			this.min.z = point.z;

		} else if ( point.z > this.max.z ) {

			this.max.z = point.z;

		}

	},

	setFromPoints: function ( points ) {

		if ( points.length > 0 ) {

			var point = points[ 0 ];

			this.min.copy( point );
			this.max.copy( point );

			for ( var i = 1, il = points.length; i < il; i ++ ) {

				this.addPoint( points[ i ] )

			}

		} else {

			this.makeEmpty();

		}

		return this;

	},

	setFromCenterAndSize: function() {

		var v1 = new THREE.Vector3();

		return function ( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function() {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and childrens', world transforms

		var v1 = new THREE.Vector3();

		return function( object ) {

			var scope = this;

			object.updateMatrixWorld( true );

			this.makeEmpty();

			object.traverse( function ( node ) {

				if ( node.geometry !== undefined && node.geometry.vertices !== undefined ) {

					var vertices = node.geometry.vertices;

					for ( var i = 0, il = vertices.length; i < il; i++ ) {

						v1.copy( vertices[ i ] );

						v1.applyMatrix4( node.matrixWorld );

						scope.expandByPoint( v1 );

					}

				}

			} );

			return this;

		};

	}(),

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = Infinity;
		this.max.x = this.max.y = this.max.z = -Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( -scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		if ( point.x < this.min.x || point.x > this.max.x ||
		     point.y < this.min.y || point.y > this.max.y ||
		     point.z < this.min.z || point.z > this.max.z ) {

			return false;

		}

		return true;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
			 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new THREE.Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
		     box.max.y < this.min.y || box.min.y > this.max.y ||
		     box.max.z < this.min.z || box.min.z > this.max.z ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function() {

		var v1 = new THREE.Vector3();

		return function ( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function() {

		var v1 = new THREE.Vector3();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Sphere();

			result.center = this.center();
			result.radius = this.size( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function() {

		var points = [
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3()
		];

		return function ( matrix ) {

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[0].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[1].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[2].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[3].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[4].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[5].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[6].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[7].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111

			this.makeEmpty();
			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box3().copy( this );

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

	this.elements = new Float32Array(9);

	this.set(

		( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0,
		n21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0,
		n31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1

	);
};

THREE.Matrix3.prototype = {

	constructor: THREE.Matrix3,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[0] = n11; te[3] = n12; te[6] = n13;
		te[1] = n21; te[4] = n22; te[7] = n23;
		te[2] = n31; te[5] = n32; te[8] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	copy: function ( m ) {

		var me = m.elements;

		this.set(

			me[0], me[3], me[6],
			me[1], me[4], me[7],
			me[2], me[5], me[8]

		);

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'DEPRECATED: Matrix3\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},

	multiplyVector3Array: function() {

		var v1 = new THREE.Vector3();

		return function ( a ) {

			for ( var i = 0, il = a.length; i < il; i += 3 ) {

				v1.x = a[ i ];
				v1.y = a[ i + 1 ];
				v1.z = a[ i + 2 ];

				v1.applyMatrix3(this);

				a[ i ]     = v1.x;
				a[ i + 1 ] = v1.y;
				a[ i + 2 ] = v1.z;

			}

			return a;

		};

	}(),

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[0] *= s; te[3] *= s; te[6] *= s;
		te[1] *= s; te[4] *= s; te[7] *= s;
		te[2] *= s; te[5] *= s; te[8] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[0], b = te[1], c = te[2],
			d = te[3], e = te[4], f = te[5],
			g = te[6], h = te[7], i = te[8];

		return a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;

	},

	getInverse: function ( matrix, throwOnInvertible ) {

		// input: THREE.Matrix4
		// ( based on http://code.google.com/p/webgl-mjs/ )

		var me = matrix.elements;
		var te = this.elements;

		te[ 0 ] =   me[10] * me[5] - me[6] * me[9];
		te[ 1 ] = - me[10] * me[1] + me[2] * me[9];
		te[ 2 ] =   me[6] * me[1] - me[2] * me[5];
		te[ 3 ] = - me[10] * me[4] + me[6] * me[8];
		te[ 4 ] =   me[10] * me[0] - me[2] * me[8];
		te[ 5 ] = - me[6] * me[0] + me[2] * me[4];
		te[ 6 ] =   me[9] * me[4] - me[5] * me[8];
		te[ 7 ] = - me[9] * me[0] + me[1] * me[8];
		te[ 8 ] =   me[5] * me[0] - me[1] * me[4];

		var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];

		// no inverse

		if ( det === 0 ) {

			var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnInvertible || false ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			this.identity();

			return this;

		}

		this.multiplyScalar( 1.0 / det );

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[1]; m[1] = m[3]; m[3] = tmp;
		tmp = m[2]; m[2] = m[6]; m[6] = tmp;
		tmp = m[5]; m[5] = m[7]; m[7] = tmp;

		return this;

	},

	getNormalMatrix: function ( m ) {

		// input: THREE.Matrix4

		this.getInverse( m ).transpose();

		return this;

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	fromArray: function ( array ) {

		this.elements.set( array );

		return this;

	},

	toArray: function () {

		var te = this.elements;

		return [
			te[ 0 ], te[ 1 ], te[ 2 ],
			te[ 3 ], te[ 4 ], te[ 5 ],
			te[ 6 ], te[ 7 ], te[ 8 ]
		];

	},

	clone: function () {

		var te = this.elements;

		return new THREE.Matrix3(

			te[0], te[3], te[6],
			te[1], te[4], te[7],
			te[2], te[5], te[8]

		);

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */


THREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

	this.elements = new Float32Array( 16 );

	// TODO: if n11 is undefined, then just set to identity, otherwise copy all other values into matrix
	//   we should not support semi specification of Matrix4, it is just weird.

	var te = this.elements;

	te[0] = ( n11 !== undefined ) ? n11 : 1; te[4] = n12 || 0; te[8] = n13 || 0; te[12] = n14 || 0;
	te[1] = n21 || 0; te[5] = ( n22 !== undefined ) ? n22 : 1; te[9] = n23 || 0; te[13] = n24 || 0;
	te[2] = n31 || 0; te[6] = n32 || 0; te[10] = ( n33 !== undefined ) ? n33 : 1; te[14] = n34 || 0;
	te[3] = n41 || 0; te[7] = n42 || 0; te[11] = n43 || 0; te[15] = ( n44 !== undefined ) ? n44 : 1;

};

THREE.Matrix4.prototype = {

	constructor: THREE.Matrix4,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;
		te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;
		te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;
		te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	copy: function ( m ) {

		this.elements.set( m.elements );

		return this;

	},

	extractPosition: function ( m ) {

		console.warn( 'DEPRECATED: Matrix4\'s .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},

	copyPosition: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[12] = me[12];
		te[13] = me[13];
		te[14] = me[14];

		return this;

	},

	extractRotation: function () {

		var v1 = new THREE.Vector3();

		return function ( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.set( me[0], me[1], me[2] ).length();
			var scaleY = 1 / v1.set( me[4], me[5], me[6] ).length();
			var scaleZ = 1 / v1.set( me[8], me[9], me[10] ).length();

			te[0] = me[0] * scaleX;
			te[1] = me[1] * scaleX;
			te[2] = me[2] * scaleX;

			te[4] = me[4] * scaleY;
			te[5] = me[5] * scaleY;
			te[6] = me[6] * scaleY;

			te[8] = me[8] * scaleZ;
			te[9] = me[9] * scaleZ;
			te[10] = me[10] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( euler instanceof THREE.Euler === false ) {

			console.error( 'ERROR: Matrix\'s .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = - c * f;
			te[8] = d;

			te[1] = af + be * d;
			te[5] = ae - bf * d;
			te[9] = - b * c;

			te[2] = bf - ae * d;
			te[6] = be + af * d;
			te[10] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce + df * b;
			te[4] = de * b - cf;
			te[8] = a * d;

			te[1] = a * f;
			te[5] = a * e;
			te[9] = - b;

			te[2] = cf * b - de;
			te[6] = df + ce * b;
			te[10] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce - df * b;
			te[4] = - a * f;
			te[8] = de + cf * b;

			te[1] = cf + de * b;
			te[5] = a * e;
			te[9] = df - ce * b;

			te[2] = - a * d;
			te[6] = b;
			te[10] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = be * d - af;
			te[8] = ae * d + bf;

			te[1] = c * f;
			te[5] = bf * d + ae;
			te[9] = af * d - be;

			te[2] = - d;
			te[6] = b * c;
			te[10] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = bd - ac * f;
			te[8] = bc * f + ad;

			te[1] = f;
			te[5] = a * e;
			te[9] = - b * e;

			te[2] = - d * e;
			te[6] = ad * f + bc;
			te[10] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = - f;
			te[8] = d * e;

			te[1] = ac * f + bd;
			te[5] = a * e;
			te[9] = ad * f - bc;

			te[2] = bc * f - ad;
			te[6] = b * e;
			te[10] = bd * f + ac;

		}

		// last column
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;

		// bottom row
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;

		return this;

	},

	setRotationFromQuaternion: function ( q ) {

		console.warn( 'DEPRECATED: Matrix4\'s .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.' );

		return this.makeRotationFromQuaternion( q );

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q.x, y = q.y, z = q.z, w = q.w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[0] = 1 - ( yy + zz );
		te[4] = xy - wz;
		te[8] = xz + wy;

		te[1] = xy + wz;
		te[5] = 1 - ( xx + zz );
		te[9] = yz - wx;

		te[2] = xz - wy;
		te[6] = yz + wx;
		te[10] = 1 - ( xx + yy );

		// last column
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;

		// bottom row
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;

		return this;

	},

	lookAt: function() {

		var x = new THREE.Vector3();
		var y = new THREE.Vector3();
		var z = new THREE.Vector3();

		return function ( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target ).normalize();

			if ( z.length() === 0 ) {

				z.z = 1;

			}

			x.crossVectors( up, z ).normalize();

			if ( x.length() === 0 ) {

				z.x += 0.0001;
				x.crossVectors( up, z ).normalize();

			}

			y.crossVectors( z, x );


			te[0] = x.x; te[4] = y.x; te[8] = z.x;
			te[1] = x.y; te[5] = y.y; te[9] = z.y;
			te[2] = x.z; te[6] = y.z; te[10] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'DEPRECATED: Matrix4\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
		var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
		var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
		var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];

		var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
		var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
		var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
		var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];

		te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyToArray: function ( a, b, r ) {

		var te = this.elements;

		this.multiplyMatrices( a, b );

		r[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];
		r[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];
		r[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];
		r[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;
		te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;
		te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;
		te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'DEPRECATED: Matrix4\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
		return vector.applyProjection( this );

	},

	multiplyVector4: function ( vector ) {

		console.warn( 'DEPRECATED: Matrix4\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},

	multiplyVector3Array: function() {

		var v1 = new THREE.Vector3();

		return function ( a ) {

			for ( var i = 0, il = a.length; i < il; i += 3 ) {

				v1.x = a[ i ];
				v1.y = a[ i + 1 ];
				v1.z = a[ i + 2 ];

				v1.applyProjection( this );

				a[ i ]     = v1.x;
				a[ i + 1 ] = v1.y;
				a[ i + 2 ] = v1.z;

			}

			return a;

		};

	}(),

	rotateAxis: function ( v ) {

		console.warn( 'DEPRECATED: Matrix4\'s .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );

		v.transformDirection( this );

	},

	crossVector: function ( vector ) {

		console.warn( 'DEPRECATED: Matrix4\'s .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},

	determinant: function () {

		var te = this.elements;

		var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
		var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
		var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
		var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+n14 * n23 * n32
				-n13 * n24 * n32
				-n14 * n22 * n33
				+n12 * n24 * n33
				+n13 * n22 * n34
				-n12 * n23 * n34
			) +
			n42 * (
				+n11 * n23 * n34
				-n11 * n24 * n33
				+n14 * n21 * n33
				-n13 * n21 * n34
				+n13 * n24 * n31
				-n14 * n23 * n31
			) +
			n43 * (
				+n11 * n24 * n32
				-n11 * n22 * n34
				-n14 * n21 * n32
				+n12 * n21 * n34
				+n14 * n22 * n31
				-n12 * n24 * n31
			) +
			n44 * (
				-n13 * n22 * n31
				-n11 * n23 * n32
				+n11 * n22 * n33
				+n13 * n21 * n32
				-n12 * n21 * n33
				+n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[1]; te[1] = te[4]; te[4] = tmp;
		tmp = te[2]; te[2] = te[8]; te[8] = tmp;
		tmp = te[6]; te[6] = te[9]; te[9] = tmp;

		tmp = te[3]; te[3] = te[12]; te[12] = tmp;
		tmp = te[7]; te[7] = te[13]; te[13] = tmp;
		tmp = te[11]; te[11] = te[14]; te[14] = tmp;

		return this;

	},

	flattenToArray: function ( flat ) {

		var te = this.elements;
		flat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];
		flat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];
		flat[ 8 ] = te[8]; flat[ 9 ] = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];
		flat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];

		return flat;

	},

	flattenToArrayOffset: function( flat, offset ) {

		var te = this.elements;
		flat[ offset ] = te[0];
		flat[ offset + 1 ] = te[1];
		flat[ offset + 2 ] = te[2];
		flat[ offset + 3 ] = te[3];

		flat[ offset + 4 ] = te[4];
		flat[ offset + 5 ] = te[5];
		flat[ offset + 6 ] = te[6];
		flat[ offset + 7 ] = te[7];

		flat[ offset + 8 ]  = te[8];
		flat[ offset + 9 ]  = te[9];
		flat[ offset + 10 ] = te[10];
		flat[ offset + 11 ] = te[11];

		flat[ offset + 12 ] = te[12];
		flat[ offset + 13 ] = te[13];
		flat[ offset + 14 ] = te[14];
		flat[ offset + 15 ] = te[15];

		return flat;

	},

	getPosition: function() {

		var v1 = new THREE.Vector3();

		return function () {

			console.warn( 'DEPRECATED: Matrix4\'s .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

			var te = this.elements;
			return v1.set( te[12], te[13], te[14] );

		};

	}(),

	setPosition: function ( v ) {

		var te = this.elements;

		te[12] = v.x;
		te[13] = v.y;
		te[14] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnInvertible ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements;
		var me = m.elements;

		var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];
		var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];
		var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];
		var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];

		te[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;
		te[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;
		te[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;
		te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;
		te[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;
		te[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;
		te[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;
		te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;
		te[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;
		te[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;
		te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;
		te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;
		te[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;
		te[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;
		te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;
		te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;

		var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

		if ( det == 0 ) {

			var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnInvertible || false ) {

				throw new Error( msg ); 

			} else {

				console.warn( msg );

			}

			this.identity();

			return this;
		}

		this.multiplyScalar( 1 / det );

		return this;

	},

	translate: function ( v ) {

		console.warn( 'DEPRECATED: Matrix4\'s .translate() has been removed.');

	},

	rotateX: function ( angle ) {

		console.warn( 'DEPRECATED: Matrix4\'s .rotateX() has been removed.');

	},

	rotateY: function ( angle ) {

		console.warn( 'DEPRECATED: Matrix4\'s .rotateY() has been removed.');

	},

	rotateZ: function ( angle ) {

		console.warn( 'DEPRECATED: Matrix4\'s .rotateZ() has been removed.');

	},

	rotateByAxis: function ( axis, angle ) {

		console.warn( 'DEPRECATED: Matrix4\'s .rotateByAxis() has been removed.');

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[0] *= x; te[4] *= y; te[8] *= z;
		te[1] *= x; te[5] *= y; te[9] *= z;
		te[2] *= x; te[6] *= y; te[10] *= z;
		te[3] *= x; te[7] *= y; te[11] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
		var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
		var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

		return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0,  0, 0,
			0, c, -s, 0,
			0, s,  c, 0,
			0, 0,  0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			-s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, -s, 0, 0,
			s,  c, 0, 0,
			0,  0, 1, 0,
			0,  0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new THREE.Vector3();
		var matrix = new THREE.Matrix4();

		return function ( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[0], te[1], te[2] ).length();
			var sy = vector.set( te[4], te[5], te[6] ).length();
			var sz = vector.set( te[8], te[9], te[10] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if( det < 0 ) {
				sx = -sx;
			}

			position.x = te[12];
			position.y = te[13];
			position.z = te[14];

			// scale the rotation part

			matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[0] *= invSX;
			matrix.elements[1] *= invSX;
			matrix.elements[2] *= invSX;

			matrix.elements[4] *= invSY;
			matrix.elements[5] *= invSY;
			matrix.elements[6] *= invSY;

			matrix.elements[8] *= invSZ;
			matrix.elements[9] *= invSZ;
			matrix.elements[10] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makeFrustum: function ( left, right, bottom, top, near, far ) {

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[0] = x;	te[4] = 0;	te[8] = a;	te[12] = 0;
		te[1] = 0;	te[5] = y;	te[9] = b;	te[13] = 0;
		te[2] = 0;	te[6] = 0;	te[10] = c;	te[14] = d;
		te[3] = 0;	te[7] = 0;	te[11] = - 1;	te[15] = 0;

		return this;

	},

	makePerspective: function ( fov, aspect, near, far ) {

		var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
		var ymin = - ymax;
		var xmin = ymin * aspect;
		var xmax = ymax * aspect;

		return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = right - left;
		var h = top - bottom;
		var p = far - near;

		var x = ( right + left ) / w;
		var y = ( top + bottom ) / h;
		var z = ( far + near ) / p;

		te[0] = 2 / w;	te[4] = 0;	te[8] = 0;	te[12] = -x;
		te[1] = 0;	te[5] = 2 / h;	te[9] = 0;	te[13] = -y;
		te[2] = 0;	te[6] = 0;	te[10] = -2/p;	te[14] = -z;
		te[3] = 0;	te[7] = 0;	te[11] = 0;	te[15] = 1;

		return this;

	},

	fromArray: function ( array ) {

		this.elements.set( array );

		return this;

	},

	toArray: function () {

		var te = this.elements;

		return [
			te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
			te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
			te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
			te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
		];

	},

	clone: function () {

		var te = this.elements;

		return new THREE.Matrix4(

			te[0], te[4], te[8], te[12],
			te[1], te[5], te[9], te[13],
			te[2], te[6], te[10], te[14],
			te[3], te[7], te[11], te[15]

		);

	}

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Ray = function ( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
	this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

};

THREE.Ray.prototype = {

	constructor: THREE.Ray,

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	recast: function () {

		var v1 = new THREE.Vector3();

		return function ( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function () {

		var v1 = new THREE.Vector3();

		return function ( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceTo( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceTo( point );

		};

	}(),

	distanceSqToSegment: function( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

		// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
		// It returns the min distance between the ray and the segment
		// defined by v0 and v1
		// It can also set two optional targets :
		// - The closest point on the ray
		// - The closest point on the segment

		var segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );
		var segDir = v1.clone().sub( v0 ).normalize();
		var segExtent = v0.distanceTo( v1 ) * 0.5;
		var diff = this.origin.clone().sub( segCenter );
		var a01 = - this.direction.dot( segDir );
		var b0 = diff.dot( this.direction );
		var b1 = - diff.dot( segDir );
		var c = diff.lengthSq();
		var det = Math.abs( 1 - a01 * a01 );
		var s0, s1, sqrDist, extDet;

		if ( det >= 0 ) {

			// The ray and segment are not parallel.

			s0 = a01 * b1 - b0;
			s1 = a01 * b0 - b1;
			extDet = segExtent * det;

			if ( s0 >= 0 ) {

				if ( s1 >= - extDet ) {

					if ( s1 <= extDet ) {

						// region 0
						// Minimum at interior points of ray and segment.

						var invDet = 1 / det;
						s0 *= invDet;
						s1 *= invDet;
						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

					} else {

						// region 1

						s1 = segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					// region 5

					s1 = - segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			} else {

				if ( s1 <= - extDet) {

					// region 4

					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				} else if ( s1 <= extDet ) {

					// region 3

					s0 = 0;
					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

				} else {

					// region 2

					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			}

		} else {

			// Ray and segment are parallel.

			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

		}

		if ( optionalPointOnRay ) {

			optionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );

		}

		if ( optionalPointOnSegment ) {

			optionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );

		}

		return sqrDist;

	},

	isIntersectionSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	isIntersectionPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );
		if ( denominator == 0 ) {

			// line is coplanar, return origin
			if( plane.distanceToPoint( this.origin ) == 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t :  null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;
		}

		return this.at( t, optionalTarget );

	},

	isIntersectionBox: function () {
		
		var v = new THREE.Vector3();

		return function ( box ) {

			return this.intersectBox( box, v ) !== null;

		}

	}(),

	intersectBox: function ( box , optionalTarget ) {

		// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/

		var tmin,tmax,tymin,tymax,tzmin,tzmax;

		var invdirx = 1/this.direction.x,
			invdiry = 1/this.direction.y,
			invdirz = 1/this.direction.z;

		var origin = this.origin;

		if (invdirx >= 0) {
				
			tmin = (box.min.x - origin.x) * invdirx;
			tmax = (box.max.x - origin.x) * invdirx;

		} else { 

			tmin = (box.max.x - origin.x) * invdirx;
			tmax = (box.min.x - origin.x) * invdirx;
		}			

		if (invdiry >= 0) {
		
			tymin = (box.min.y - origin.y) * invdiry;
			tymax = (box.max.y - origin.y) * invdiry;

		} else {

			tymin = (box.max.y - origin.y) * invdiry;
			tymax = (box.min.y - origin.y) * invdiry;
		}

		if ((tmin > tymax) || (tymin > tmax)) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN
		
		if (tymin > tmin || tmin !== tmin ) tmin = tymin;

		if (tymax < tmax || tmax !== tmax ) tmax = tymax;

		if (invdirz >= 0) {
		
			tzmin = (box.min.z - origin.z) * invdirz;
			tzmax = (box.max.z - origin.z) * invdirz;

		} else {

			tzmin = (box.max.z - origin.z) * invdirz;
			tzmax = (box.min.z - origin.z) * invdirz;
		}

		if ((tmin > tzmax) || (tzmin > tmax)) return null;

		if (tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if (tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectTriangle: function() {

		// Compute the offset origin, edges, and normal.
		var diff = new THREE.Vector3();
		var edge1 = new THREE.Vector3();
		var edge2 = new THREE.Vector3();
		var normal = new THREE.Vector3();

		return function ( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );
	
		}
	
	}(),

	applyMatrix4: function ( matrix4 ) {

		this.direction.add( this.origin ).applyMatrix4( matrix4 );
		this.origin.applyMatrix4( matrix4 );
		this.direction.sub( this.origin );
		this.direction.normalize();

		return this;
	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	},

	clone: function () {

		return new THREE.Ray().copy( this );

	}

};

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Sphere = function ( center, radius ) {

	this.center = ( center !== undefined ) ? center : new THREE.Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

};

THREE.Sphere.prototype = {

	constructor: THREE.Sphere,

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;
	},


	setFromPoints: function () {

		var box = new THREE.Box3();

		return function ( points, optionalCenter )  {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).center( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;			
 		
 		};

	}(),

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new THREE.Vector3();
		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new THREE.Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	},

	clone: function () {

		return new THREE.Sphere().copy( this );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://exocortex.com
 */

THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new THREE.Plane(),
		( p1 !== undefined ) ? p1 : new THREE.Plane(),
		( p2 !== undefined ) ? p2 : new THREE.Plane(),
		( p3 !== undefined ) ? p3 : new THREE.Plane(),
		( p4 !== undefined ) ? p4 : new THREE.Plane(),
		( p5 !== undefined ) ? p5 : new THREE.Plane()

	];

};

THREE.Frustum.prototype = {

	constructor: THREE.Frustum,

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[0].copy( p0 );
		planes[1].copy( p1 );
		planes[2].copy( p2 );
		planes[3].copy( p3 );
		planes[4].copy( p4 );
		planes[5].copy( p5 );

		return this;

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for( var i = 0; i < 6; i ++ ) {

			planes[i].copy( frustum.planes[i] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
		var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
		var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
		var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new THREE.Sphere();

		return function ( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = -sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox : function() {

		var p1 = new THREE.Vector3(),
			p2 = new THREE.Vector3();

		return function( box ) {

			var planes = this.planes;
			
			for ( var i = 0; i < 6 ; i ++ ) {
			
				var plane = planes[i];
				
				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );
				
				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {
					
					return false;
		
				}
			}

			return true;
		};

	}(),


	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	},

	clone: function () {

		return new THREE.Frustum().copy( this );

	}

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Plane = function ( normal, constant ) {

	this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

};

THREE.Plane.prototype = {

	constructor: THREE.Plane,

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

		return this;

	},

	setFromCoplanarPoints: function() {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function ( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),


	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= -1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

	},

	orthoPoint: function ( point, optionalTarget ) {

		var perpendicularMagnitude = this.distanceToPoint( point );

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

	},

	isIntersectionLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectLine: function() {

		var v1 = new THREE.Vector3();

		return function ( line, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator == 0 ) {

				// line is coplanar, return origin
				if( this.distanceToPoint( line.start ) == 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),


	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function() {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var m1 = new THREE.Matrix3();

		return function ( matrix, optionalNormalMatrix ) {

			// compute new normal based on theory here:
			// http://www.songho.ca/opengl/gl_normaltransform.html
			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
			var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );
			
			var newCoplanarPoint = this.coplanarPoint( v2 );
			newCoplanarPoint.applyMatrix4( matrix );

			this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant = this.constant - offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );

	},

	clone: function () {

		return new THREE.Plane().copy( this );

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Math = {

	PI2: Math.PI * 2,

	generateUUID: function () {

		// http://www.broofa.com/Tools/Math.uuid.htm
		
		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
		var uuid = new Array(36);
		var rnd = 0, r;

		return function () {

			for ( var i = 0; i < 36; i ++ ) {

				if ( i == 8 || i == 13 || i == 18 || i == 23 ) {
			
					uuid[ i ] = '-';
			
				} else if ( i == 14 ) {
			
					uuid[ i ] = '4';
			
				} else {
			
					if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;
					r = rnd & 0xf;
					rnd = rnd >> 4;
					uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];

				}
			}
			
			return uuid.join('');

		};

	}(),

	// Clamp value to range <a, b>

	clamp: function ( x, a, b ) {

		return ( x < a ) ? a : ( ( x > b ) ? b : x );

	},

	// Clamp value to range <a, inf)

	clampBottom: function ( x, a ) {

		return x < a ? a : x;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min )/( max - min );

		return x*x*(3 - 2*x);

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min )/( max - min );

		return x*x*x*(x*(x*6 - 15) + 10);

	},

	// Random float from <0, 1> with 16 bits of randomness
	// (standard Math.random() creates repetitive patterns when applied over larger space)

	random16: function () {

		return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	sign: function ( x ) {

		return ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );

	},

	degToRad: function() {

		var degreeToRadiansFactor = Math.PI / 180;

		return function ( degrees ) {

			return degrees * degreeToRadiansFactor;

		};

	}(),

	radToDeg: function() {

		var radianToDegreesFactor = 180 / Math.PI;

		return function ( radians ) {

			return radians * radianToDegreesFactor;

		};

	}()

};

/**
 * Spline from Tween.js, slightly optimized (and trashed)
 * http://sole.github.com/tween.js/examples/05_spline.html
 *
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Spline = function ( points ) {

	this.points = points;

	var c = [], v3 = { x: 0, y: 0, z: 0 },
	point, intPoint, weight, w2, w3,
	pa, pb, pc, pd;

	this.initFromArray = function( a ) {

		this.points = [];

		for ( var i = 0; i < a.length; i++ ) {

			this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

		}

	};

	this.getPoint = function ( k ) {

		point = ( this.points.length - 1 ) * k;
		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
		c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

		pa = this.points[ c[ 0 ] ];
		pb = this.points[ c[ 1 ] ];
		pc = this.points[ c[ 2 ] ];
		pd = this.points[ c[ 3 ] ];

		w2 = weight * weight;
		w3 = weight * w2;

		v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
		v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
		v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

		return v3;

	};

	this.getControlPointsArray = function () {

		var i, p, l = this.points.length,
			coords = [];

		for ( i = 0; i < l; i ++ ) {

			p = this.points[ i ];
			coords[ i ] = [ p.x, p.y, p.z ];

		}

		return coords;

	};

	// approximate length by summing linear segments

	this.getLength = function ( nSubDivisions ) {

		var i, index, nSamples, position,
			point = 0, intPoint = 0, oldIntPoint = 0,
			oldPosition = new THREE.Vector3(),
			tmpVec = new THREE.Vector3(),
			chunkLengths = [],
			totalLength = 0;

		// first point has 0 length

		chunkLengths[ 0 ] = 0;

		if ( !nSubDivisions ) nSubDivisions = 100;

		nSamples = this.points.length * nSubDivisions;

		oldPosition.copy( this.points[ 0 ] );

		for ( i = 1; i < nSamples; i ++ ) {

			index = i / nSamples;

			position = this.getPoint( index );
			tmpVec.copy( position );

			totalLength += tmpVec.distanceTo( oldPosition );

			oldPosition.copy( position );

			point = ( this.points.length - 1 ) * index;
			intPoint = Math.floor( point );

			if ( intPoint != oldIntPoint ) {

				chunkLengths[ intPoint ] = totalLength;
				oldIntPoint = intPoint;

			}

		}

		// last point ends with total length

		chunkLengths[ chunkLengths.length ] = totalLength;

		return { chunks: chunkLengths, total: totalLength };

	};

	this.reparametrizeByArcLength = function ( samplingCoef ) {

		var i, j,
			index, indexCurrent, indexNext,
			linearDistance, realDistance,
			sampling, position,
			newpoints = [],
			tmpVec = new THREE.Vector3(),
			sl = this.getLength();

		newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

		for ( i = 1; i < this.points.length; i++ ) {

			//tmpVec.copy( this.points[ i - 1 ] );
			//linearDistance = tmpVec.distanceTo( this.points[ i ] );

			realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

			sampling = Math.ceil( samplingCoef * realDistance / sl.total );

			indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
			indexNext = i / ( this.points.length - 1 );

			for ( j = 1; j < sampling - 1; j++ ) {

				index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

				position = this.getPoint( index );
				newpoints.push( tmpVec.copy( position ).clone() );

			}

			newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

		}

		this.points = newpoints;

	};

	// Catmull-Rom

	function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

		var v0 = ( p2 - p0 ) * 0.5,
			v1 = ( p3 - p1 ) * 0.5;

		return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	};

};

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Triangle = function ( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new THREE.Vector3();
	this.b = ( b !== undefined ) ? b : new THREE.Vector3();
	this.c = ( c !== undefined ) ? c : new THREE.Vector3();

};

THREE.Triangle.normal = function() {

	var v0 = new THREE.Vector3();

	return function ( a, b, c, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		result.subVectors( c, b );
		v0.subVectors( a, b );
		result.cross( v0 );

		var resultLengthSq = result.lengthSq();
		if( resultLengthSq > 0 ) {

			return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

		}

		return result.set( 0, 0, 0 );

	};

}();

// static/instance method to calculate barycoordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
THREE.Triangle.barycoordFromPoint = function() {

	var v0 = new THREE.Vector3();
	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();

	return function ( point, a, b, c, optionalTarget ) {

		v0.subVectors( c, a );
		v1.subVectors( b, a );
		v2.subVectors( point, a );

		var dot00 = v0.dot( v0 );
		var dot01 = v0.dot( v1 );
		var dot02 = v0.dot( v2 );
		var dot11 = v1.dot( v1 );
		var dot12 = v1.dot( v2 );

		var denom = ( dot00 * dot11 - dot01 * dot01 );

		var result = optionalTarget || new THREE.Vector3();

		// colinear or singular triangle
		if( denom == 0 ) {
			// arbitrary location outside of triangle?
			// not sure if this is the best idea, maybe should be returning undefined
			return result.set( -2, -1, -1 );
		}

		var invDenom = 1 / denom;
		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

		// barycoordinates must always sum to 1
		return result.set( 1 - u - v, v, u );

	};

}();

THREE.Triangle.containsPoint = function() {

	var v1 = new THREE.Vector3();

	return function ( point, a, b, c ) {

		var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

		return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

	};

}();

THREE.Triangle.prototype = {

	constructor: THREE.Triangle,

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[i0] );
		this.b.copy( points[i1] );
		this.c.copy( points[i2] );

		return this;

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function() {

		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();

		return function () {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	},

	clone: function () {

		return new THREE.Triangle().copy( this );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Vertex = function ( v ) {

	console.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')
	return v;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.UV = function ( u, v ) {

	console.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')
	return new THREE.Vector2( u, v );

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Clock = function ( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

};

THREE.Clock.prototype = {

	constructor: THREE.Clock,

	start: function () {

		this.startTime = self.performance !== undefined && self.performance.now !== undefined
					? self.performance.now()
					: Date.now();

		this.oldTime = this.startTime;
		this.running = true;
	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();

		}

		if ( this.running ) {

			var newTime = self.performance !== undefined && self.performance.now !== undefined
					? self.performance.now()
					: Date.now();

			diff = 0.001 * ( newTime - this.oldTime );
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

};

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

THREE.EventDispatcher = function () {}

THREE.EventDispatcher.prototype = {

	constructor: THREE.EventDispatcher,

	apply: function ( object ) {

		object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
		object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
		object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
		object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;

	},

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

			return true;

		}

		return false;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function () {

		var array = [];

		return function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var length = listenerArray.length;

				for ( var i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( var i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		};

	}()

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://exocortex.com/
 * @author stephomi / http://stephaneginier.com/
 */

( function ( THREE ) {

	THREE.Raycaster = function ( origin, direction, near, far ) {

		this.ray = new THREE.Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

	};

	var sphere = new THREE.Sphere();
	var localRay = new THREE.Ray();
	var facePlane = new THREE.Plane();
	var intersectPoint = new THREE.Vector3();
	var matrixPosition = new THREE.Vector3();

	var inverseMatrix = new THREE.Matrix4();

	var descSort = function ( a, b ) {

		return a.distance - b.distance;

	};

	var vA = new THREE.Vector3();
	var vB = new THREE.Vector3();
	var vC = new THREE.Vector3();

	var intersectObject = function ( object, raycaster, intersects ) {

		if ( object instanceof THREE.Sprite ) {

			matrixPosition.setFromMatrixPosition( object.matrixWorld );
			var distance = raycaster.ray.distanceToPoint( matrixPosition );

			if ( distance > object.scale.x ) {

				return intersects;

			}

			intersects.push( {

				distance: distance,
				point: object.position,
				face: null,
				object: object

			} );

		} else if ( object instanceof THREE.LOD ) {

			matrixPosition.setFromMatrixPosition( object.matrixWorld );
			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			intersectObject( object.getObjectForDistance( distance ), raycaster, intersects );

		} else if ( object instanceof THREE.Mesh ) {

			var geometry = object.geometry;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( object.matrixWorld );

			if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

				return intersects;

			}

			// Check boundingBox before continuing
			
			inverseMatrix.getInverse( object.matrixWorld );  
			localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			if ( geometry.boundingBox !== null ) {

				if ( localRay.isIntersectionBox( geometry.boundingBox ) === false )  {

					return intersects;

				}

			} 

			if ( geometry instanceof THREE.BufferGeometry ) {

				var material = object.material;

				if ( material === undefined ) return intersects;
				if ( geometry.dynamic === false ) return intersects;

				var a, b, c;
				var precision = raycaster.precision;

				if ( geometry.attributes.index !== undefined ) {

					var offsets = geometry.offsets;
					var indices = geometry.attributes.index.array;
					var positions = geometry.attributes.position.array;
					var offLength = geometry.offsets.length;

					var fl = geometry.attributes.index.array.length / 3;

					for ( var oi = 0; oi < offLength; ++oi ) {

						var start = offsets[ oi ].start;
						var count = offsets[ oi ].count;
						var index = offsets[ oi ].index;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							a = index + indices[ i ];
							b = index + indices[ i + 1 ]; 
							c = index + indices[ i + 2 ];

							vA.set(
								positions[ a * 3 ],
								positions[ a * 3 + 1 ],
								positions[ a * 3 + 2 ]
							);
							vB.set(
								positions[ b * 3 ],
								positions[ b * 3 + 1 ],
								positions[ b * 3 + 2 ]
							);
							vC.set(
								positions[ c * 3 ],
								positions[ c * 3 + 1 ],
								positions[ c * 3 + 2 ]
							);

							
							if ( material.side === THREE.BackSide ) {
							
								var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true ); 

							} else {

								var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

							}

							if ( intersectionPoint === null ) continue;

							intersectionPoint.applyMatrix4( object.matrixWorld );

							var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

							if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								point: intersectionPoint,
								face: null,
								faceIndex: null,
								object: object

							} );

						}

					}

				} else {

					var offsets = geometry.offsets;
					var positions = geometry.attributes.position.array;
					var offLength = geometry.offsets.length;

					var fl = geometry.attributes.position.array.length;

					for ( var i = 0; i < fl; i += 3 ) {

						a = i;
						b = i + 1;
						c = i + 2;

						vA.set(
							positions[ a * 3 ],
							positions[ a * 3 + 1 ],
							positions[ a * 3 + 2 ]
						);
						vB.set(
							positions[ b * 3 ],
							positions[ b * 3 + 1 ],
							positions[ b * 3 + 2 ]
						);
						vC.set(
							positions[ c * 3 ],
							positions[ c * 3 + 1 ],
							positions[ c * 3 + 2 ]
						);

						
						if ( material.side === THREE.BackSide ) {
							
							var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true ); 

						} else {

							var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

						}

						if ( intersectionPoint === null ) continue;

						intersectionPoint.applyMatrix4( object.matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

						if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							point: intersectionPoint,
							face: null,
							faceIndex: null,
							object: object

						} );

					}

				}

			} else if ( geometry instanceof THREE.Geometry ) {

				var isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
				var objectMaterials = isFaceMaterial === true ? object.material.materials : null;

				var a, b, c, d;
				var precision = raycaster.precision;

				var vertices = geometry.vertices;

				for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

					var face = geometry.faces[ f ];

					var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;

					if ( material === undefined ) continue;

					a = vertices[ face.a ];
					b = vertices[ face.b ];
					c = vertices[ face.c ];

					if ( material.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = object.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.x += ( targets[ face.a ].x - a.x ) * influence;
							vA.y += ( targets[ face.a ].y - a.y ) * influence;
							vA.z += ( targets[ face.a ].z - a.z ) * influence;

							vB.x += ( targets[ face.b ].x - b.x ) * influence;
							vB.y += ( targets[ face.b ].y - b.y ) * influence;
							vB.z += ( targets[ face.b ].z - b.z ) * influence;

							vC.x += ( targets[ face.c ].x - c.x ) * influence;
							vC.y += ( targets[ face.c ].y - c.y ) * influence;
							vC.z += ( targets[ face.c ].z - c.z ) * influence;

						}

						vA.add( a );
						vB.add( b );
						vC.add( c );

						a = vA;
						b = vB;
						c = vC;

					}

					if ( material.side === THREE.BackSide ) {
							
						var intersectionPoint = localRay.intersectTriangle( c, b, a, true );

					} else {
								
						var intersectionPoint = localRay.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );

					}

					if ( intersectionPoint === null ) continue;

					intersectionPoint.applyMatrix4( object.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

					if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						point: intersectionPoint,
						face: face,
						faceIndex: f,
						object: object

					} );

				}

			}

		} else if ( object instanceof THREE.Line ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			// Checking boundingSphere distance to ray

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( object.matrixWorld );
			
			if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

				return intersects;

			}
			
			inverseMatrix.getInverse( object.matrixWorld );
			localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			/* if ( geometry instanceof THREE.BufferGeometry ) {

			} else */ if ( geometry instanceof THREE.Geometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;
				var interSegment = new THREE.Vector3();
				var interRay = new THREE.Vector3();
				var step = object.type === THREE.LineStrip ? 1 : 2;

				for ( var i = 0; i < nbVertices - 1; i = i + step ) {

					var distSq = localRay.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					var distance = localRay.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( object.matrixWorld ),
						face: null,
						faceIndex: null,
						object: object

					} );

				}

			}

		}

	};

	var intersectDescendants = function ( object, raycaster, intersects ) {

		var descendants = object.getDescendants();

		for ( var i = 0, l = descendants.length; i < l; i ++ ) {

			intersectObject( descendants[ i ], raycaster, intersects );

		}
	};

	//

	THREE.Raycaster.prototype.precision = 0.0001;
	THREE.Raycaster.prototype.linePrecision = 1;

	THREE.Raycaster.prototype.set = function ( origin, direction ) {

		this.ray.set( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

	};

	THREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {

		var intersects = [];

		if ( recursive === true ) {

			intersectDescendants( object, this, intersects );

		}

		intersectObject( object, this, intersects );

		intersects.sort( descSort );

		return intersects;

	};

	THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {

		var intersects = [];

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects );

			if ( recursive === true ) {

				intersectDescendants( objects[ i ], this, intersects );

			}

		}

		intersects.sort( descSort );

		return intersects;

	};

}( THREE ) );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Object3D = function () {

	this.id = THREE.Object3DIdCount ++;
	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	this.parent = undefined;
	this.children = [];

	this.up = new THREE.Vector3( 0, 1, 0 );

	this.position = new THREE.Vector3();
	this._rotation = new THREE.Euler();
	this._quaternion = new THREE.Quaternion();
	this.scale = new THREE.Vector3( 1, 1, 1 );

	// keep rotation and quaternion in sync

	this._rotation._quaternion = this.quaternion;
	this._quaternion._euler = this.rotation;

	this.renderDepth = null;

	this.rotationAutoUpdate = true;

	this.matrix = new THREE.Matrix4();
	this.matrixWorld = new THREE.Matrix4();

	this.matrixAutoUpdate = true;
	this.matrixWorldNeedsUpdate = true;

	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;

	this.userData = {};

};


THREE.Object3D.prototype = {

	constructor: THREE.Object3D,
	
	get rotation () { 
		return this._rotation; 
	},

	set rotation ( value ) {
		
		this._rotation = value;
		this._rotation._quaternion = this._quaternion;
		this._quaternion._euler = this._rotation;
		this._rotation._updateQuaternion();
		
	},

	get quaternion () { 
		return this._quaternion; 
	},
	
	set quaternion ( value ) {
		
		this._quaternion = value;
		this._quaternion._euler = this._rotation;
		this._rotation._quaternion = this._quaternion;
		this._quaternion._updateEuler();
		
	},

	get eulerOrder () {

		console.warn( 'DEPRECATED: Object3D\'s .eulerOrder has been moved to Object3D\'s .rotation.order.' );

		return this.rotation.order;

	},

	set eulerOrder ( value ) {

		console.warn( 'DEPRECATED: Object3D\'s .eulerOrder has been moved to Object3D\'s .rotation.order.' );

		this.rotation.order = value;

	},

	get useQuaternion () {

		console.warn( 'DEPRECATED: Object3D\'s .useQuaternion has been removed. The library now uses quaternions by default.' );

	},

	set useQuaternion ( value ) {

		console.warn( 'DEPRECATED: Object3D\'s .useQuaternion has been removed. The library now uses quaternions by default.' );

	},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function() {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new THREE.Quaternion();

		return function ( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		}

	}(),

	rotateX: function () {

		var v1 = new THREE.Vector3( 1, 0, 0 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new THREE.Vector3( 0, 1, 0 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new THREE.Vector3( 0, 0, 1 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new THREE.Vector3();

		return function ( axis, distance ) {

			v1.copy( axis );

			v1.applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		}

	}(),

	translate: function ( distance, axis ) {

		console.warn( 'DEPRECATED: Object3D\'s .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.' );
		return this.translateOnAxis( axis, distance );

	},

	translateX: function () {

		var v1 = new THREE.Vector3( 1, 0, 0 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new THREE.Vector3( 0, 1, 0 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new THREE.Vector3( 0, 0, 1 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This routine does not support objects with rotated and/or translated parent(s)

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			m1.lookAt( vector, this.position, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {

		if ( object === this ) {

			console.warn( 'THREE.Object3D.add: An object can\'t be added as a child of itself.' );
			return;

		}

		if ( object instanceof THREE.Object3D ) {

			if ( object.parent !== undefined ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

			// add to scene

			var scene = this;

			while ( scene.parent !== undefined ) {

				scene = scene.parent;

			}

			if ( scene !== undefined && scene instanceof THREE.Scene )  {

				scene.__addObject( object );

			}

		}

	},

	remove: function ( object ) {

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = undefined;
			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

			// remove from scene

			var scene = this;

			while ( scene.parent !== undefined ) {

				scene = scene.parent;

			}

			if ( scene !== undefined && scene instanceof THREE.Scene ) {

				scene.__removeObject( object );

			}

		}

	},

	traverse: function ( callback ) {

		callback( this );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].traverse( callback );

		}

	},

	getObjectById: function ( id, recursive ) {

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];

			if ( child.id === id ) {

				return child;

			}

			if ( recursive === true ) {

				child = child.getObjectById( id, recursive );

				if ( child !== undefined ) {

					return child;

				}

			}

		}

		return undefined;

	},

	getObjectByName: function ( name, recursive ) {

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];

			if ( child.name === name ) {

				return child;

			}

			if ( recursive === true ) {

				child = child.getObjectByName( name, recursive );

				if ( child !== undefined ) {

					return child;

				}

			}

		}

		return undefined;

	},

	getChildByName: function ( name, recursive ) {

		console.warn( 'DEPRECATED: Object3D\'s .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name, recursive );

	},

	getDescendants: function ( array ) {

		if ( array === undefined ) array = [];

		Array.prototype.push.apply( array, this.children );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].getDescendants( array );

		}

		return array;

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate === true ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate === true || force === true ) {

			if ( this.parent === undefined ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].updateMatrixWorld( force );

		}

	},

	clone: function ( object, recursive ) {

		if ( object === undefined ) object = new THREE.Object3D();
		if ( recursive === undefined ) recursive = true;

		object.name = this.name;

		object.up.copy( this.up );

		object.position.copy( this.position );
		object.quaternion.copy( this.quaternion );
		object.scale.copy( this.scale );

		object.renderDepth = this.renderDepth;

		object.rotationAutoUpdate = this.rotationAutoUpdate;

		object.matrix.copy( this.matrix );
		object.matrixWorld.copy( this.matrixWorld );

		object.matrixAutoUpdate = this.matrixAutoUpdate;
		object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;

		object.visible = this.visible;

		object.castShadow = this.castShadow;
		object.receiveShadow = this.receiveShadow;

		object.frustumCulled = this.frustumCulled;

		object.userData = JSON.parse( JSON.stringify( this.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < this.children.length; i ++ ) {

				var child = this.children[ i ];
				object.add( child.clone() );

			}

		}

		return object;

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );

THREE.Object3DIdCount = 0;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author julianwa / https://github.com/julianwa
 */

THREE.Projector = function () {

	var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,
	_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,
	_face, _face3Count, _face3Pool = [], _face3PoolLength = 0,
	_line, _lineCount, _linePool = [], _linePoolLength = 0,
	_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,

	_renderData = { objects: [], sprites: [], lights: [], elements: [] },

	_vA = new THREE.Vector3(),
	_vB = new THREE.Vector3(),
	_vC = new THREE.Vector3(),

	_vector3 = new THREE.Vector3(),
	_vector4 = new THREE.Vector4(),

	_clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),
	_boundingBox = new THREE.Box3(),
	_points3 = new Array( 3 ),
	_points4 = new Array( 4 ),

	_viewMatrix = new THREE.Matrix4(),
	_viewProjectionMatrix = new THREE.Matrix4(),

	_modelMatrix,
	_modelViewProjectionMatrix = new THREE.Matrix4(),

	_normalMatrix = new THREE.Matrix3(),
	_normalViewMatrix = new THREE.Matrix3(),

	_centroid = new THREE.Vector3(),

	_frustum = new THREE.Frustum(),

	_clippedVertex1PositionScreen = new THREE.Vector4(),
	_clippedVertex2PositionScreen = new THREE.Vector4();

	this.projectVector = function ( vector, camera ) {

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );

		return vector.applyProjection( _viewProjectionMatrix );

	};

	this.unprojectVector = function () {

		var projectionMatrixInverse = new THREE.Matrix4();

		return function ( vector, camera ) {

			projectionMatrixInverse.getInverse( camera.projectionMatrix );
			_viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, projectionMatrixInverse );

			return vector.applyProjection( _viewProjectionMatrix );

		};

	}();

	this.pickingRay = function ( vector, camera ) {

		// set two vectors with opposing z values
		vector.z = -1.0;
		var end = new THREE.Vector3( vector.x, vector.y, 1.0 );

		this.unprojectVector( vector, camera );
		this.unprojectVector( end, camera );

		// find direction from vector to end
		end.sub( vector ).normalize();

		return new THREE.Raycaster( vector, end );

	};

	var getObject = function ( object ) {

		_object = getNextObjectInPool();
		_object.id = object.id;
		_object.object = object;

		if ( object.renderDepth !== null ) {

			_object.z = object.renderDepth;

		} else {

			_vector3.setFromMatrixPosition( object.matrixWorld );
			_vector3.applyProjection( _viewProjectionMatrix );
			_object.z = _vector3.z;

		}

		return _object;

	};

	var projectVertex = function ( vertex ) {

		var position = vertex.position;
		var positionWorld = vertex.positionWorld;
		var positionScreen = vertex.positionScreen;

		positionWorld.copy( position ).applyMatrix4( _modelMatrix );
		positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );

		var invW = 1 / positionScreen.w;

		positionScreen.x *= invW;
		positionScreen.y *= invW;
		positionScreen.z *= invW;

		vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 &&
				 positionScreen.y >= -1 && positionScreen.y <= 1 &&
				 positionScreen.z >= -1 && positionScreen.z <= 1;

	};

	var projectObject = function ( object ) {

		if ( object.visible === false ) return;

		if ( object instanceof THREE.Light ) {

			_renderData.lights.push( object );

		} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {

			if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

				_renderData.objects.push( getObject( object ) );

			}

		} else if ( object instanceof THREE.Sprite ) {

			_renderData.sprites.push( getObject( object ) );

		}

		for ( var i = 0, l = object.children.length; i < l; i ++ ) {

			projectObject( object.children[ i ] );

		}

	};

	var projectGraph = function ( root, sortObjects ) {

		_objectCount = 0;

		_renderData.objects.length = 0;
		_renderData.sprites.length = 0;
		_renderData.lights.length = 0;

		projectObject( root );

		if ( sortObjects === true ) {

			_renderData.objects.sort( painterSort );

		}

	};

	this.projectScene = function ( scene, camera, sortObjects, sortElements ) {

		var visible = false,
		object, geometry, vertices, faces, face, faceVertexNormals, faceVertexUvs, uvs,
		v1, v2, v3, v4, isFaceMaterial, objectMaterials;

		_face3Count = 0;
		_lineCount = 0;
		_spriteCount = 0;

		_renderData.elements.length = 0;

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );
		_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );

		_normalViewMatrix.getNormalMatrix( _viewMatrix );

		_frustum.setFromMatrix( _viewProjectionMatrix );

		projectGraph( scene, sortObjects );

		for ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {

			object = _renderData.objects[ o ].object;

			_modelMatrix = object.matrixWorld;

			_vertexCount = 0;

			if ( object instanceof THREE.Mesh ) {

				geometry = object.geometry;

				vertices = geometry.vertices;
				faces = geometry.faces;
				faceVertexUvs = geometry.faceVertexUvs;

				_normalMatrix.getNormalMatrix( _modelMatrix );

				isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
				objectMaterials = isFaceMaterial === true ? object.material : null;

				for ( var v = 0, vl = vertices.length; v < vl; v ++ ) {

					_vertex = getNextVertexInPool();
					_vertex.position.copy( vertices[ v ] );

					projectVertex( _vertex );

				}

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					face = faces[ f ];

					var material = isFaceMaterial === true
						? objectMaterials.materials[ face.materialIndex ]
						: object.material;

					if ( material === undefined ) continue;

					var side = material.side;

					v1 = _vertexPool[ face.a ];
					v2 = _vertexPool[ face.b ];
					v3 = _vertexPool[ face.c ];

					if ( material.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = object.morphTargetInfluences;

						var v1p = v1.position;
						var v2p = v2.position;
						var v3p = v3.position;

						_vA.set( 0, 0, 0 );
						_vB.set( 0, 0, 0 );
						_vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							_vA.x += ( targets[ face.a ].x - v1p.x ) * influence;
							_vA.y += ( targets[ face.a ].y - v1p.y ) * influence;
							_vA.z += ( targets[ face.a ].z - v1p.z ) * influence;

							_vB.x += ( targets[ face.b ].x - v2p.x ) * influence;
							_vB.y += ( targets[ face.b ].y - v2p.y ) * influence;
							_vB.z += ( targets[ face.b ].z - v2p.z ) * influence;

							_vC.x += ( targets[ face.c ].x - v3p.x ) * influence;
							_vC.y += ( targets[ face.c ].y - v3p.y ) * influence;
							_vC.z += ( targets[ face.c ].z - v3p.z ) * influence;

						}

						v1.position.add( _vA );
						v2.position.add( _vB );
						v3.position.add( _vC );

						projectVertex( v1 );
						projectVertex( v2 );
						projectVertex( v3 );

					}

					_points3[ 0 ] = v1.positionScreen;
					_points3[ 1 ] = v2.positionScreen;
					_points3[ 2 ] = v3.positionScreen;

					if ( v1.visible === true || v2.visible === true || v3.visible === true ||
						_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) ) ) {

						visible = ( ( v3.positionScreen.x - v1.positionScreen.x ) *
							    ( v2.positionScreen.y - v1.positionScreen.y ) -
							    ( v3.positionScreen.y - v1.positionScreen.y ) *
							    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;

						if ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {

							_face = getNextFace3InPool();

							_face.id = object.id;
							_face.v1.copy( v1 );
							_face.v2.copy( v2 );
							_face.v3.copy( v3 );

						} else {

							continue;

						}

					} else {

						continue;

					}

					_face.normalModel.copy( face.normal );

					if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

						_face.normalModel.negate();

					}

					_face.normalModel.applyMatrix3( _normalMatrix ).normalize();

					_face.normalModelView.copy( _face.normalModel ).applyMatrix3( _normalViewMatrix );

					_face.centroidModel.copy( face.centroid ).applyMatrix4( _modelMatrix );

					faceVertexNormals = face.vertexNormals;

					for ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {

						var normalModel = _face.vertexNormalsModel[ n ];
						normalModel.copy( faceVertexNormals[ n ] );

						if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

							normalModel.negate();

						}

						normalModel.applyMatrix3( _normalMatrix ).normalize();

						var normalModelView = _face.vertexNormalsModelView[ n ];
						normalModelView.copy( normalModel ).applyMatrix3( _normalViewMatrix );

					}

					_face.vertexNormalsLength = faceVertexNormals.length;

					for ( var c = 0, cl = Math.min( faceVertexUvs.length, 3 ); c < cl; c ++ ) {

						uvs = faceVertexUvs[ c ][ f ];

						if ( uvs === undefined ) continue;

						for ( var u = 0, ul = uvs.length; u < ul; u ++ ) {

							_face.uvs[ c ][ u ] = uvs[ u ];

						}

					}

					_face.color = face.color;
					_face.material = material;

					_centroid.copy( _face.centroidModel ).applyProjection( _viewProjectionMatrix );

					_face.z = _centroid.z;

					_renderData.elements.push( _face );

				}

			} else if ( object instanceof THREE.Line ) {

				_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );

				vertices = object.geometry.vertices;

				v1 = getNextVertexInPool();
				v1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );

				// Handle LineStrip and LinePieces
				var step = object.type === THREE.LinePieces ? 2 : 1;

				for ( v = 1, vl = vertices.length; v < vl; v ++ ) {

					v1 = getNextVertexInPool();
					v1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );

					if ( ( v + 1 ) % step > 0 ) continue;

					v2 = _vertexPool[ _vertexCount - 2 ];

					_clippedVertex1PositionScreen.copy( v1.positionScreen );
					_clippedVertex2PositionScreen.copy( v2.positionScreen );

					if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {

						// Perform the perspective divide
						_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );
						_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );

						_line = getNextLineInPool();

						_line.id = object.id;
						_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );
						_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );

						_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );

						_line.material = object.material;

						if ( object.material.vertexColors === THREE.VertexColors ) {

							_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );
							_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );

						}

						_renderData.elements.push( _line );

					}

				}

			}

		}

		for ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {

			object = _renderData.sprites[ o ].object;

			_modelMatrix = object.matrixWorld;

			_vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );
			_vector4.applyMatrix4( _viewProjectionMatrix );

			var invW = 1 / _vector4.w;

			_vector4.z *= invW;

			if ( _vector4.z >= -1 && _vector4.z <= 1 ) {

				_sprite = getNextSpriteInPool();
				_sprite.id = object.id;
				_sprite.x = _vector4.x * invW;
				_sprite.y = _vector4.y * invW;
				_sprite.z = _vector4.z;
				_sprite.object = object;

				_sprite.rotation = object.rotation;

				_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );
				_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );

				_sprite.material = object.material;

				_renderData.elements.push( _sprite );

			}

		}

		if ( sortElements === true ) _renderData.elements.sort( painterSort );

		return _renderData;

	};

	// Pools

	function getNextObjectInPool() {

		if ( _objectCount === _objectPoolLength ) {

			var object = new THREE.RenderableObject();
			_objectPool.push( object );
			_objectPoolLength ++;
			_objectCount ++;
			return object;

		}

		return _objectPool[ _objectCount ++ ];

	}

	function getNextVertexInPool() {

		if ( _vertexCount === _vertexPoolLength ) {

			var vertex = new THREE.RenderableVertex();
			_vertexPool.push( vertex );
			_vertexPoolLength ++;
			_vertexCount ++;
			return vertex;

		}

		return _vertexPool[ _vertexCount ++ ];

	}

	function getNextFace3InPool() {

		if ( _face3Count === _face3PoolLength ) {

			var face = new THREE.RenderableFace3();
			_face3Pool.push( face );
			_face3PoolLength ++;
			_face3Count ++;
			return face;

		}

		return _face3Pool[ _face3Count ++ ];


	}

	function getNextLineInPool() {

		if ( _lineCount === _linePoolLength ) {

			var line = new THREE.RenderableLine();
			_linePool.push( line );
			_linePoolLength ++;
			_lineCount ++
			return line;

		}

		return _linePool[ _lineCount ++ ];

	}

	function getNextSpriteInPool() {

		if ( _spriteCount === _spritePoolLength ) {

			var sprite = new THREE.RenderableSprite();
			_spritePool.push( sprite );
			_spritePoolLength ++;
			_spriteCount ++
			return sprite;

		}

		return _spritePool[ _spriteCount ++ ];

	}

	//

	function painterSort( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else if ( a.id !== b.id ) {

			return a.id - b.id;

		} else {

			return 0;

		}

	}

	function clipLine( s1, s2 ) {

		var alpha1 = 0, alpha2 = 1,

		// Calculate the boundary coordinate of each vertex for the near and far clip planes,
		// Z = -1 and Z = +1, respectively.
		bc1near =  s1.z + s1.w,
		bc2near =  s2.z + s2.w,
		bc1far =  - s1.z + s1.w,
		bc2far =  - s2.z + s2.w;

		if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {

			// Both vertices lie entirely within all clip planes.
			return true;

		} else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {

			// Both vertices lie entirely outside one of the clip planes.
			return false;

		} else {

			// The line segment spans at least one clip plane.

			if ( bc1near < 0 ) {

				// v1 lies outside the near plane, v2 inside
				alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );

			} else if ( bc2near < 0 ) {

				// v2 lies outside the near plane, v1 inside
				alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );

			}

			if ( bc1far < 0 ) {

				// v1 lies outside the far plane, v2 inside
				alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );

			} else if ( bc2far < 0 ) {

				// v2 lies outside the far plane, v2 inside
				alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );

			}

			if ( alpha2 < alpha1 ) {

				// The line segment spans two boundaries, but is outside both of them.
				// (This can't happen when we're only clipping against just near/far but good
				//  to leave the check here for future usage if other clip planes are added.)
				return false;

			} else {

				// Update the s1 and s2 vertices to match the clipped line segment.
				s1.lerp( s2, alpha1 );
				s2.lerp( s1, 1 - alpha2 );

				return true;

			}

		}

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
	this.vertexNormals = normal instanceof Array ? normal : [ ];

	this.color = color instanceof THREE.Color ? color : new THREE.Color();
	this.vertexColors = color instanceof Array ? color : [];

	this.vertexTangents = [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	this.centroid = new THREE.Vector3();

};

THREE.Face3.prototype = {

	constructor: THREE.Face3,

	clone: function () {

		var face = new THREE.Face3( this.a, this.b, this.c );

		face.normal.copy( this.normal );
		face.color.copy( this.color );
		face.centroid.copy( this.centroid );

		face.materialIndex = this.materialIndex;

		var i, il;
		for ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();
		for ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();
		for ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();

		return face;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.')

	return new THREE.Face3( a, b, c, normal, color, materialIndex );

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://exocortex.com
 */

THREE.Geometry = function () {

	this.id = THREE.GeometryIdCount ++;
	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	this.vertices = [];
	this.colors = [];  // one-to-one vertex colors, used in ParticleSystem and Line

	this.faces = [];

	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphColors = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.hasTangents = false;

	this.dynamic = true; // the intermediate typed arrays will be deleted when set to false

	// update flags

	this.verticesNeedUpdate = false;
	this.elementsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.tangentsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;

	this.buffersNeedUpdate = false;

};

THREE.Geometry.prototype = {

	constructor: THREE.Geometry,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

			face.centroid.applyMatrix4( matrix );

		}

		if ( this.boundingBox instanceof THREE.Box3 ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere instanceof THREE.Sphere ) {

			this.computeBoundingSphere();

		}

	},

	computeCentroids: function () {

		var f, fl, face;

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];
			face.centroid.set( 0, 0, 0 );

			face.centroid.add( this.vertices[ face.a ] );
			face.centroid.add( this.vertices[ face.b ] );
			face.centroid.add( this.vertices[ face.c ] );
			face.centroid.divideScalar( 3 );

		}

	},

	computeFaceNormals: function () {

		var cb = new THREE.Vector3(), ab = new THREE.Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this.faces[ f ];

			var vA = this.vertices[ face.a ];
			var vB = this.vertices[ face.b ];
			var vC = this.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new THREE.Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC, vD;
			var cb = new THREE.Vector3(), ab = new THREE.Vector3(),
				db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vA = this.vertices[ face.a ];
				vB = this.vertices[ face.b ];
				vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.vertexNormals[ 0 ] = vertices[ face.a ].clone();
			face.vertexNormals[ 1 ] = vertices[ face.b ].clone();
			face.vertexNormals[ 2 ] = vertices[ face.c ].clone();

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new THREE.Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = new THREE.Vector3();
					vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// tangents go to vertices

		var f, fl, v, vl, i, il, vertexIndex,
			face, uv, vA, vB, vC, uvA, uvB, uvC,
			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r, t, test,
			tan1 = [], tan2 = [],
			sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),
			tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),
			n = new THREE.Vector3(), w;

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			tan1[ v ] = new THREE.Vector3();
			tan2[ v ] = new THREE.Vector3();

		}

		function handleTriangle( context, a, b, c, ua, ub, uc ) {

			vA = context.vertices[ a ];
			vB = context.vertices[ b ];
			vC = context.vertices[ c ];

			uvA = uv[ ua ];
			uvB = uv[ ub ];
			uvC = uv[ uc ];

			x1 = vB.x - vA.x;
			x2 = vC.x - vA.x;
			y1 = vB.y - vA.y;
			y2 = vC.y - vA.y;
			z1 = vB.z - vA.z;
			z2 = vC.z - vA.z;

			s1 = uvB.x - uvA.x;
			s2 = uvC.x - uvA.x;
			t1 = uvB.y - uvA.y;
			t2 = uvC.y - uvA.y;

			r = 1.0 / ( s1 * t2 - s2 * t1 );
			sdir.set( ( t2 * x1 - t1 * x2 ) * r,
					  ( t2 * y1 - t1 * y2 ) * r,
					  ( t2 * z1 - t1 * z2 ) * r );
			tdir.set( ( s1 * x2 - s2 * x1 ) * r,
					  ( s1 * y2 - s2 * y1 ) * r,
					  ( s1 * z2 - s2 * z1 ) * r );

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];
			uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents

			handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );

		}

		var faceIndex = [ 'a', 'b', 'c', 'd' ];

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			for ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i++ ) {

				n.copy( face.vertexNormals[ i ] );

				vertexIndex = face[ faceIndex[ i ] ];

				t = tan1[ vertexIndex ];

				// Gram-Schmidt orthogonalize

				tmp.copy( t );
				tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

				// Calculate handedness

				tmp2.crossVectors( face.vertexNormals[ i ], t );
				test = tmp2.dot( tan2[ vertexIndex ] );
				w = (test < 0.0) ? -1.0 : 1.0;

				face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );

			}

		}

		this.hasTangents = true;

	},

	computeLineDistances: function ( ) {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new THREE.Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new THREE.Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i,il, face;
		var indices, k, j, jl, u;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		};


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			var dupIndex = -1;

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {
				if ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {

					dupIndex = n;
					faceIndicesToRemove.push( i );
					break;

				}
			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
			var idx = faceIndicesToRemove[ i ];

			this.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	clone: function () {

		var geometry = new THREE.Geometry();

		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			geometry.vertices.push( vertices[ i ].clone() );

		}

		var faces = this.faces;

		for ( var i = 0, il = faces.length; i < il; i ++ ) {

			geometry.faces.push( faces[ i ].clone() );

		}

		var uvs = this.faceVertexUvs[ 0 ];

		for ( var i = 0, il = uvs.length; i < il; i ++ ) {

			var uv = uvs[ i ], uvCopy = [];

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			geometry.faceVertexUvs[ 0 ].push( uvCopy );

		}

		return geometry;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );

THREE.GeometryIdCount = 0;

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BufferGeometry = function () {

	this.id = THREE.GeometryIdCount ++;
	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	// attributes

	this.attributes = {};

	// attributes typed arrays are kept only if dynamic flag is set

	this.dynamic = true;

	// offsets for chunks when using indexed elements

	this.offsets = [];

	// boundings

	this.boundingBox = null;
	this.boundingSphere = null;

	this.hasTangents = false;

	// for compatibility

	this.morphTargets = [];

};

THREE.BufferGeometry.prototype = {

	constructor: THREE.BufferGeometry,

	addAttribute: function( name, type, numItems, itemSize ) {

		this.attributes[ name ] = {

			itemSize: itemSize,
			array: new type( numItems * itemSize )

		};

	},

	applyMatrix: function ( matrix ) {

		var positionArray;
		var normalArray;

		if ( this.attributes[ "position" ] ) positionArray = this.attributes[ "position" ].array;
		if ( this.attributes[ "normal" ] ) normalArray = this.attributes[ "normal" ].array;

		if ( positionArray !== undefined ) {

			matrix.multiplyVector3Array( positionArray );
			this.verticesNeedUpdate = true;

		}

		if ( normalArray !== undefined ) {

			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			normalMatrix.multiplyVector3Array( normalArray );

			this.normalizeNormals();

			this.normalsNeedUpdate = true;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new THREE.Box3();

		}

		var positions = this.attributes[ "position" ].array;

		if ( positions ) {

			var bb = this.boundingBox;
			var x, y, z;

			if( positions.length >= 3 ) {
				bb.min.x = bb.max.x = positions[ 0 ];
				bb.min.y = bb.max.y = positions[ 1 ];
				bb.min.z = bb.max.z = positions[ 2 ];
			}

			for ( var i = 3, il = positions.length; i < il; i += 3 ) {

				x = positions[ i ];
				y = positions[ i + 1 ];
				z = positions[ i + 2 ];

				// bounding box

				if ( x < bb.min.x ) {

					bb.min.x = x;

				} else if ( x > bb.max.x ) {

					bb.max.x = x;

				}

				if ( y < bb.min.y ) {

					bb.min.y = y;

				} else if ( y > bb.max.y ) {

					bb.max.y = y;

				}

				if ( z < bb.min.z ) {

					bb.min.z = z;

				} else if ( z > bb.max.z ) {

					bb.max.z = z;

				}

			}

		}

		if ( positions === undefined || positions.length === 0 ) {

			this.boundingBox.min.set( 0, 0, 0 );
			this.boundingBox.max.set( 0, 0, 0 );

		}

	},

	computeBoundingSphere: function () {

		var box = new THREE.Box3();
		var vector = new THREE.Vector3();

		return function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new THREE.Sphere();

			}

			var positions = this.attributes[ "position" ].array;

			if ( positions ) {

				box.makeEmpty();

				var center = this.boundingSphere.center;

				for ( var i = 0, il = positions.length; i < il; i += 3 ) {

					vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
					box.addPoint( vector );

				}

				box.center( center );

				var maxRadiusSq = 0;

				for ( var i = 0, il = positions.length; i < il; i += 3 ) {

					vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

			}

		}

	}(),

	computeVertexNormals: function () {

		if ( this.attributes[ "position" ] ) {

			var i, il;
			var j, jl;

			var nVertexElements = this.attributes[ "position" ].array.length;

			if ( this.attributes[ "normal" ] === undefined ) {

				this.attributes[ "normal" ] = {

					itemSize: 3,
					array: new Float32Array( nVertexElements )

				};

			} else {

				// reset existing normals to zero

				for ( i = 0, il = this.attributes[ "normal" ].array.length; i < il; i ++ ) {

					this.attributes[ "normal" ].array[ i ] = 0;

				}

			}

			var positions = this.attributes[ "position" ].array;
			var normals = this.attributes[ "normal" ].array;

			var vA, vB, vC, x, y, z,

			pA = new THREE.Vector3(),
			pB = new THREE.Vector3(),
			pC = new THREE.Vector3(),

			cb = new THREE.Vector3(),
			ab = new THREE.Vector3();

			// indexed elements

			if ( this.attributes[ "index" ] ) {

				var indices = this.attributes[ "index" ].array;

				var offsets = this.offsets;

				for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

					var start = offsets[ j ].start;
					var count = offsets[ j ].count;
					var index = offsets[ j ].index;

					for ( i = start, il = start + count; i < il; i += 3 ) {

						vA = index + indices[ i ];
						vB = index + indices[ i + 1 ];
						vC = index + indices[ i + 2 ];

						x = positions[ vA * 3 ];
						y = positions[ vA * 3 + 1 ];
						z = positions[ vA * 3 + 2 ];
						pA.set( x, y, z );

						x = positions[ vB * 3 ];
						y = positions[ vB * 3 + 1 ];
						z = positions[ vB * 3 + 2 ];
						pB.set( x, y, z );

						x = positions[ vC * 3 ];
						y = positions[ vC * 3 + 1 ];
						z = positions[ vC * 3 + 2 ];
						pC.set( x, y, z );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA * 3 ]     += cb.x;
						normals[ vA * 3 + 1 ] += cb.y;
						normals[ vA * 3 + 2 ] += cb.z;

						normals[ vB * 3 ]     += cb.x;
						normals[ vB * 3 + 1 ] += cb.y;
						normals[ vB * 3 + 2 ] += cb.z;

						normals[ vC * 3 ]     += cb.x;
						normals[ vC * 3 + 1 ] += cb.y;
						normals[ vC * 3 + 2 ] += cb.z;

					}

				}

			// non-indexed elements (unconnected triangle soup)

			} else {

				for ( i = 0, il = positions.length; i < il; i += 9 ) {

					x = positions[ i ];
					y = positions[ i + 1 ];
					z = positions[ i + 2 ];
					pA.set( x, y, z );

					x = positions[ i + 3 ];
					y = positions[ i + 4 ];
					z = positions[ i + 5 ];
					pB.set( x, y, z );

					x = positions[ i + 6 ];
					y = positions[ i + 7 ];
					z = positions[ i + 8 ];
					pC.set( x, y, z );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i ] 	 = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			this.normalsNeedUpdate = true;

		}

	},

	normalizeNormals: function () {

		var normals = this.attributes[ "normal" ].array;

		var x, y, z, n;

		for ( var i = 0, il = normals.length; i < il; i += 3 ) {

			x = normals[ i ];
			y = normals[ i + 1 ];
			z = normals[ i + 2 ];

			n = 1.0 / Math.sqrt( x * x + y * y + z * z );

			normals[ i ] 	 *= n;
			normals[ i + 1 ] *= n;
			normals[ i + 2 ] *= n;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if ( this.attributes[ "index" ] === undefined ||
			 this.attributes[ "position" ] === undefined ||
			 this.attributes[ "normal" ] === undefined ||
			 this.attributes[ "uv" ] === undefined ) {

			console.warn( "Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()" );
			return;

		}

		var indices = this.attributes[ "index" ].array;
		var positions = this.attributes[ "position" ].array;
		var normals = this.attributes[ "normal" ].array;
		var uvs = this.attributes[ "uv" ].array;

		var nVertices = positions.length / 3;

		if ( this.attributes[ "tangent" ] === undefined ) {

			var nTangentElements = 4 * nVertices;

			this.attributes[ "tangent" ] = {

				itemSize: 4,
				array: new Float32Array( nTangentElements )

			};

		}

		var tangents = this.attributes[ "tangent" ].array;

		var tan1 = [], tan2 = [];

		for ( var k = 0; k < nVertices; k ++ ) {

			tan1[ k ] = new THREE.Vector3();
			tan2[ k ] = new THREE.Vector3();

		}

		var xA, yA, zA,
			xB, yB, zB,
			xC, yC, zC,

			uA, vA,
			uB, vB,
			uC, vC,

			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r;

		var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();

		function handleTriangle( a, b, c ) {

			xA = positions[ a * 3 ];
			yA = positions[ a * 3 + 1 ];
			zA = positions[ a * 3 + 2 ];

			xB = positions[ b * 3 ];
			yB = positions[ b * 3 + 1 ];
			zB = positions[ b * 3 + 2 ];

			xC = positions[ c * 3 ];
			yC = positions[ c * 3 + 1 ];
			zC = positions[ c * 3 + 2 ];

			uA = uvs[ a * 2 ];
			vA = uvs[ a * 2 + 1 ];

			uB = uvs[ b * 2 ];
			vB = uvs[ b * 2 + 1 ];

			uC = uvs[ c * 2 ];
			vC = uvs[ c * 2 + 1 ];

			x1 = xB - xA;
			x2 = xC - xA;

			y1 = yB - yA;
			y2 = yC - yA;

			z1 = zB - zA;
			z2 = zC - zA;

			s1 = uB - uA;
			s2 = uC - uA;

			t1 = vB - vA;
			t2 = vC - vA;

			r = 1.0 / ( s1 * t2 - s2 * t1 );

			sdir.set(
				( t2 * x1 - t1 * x2 ) * r,
				( t2 * y1 - t1 * y2 ) * r,
				( t2 * z1 - t1 * z2 ) * r
			);

			tdir.set(
				( s1 * x2 - s2 * x1 ) * r,
				( s1 * y2 - s2 * y1 ) * r,
				( s1 * z2 - s2 * z1 ) * r
			);

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		var i, il;
		var j, jl;
		var iA, iB, iC;

		var offsets = this.offsets;

		for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

			var start = offsets[ j ].start;
			var count = offsets[ j ].count;
			var index = offsets[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleTriangle( iA, iB, iC );

			}

		}

		var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();
		var n = new THREE.Vector3(), n2 = new THREE.Vector3();
		var w, t, test;

		function handleVertex( v ) {

			n.x = normals[ v * 3 ];
			n.y = normals[ v * 3 + 1 ];
			n.z = normals[ v * 3 + 2 ];

			n2.copy( n );

			t = tan1[ v ];

			// Gram-Schmidt orthogonalize

			tmp.copy( t );
			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

			// Calculate handedness

			tmp2.crossVectors( n2, t );
			test = tmp2.dot( tan2[ v ] );
			w = ( test < 0.0 ) ? -1.0 : 1.0;

			tangents[ v * 4 ]     = tmp.x;
			tangents[ v * 4 + 1 ] = tmp.y;
			tangents[ v * 4 + 2 ] = tmp.z;
			tangents[ v * 4 + 3 ] = w;

		}

		for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

			var start = offsets[ j ].start;
			var count = offsets[ j ].count;
			var index = offsets[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleVertex( iA );
				handleVertex( iB );
				handleVertex( iC );

			}

		}

		this.hasTangents = true;
		this.tangentsNeedUpdate = true;

	},

	clone: function () {

		var geometry = new THREE.BufferGeometry();

		var types = [ Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];

		for ( var attr in this.attributes ) {

			var sourceAttr = this.attributes[ attr ];
			var sourceArray = sourceAttr.array;

			var attribute = {

				itemSize: sourceAttr.itemSize,
				numItems: sourceAttr.numItems,
				array: null

			};

			for ( var i = 0, il = types.length; i < il; i ++ ) {

				var type = types[ i ];

				if ( sourceArray instanceof type ) {

					attribute.array = new type( sourceArray );
					break;

				}

			}

			geometry.attributes[ attr ] = attribute;

		}

		for ( var i = 0, il = this.offsets.length; i < il; i ++ ) {

			var offset = this.offsets[ i ];

			geometry.offsets.push( {

				start: offset.start,
				index: offset.index,
				count: offset.count

			} );

		}

		return geometry;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.Camera = function () {

	THREE.Object3D.call( this );

	this.matrixWorldInverse = new THREE.Matrix4();
	this.projectionMatrix = new THREE.Matrix4();

};

THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );

THREE.Camera.prototype.lookAt = function () {

	// This routine does not support cameras with rotated and/or translated parent(s)

	var m1 = new THREE.Matrix4();

	return function ( vector ) {

		m1.lookAt( this.position, vector, this.up );

		this.quaternion.setFromRotationMatrix( m1 );

	};

}();

THREE.Camera.prototype.clone = function (camera) {

	if ( camera === undefined ) camera = new THREE.Camera();

	THREE.Object3D.prototype.clone.call( this, camera );

	camera.matrixWorldInverse.copy( this.matrixWorldInverse );
	camera.projectionMatrix.copy( this.projectionMatrix );

	return camera;
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

	THREE.Camera.call( this );

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

	this.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );

};

THREE.OrthographicCamera.prototype.clone = function () {

	var camera = new THREE.OrthographicCamera();

	THREE.Camera.prototype.clone.call( this, camera );

	camera.left = this.left;
	camera.right = this.right;
	camera.top = this.top;
	camera.bottom = this.bottom;
	
	camera.near = this.near;
	camera.far = this.far;

	return camera;
};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

	THREE.Camera.call( this );

	this.fov = fov !== undefined ? fov : 50;
	this.aspect = aspect !== undefined ? aspect : 1;
	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );


/**
 * Uses Focal Length (in mm) to estimate and set FOV
 * 35mm (fullframe) camera is used if frame size is not specified;
 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
 */

THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

	if ( frameHeight === undefined ) frameHeight = 24;

	this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
	this.updateProjectionMatrix();

}


/**
 * Sets an offset in a larger frustum. This is useful for multi-window or
 * multi-monitor/multi-machine setups.
 *
 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
 * the monitors are in grid like this
 *
 *   +---+---+---+
 *   | A | B | C |
 *   +---+---+---+
 *   | D | E | F |
 *   +---+---+---+
 *
 * then for each monitor you would call it like this
 *
 *   var w = 1920;
 *   var h = 1080;
 *   var fullWidth = w * 3;
 *   var fullHeight = h * 2;
 *
 *   --A--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
 *   --B--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
 *   --C--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
 *   --D--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
 *   --E--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
 *   --F--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
 *
 *   Note there is no reason monitors have to be the same size or in a grid.
 */

THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

	this.fullWidth = fullWidth;
	this.fullHeight = fullHeight;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;

	this.updateProjectionMatrix();

};


THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

	if ( this.fullWidth ) {

		var aspect = this.fullWidth / this.fullHeight;
		var top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;
		var bottom = -top;
		var left = aspect * bottom;
		var right = aspect * top;
		var width = Math.abs( right - left );
		var height = Math.abs( top - bottom );

		this.projectionMatrix.makeFrustum(
			left + this.x * width / this.fullWidth,
			left + ( this.x + this.width ) * width / this.fullWidth,
			top - ( this.y + this.height ) * height / this.fullHeight,
			top - this.y * height / this.fullHeight,
			this.near,
			this.far
		);

	} else {

		this.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );

	}

};

THREE.PerspectiveCamera.prototype.clone = function () {

	var camera = new THREE.PerspectiveCamera();

	THREE.Camera.prototype.clone.call( this, camera );

	camera.fov = this.fov;
	camera.aspect = this.aspect;
	camera.near = this.near;
	camera.far = this.far;

	return camera;
};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */
 
THREE.Light = function ( hex ) {

	THREE.Object3D.call( this );

	this.color = new THREE.Color( hex );

};

THREE.Light.prototype = Object.create( THREE.Object3D.prototype );

THREE.Light.prototype.clone = function ( light ) {

	if ( light === undefined ) light = new THREE.Light();

	THREE.Object3D.prototype.clone.call( this, light );

	light.color.copy( this.color );

	return light;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AmbientLight = function ( hex ) {

	THREE.Light.call( this, hex );

};

THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );

THREE.AmbientLight.prototype.clone = function () {

	var light = new THREE.AmbientLight();

	THREE.Light.prototype.clone.call( this, light );

	return light;

};

/**
 * @author MPanknin / http://www.redplant.de/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.AreaLight = function ( hex, intensity ) {

	THREE.Light.call( this, hex );

	this.normal = new THREE.Vector3( 0, -1, 0 );
	this.right = new THREE.Vector3( 1, 0, 0 );

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.width = 1.0;
	this.height = 1.0;

	this.constantAttenuation = 1.5;
	this.linearAttenuation = 0.5;
	this.quadraticAttenuation = 0.1;

};

THREE.AreaLight.prototype = Object.create( THREE.Light.prototype );


/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DirectionalLight = function ( hex, intensity ) {

	THREE.Light.call( this, hex );

	this.position.set( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;

	this.shadowCameraLeft = -500;
	this.shadowCameraRight = 500;
	this.shadowCameraTop = 500;
	this.shadowCameraBottom = -500;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowCascade = false;

	this.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );
	this.shadowCascadeCount = 2;

	this.shadowCascadeBias = [ 0, 0, 0 ];
	this.shadowCascadeWidth = [ 512, 512, 512 ];
	this.shadowCascadeHeight = [ 512, 512, 512 ];

	this.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];
	this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];

	this.shadowCascadeArray = [];

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );

THREE.DirectionalLight.prototype.clone = function () {

	var light = new THREE.DirectionalLight();

	THREE.Light.prototype.clone.call( this, light );

	light.target = this.target.clone();

	light.intensity = this.intensity;

	light.castShadow = this.castShadow;
	light.onlyShadow = this.onlyShadow;

	return light;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {

	THREE.Light.call( this, skyColorHex );

	this.position.set( 0, 100, 0 );

	this.groundColor = new THREE.Color( groundColorHex );
	this.intensity = ( intensity !== undefined ) ? intensity : 1;

};

THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );

THREE.HemisphereLight.prototype.clone = function () {

	var light = new THREE.HemisphereLight();

	THREE.Light.prototype.clone.call( this, light );

	light.groundColor.copy( this.groundColor );
	light.intensity = this.intensity;

	return light;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLight = function ( hex, intensity, distance ) {

	THREE.Light.call( this, hex );

	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;

};

THREE.PointLight.prototype = Object.create( THREE.Light.prototype );

THREE.PointLight.prototype.clone = function () {

	var light = new THREE.PointLight();

	THREE.Light.prototype.clone.call( this, light );

	light.intensity = this.intensity;
	light.distance = this.distance;

	return light;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {

	THREE.Light.call( this, hex );

	this.position.set( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.exponent = ( exponent !== undefined ) ? exponent : 10;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;
	this.shadowCameraFov = 50;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );

THREE.SpotLight.prototype.clone = function () {

	var light = new THREE.SpotLight();

	THREE.Light.prototype.clone.call( this, light );

	light.target = this.target.clone();

	light.intensity = this.intensity;
	light.distance = this.distance;
	light.angle = this.angle;
	light.exponent = this.exponent;

	light.castShadow = this.castShadow;
	light.onlyShadow = this.onlyShadow;

	return light;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Loader = function ( showStatus ) {

	this.showStatus = showStatus;
	this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

};

THREE.Loader.prototype = {

	constructor: THREE.Loader,

	crossOrigin: undefined,

	addStatusElement: function () {

		var e = document.createElement( "div" );

		e.style.position = "absolute";
		e.style.right = "0px";
		e.style.top = "0px";
		e.style.fontSize = "0.8em";
		e.style.textAlign = "left";
		e.style.background = "rgba(0,0,0,0.25)";
		e.style.color = "#fff";
		e.style.width = "120px";
		e.style.padding = "0.5em 0.5em 0.5em 0.5em";
		e.style.zIndex = 1000;

		e.innerHTML = "Loading ...";

		return e;

	},

	updateProgress: function ( progress ) {

		var message = "Loaded ";

		if ( progress.total ) {

			message += ( 100 * progress.loaded / progress.total ).toFixed(0) + "%";


		} else {

			message += ( progress.loaded / 1000 ).toFixed(2) + " KB";

		}

		this.statusDomElement.innerHTML = message;

	},

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );
		parts.pop();
		return ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';

	},

	initMaterials: function ( materials, texturePath ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );

		}

		return array;

	},

	needsTangents: function ( materials ) {

		for( var i = 0, il = materials.length; i < il; i ++ ) {

			var m = materials[ i ];

			if ( m instanceof THREE.ShaderMaterial ) return true;

		}

		return false;

	},

	createMaterial: function ( m, texturePath ) {

		var _this = this;

		function is_pow2( n ) {

			var l = Math.log( n ) / Math.LN2;
			return Math.floor( l ) == l;

		}

		function nearest_pow2( n ) {

			var l = Math.log( n ) / Math.LN2;
			return Math.pow( 2, Math.round(  l ) );

		}

		function load_image( where, url ) {

			var image = new Image();

			image.onload = function () {

				if ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {

					var width = nearest_pow2( this.width );
					var height = nearest_pow2( this.height );

					where.image.width = width;
					where.image.height = height;
					where.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );

				} else {

					where.image = this;

				}

				where.needsUpdate = true;

			};

			if ( _this.crossOrigin !== undefined ) image.crossOrigin = _this.crossOrigin;
			image.src = url;

		}

		function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {

			var isCompressed = /\.dds$/i.test( sourceFile );
			var fullPath = texturePath + "/" + sourceFile;

			if ( isCompressed ) {

				var texture = THREE.ImageUtils.loadCompressedTexture( fullPath );

				where[ name ] = texture;

			} else {

				var texture = document.createElement( 'canvas' );

				where[ name ] = new THREE.Texture( texture );

			}

			where[ name ].sourceFile = sourceFile;

			if( repeat ) {

				where[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );

				if ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;
				if ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;

			}

			if ( offset ) {

				where[ name ].offset.set( offset[ 0 ], offset[ 1 ] );

			}

			if ( wrap ) {

				var wrapMap = {
					"repeat": THREE.RepeatWrapping,
					"mirror": THREE.MirroredRepeatWrapping
				}

				if ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];
				if ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];

			}

			if ( anisotropy ) {

				where[ name ].anisotropy = anisotropy;

			}

			if ( ! isCompressed ) {

				load_image( where[ name ], fullPath );

			}

		}

		function rgb2hex( rgb ) {

			return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;

		}

		// defaults

		var mtype = "MeshLambertMaterial";
		var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };

		// parameters from model file

		if ( m.shading ) {

			var shading = m.shading.toLowerCase();

			if ( shading === "phong" ) mtype = "MeshPhongMaterial";
			else if ( shading === "basic" ) mtype = "MeshBasicMaterial";

		}

		if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {

			mpars.blending = THREE[ m.blending ];

		}

		if ( m.transparent !== undefined || m.opacity < 1.0 ) {

			mpars.transparent = m.transparent;

		}

		if ( m.depthTest !== undefined ) {

			mpars.depthTest = m.depthTest;

		}

		if ( m.depthWrite !== undefined ) {

			mpars.depthWrite = m.depthWrite;

		}

		if ( m.visible !== undefined ) {

			mpars.visible = m.visible;

		}

		if ( m.flipSided !== undefined ) {

			mpars.side = THREE.BackSide;

		}

		if ( m.doubleSided !== undefined ) {

			mpars.side = THREE.DoubleSide;

		}

		if ( m.wireframe !== undefined ) {

			mpars.wireframe = m.wireframe;

		}

		if ( m.vertexColors !== undefined ) {

			if ( m.vertexColors === "face" ) {

				mpars.vertexColors = THREE.FaceColors;

			} else if ( m.vertexColors ) {

				mpars.vertexColors = THREE.VertexColors;

			}

		}

		// colors

		if ( m.colorDiffuse ) {

			mpars.color = rgb2hex( m.colorDiffuse );

		} else if ( m.DbgColor ) {

			mpars.color = m.DbgColor;

		}

		if ( m.colorSpecular ) {

			mpars.specular = rgb2hex( m.colorSpecular );

		}

		if ( m.colorAmbient ) {

			mpars.ambient = rgb2hex( m.colorAmbient );

		}

		// modifiers

		if ( m.transparency ) {

			mpars.opacity = m.transparency;

		}

		if ( m.specularCoef ) {

			mpars.shininess = m.specularCoef;

		}

		// textures

		if ( m.mapDiffuse && texturePath ) {

			create_texture( mpars, "map", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );

		}

		if ( m.mapLight && texturePath ) {

			create_texture( mpars, "lightMap", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );

		}

		if ( m.mapBump && texturePath ) {

			create_texture( mpars, "bumpMap", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );

		}

		if ( m.mapNormal && texturePath ) {

			create_texture( mpars, "normalMap", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );

		}

		if ( m.mapSpecular && texturePath ) {

			create_texture( mpars, "specularMap", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );

		}

		//

		if ( m.mapBumpScale ) {

			mpars.bumpScale = m.mapBumpScale;

		}

		// special case for normal mapped material

		if ( m.mapNormal ) {

			var shader = THREE.ShaderLib[ "normalmap" ];
			var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			uniforms[ "tNormal" ].value = mpars.normalMap;

			if ( m.mapNormalFactor ) {

				uniforms[ "uNormalScale" ].value.set( m.mapNormalFactor, m.mapNormalFactor );

			}

			if ( mpars.map ) {

				uniforms[ "tDiffuse" ].value = mpars.map;
				uniforms[ "enableDiffuse" ].value = true;

			}

			if ( mpars.specularMap ) {

				uniforms[ "tSpecular" ].value = mpars.specularMap;
				uniforms[ "enableSpecular" ].value = true;

			}

			if ( mpars.lightMap ) {

				uniforms[ "tAO" ].value = mpars.lightMap;
				uniforms[ "enableAO" ].value = true;

			}

			// for the moment don't handle displacement texture

			uniforms[ "diffuse" ].value.setHex( mpars.color );
			uniforms[ "specular" ].value.setHex( mpars.specular );
			uniforms[ "ambient" ].value.setHex( mpars.ambient );

			uniforms[ "shininess" ].value = mpars.shininess;

			if ( mpars.opacity !== undefined ) {

				uniforms[ "opacity" ].value = mpars.opacity;

			}

			var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };
			var material = new THREE.ShaderMaterial( parameters );

			if ( mpars.transparent ) {

				material.transparent = true;

			}

		} else {

			var material = new THREE[ mtype ]( mpars );

		}

		if ( m.DbgName !== undefined ) material.name = m.DbgName;

		return material;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.XHRLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.XHRLoader.prototype = {

	constructor: THREE.XHRLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;
		var request = new XMLHttpRequest();

		if ( onLoad !== undefined ) {

			request.addEventListener( 'load', function ( event ) {

				onLoad( event.target.responseText );
				scope.manager.itemEnd( url );

			}, false );

		}

		if ( onProgress !== undefined ) {

			request.addEventListener( 'progress', function ( event ) {

				onProgress( event );

			}, false );

		}

		if ( onError !== undefined ) {

			request.addEventListener( 'error', function ( event ) {

				onError( event );

			}, false );

		}

		if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;

		request.open( 'GET', url, true );
		request.send( null );

		scope.manager.itemStart( url );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ImageLoader.prototype = {

	constructor: THREE.ImageLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;
		var image = document.createElement( 'img' );

		if ( onLoad !== undefined ) {

			image.addEventListener( 'load', function ( event ) {

				scope.manager.itemEnd( url );
				onLoad( this );

			}, false );

		}

		if ( onProgress !== undefined ) {

			image.addEventListener( 'progress', function ( event ) {

				onProgress( event );

			}, false );

		}

		if ( onError !== undefined ) {

			image.addEventListener( 'error', function ( event ) {

				onError( event );

			}, false );

		}

		if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		image.src = url;

		scope.manager.itemStart( url );

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.JSONLoader = function ( showStatus ) {

	THREE.Loader.call( this, showStatus );

	this.withCredentials = false;

};

THREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );

THREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {

	var scope = this;

	// todo: unify load API to for easier SceneLoader use

	texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );

	this.onLoadStart();
	this.loadAjaxJSON( this, url, callback, texturePath );

};

THREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {

	var xhr = new XMLHttpRequest();

	var length = 0;

	xhr.onreadystatechange = function () {

		if ( xhr.readyState === xhr.DONE ) {

			if ( xhr.status === 200 || xhr.status === 0 ) {

				if ( xhr.responseText ) {

					var json = JSON.parse( xhr.responseText );
					var result = context.parse( json, texturePath );
					callback( result.geometry, result.materials );

				} else {

					console.warn( "THREE.JSONLoader: [" + url + "] seems to be unreachable or file there is empty" );

				}

				// in context of more complex asset initialization
				// do not block on single failed file
				// maybe should go even one more level up

				context.onLoadComplete();

			} else {

				console.error( "THREE.JSONLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

			}

		} else if ( xhr.readyState === xhr.LOADING ) {

			if ( callbackProgress ) {

				if ( length === 0 ) {

					length = xhr.getResponseHeader( "Content-Length" );

				}

				callbackProgress( { total: length, loaded: xhr.responseText.length } );

			}

		} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {

			if ( callbackProgress !== undefined ) {

				length = xhr.getResponseHeader( "Content-Length" );

			}

		}

	};

	xhr.open( "GET", url, true );
	xhr.withCredentials = this.withCredentials;
	xhr.send( null );

};

THREE.JSONLoader.prototype.parse = function ( json, texturePath ) {

	var scope = this,
	geometry = new THREE.Geometry(),
	scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

	parseModel( scale );

	parseSkin();
	parseMorphing( scale );

	geometry.computeCentroids();
	geometry.computeFaceNormals();
	geometry.computeBoundingSphere();

	function parseModel( scale ) {

		function isBitSet( value, position ) {

			return value & ( 1 << position );

		}

		var i, j, fi,

		offset, zLength,

		colorIndex, normalIndex, uvIndex, materialIndex,

		type,
		isQuad,
		hasMaterial,
		hasFaceVertexUv,
		hasFaceNormal, hasFaceVertexNormal,
		hasFaceColor, hasFaceVertexColor,

		vertex, face, faceA, faceB, color, hex, normal,

		uvLayer, uv, u, v,

		faces = json.faces,
		vertices = json.vertices,
		normals = json.normals,
		colors = json.colors,

		nUvLayers = 0;

		if ( json.uvs !== undefined ) {

			// disregard empty arrays

			for ( i = 0; i < json.uvs.length; i++ ) {

				if ( json.uvs[ i ].length ) nUvLayers ++;

			}

			for ( i = 0; i < nUvLayers; i++ ) {

				geometry.faceVertexUvs[ i ] = [];

			}

		}

		offset = 0;
		zLength = vertices.length;

		while ( offset < zLength ) {

			vertex = new THREE.Vector3();

			vertex.x = vertices[ offset ++ ] * scale;
			vertex.y = vertices[ offset ++ ] * scale;
			vertex.z = vertices[ offset ++ ] * scale;

			geometry.vertices.push( vertex );

		}

		offset = 0;
		zLength = faces.length;

		while ( offset < zLength ) {

			type = faces[ offset ++ ];


			isQuad              = isBitSet( type, 0 );
			hasMaterial         = isBitSet( type, 1 );
			hasFaceVertexUv     = isBitSet( type, 3 );
			hasFaceNormal       = isBitSet( type, 4 );
			hasFaceVertexNormal = isBitSet( type, 5 );
			hasFaceColor	    = isBitSet( type, 6 );
			hasFaceVertexColor  = isBitSet( type, 7 );

			// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

			if ( isQuad ) {

				faceA = new THREE.Face3();
				faceA.a = faces[ offset ];
				faceA.b = faces[ offset + 1 ];
				faceA.c = faces[ offset + 3 ];

				faceB = new THREE.Face3();
				faceB.a = faces[ offset + 1 ];
				faceB.b = faces[ offset + 2 ];
				faceB.c = faces[ offset + 3 ];

				offset += 4;

				if ( hasMaterial ) {

					materialIndex = faces[ offset ++ ];
					faceA.materialIndex = materialIndex;
					faceB.materialIndex = materialIndex;

				}

				// to get face <=> uv index correspondence

				fi = geometry.faces.length;

				if ( hasFaceVertexUv ) {

					for ( i = 0; i < nUvLayers; i++ ) {

						uvLayer = json.uvs[ i ];

						geometry.faceVertexUvs[ i ][ fi ] = [];
						geometry.faceVertexUvs[ i ][ fi + 1 ] = []

						for ( j = 0; j < 4; j ++ ) {

							uvIndex = faces[ offset ++ ];

							u = uvLayer[ uvIndex * 2 ];
							v = uvLayer[ uvIndex * 2 + 1 ];

							uv = new THREE.Vector2( u, v );

							if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
							if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

						}

					}

				}

				if ( hasFaceNormal ) {

					normalIndex = faces[ offset ++ ] * 3;

					faceA.normal.set(
						normals[ normalIndex ++ ],
						normals[ normalIndex ++ ],
						normals[ normalIndex ]
					);

					faceB.normal.copy( faceA.normal );

				}

				if ( hasFaceVertexNormal ) {

					for ( i = 0; i < 4; i++ ) {

						normalIndex = faces[ offset ++ ] * 3;

						normal = new THREE.Vector3(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);


						if ( i !== 2 ) faceA.vertexNormals.push( normal );
						if ( i !== 0 ) faceB.vertexNormals.push( normal );

					}

				}


				if ( hasFaceColor ) {

					colorIndex = faces[ offset ++ ];
					hex = colors[ colorIndex ];

					faceA.color.setHex( hex );
					faceB.color.setHex( hex );

				}


				if ( hasFaceVertexColor ) {

					for ( i = 0; i < 4; i++ ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
						if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

					}

				}

				geometry.faces.push( faceA );
				geometry.faces.push( faceB );

			} else {

				face = new THREE.Face3();
				face.a = faces[ offset ++ ];
				face.b = faces[ offset ++ ];
				face.c = faces[ offset ++ ];

				if ( hasMaterial ) {

					materialIndex = faces[ offset ++ ];
					face.materialIndex = materialIndex;

				}

				// to get face <=> uv index correspondence

				fi = geometry.faces.length;

				if ( hasFaceVertexUv ) {

					for ( i = 0; i < nUvLayers; i++ ) {

						uvLayer = json.uvs[ i ];

						geometry.faceVertexUvs[ i ][ fi ] = [];

						for ( j = 0; j < 3; j ++ ) {

							uvIndex = faces[ offset ++ ];

							u = uvLayer[ uvIndex * 2 ];
							v = uvLayer[ uvIndex * 2 + 1 ];

							uv = new THREE.Vector2( u, v );

							geometry.faceVertexUvs[ i ][ fi ].push( uv );

						}

					}

				}

				if ( hasFaceNormal ) {

					normalIndex = faces[ offset ++ ] * 3;

					face.normal.set(
						normals[ normalIndex ++ ],
						normals[ normalIndex ++ ],
						normals[ normalIndex ]
					);

				}

				if ( hasFaceVertexNormal ) {

					for ( i = 0; i < 3; i++ ) {

						normalIndex = faces[ offset ++ ] * 3;

						normal = new THREE.Vector3(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						face.vertexNormals.push( normal );

					}

				}


				if ( hasFaceColor ) {

					colorIndex = faces[ offset ++ ];
					face.color.setHex( colors[ colorIndex ] );

				}


				if ( hasFaceVertexColor ) {

					for ( i = 0; i < 3; i++ ) {

						colorIndex = faces[ offset ++ ];
						face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

					}

				}

				geometry.faces.push( face );

			}

		}

	};

	function parseSkin() {

		var i, l, x, y, z, w, a, b, c, d;

		if ( json.skinWeights ) {

			for ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {

				x = json.skinWeights[ i     ];
				y = json.skinWeights[ i + 1 ];
				z = 0;
				w = 0;

				geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

			}

		}

		if ( json.skinIndices ) {

			for ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {

				a = json.skinIndices[ i     ];
				b = json.skinIndices[ i + 1 ];
				c = 0;
				d = 0;

				geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

			}

		}

		geometry.bones = json.bones;
		// could change this to json.animations[0] or remove completely
		geometry.animation = json.animation;
		geometry.animations = json.animations;
	};

	function parseMorphing( scale ) {

		if ( json.morphTargets !== undefined ) {

			var i, l, v, vl, dstVertices, srcVertices;

			for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {

				geometry.morphTargets[ i ] = {};
				geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
				geometry.morphTargets[ i ].vertices = [];

				dstVertices = geometry.morphTargets[ i ].vertices;
				srcVertices = json.morphTargets [ i ].vertices;

				for( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

					var vertex = new THREE.Vector3();
					vertex.x = srcVertices[ v ] * scale;
					vertex.y = srcVertices[ v + 1 ] * scale;
					vertex.z = srcVertices[ v + 2 ] * scale;

					dstVertices.push( vertex );

				}

			}

		}

		if ( json.morphColors !== undefined ) {

			var i, l, c, cl, dstColors, srcColors, color;

			for ( i = 0, l = json.morphColors.length; i < l; i++ ) {

				geometry.morphColors[ i ] = {};
				geometry.morphColors[ i ].name = json.morphColors[ i ].name;
				geometry.morphColors[ i ].colors = [];

				dstColors = geometry.morphColors[ i ].colors;
				srcColors = json.morphColors [ i ].colors;

				for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {

					color = new THREE.Color( 0xffaa00 );
					color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );
					dstColors.push( color );

				}

			}

		}

	};

	if ( json.materials === undefined ) {

		return { geometry: geometry };

	} else {

		var materials = this.initMaterials( json.materials, texturePath );

		if ( this.needsTangents( materials ) ) {

			geometry.computeTangents();

		}

		return { geometry: geometry, materials: materials };

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

	var scope = this;

	var loaded = 0, total = 0;

	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		total ++;

	};

	this.itemEnd = function ( url ) {

		loaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, loaded, total );

		}

		if ( loaded === total && scope.onLoad !== undefined ) {

			scope.onLoad();

		}

	};

};

THREE.DefaultLoadingManager = new THREE.LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferGeometryLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.BufferGeometryLoader.prototype = {

	constructor: THREE.BufferGeometryLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader();
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var geometry = new THREE.BufferGeometry();

		var attributes = json.attributes;
		var offsets = json.offsets;
		var boundingSphere = json.boundingSphere;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			geometry.attributes[ key ] = {
				itemSize: attribute.itemSize,
				array: new self[ attribute.type ]( attribute.array )
			}

		}

		if ( offsets !== undefined ) {

			geometry.offsets = JSON.parse( JSON.stringify( offsets ) );

		}

		if ( boundingSphere !== undefined ) {

			geometry.boundingSphere = new THREE.Sphere(
				new THREE.Vector3().fromArray( boundingSphere.center !== undefined ? boundingSphere.center : [ 0, 0, 0 ] ),
				boundingSphere.radius
			);

		}

		return geometry;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GeometryLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.GeometryLoader.prototype = {

	constructor: THREE.GeometryLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader();
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MaterialLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.MaterialLoader.prototype = {

	constructor: THREE.MaterialLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader();
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var material = new THREE[ json.type ];

		if ( json.color !== undefined ) material.color.setHex( json.color );
		if ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );
		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;

		if ( json.materials !== undefined ) {

			for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

				material.materials.push( this.parse( json.materials[ i ] ) );

			}

		}

		return material;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ObjectLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ObjectLoader.prototype = {

	constructor: THREE.ObjectLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var geometries = this.parseGeometries( json.geometries );
		var materials = this.parseMaterials( json.materials );
		var object = this.parseObject( json.object, geometries, materials );

		return object;

	},

	parseGeometries: function ( json ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new THREE.JSONLoader();
			var bufferGeometryLoader = new THREE.BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':

						geometry = new THREE.PlaneGeometry(
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'CircleGeometry':

						geometry = new THREE.CircleGeometry(
							data.radius,
							data.segments
						);

						break;

					case 'CubeGeometry':

						geometry = new THREE.CubeGeometry(
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CylinderGeometry':

						geometry = new THREE.CylinderGeometry(
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded
						);

						break;

					case 'SphereGeometry':

						geometry = new THREE.SphereGeometry(
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'IcosahedronGeometry':

						geometry = new THREE.IcosahedronGeometry(
							data.radius,
							data.detail
						);

						break;

					case 'TorusGeometry':

						geometry = new THREE.TorusGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':

						geometry = new THREE.TorusKnotGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.p,
							data.q,
							data.heightScale
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data.data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data.data ).geometry;

						break;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new THREE.MaterialLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];
				var material = loader.parse( data );

				material.uuid = data.uuid;

				if ( data.name !== undefined ) material.name = data.name;

				materials[ data.uuid ] = material;

			}

		}

		return materials;

	},

	parseObject: function () {

		var matrix = new THREE.Matrix4();

		return function ( data, geometries, materials ) {

			var object;

			switch ( data.type ) {

				case 'Scene':

					object = new THREE.Scene();

					break;

				case 'PerspectiveCamera':

					object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					break;

				case 'OrthographicCamera':

					object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new THREE.AmbientLight( data.color );

					break;

				case 'DirectionalLight':

					object = new THREE.DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new THREE.PointLight( data.color, data.intensity, data.distance );

					break;

				case 'SpotLight':

					object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );

					break;

				case 'HemisphereLight':

					object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'Mesh':

					var geometry = geometries[ data.geometry ];
					var material = materials[ data.material ];

					if ( geometry === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined geometry ' + data.geometry );

					}

					if ( material === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

					}

					object = new THREE.Mesh( geometry, material );

					break;

				case 'Sprite':

					var material = materials[ data.material ];

					if ( material === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

					}

					object = new THREE.Sprite( material );

					break;

				default:

					object = new THREE.Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				for ( var child in data.children ) {

					object.add( this.parseObject( data.children[ child ], geometries, materials ) );

				}

			}

			return object;

		}

	}()

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneLoader = function () {

	this.onLoadStart = function () {};
	this.onLoadProgress = function() {};
	this.onLoadComplete = function () {};

	this.callbackSync = function () {};
	this.callbackProgress = function () {};

	this.geometryHandlers = {};
	this.hierarchyHandlers = {};

	this.addGeometryHandler( "ascii", THREE.JSONLoader );

};

THREE.SceneLoader.prototype = {

	constructor: THREE.SceneLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			scope.parse( JSON.parse( text ), onLoad, url );

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	addGeometryHandler: function ( typeID, loaderClass ) {

		this.geometryHandlers[ typeID ] = { "loaderClass": loaderClass };

	},

	addHierarchyHandler: function ( typeID, loaderClass ) {

		this.hierarchyHandlers[ typeID ] = { "loaderClass": loaderClass };

	},

	parse: function ( json, callbackFinished, url ) {

		var scope = this;

		var urlBase = THREE.Loader.prototype.extractUrlBase( url );

		var geometry, material, camera, fog,
			texture, images, color,
			light, hex, intensity,
			counter_models, counter_textures,
			total_models, total_textures,
			result;

		var target_array = [];

		var data = json;

		// async geometry loaders

		for ( var typeID in this.geometryHandlers ) {

			var loaderClass = this.geometryHandlers[ typeID ][ "loaderClass" ];
			this.geometryHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

		}

		// async hierachy loaders

		for ( var typeID in this.hierarchyHandlers ) {

			var loaderClass = this.hierarchyHandlers[ typeID ][ "loaderClass" ];
			this.hierarchyHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

		}

		counter_models = 0;
		counter_textures = 0;

		result = {

			scene: new THREE.Scene(),
			geometries: {},
			face_materials: {},
			materials: {},
			textures: {},
			objects: {},
			cameras: {},
			lights: {},
			fogs: {},
			empties: {},
			groups: {}

		};

		if ( data.transform ) {

			var position = data.transform.position,
				rotation = data.transform.rotation,
				scale = data.transform.scale;

			if ( position ) {

				result.scene.position.fromArray( position );

			}

			if ( rotation ) {

				result.scene.rotation.fromArray( rotation );

			}

			if ( scale ) {

				result.scene.scale.fromArray( scale );

			}

			if ( position || rotation || scale ) {

				result.scene.updateMatrix();
				result.scene.updateMatrixWorld();

			}

		}

		function get_url( source_url, url_type ) {

			if ( url_type == "relativeToHTML" ) {

				return source_url;

			} else {

				return urlBase + "/" + source_url;

			}

		};

		// toplevel loader function, delegates to handle_children

		function handle_objects() {

			handle_children( result.scene, data.objects );

		}

		// handle all the children from the loaded json and attach them to given parent

		function handle_children( parent, children ) {

			var mat, dst, pos, rot, scl, quat;

			for ( var objID in children ) {

				// check by id if child has already been handled,
				// if not, create new object

				var object = result.objects[ objID ];
				var objJSON = children[ objID ];

				if ( object === undefined ) {

					// meshes

					if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

						if ( objJSON.loading === undefined ) {

							var reservedTypes = {
								"type": 1, "url": 1, "material": 1,
								"position": 1, "rotation": 1, "scale" : 1,
								"visible": 1, "children": 1, "userData": 1,
								"skin": 1, "morph": 1, "mirroredLoop": 1, "duration": 1
							};

							var loaderParameters = {};

							for ( var parType in objJSON ) {

								if ( ! ( parType in reservedTypes ) ) {

									loaderParameters[ parType ] = objJSON[ parType ];

								}

							}

							material = result.materials[ objJSON.material ];

							objJSON.loading = true;

							var loader = scope.hierarchyHandlers[ objJSON.type ][ "loaderObject" ];

							// ColladaLoader

							if ( loader.options ) {

								loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

							// UTF8Loader
							// OBJLoader

							} else {

								loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );

							}

						}

					} else if ( objJSON.geometry !== undefined ) {

						geometry = result.geometries[ objJSON.geometry ];

						// geometry already loaded

						if ( geometry ) {

							var needsTangents = false;

							material = result.materials[ objJSON.material ];
							needsTangents = material instanceof THREE.ShaderMaterial;

							pos = objJSON.position;
							rot = objJSON.rotation;
							scl = objJSON.scale;
							mat = objJSON.matrix;
							quat = objJSON.quaternion;

							// use materials from the model file
							// if there is no material specified in the object

							if ( ! objJSON.material ) {

								material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

							}

							// use materials from the model file
							// if there is just empty face material
							// (must create new material as each model has its own face material)

							if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {

								material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

							}

							if ( material instanceof THREE.MeshFaceMaterial ) {

								for ( var i = 0; i < material.materials.length; i ++ ) {

									needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );

								}

							}

							if ( needsTangents ) {

								geometry.computeTangents();

							}

							if ( objJSON.skin ) {

								object = new THREE.SkinnedMesh( geometry, material );

							} else if ( objJSON.morph ) {

								object = new THREE.MorphAnimMesh( geometry, material );

								if ( objJSON.duration !== undefined ) {

									object.duration = objJSON.duration;

								}

								if ( objJSON.time !== undefined ) {

									object.time = objJSON.time;

								}

								if ( objJSON.mirroredLoop !== undefined ) {

									object.mirroredLoop = objJSON.mirroredLoop;

								}

								if ( material.morphNormals ) {

									geometry.computeMorphNormals();

								}

							} else {

								object = new THREE.Mesh( geometry, material );

							}

							object.name = objID;

							if ( mat ) {

								object.matrixAutoUpdate = false;
								object.matrix.set(
									mat[0],  mat[1],  mat[2],  mat[3],
									mat[4],  mat[5],  mat[6],  mat[7],
									mat[8],  mat[9],  mat[10], mat[11],
									mat[12], mat[13], mat[14], mat[15]
								);

							} else {

								object.position.fromArray( pos );

								if ( quat ) {

									object.quaternion.fromArray( quat );

								} else {

									object.rotation.fromArray( rot );

								}

								object.scale.fromArray( scl );

							}

							object.visible = objJSON.visible;
							object.castShadow = objJSON.castShadow;
							object.receiveShadow = objJSON.receiveShadow;

							parent.add( object );

							result.objects[ objID ] = object;

						}

					// lights

					} else if ( objJSON.type === "AmbientLight" || objJSON.type === "PointLight" ||
						objJSON.type === "DirectionalLight" || objJSON.type === "SpotLight" ||
						objJSON.type === "HemisphereLight" || objJSON.type === "AreaLight" ) {

						var color = objJSON.color;
						var intensity = objJSON.intensity;
						var distance = objJSON.distance;
						var position = objJSON.position;
						var rotation = objJSON.rotation;

						switch ( objJSON.type ) {

							case 'AmbientLight':
								light = new THREE.AmbientLight( color );
								break;

							case 'PointLight':
								light = new THREE.PointLight( color, intensity, distance );
								light.position.fromArray( position );
								break;

							case 'DirectionalLight':
								light = new THREE.DirectionalLight( color, intensity );
								light.position.fromArray( objJSON.direction );
								break;

							case 'SpotLight':
								light = new THREE.SpotLight( color, intensity, distance, 1 );
								light.angle = objJSON.angle;
								light.position.fromArray( position );
								light.target.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
								light.target.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
								break;

							case 'HemisphereLight':
								light = new THREE.DirectionalLight( color, intensity, distance );
								light.target.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
								light.target.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
								break;

							case 'AreaLight':
								light = new THREE.AreaLight(color, intensity);
								light.position.fromArray( position );
								light.width = objJSON.size;
								light.height = objJSON.size_y;
								break;

						}

						parent.add( light );

						light.name = objID;
						result.lights[ objID ] = light;
						result.objects[ objID ] = light;

					// cameras

					} else if ( objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera" ) {

						pos = objJSON.position;
						rot = objJSON.rotation;
						quat = objJSON.quaternion;

						if ( objJSON.type === "PerspectiveCamera" ) {

							camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );

						} else if ( objJSON.type === "OrthographicCamera" ) {

							camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );

						}

						camera.name = objID;
						camera.position.fromArray( pos );

						if ( quat !== undefined ) {

							camera.quaternion.fromArray( quat );

						} else if ( rot !== undefined ) {

							camera.rotation.fromArray( rot );

						}

						parent.add( camera );

						result.cameras[ objID ] = camera;
						result.objects[ objID ] = camera;

					// pure Object3D

					} else {

						pos = objJSON.position;
						rot = objJSON.rotation;
						scl = objJSON.scale;
						quat = objJSON.quaternion;

						object = new THREE.Object3D();
						object.name = objID;
						object.position.fromArray( pos );

						if ( quat ) {

							object.quaternion.fromArray( quat );

						} else {

							object.rotation.fromArray( rot );

						}

						object.scale.fromArray( scl );
						object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;

						parent.add( object );

						result.objects[ objID ] = object;
						result.empties[ objID ] = object;

					}

					if ( object ) {

						if ( objJSON.userData !== undefined ) {

							for ( var key in objJSON.userData ) {

								var value = objJSON.userData[ key ];
								object.userData[ key ] = value;

							}

						}

						if ( objJSON.groups !== undefined ) {

							for ( var i = 0; i < objJSON.groups.length; i ++ ) {

								var groupID = objJSON.groups[ i ];

								if ( result.groups[ groupID ] === undefined ) {

									result.groups[ groupID ] = [];

								}

								result.groups[ groupID ].push( objID );

							}

						}

					}

				}

				if ( object !== undefined && objJSON.children !== undefined ) {

					handle_children( object, objJSON.children );

				}

			}

		};

		function handle_mesh( geo, mat, id ) {

			result.geometries[ id ] = geo;
			result.face_materials[ id ] = mat;
			handle_objects();

		};

		function handle_hierarchy( node, id, parent, material, obj ) {

			var p = obj.position;
			var r = obj.rotation;
			var q = obj.quaternion;
			var s = obj.scale;

			node.position.fromArray( p );

			if ( q ) {

				node.quaternion.fromArray( q );

			} else {

				node.rotation.fromArray( r );

			}

			node.scale.fromArray( s );

			// override children materials
			// if object material was specified in JSON explicitly

			if ( material ) {

				node.traverse( function ( child ) {

					child.material = material;

				} );

			}

			// override children visibility
			// with root node visibility as specified in JSON

			var visible = ( obj.visible !== undefined ) ? obj.visible : true;

			node.traverse( function ( child ) {

				child.visible = visible;

			} );

			parent.add( node );

			node.name = id;

			result.objects[ id ] = node;
			handle_objects();

		};

		function create_callback_geometry( id ) {

			return function ( geo, mat ) {

				geo.name = id;

				handle_mesh( geo, mat, id );

				counter_models -= 1;

				scope.onLoadComplete();

				async_callback_gate();

			}

		};

		function create_callback_hierachy( id, parent, material, obj ) {

			return function ( event ) {

				var result;

				// loaders which use EventDispatcher

				if ( event.content ) {

					result = event.content;

				// ColladaLoader

				} else if ( event.dae ) {

					result = event.scene;


				// UTF8Loader

				} else {

					result = event;

				}

				handle_hierarchy( result, id, parent, material, obj );

				counter_models -= 1;

				scope.onLoadComplete();

				async_callback_gate();

			}

		};

		function create_callback_embed( id ) {

			return function ( geo, mat ) {

				geo.name = id;

				result.geometries[ id ] = geo;
				result.face_materials[ id ] = mat;

			}

		};

		function async_callback_gate() {

			var progress = {

				totalModels : total_models,
				totalTextures : total_textures,
				loadedModels : total_models - counter_models,
				loadedTextures : total_textures - counter_textures

			};

			scope.callbackProgress( progress, result );

			scope.onLoadProgress();

			if ( counter_models === 0 && counter_textures === 0 ) {

				finalize();
				callbackFinished( result );

			}

		};

		function finalize() {

			// take care of targets which could be asynchronously loaded objects

			for ( var i = 0; i < target_array.length; i ++ ) {

				var ta = target_array[ i ];

				var target = result.objects[ ta.targetName ];

				if ( target ) {

					ta.object.target = target;

				} else {

					// if there was error and target of specified name doesn't exist in the scene file
					// create instead dummy target
					// (target must be added to scene explicitly as parent is already added)

					ta.object.target = new THREE.Object3D();
					result.scene.add( ta.object.target );

				}

				ta.object.target.userData.targetInverse = ta.object;

			}

		};

		var callbackTexture = function ( count ) {

			counter_textures -= count;
			async_callback_gate();

			scope.onLoadComplete();

		};

		// must use this instead of just directly calling callbackTexture
		// because of closure in the calling context loop

		var generateTextureCallback = function ( count ) {

			return function () {

				callbackTexture( count );

			};

		};

		function traverse_json_hierarchy( objJSON, callback ) {

			callback( objJSON );

			if ( objJSON.children !== undefined ) {

				for ( var objChildID in objJSON.children ) {

					traverse_json_hierarchy( objJSON.children[ objChildID ], callback );

				}

			}

		};

		// first go synchronous elements

		// fogs

		var fogID, fogJSON;

		for ( fogID in data.fogs ) {

			fogJSON = data.fogs[ fogID ];

			if ( fogJSON.type === "linear" ) {

				fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );

			} else if ( fogJSON.type === "exp2" ) {

				fog = new THREE.FogExp2( 0x000000, fogJSON.density );

			}

			color = fogJSON.color;
			fog.color.setRGB( color[0], color[1], color[2] );

			result.fogs[ fogID ] = fog;

		}

		// now come potentially asynchronous elements

		// geometries

		// count how many geometries will be loaded asynchronously

		var geoID, geoJSON;

		for ( geoID in data.geometries ) {

			geoJSON = data.geometries[ geoID ];

			if ( geoJSON.type in this.geometryHandlers ) {

				counter_models += 1;

				scope.onLoadStart();

			}

		}

		// count how many hierarchies will be loaded asynchronously

		for ( var objID in data.objects ) {

			traverse_json_hierarchy( data.objects[ objID ], function ( objJSON ) {

				if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

					counter_models += 1;

					scope.onLoadStart();

				}

			});

		}

		total_models = counter_models;

		for ( geoID in data.geometries ) {

			geoJSON = data.geometries[ geoID ];

			if ( geoJSON.type === "cube" ) {

				geometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type === "plane" ) {

				geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type === "sphere" ) {

				geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type === "cylinder" ) {

				geometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type === "torus" ) {

				geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type === "icosahedron" ) {

				geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );
				geometry.name = geoID;
				result.geometries[ geoID ] = geometry;

			} else if ( geoJSON.type in this.geometryHandlers ) {

				var loaderParameters = {};

				for ( var parType in geoJSON ) {

					if ( parType !== "type" && parType !== "url" ) {

						loaderParameters[ parType ] = geoJSON[ parType ];

					}

				}

				var loader = this.geometryHandlers[ geoJSON.type ][ "loaderObject" ];
				loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );

			} else if ( geoJSON.type === "embedded" ) {

				var modelJson = data.embeds[ geoJSON.id ],
					texture_path = "";

				// pass metadata along to jsonLoader so it knows the format version

				modelJson.metadata = data.metadata;

				if ( modelJson ) {

					var jsonLoader = this.geometryHandlers[ "ascii" ][ "loaderObject" ];
					var model = jsonLoader.parse( modelJson, texture_path );
					create_callback_embed( geoID )( model.geometry, model.materials );

				}

			}

		}

		// textures

		// count how many textures will be loaded asynchronously

		var textureID, textureJSON;

		for ( textureID in data.textures ) {

			textureJSON = data.textures[ textureID ];

			if ( textureJSON.url instanceof Array ) {

				counter_textures += textureJSON.url.length;

				for( var n = 0; n < textureJSON.url.length; n ++ ) {

					scope.onLoadStart();

				}

			} else {

				counter_textures += 1;

				scope.onLoadStart();

			}

		}

		total_textures = counter_textures;

		for ( textureID in data.textures ) {

			textureJSON = data.textures[ textureID ];

			if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined ) {

				textureJSON.mapping = new THREE[ textureJSON.mapping ]();

			}

			if ( textureJSON.url instanceof Array ) {

				var count = textureJSON.url.length;
				var url_array = [];

				for( var i = 0; i < count; i ++ ) {

					url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );

				}

				var isCompressed = /\.dds$/i.test( url_array[ 0 ] );

				if ( isCompressed ) {

					texture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

				} else {

					texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

				}

			} else {

				var isCompressed = /\.dds$/i.test( textureJSON.url );
				var fullUrl = get_url( textureJSON.url, data.urlBaseType );
				var textureCallback = generateTextureCallback( 1 );

				if ( isCompressed ) {

					texture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );

				} else {

					texture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );

				}

				if ( THREE[ textureJSON.minFilter ] !== undefined )
					texture.minFilter = THREE[ textureJSON.minFilter ];

				if ( THREE[ textureJSON.magFilter ] !== undefined )
					texture.magFilter = THREE[ textureJSON.magFilter ];

				if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;

				if ( textureJSON.repeat ) {

					texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );

					if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
					if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

				}

				if ( textureJSON.offset ) {

					texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );

				}

				// handle wrap after repeat so that default repeat can be overriden

				if ( textureJSON.wrap ) {

					var wrapMap = {
						"repeat": THREE.RepeatWrapping,
						"mirror": THREE.MirroredRepeatWrapping
					}

					if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];
					if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];

				}

			}

			result.textures[ textureID ] = texture;

		}

		// materials

		var matID, matJSON;
		var parID;

		for ( matID in data.materials ) {

			matJSON = data.materials[ matID ];

			for ( parID in matJSON.parameters ) {

				if ( parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap" ) {

					matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];

				} else if ( parID === "shading" ) {

					matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === "flat" ) ? THREE.FlatShading : THREE.SmoothShading;

				} else if ( parID === "side" ) {

					if ( matJSON.parameters[ parID ] == "double" ) {

						matJSON.parameters[ parID ] = THREE.DoubleSide;

					} else if ( matJSON.parameters[ parID ] == "back" ) {

						matJSON.parameters[ parID ] = THREE.BackSide;

					} else {

						matJSON.parameters[ parID ] = THREE.FrontSide;

					}

				} else if ( parID === "blending" ) {

					matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;

				} else if ( parID === "combine" ) {

					matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;

				} else if ( parID === "vertexColors" ) {

					if ( matJSON.parameters[ parID ] == "face" ) {

						matJSON.parameters[ parID ] = THREE.FaceColors;

					// default to vertex colors if "vertexColors" is anything else face colors or 0 / null / false

					} else if ( matJSON.parameters[ parID ] ) {

						matJSON.parameters[ parID ] = THREE.VertexColors;

					}

				} else if ( parID === "wrapRGB" ) {

					var v3 = matJSON.parameters[ parID ];
					matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );

				}

			}

			if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {

				matJSON.parameters.transparent = true;

			}

			if ( matJSON.parameters.normalMap ) {

				var shader = THREE.ShaderLib[ "normalmap" ];
				var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

				var diffuse = matJSON.parameters.color;
				var specular = matJSON.parameters.specular;
				var ambient = matJSON.parameters.ambient;
				var shininess = matJSON.parameters.shininess;

				uniforms[ "tNormal" ].value = result.textures[ matJSON.parameters.normalMap ];

				if ( matJSON.parameters.normalScale ) {

					uniforms[ "uNormalScale" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );

				}

				if ( matJSON.parameters.map ) {

					uniforms[ "tDiffuse" ].value = matJSON.parameters.map;
					uniforms[ "enableDiffuse" ].value = true;

				}

				if ( matJSON.parameters.envMap ) {

					uniforms[ "tCube" ].value = matJSON.parameters.envMap;
					uniforms[ "enableReflection" ].value = true;
					uniforms[ "reflectivity" ].value = matJSON.parameters.reflectivity;

				}

				if ( matJSON.parameters.lightMap ) {

					uniforms[ "tAO" ].value = matJSON.parameters.lightMap;
					uniforms[ "enableAO" ].value = true;

				}

				if ( matJSON.parameters.specularMap ) {

					uniforms[ "tSpecular" ].value = result.textures[ matJSON.parameters.specularMap ];
					uniforms[ "enableSpecular" ].value = true;

				}

				if ( matJSON.parameters.displacementMap ) {

					uniforms[ "tDisplacement" ].value = result.textures[ matJSON.parameters.displacementMap ];
					uniforms[ "enableDisplacement" ].value = true;

					uniforms[ "uDisplacementBias" ].value = matJSON.parameters.displacementBias;
					uniforms[ "uDisplacementScale" ].value = matJSON.parameters.displacementScale;

				}

				uniforms[ "diffuse" ].value.setHex( diffuse );
				uniforms[ "specular" ].value.setHex( specular );
				uniforms[ "ambient" ].value.setHex( ambient );

				uniforms[ "shininess" ].value = shininess;

				if ( matJSON.parameters.opacity ) {

					uniforms[ "opacity" ].value = matJSON.parameters.opacity;

				}

				var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };

				material = new THREE.ShaderMaterial( parameters );

			} else {

				material = new THREE[ matJSON.type ]( matJSON.parameters );

			}

			material.name = matID;

			result.materials[ matID ] = material;

		}

		// second pass through all materials to initialize MeshFaceMaterials
		// that could be referring to other materials out of order

		for ( matID in data.materials ) {

			matJSON = data.materials[ matID ];

			if ( matJSON.parameters.materials ) {

				var materialArray = [];

				for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {

					var label = matJSON.parameters.materials[ i ];
					materialArray.push( result.materials[ label ] );

				}

				result.materials[ matID ].materials = materialArray;

			}

		}

		// objects ( synchronous init of procedural primitives )

		handle_objects();

		// defaults

		if ( result.cameras && data.defaults.camera ) {

			result.currentCamera = result.cameras[ data.defaults.camera ];

		}

		if ( result.fogs && data.defaults.fog ) {

			result.scene.fog = result.fogs[ data.defaults.fog ];

		}

		// synchronous callback

		scope.callbackSync( result );

		// just in case there are no async elements

		async_callback_gate();

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.TextureLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.TextureLoader.prototype = {

	constructor: THREE.TextureLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.ImageLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( image ) {

			var texture = new THREE.Texture( image );
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		} );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Material = function () {

	this.id = THREE.MaterialIdCount ++;
	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	this.side = THREE.FrontSide;

	this.opacity = 1;
	this.transparent = false;

	this.blending = THREE.NormalBlending;

	this.blendSrc = THREE.SrcAlphaFactor;
	this.blendDst = THREE.OneMinusSrcAlphaFactor;
	this.blendEquation = THREE.AddEquation;

	this.depthTest = true;
	this.depthWrite = true;

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.alphaTest = 0;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.needsUpdate = true;

};

THREE.Material.prototype = {

	constructor: THREE.Material,

	setValues: function ( values ) {

		if ( values === undefined ) return;

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
				continue;

			}

			if ( key in this ) {

				var currentValue = this[ key ];

				if ( currentValue instanceof THREE.Color ) {

					currentValue.set( newValue );

				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

					currentValue.copy( newValue );

				} else if ( key == 'overdraw') {

					// ensure overdraw is backwards-compatable with legacy boolean type
					this[ key ] = Number(newValue);

				} else {

					this[ key ] = newValue;

				}

			}

		}

	},

	clone: function ( material ) {

		if ( material === undefined ) material = new THREE.Material();

		material.name = this.name;

		material.side = this.side;

		material.opacity = this.opacity;
		material.transparent = this.transparent;

		material.blending = this.blending;

		material.blendSrc = this.blendSrc;
		material.blendDst = this.blendDst;
		material.blendEquation = this.blendEquation;

		material.depthTest = this.depthTest;
		material.depthWrite = this.depthWrite;

		material.polygonOffset = this.polygonOffset;
		material.polygonOffsetFactor = this.polygonOffsetFactor;
		material.polygonOffsetUnits = this.polygonOffsetUnits;

		material.alphaTest = this.alphaTest;

		material.overdraw = this.overdraw;

		material.visible = this.visible;

		return material;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );

THREE.MaterialIdCount = 0;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round",
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineBasicMaterial.prototype.clone = function () {

	var material = new THREE.LineBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;
	material.linecap = this.linecap;
	material.linejoin = this.linejoin;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>,
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineDashedMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineDashedMaterial.prototype.clone = function () {

	var material = new THREE.LineDashedMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;

	material.scale = this.scale;
	material.dashSize = this.dashSize;
	material.gapSize = this.gapSize;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;

	this.setValues( parameters );

};

THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshBasicMaterial.prototype.clone = function () {

	var material = new THREE.MeshBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshLambertMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshLambertMaterial.prototype.clone = function () {

	var material = new THREE.MeshLambertMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshPhongMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );
	this.specular = new THREE.Color( 0x111111 );
	this.shininess = 30;

	this.metal = false;
	this.perPixel = true;

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new THREE.Vector2( 1, 1 );

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshPhongMaterial.prototype.clone = function () {

	var material = new THREE.MeshPhongMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );
	material.specular.copy( this.specular );
	material.shininess = this.shininess;

	material.metal = this.metal;
	material.perPixel = this.perPixel;

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.bumpMap = this.bumpMap;
	material.bumpScale = this.bumpScale;

	material.normalMap = this.normalMap;
	material.normalScale.copy( this.normalScale );

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshDepthMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.setValues( parameters );

};

THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshDepthMaterial.prototype.clone = function () {

	var material = new THREE.MeshDepthMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  shading: THREE.FlatShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshNormalMaterial = function ( parameters ) {

	THREE.Material.call( this, parameters );

	this.shading = THREE.FlatShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.morphTargets = false;

	this.setValues( parameters );

};

THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshNormalMaterial.prototype.clone = function () {

	var material = new THREE.MeshNormalMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MeshFaceMaterial = function ( materials ) {

	this.materials = materials instanceof Array ? materials : [];

};

THREE.MeshFaceMaterial.prototype.clone = function () {

	var material = new THREE.MeshFaceMaterial();

	for ( var i = 0; i < this.materials.length; i ++ ) {

		material.materials.push( this.materials[ i ].clone() );

	}

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  vertexColors: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.ParticleSystemMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.ParticleSystemMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ParticleSystemMaterial.prototype.clone = function () {

	var material = new THREE.ParticleSystemMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.size = this.size;
	material.sizeAttenuation = this.sizeAttenuation;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

// backwards compatibility

THREE.ParticleBasicMaterial = THREE.ParticleSystemMaterial;

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
 *
 *  defines: { "label" : "value" },
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.ShaderMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.fragmentShader = "void main() {}";
	this.vertexShader = "void main() {}";
	this.uniforms = {};
	this.defines = {};
	this.attributes = null;

	this.shading = THREE.SmoothShading;

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog

	this.lights = false; // set to use scene lights

	this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

	this.skinning = false; // set to use skinning attribute streams

	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		"color" : [ 1, 1, 1],
		"uv" : [ 0, 0 ],
		"uv2" : [ 0, 0 ]
	};

	// By default, bind position to attribute index 0. In WebGL, attribute 0
	// should always be used to avoid potentially expensive emulation.
	this.index0AttributeName = "position";

	this.setValues( parameters );

};

THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ShaderMaterial.prototype.clone = function () {

	var material = new THREE.ShaderMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.fragmentShader = this.fragmentShader;
	material.vertexShader = this.vertexShader;

	material.uniforms = THREE.UniformsUtils.clone( this.uniforms );

	material.attributes = this.attributes;
	material.defines = this.defines;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	material.fog = this.fog;

	material.lights = this.lights;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;

	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2(),
 *
 *  fog: <bool>
 * }
 */

THREE.SpriteMaterial = function ( parameters ) {

	THREE.Material.call( this );

	// defaults

	this.color = new THREE.Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;

	// set parameters

	this.setValues( parameters );

};

THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteMaterial.prototype.clone = function () {

	var material = new THREE.SpriteMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.map = this.map;

	material.rotation = this.rotation;

	material.fog = this.fog;

	return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <hex>,
 *  program: <function>,
 *  opacity: <float>,
 *  blending: THREE.NormalBlending
 * }
 */

THREE.SpriteCanvasMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );
	this.program = function ( context, color ) {};

	this.setValues( parameters );

};

THREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteCanvasMaterial.prototype.clone = function () {

	var material = new THREE.SpriteCanvasMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.program = this.program;

	return material;

};

// backwards compatibility

THREE.ParticleCanvasMaterial = THREE.SpriteCanvasMaterial;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	this.id = THREE.TextureIdCount ++;
	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	this.image = image;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();

	this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : THREE.RGBAFormat;
	this.type = type !== undefined ? type : THREE.UnsignedByteType;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	this._needsUpdate = false;
	this.onUpdate = null;

};

THREE.Texture.prototype = {

	constructor: THREE.Texture,

	get needsUpdate () {

		return this._needsUpdate;

	},

	set needsUpdate ( value ) {

		if ( value === true ) this.update();

		this._needsUpdate = value;

	},

	clone: function ( texture ) {

		if ( texture === undefined ) texture = new THREE.Texture();

		texture.image = this.image;
		texture.mipmaps = this.mipmaps.slice(0);

		texture.mapping = this.mapping;

		texture.wrapS = this.wrapS;
		texture.wrapT = this.wrapT;

		texture.magFilter = this.magFilter;
		texture.minFilter = this.minFilter;

		texture.anisotropy = this.anisotropy;

		texture.format = this.format;
		texture.type = this.type;

		texture.offset.copy( this.offset );
		texture.repeat.copy( this.repeat );

		texture.generateMipmaps = this.generateMipmaps;
		texture.premultiplyAlpha = this.premultiplyAlpha;
		texture.flipY = this.flipY;
		texture.unpackAlignment = this.unpackAlignment;

		return texture;

	},

	update: function () {

		this.dispatchEvent( { type: 'update' } );

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );

THREE.TextureIdCount = 0;

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	this.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file

};

THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.CompressedTexture.prototype.clone = function () {

	var texture = new THREE.CompressedTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { data: data, width: width, height: height };

};

THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.DataTexture.prototype.clone = function () {

	var texture = new THREE.DataTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ParticleSystem = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.ParticleSystemMaterial( { color: Math.random() * 0xffffff } );

	this.sortParticles = false;
	this.frustumCulled = false;

};

THREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );

THREE.ParticleSystem.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );

	object.sortParticles = this.sortParticles;

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Line = function ( geometry, material, type ) {

	THREE.Object3D.call( this );

	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

	this.type = ( type !== undefined ) ? type : THREE.LineStrip;

};

THREE.LineStrip = 0;
THREE.LinePieces = 1;

THREE.Line.prototype = Object.create( THREE.Object3D.prototype );

THREE.Line.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

THREE.Mesh = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.updateMorphTargets();

};

THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );

THREE.Mesh.prototype.updateMorphTargets = function () {

	if ( this.geometry.morphTargets.length > 0 ) {

		this.morphTargetBase = -1;
		this.morphTargetForcedOrder = [];
		this.morphTargetInfluences = [];
		this.morphTargetDictionary = {};

		for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

			this.morphTargetInfluences.push( 0 );
			this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

		}

	}

};

THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

	if ( this.morphTargetDictionary[ name ] !== undefined ) {

		return this.morphTargetDictionary[ name ];

	}

	console.log( "THREE.Mesh.getMorphTargetIndexByName: morph target " + name + " does not exist. Returning 0." );

	return 0;

};

THREE.Mesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Bone = function( belongsToSkin ) {

	THREE.Object3D.call( this );

	this.skin = belongsToSkin;
	this.skinMatrix = new THREE.Matrix4();

};

THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );

THREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {

	// update local

	if ( this.matrixAutoUpdate ) {

		forceUpdate |= this.updateMatrix();

	}

	// update skin matrix

	if ( forceUpdate || this.matrixWorldNeedsUpdate ) {

		if( parentSkinMatrix ) {

			this.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );

		} else {

			this.skinMatrix.copy( this.matrix );

		}

		this.matrixWorldNeedsUpdate = false;
		forceUpdate = true;

	}

	// update children

	var child, i, l = this.children.length;

	for ( i = 0; i < l; i ++ ) {

		this.children[ i ].update( this.skinMatrix, forceUpdate );

	}

};


/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

	THREE.Mesh.call( this, geometry, material );

	//

	this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

	// init bones

	this.identityMatrix = new THREE.Matrix4();

	this.bones = [];
	this.boneMatrices = [];

	var b, bone, gbone, p, q, s;

	if ( this.geometry && this.geometry.bones !== undefined ) {

		for ( b = 0; b < this.geometry.bones.length; b ++ ) {

			gbone = this.geometry.bones[ b ];

			p = gbone.pos;
			q = gbone.rotq;
			s = gbone.scl;

			bone = this.addBone();

			bone.name = gbone.name;
			bone.position.set( p[0], p[1], p[2] );
			bone.quaternion.set( q[0], q[1], q[2], q[3] );
		
			if ( s !== undefined ) {

				bone.scale.set( s[0], s[1], s[2] );

			} else {

				bone.scale.set( 1, 1, 1 );

			}

		}

		for ( b = 0; b < this.bones.length; b ++ ) {

			gbone = this.geometry.bones[ b ];
			bone = this.bones[ b ];

			if ( gbone.parent === -1 ) {

				this.add( bone );

			} else {

				this.bones[ gbone.parent ].add( bone );

			}

		}

		//

		var nBones = this.bones.length;

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//	RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)
			//  	 16x16 pixel texture max   64 bones (16 * 16 / 4)
			//  	 32x32 pixel texture max  256 bones (32 * 32 / 4)
			//  	 64x64 pixel texture max 1024 bones (64 * 64 / 4)

			var size;

			if ( nBones > 256 )
				size = 64;
			else if ( nBones > 64 )
				size = 32;
			else if ( nBones > 16 )
				size = 16;
			else
				size = 8;

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
			this.boneTexture.minFilter = THREE.NearestFilter;
			this.boneTexture.magFilter = THREE.NearestFilter;
			this.boneTexture.generateMipmaps = false;
			this.boneTexture.flipY = false;

		} else {

			this.boneMatrices = new Float32Array( 16 * nBones );

		}

		this.pose();

	}

};

THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.SkinnedMesh.prototype.addBone = function( bone ) {

	if ( bone === undefined ) {

		bone = new THREE.Bone( this );

	}

	this.bones.push( bone );

	return bone;

};

THREE.SkinnedMesh.prototype.updateMatrixWorld = function () {

	var offsetMatrix = new THREE.Matrix4();

	return function ( force ) {

		this.matrixAutoUpdate && this.updateMatrix();

		// update matrixWorld

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent ) {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			} else {

				this.matrixWorld.copy( this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];

			if ( child instanceof THREE.Bone ) {

				child.update( this.identityMatrix, false );

			} else {

				child.updateMatrixWorld( true );

			}

		}

		// make a snapshot of the bones' rest position

		if ( this.boneInverses == undefined ) {

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				var inverse = new THREE.Matrix4();

				inverse.getInverse( this.bones[ b ].skinMatrix );

				this.boneInverses.push( inverse );

			}

		}

		// flatten bone matrices to array

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			// compute the offset between the current and the original transform;

			// TODO: we could get rid of this multiplication step if the skinMatrix
			// was already representing the offset; however, this requires some
			// major changes to the animation system

			offsetMatrix.multiplyMatrices( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );
			offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );

		}

		if ( this.useVertexTexture ) {

			this.boneTexture.needsUpdate = true;

		}

	};

}();

THREE.SkinnedMesh.prototype.pose = function () {

	this.updateMatrixWorld( true );

	this.normalizeSkinWeights();

};

THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {

	if ( this.geometry instanceof THREE.Geometry ) {

		for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {

			var sw = this.geometry.skinWeights[ i ];

			var scale = 1.0 / sw.lengthManhattan();

			if ( scale !== Infinity ) {

				sw.multiplyScalar( scale );

			} else {

				sw.set( 1 ); // this will be normalized by the shader anyway

			}

		}

	} else {

		// skinning weights assumed to be normalized for THREE.BufferGeometry

	}

};

THREE.SkinnedMesh.prototype.clone = function ( object ) {

	if ( object === undefined ) {

		object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );

	}

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphAnimMesh = function ( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	// API

	this.duration = 1000; // milliseconds
	this.mirroredLoop = false;
	this.time = 0;

	// internals

	this.lastKeyframe = 0;
	this.currentKeyframe = 0;

	this.direction = 1;
	this.directionBackwards = false;

	this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );

};

THREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {

	this.startKeyframe = start;
	this.endKeyframe = end;

	this.length = this.endKeyframe - this.startKeyframe + 1;

};

THREE.MorphAnimMesh.prototype.setDirectionForward = function () {

	this.direction = 1;
	this.directionBackwards = false;

};

THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {

	this.direction = -1;
	this.directionBackwards = true;

};

THREE.MorphAnimMesh.prototype.parseAnimations = function () {

	var geometry = this.geometry;

	if ( ! geometry.animations ) geometry.animations = {};

	var firstAnimation, animations = geometry.animations;

	var pattern = /([a-z]+)(\d+)/;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var parts = morph.name.match( pattern );

		if ( parts && parts.length > 1 ) {

			var label = parts[ 1 ];
			var num = parts[ 2 ];

			if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };

			var animation = animations[ label ];

			if ( i < animation.start ) animation.start = i;
			if ( i > animation.end ) animation.end = i;

			if ( ! firstAnimation ) firstAnimation = label;

		}

	}

	geometry.firstAnimation = firstAnimation;

};

THREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {

	if ( ! this.geometry.animations ) this.geometry.animations = {};

	this.geometry.animations[ label ] = { start: start, end: end };

};

THREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {

	var animation = this.geometry.animations[ label ];

	if ( animation ) {

		this.setFrameRange( animation.start, animation.end );
		this.duration = 1000 * ( ( animation.end - animation.start ) / fps );
		this.time = 0;

	} else {

		console.warn( "animation[" + label + "] undefined" );

	}

};

THREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {

	var frameTime = this.duration / this.length;

	this.time += this.direction * delta;

	if ( this.mirroredLoop ) {

		if ( this.time > this.duration || this.time < 0 ) {

			this.direction *= -1;

			if ( this.time > this.duration ) {

				this.time = this.duration;
				this.directionBackwards = true;

			}

			if ( this.time < 0 ) {

				this.time = 0;
				this.directionBackwards = false;

			}

		}

	} else {

		this.time = this.time % this.duration;

		if ( this.time < 0 ) this.time += this.duration;

	}

	var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );

	if ( keyframe !== this.currentKeyframe ) {

		this.morphTargetInfluences[ this.lastKeyframe ] = 0;
		this.morphTargetInfluences[ this.currentKeyframe ] = 1;

		this.morphTargetInfluences[ keyframe ] = 0;

		this.lastKeyframe = this.currentKeyframe;
		this.currentKeyframe = keyframe;

	}

	var mix = ( this.time % frameTime ) / frameTime;

	if ( this.directionBackwards ) {

		mix = 1 - mix;

	}

	this.morphTargetInfluences[ this.currentKeyframe ] = mix;
	this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;

};

THREE.MorphAnimMesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );

	object.duration = this.duration;
	object.mirroredLoop = this.mirroredLoop;
	object.time = this.time;

	object.lastKeyframe = this.lastKeyframe;
	object.currentKeyframe = this.currentKeyframe;

	object.direction = this.direction;
	object.directionBackwards = this.directionBackwards;

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LOD = function () {

	THREE.Object3D.call( this );

	this.objects = [];

};


THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );

THREE.LOD.prototype.addLevel = function ( object, distance ) {

	if ( distance === undefined ) distance = 0;

	distance = Math.abs( distance );

	for ( var l = 0; l < this.objects.length; l ++ ) {

		if ( distance < this.objects[ l ].distance ) {

			break;

		}

	}

	this.objects.splice( l, 0, { distance: distance, object: object } );
	this.add( object );

};

THREE.LOD.prototype.getObjectForDistance = function ( distance ) {

	for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

		if ( distance < this.objects[ i ].distance ) {

			break;

		}

	}

	return this.objects[ i - 1 ].object;

};

THREE.LOD.prototype.update = function () {

	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();

	return function ( camera ) {

		if ( this.objects.length > 1 ) {

			v1.setFromMatrixPosition( camera.matrixWorld );
			v2.setFromMatrixPosition( this.matrixWorld );

			var distance = v1.distanceTo( v2 );

			this.objects[ 0 ].object.visible = true;

			for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

				if ( distance >= this.objects[ i ].distance ) {

					this.objects[ i - 1 ].object.visible = false;
					this.objects[ i     ].object.visible = true;

				} else {

					break;

				}

			}

			for( ; i < l; i ++ ) {

				this.objects[ i ].object.visible = false;

			}

		}

	};

}();

THREE.LOD.prototype.clone = function () {

	// TODO

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Sprite = function ( material ) {

	THREE.Object3D.call( this );

	this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

};

THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );

/*
 * Custom update matrix
 */

THREE.Sprite.prototype.updateMatrix = function () {

	this.matrix.compose( this.position, this.quaternion, this.scale );

	this.matrixWorldNeedsUpdate = true;

};

THREE.Sprite.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Sprite( this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

// Backwards compatibility

THREE.Particle = THREE.Sprite;
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Scene = function () {

	THREE.Object3D.call( this );

	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer
	this.matrixAutoUpdate = false;

	this.__lights = [];

	this.__objectsAdded = [];
	this.__objectsRemoved = [];

};

THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );

THREE.Scene.prototype.__addObject = function ( object ) {

	if ( object instanceof THREE.Light ) {

		if ( this.__lights.indexOf( object ) === - 1 ) {

			this.__lights.push( object );

		}

		if ( object.target && object.target.parent === undefined ) {

			this.add( object.target );

		}

	} else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {

		this.__objectsAdded.push( object );

		// check if previously removed

		var i = this.__objectsRemoved.indexOf( object );

		if ( i !== -1 ) {

			this.__objectsRemoved.splice( i, 1 );

		}

	}

	this.dispatchEvent( { type: 'objectAdded', object: object } );
	object.dispatchEvent( { type: 'addedToScene', scene: this } );

	for ( var c = 0; c < object.children.length; c ++ ) {

		this.__addObject( object.children[ c ] );

	}

};

THREE.Scene.prototype.__removeObject = function ( object ) {

	if ( object instanceof THREE.Light ) {

		var i = this.__lights.indexOf( object );

		if ( i !== -1 ) {

			this.__lights.splice( i, 1 );

		}

		if ( object.shadowCascadeArray ) {

			for ( var x = 0; x < object.shadowCascadeArray.length; x ++ ) {

				this.__removeObject( object.shadowCascadeArray[ x ] );

			}

		}

	} else if ( !( object instanceof THREE.Camera ) ) {

		this.__objectsRemoved.push( object );

		// check if previously added

		var i = this.__objectsAdded.indexOf( object );

		if ( i !== -1 ) {

			this.__objectsAdded.splice( i, 1 );

		}

	}

	this.dispatchEvent( { type: 'objectRemoved', object: object } );
	object.dispatchEvent( { type: 'removedFromScene', scene: this } );

	for ( var c = 0; c < object.children.length; c ++ ) {

		this.__removeObject( object.children[ c ] );

	}

};

THREE.Scene.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Scene();

	THREE.Object3D.prototype.clone.call(this, object);

	if ( this.fog !== null ) object.fog = this.fog.clone();
	if ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();

	object.autoUpdate = this.autoUpdate;
	object.matrixAutoUpdate = this.matrixAutoUpdate;

	return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Fog = function ( hex, near, far ) {

	this.name = '';

	this.color = new THREE.Color( hex );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

};

THREE.Fog.prototype.clone = function () {

	return new THREE.Fog( this.color.getHex(), this.near, this.far );

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.FogExp2 = function ( hex, density ) {

	this.name = '';

	this.color = new THREE.Color( hex );
	this.density = ( density !== undefined ) ? density : 0.00025;

};

THREE.FogExp2.prototype.clone = function () {

	return new THREE.FogExp2( this.color.getHex(), this.density );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CanvasRenderer = function ( parameters ) {

	console.log( 'THREE.CanvasRenderer', THREE.REVISION );

	var smoothstep = THREE.Math.smoothstep;

	parameters = parameters || {};

	var _this = this,
	_renderData, _elements, _lights,
	_projector = new THREE.Projector(),

	_canvas = parameters.canvas !== undefined
			? parameters.canvas
			: document.createElement( 'canvas' ),

	_canvasWidth = _canvas.width,
	_canvasHeight = _canvas.height,
	_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),
	_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),
	
	_context = _canvas.getContext( '2d' ),

	_clearColor = new THREE.Color( 0x000000 ),
	_clearAlpha = 0,

	_contextGlobalAlpha = 1,
	_contextGlobalCompositeOperation = 0,
	_contextStrokeStyle = null,
	_contextFillStyle = null,
	_contextLineWidth = null,
	_contextLineCap = null,
	_contextLineJoin = null,
	_contextDashSize = null,
	_contextGapSize = 0,

	_camera,

	_v1, _v2, _v3, _v4,
	_v5 = new THREE.RenderableVertex(),
	_v6 = new THREE.RenderableVertex(),

	_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,
	_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,

	_color = new THREE.Color(),
	_color1 = new THREE.Color(),
	_color2 = new THREE.Color(),
	_color3 = new THREE.Color(),
	_color4 = new THREE.Color(),

	_diffuseColor = new THREE.Color(),
	_emissiveColor = new THREE.Color(),

	_lightColor = new THREE.Color(),

	_patterns = {},

	_near, _far,

	_image, _uvs,
	_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,

	_clipBox = new THREE.Box2(),
	_clearBox = new THREE.Box2(),
	_elemBox = new THREE.Box2(),

	_ambientLight = new THREE.Color(),
	_directionalLights = new THREE.Color(),
	_pointLights = new THREE.Color(),

	_vector3 = new THREE.Vector3(), // Needed for PointLight

	_pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,
	_gradientMap, _gradientMapContext, _gradientMapQuality = 16;

	_pixelMap = document.createElement( 'canvas' );
	_pixelMap.width = _pixelMap.height = 2;

	_pixelMapContext = _pixelMap.getContext( '2d' );
	_pixelMapContext.fillStyle = 'rgba(0,0,0,1)';
	_pixelMapContext.fillRect( 0, 0, 2, 2 );

	_pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );
	_pixelMapData = _pixelMapImage.data;

	_gradientMap = document.createElement( 'canvas' );
	_gradientMap.width = _gradientMap.height = _gradientMapQuality;

	_gradientMapContext = _gradientMap.getContext( '2d' );
	_gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );
	_gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );

	_gradientMapQuality --; // Fix UVs

	// dash+gap fallbacks for Firefox and everything else

	if ( _context.setLineDash === undefined ) {

		if ( _context.mozDash !== undefined ) {

			_context.setLineDash = function ( values ) {

				_context.mozDash = values[ 0 ] !== null ? values : null;

			}

		} else {

			_context.setLineDash = function () {}

		}

	}

	this.domElement = _canvas;

	this.devicePixelRatio = parameters.devicePixelRatio !== undefined
				? parameters.devicePixelRatio
				: self.devicePixelRatio !== undefined
					? self.devicePixelRatio
					: 1;

	this.autoClear = true;
	this.sortObjects = true;
	this.sortElements = true;

	this.info = {

		render: {

			vertices: 0,
			faces: 0

		}

	}

	// WebGLRenderer compatibility

	this.supportsVertexTextures = function () {};
	this.setFaceCulling = function () {};

	this.setSize = function ( width, height, updateStyle ) {

		_canvasWidth = width * this.devicePixelRatio;
		_canvasHeight = height * this.devicePixelRatio;

		_canvasWidthHalf = Math.floor( _canvasWidth / 2 );
		_canvasHeightHalf = Math.floor( _canvasHeight / 2 );

		_canvas.width = _canvasWidth;
		_canvas.height = _canvasHeight;

		if ( this.devicePixelRatio !== 1 && updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		_clipBox.set(
			new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),
			new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )
		);

		_clearBox.set(
			new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),
			new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )
		);

		_contextGlobalAlpha = 1;
		_contextGlobalCompositeOperation = 0;
		_contextStrokeStyle = null;
		_contextFillStyle = null;
		_contextLineWidth = null;
		_contextLineCap = null;
		_contextLineJoin = null;

	};

	this.setClearColor = function ( color, alpha ) {

		_clearColor.set( color );
		_clearAlpha = alpha !== undefined ? alpha : 1;

		_clearBox.set(
			new THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),
			new THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )
		);

	};

	this.setClearColorHex = function ( hex, alpha ) {

		console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
		this.setClearColor( hex, alpha );

	};

	this.getMaxAnisotropy = function () {

		return 0;

	};

	this.clear = function () {

		_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );

		if ( _clearBox.empty() === false ) {

			_clearBox.intersect( _clipBox );
			_clearBox.expandByScalar( 2 );

			if ( _clearAlpha < 1 ) {

				_context.clearRect(
					_clearBox.min.x | 0,
					_clearBox.min.y | 0,
					( _clearBox.max.x - _clearBox.min.x ) | 0,
					( _clearBox.max.y - _clearBox.min.y ) | 0
				);

			}

			if ( _clearAlpha > 0 ) {

				setBlending( THREE.NormalBlending );
				setOpacity( 1 );

				setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );

				_context.fillRect(
					_clearBox.min.x | 0,
					_clearBox.min.y | 0,
					( _clearBox.max.x - _clearBox.min.x ) | 0,
					( _clearBox.max.y - _clearBox.min.y ) | 0
				);

			}

			_clearBox.makeEmpty();

		}

	};

	// compatibility

	this.clearColor = function () {};
	this.clearDepth = function () {};
	this.clearStencil = function () {};

	this.render = function ( scene, camera ) {

		if ( camera instanceof THREE.Camera === false ) {

			console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( this.autoClear === true ) this.clear();

		_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );

		_this.info.render.vertices = 0;
		_this.info.render.faces = 0;

		_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );
		_elements = _renderData.elements;
		_lights = _renderData.lights;
		_camera = camera;

		/* DEBUG
		setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );
		_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );
		*/

		calculateLights();

		for ( var e = 0, el = _elements.length; e < el; e++ ) {

			var element = _elements[ e ];

			var material = element.material;

			if ( material === undefined || material.visible === false ) continue;

			_elemBox.makeEmpty();

			if ( element instanceof THREE.RenderableSprite ) {

				_v1 = element;
				_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;

				renderSprite( _v1, element, material );

			} else if ( element instanceof THREE.RenderableLine ) {

				_v1 = element.v1; _v2 = element.v2;

				_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
				_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;

				_elemBox.setFromPoints( [
					_v1.positionScreen,
					_v2.positionScreen
				] );

				if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

					renderLine( _v1, _v2, element, material );

				}

			} else if ( element instanceof THREE.RenderableFace3 ) {

				_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;

				if ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;
				if ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;
				if ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;

				_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
				_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;
				_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;

				if ( material.overdraw > 0 ) {

					expand( _v1.positionScreen, _v2.positionScreen, material.overdraw );
					expand( _v2.positionScreen, _v3.positionScreen, material.overdraw );
					expand( _v3.positionScreen, _v1.positionScreen, material.overdraw );

				}

				_elemBox.setFromPoints( [
					_v1.positionScreen,
					_v2.positionScreen,
					_v3.positionScreen
				] );

				if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

					renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );

				}

			}

			/* DEBUG
			setLineWidth( 1 );
			setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );
			_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );
			*/

			_clearBox.union( _elemBox );

		}

		/* DEBUG
		setLineWidth( 1 );
		setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );
		_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );
		*/

		_context.setTransform( 1, 0, 0, 1, 0, 0 );

	};

	//

	function calculateLights() {

		_ambientLight.setRGB( 0, 0, 0 );
		_directionalLights.setRGB( 0, 0, 0 );
		_pointLights.setRGB( 0, 0, 0 );

		for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

			var light = _lights[ l ];
			var lightColor = light.color;

			if ( light instanceof THREE.AmbientLight ) {

				_ambientLight.add( lightColor );

			} else if ( light instanceof THREE.DirectionalLight ) {

				// for sprites

				_directionalLights.add( lightColor );

			} else if ( light instanceof THREE.PointLight ) {

				// for sprites

				_pointLights.add( lightColor );

			}

		}

	}

	function calculateLight( position, normal, color ) {

		for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

			var light = _lights[ l ];

			_lightColor.copy( light.color );

			if ( light instanceof THREE.DirectionalLight ) {

				var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();

				var amount = normal.dot( lightPosition );

				if ( amount <= 0 ) continue;

				amount *= light.intensity;

				color.add( _lightColor.multiplyScalar( amount ) );

			} else if ( light instanceof THREE.PointLight ) {

				var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );

				var amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );

				if ( amount <= 0 ) continue;

				amount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );

				if ( amount == 0 ) continue;

				amount *= light.intensity;

				color.add( _lightColor.multiplyScalar( amount ) );

			}

		}

	}

	function renderSprite( v1, element, material ) {

		setOpacity( material.opacity );
		setBlending( material.blending );

		var scaleX = element.scale.x * _canvasWidthHalf;
		var scaleY = element.scale.y * _canvasHeightHalf;

		var dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite
		_elemBox.min.set( v1.x - dist, v1.y - dist );
		_elemBox.max.set( v1.x + dist, v1.y + dist );

		if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {

			_elemBox.makeEmpty();
			return;

		}

		if ( material instanceof THREE.SpriteMaterial ||
			 material instanceof THREE.ParticleSystemMaterial ) { // Backwards compatibility

			var texture = material.map;

			if ( texture !== null ) {

				if ( texture.hasEventListener( 'update', onTextureUpdate ) === false ) {

					if ( texture.image !== undefined && texture.image.width > 0 ) {

						textureToPattern( texture );

					}

					texture.addEventListener( 'update', onTextureUpdate );

				}

				var pattern = _patterns[ texture.id ];

				if ( pattern !== undefined ) {

					setFillStyle( pattern );

				} else {

					setFillStyle( 'rgba( 0, 0, 0, 1 )' );

				}

				//

				var bitmap = texture.image;

				var ox = bitmap.width * texture.offset.x;
				var oy = bitmap.height * texture.offset.y;

				var sx = bitmap.width * texture.repeat.x;
				var sy = bitmap.height * texture.repeat.y;

				var cx = scaleX / sx;
				var cy = scaleY / sy;

				_context.save();
				_context.translate( v1.x, v1.y );
				if ( material.rotation !== 0 ) _context.rotate( material.rotation );
				_context.translate( - scaleX / 2, - scaleY / 2 );
				_context.scale( cx, cy );
				_context.translate( - ox, - oy );
				_context.fillRect( ox, oy, sx, sy );
				_context.restore();

			} else { // no texture

				setFillStyle( material.color.getStyle() );

				_context.save();
				_context.translate( v1.x, v1.y );
				if ( material.rotation !== 0 ) _context.rotate( material.rotation );
				_context.scale( scaleX, - scaleY );
				_context.fillRect( - 0.5, - 0.5, 1, 1 );
				_context.restore();

			}

		} else if ( material instanceof THREE.SpriteCanvasMaterial ) {

			setStrokeStyle( material.color.getStyle() );
			setFillStyle( material.color.getStyle() );

			_context.save();
			_context.translate( v1.x, v1.y );
			if ( material.rotation !== 0 ) _context.rotate( material.rotation );
			_context.scale( scaleX, scaleY );

			material.program( _context );

			_context.restore();

		}

		/* DEBUG
		setStrokeStyle( 'rgb(255,255,0)' );
		_context.beginPath();
		_context.moveTo( v1.x - 10, v1.y );
		_context.lineTo( v1.x + 10, v1.y );
		_context.moveTo( v1.x, v1.y - 10 );
		_context.lineTo( v1.x, v1.y + 10 );
		_context.stroke();
		*/

	}

	function renderLine( v1, v2, element, material ) {

		setOpacity( material.opacity );
		setBlending( material.blending );

		_context.beginPath();
		_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );
		_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );

		if ( material instanceof THREE.LineBasicMaterial ) {

			setLineWidth( material.linewidth );
			setLineCap( material.linecap );
			setLineJoin( material.linejoin );

			if ( material.vertexColors !== THREE.VertexColors ) {

				setStrokeStyle( material.color.getStyle() );

			} else {

				var colorStyle1 = element.vertexColors[0].getStyle();
				var colorStyle2 = element.vertexColors[1].getStyle();

				if ( colorStyle1 === colorStyle2 ) {

					setStrokeStyle( colorStyle1 );

				} else {

					try {

						var grad = _context.createLinearGradient(
							v1.positionScreen.x,
							v1.positionScreen.y,
							v2.positionScreen.x,
							v2.positionScreen.y
						);
						grad.addColorStop( 0, colorStyle1 );
						grad.addColorStop( 1, colorStyle2 );

					} catch ( exception ) {

						grad = colorStyle1;

					}

					setStrokeStyle( grad );

				}

			}

			_context.stroke();
			_elemBox.expandByScalar( material.linewidth * 2 );

		} else if ( material instanceof THREE.LineDashedMaterial ) {

			setLineWidth( material.linewidth );
			setLineCap( material.linecap );
			setLineJoin( material.linejoin );
			setStrokeStyle( material.color.getStyle() );
			setDashAndGap( material.dashSize, material.gapSize );

			_context.stroke();

			_elemBox.expandByScalar( material.linewidth * 2 );

			setDashAndGap( null, null );

		}

	}

	function renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {

		_this.info.render.vertices += 3;
		_this.info.render.faces ++;

		setOpacity( material.opacity );
		setBlending( material.blending );

		_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;
		_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;
		_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;

		drawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );

		if ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {

			_diffuseColor.copy( material.color );
			_emissiveColor.copy( material.emissive );

			if ( material.vertexColors === THREE.FaceColors ) {

				_diffuseColor.multiply( element.color );

			}

			if ( material.wireframe === false && material.shading === THREE.SmoothShading && element.vertexNormalsLength === 3 ) {

				_color1.copy( _ambientLight );
				_color2.copy( _ambientLight );
				_color3.copy( _ambientLight );

				calculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );
				calculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );
				calculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color3 );

				_color1.multiply( _diffuseColor ).add( _emissiveColor );
				_color2.multiply( _diffuseColor ).add( _emissiveColor );
				_color3.multiply( _diffuseColor ).add( _emissiveColor );
				_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );

				_image = getGradientTexture( _color1, _color2, _color3, _color4 );

				clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );

			} else {

				_color.copy( _ambientLight );

				calculateLight( element.centroidModel, element.normalModel, _color );

				_color.multiply( _diffuseColor ).add( _emissiveColor );

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			}

		} else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {

			if ( material.map !== null ) {

				if ( material.map.mapping instanceof THREE.UVMapping ) {

					_uvs = element.uvs[ 0 ];
					patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );

				}


			} else if ( material.envMap !== null ) {

				if ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {

					_vector3.copy( element.vertexNormalsModelView[ uv1 ] );
					_uv1x = 0.5 * _vector3.x + 0.5;
					_uv1y = 0.5 * _vector3.y + 0.5;

					_vector3.copy( element.vertexNormalsModelView[ uv2 ] );
					_uv2x = 0.5 * _vector3.x + 0.5;
					_uv2y = 0.5 * _vector3.y + 0.5;

					_vector3.copy( element.vertexNormalsModelView[ uv3 ] );
					_uv3x = 0.5 * _vector3.x + 0.5;
					_uv3y = 0.5 * _vector3.y + 0.5;

					patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );

				}/* else if ( material.envMap.mapping === THREE.SphericalRefractionMapping ) {



				}*/


			} else {

				_color.copy( material.color );

				if ( material.vertexColors === THREE.FaceColors ) {

					_color.multiply( element.color );

				}

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			}

		} else if ( material instanceof THREE.MeshDepthMaterial ) {

			_near = _camera.near;
			_far = _camera.far;

			_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );
			_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far );
			_color3.r = _color3.g = _color3.b = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );
			_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );

			_image = getGradientTexture( _color1, _color2, _color3, _color4 );

			clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );

		} else if ( material instanceof THREE.MeshNormalMaterial ) {

			var normal;

			if ( material.shading === THREE.FlatShading ) {

				normal = element.normalModelView;

				_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			} else if ( material.shading === THREE.SmoothShading ) {

				normal = element.vertexNormalsModelView[ uv1 ];
				_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

				normal = element.vertexNormalsModelView[ uv2 ];
				_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

				normal = element.vertexNormalsModelView[ uv3 ];
				_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

				_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );

				_image = getGradientTexture( _color1, _color2, _color3, _color4 );

				clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );

			}

		}

	}

	//

	function drawTriangle( x0, y0, x1, y1, x2, y2 ) {

		_context.beginPath();
		_context.moveTo( x0, y0 );
		_context.lineTo( x1, y1 );
		_context.lineTo( x2, y2 );
		_context.closePath();

	}

	function strokePath( color, linewidth, linecap, linejoin ) {

		setLineWidth( linewidth );
		setLineCap( linecap );
		setLineJoin( linejoin );
		setStrokeStyle( color.getStyle() );

		_context.stroke();

		_elemBox.expandByScalar( linewidth * 2 );

	}

	function fillPath( color ) {

		setFillStyle( color.getStyle() );
		_context.fill();

	}

	function onTextureUpdate ( event ) {

		textureToPattern( event.target );

	}

	function textureToPattern( texture ) {

		var repeatX = texture.wrapS === THREE.RepeatWrapping;
		var repeatY = texture.wrapT === THREE.RepeatWrapping;

		var image = texture.image;

		var canvas = document.createElement( 'canvas' );
		canvas.width = image.width;
		canvas.height = image.height;

		var context = canvas.getContext( '2d' );
		context.setTransform( 1, 0, 0, - 1, 0, image.height );
		context.drawImage( image, 0, 0 );

		_patterns[ texture.id ] = _context.createPattern(
			canvas, repeatX === true && repeatY === true
				? 'repeat'
				: repeatX === true && repeatY === false
					? 'repeat-x'
					: repeatX === false && repeatY === true
						? 'repeat-y'
						: 'no-repeat'
		);

	}

	function patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {

		if ( texture instanceof THREE.DataTexture ) return;

		if ( texture.hasEventListener( 'update', onTextureUpdate ) === false ) {

			if ( texture.image !== undefined && texture.image.width > 0 ) {

				textureToPattern( texture );

			}

			texture.addEventListener( 'update', onTextureUpdate );

		}

		var pattern = _patterns[ texture.id ];

		if ( pattern !== undefined ) {

			setFillStyle( pattern );

		} else {

			setFillStyle( 'rgba(0,0,0,1)' );
			_context.fill();

			return;

		}	

		// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

		var a, b, c, d, e, f, det, idet,
		offsetX = texture.offset.x / texture.repeat.x,
		offsetY = texture.offset.y / texture.repeat.y,
		width = texture.image.width * texture.repeat.x,
		height = texture.image.height * texture.repeat.y;

		u0 = ( u0 + offsetX ) * width;
		v0 = ( v0 + offsetY ) * height;

		u1 = ( u1 + offsetX ) * width;
		v1 = ( v1 + offsetY ) * height;

		u2 = ( u2 + offsetX ) * width;
		v2 = ( v2 + offsetY ) * height;

		x1 -= x0; y1 -= y0;
		x2 -= x0; y2 -= y0;

		u1 -= u0; v1 -= v0;
		u2 -= u0; v2 -= v0;

		det = u1 * v2 - u2 * v1;

		if ( det === 0 ) return;

		idet = 1 / det;

		a = ( v2 * x1 - v1 * x2 ) * idet;
		b = ( v2 * y1 - v1 * y2 ) * idet;
		c = ( u1 * x2 - u2 * x1 ) * idet;
		d = ( u1 * y2 - u2 * y1 ) * idet;

		e = x0 - a * u0 - c * v0;
		f = y0 - b * u0 - d * v0;

		_context.save();
		_context.transform( a, b, c, d, e, f );
		_context.fill();
		_context.restore();

	}

	function clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {

		// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

		var a, b, c, d, e, f, det, idet,
		width = image.width - 1,
		height = image.height - 1;

		u0 *= width; v0 *= height;
		u1 *= width; v1 *= height;
		u2 *= width; v2 *= height;

		x1 -= x0; y1 -= y0;
		x2 -= x0; y2 -= y0;

		u1 -= u0; v1 -= v0;
		u2 -= u0; v2 -= v0;

		det = u1 * v2 - u2 * v1;

		idet = 1 / det;

		a = ( v2 * x1 - v1 * x2 ) * idet;
		b = ( v2 * y1 - v1 * y2 ) * idet;
		c = ( u1 * x2 - u2 * x1 ) * idet;
		d = ( u1 * y2 - u2 * y1 ) * idet;

		e = x0 - a * u0 - c * v0;
		f = y0 - b * u0 - d * v0;

		_context.save();
		_context.transform( a, b, c, d, e, f );
		_context.clip();
		_context.drawImage( image, 0, 0 );
		_context.restore();

	}

	function getGradientTexture( color1, color2, color3, color4 ) {

		// http://mrdoob.com/blog/post/710

		_pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;
		_pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;
		_pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;

		_pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;
		_pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;
		_pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;

		_pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;
		_pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;
		_pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;

		_pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;
		_pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;
		_pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;

		_pixelMapContext.putImageData( _pixelMapImage, 0, 0 );
		_gradientMapContext.drawImage( _pixelMap, 0, 0 );

		return _gradientMap;

	}

	// Hide anti-alias gaps

	function expand( v1, v2, pixels ) {

		var x = v2.x - v1.x, y = v2.y - v1.y,
		det = x * x + y * y, idet;

		if ( det === 0 ) return;

		idet = pixels / Math.sqrt( det );

		x *= idet; y *= idet;

		v2.x += x; v2.y += y;
		v1.x -= x; v1.y -= y;

	}

	// Context cached methods.

	function setOpacity( value ) {

		if ( _contextGlobalAlpha !== value ) {

			_context.globalAlpha = value;
			_contextGlobalAlpha = value;

		}

	}

	function setBlending( value ) {

		if ( _contextGlobalCompositeOperation !== value ) {

			if ( value === THREE.NormalBlending ) {

				_context.globalCompositeOperation = 'source-over';

			} else if ( value === THREE.AdditiveBlending ) {

				_context.globalCompositeOperation = 'lighter';

			} else if ( value === THREE.SubtractiveBlending ) {

				_context.globalCompositeOperation = 'darker';

			}

			_contextGlobalCompositeOperation = value;

		}

	}

	function setLineWidth( value ) {

		if ( _contextLineWidth !== value ) {

			_context.lineWidth = value;
			_contextLineWidth = value;

		}

	}

	function setLineCap( value ) {

		// "butt", "round", "square"

		if ( _contextLineCap !== value ) {

			_context.lineCap = value;
			_contextLineCap = value;

		}

	}

	function setLineJoin( value ) {

		// "round", "bevel", "miter"

		if ( _contextLineJoin !== value ) {

			_context.lineJoin = value;
			_contextLineJoin = value;

		}

	}

	function setStrokeStyle( value ) {

		if ( _contextStrokeStyle !== value ) {

			_context.strokeStyle = value;
			_contextStrokeStyle = value;

		}

	}

	function setFillStyle( value ) {

		if ( _contextFillStyle !== value ) {

			_context.fillStyle = value;
			_contextFillStyle = value;

		}

	}

	function setDashAndGap( dashSizeValue, gapSizeValue ) {

		if ( _contextDashSize !== dashSizeValue || _contextGapSize !== gapSizeValue ) {

			_context.setLineDash( [ dashSizeValue, gapSizeValue ] );
			_contextDashSize = dashSizeValue;
			_contextGapSize = gapSizeValue;

		}

	}

};

/**
 * Shader chunks for WebLG Shader library
 * 
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

THREE.ShaderChunk = {

	// FOG

	fog_pars_fragment: [

		"#ifdef USE_FOG",

			"uniform vec3 fogColor;",

			"#ifdef FOG_EXP2",

				"uniform float fogDensity;",

			"#else",

				"uniform float fogNear;",
				"uniform float fogFar;",

			"#endif",

		"#endif"

	].join("\n"),

	fog_fragment: [

		"#ifdef USE_FOG",

			"float depth = gl_FragCoord.z / gl_FragCoord.w;",

			"#ifdef FOG_EXP2",

				"const float LOG2 = 1.442695;",
				"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
				"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",

			"#else",

				"float fogFactor = smoothstep( fogNear, fogFar, depth );",

			"#endif",

			"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",

		"#endif"

	].join("\n"),

	// ENVIRONMENT MAP

	envmap_pars_fragment: [

		"#ifdef USE_ENVMAP",

			"uniform float reflectivity;",
			"uniform samplerCube envMap;",
			"uniform float flipEnvMap;",
			"uniform int combine;",

			"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

				"uniform bool useRefract;",
				"uniform float refractionRatio;",

			"#else",

				"varying vec3 vReflect;",

			"#endif",

		"#endif"

	].join("\n"),

	envmap_fragment: [

		"#ifdef USE_ENVMAP",

			"vec3 reflectVec;",

			"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

				"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

				"if ( useRefract ) {",

					"reflectVec = refract( cameraToVertex, normal, refractionRatio );",

				"} else { ",

					"reflectVec = reflect( cameraToVertex, normal );",

				"}",

			"#else",

				"reflectVec = vReflect;",

			"#endif",

			"#ifdef DOUBLE_SIDED",

				"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );",
				"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

			"#else",

				"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

			"#endif",

			"#ifdef GAMMA_INPUT",

				"cubeColor.xyz *= cubeColor.xyz;",

			"#endif",

			"if ( combine == 1 ) {",

				"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );",

			"} else if ( combine == 2 ) {",

				"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;",

			"} else {",

				"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );",

			"}",

		"#endif"

	].join("\n"),

	envmap_pars_vertex: [

		"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

			"varying vec3 vReflect;",

			"uniform float refractionRatio;",
			"uniform bool useRefract;",

		"#endif"

	].join("\n"),

	worldpos_vertex : [

		"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )",

			"#ifdef USE_SKINNING",

				"vec4 worldPosition = modelMatrix * skinned;",

			"#endif",

			"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

				"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );",

			"#endif",

			"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

				"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

			"#endif",

		"#endif"

	].join("\n"),

	envmap_vertex : [

		"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

			"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;",
			"worldNormal = normalize( worldNormal );",

			"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );",

			"if ( useRefract ) {",

				"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );",

			"} else {",

				"vReflect = reflect( cameraToVertex, worldNormal );",

			"}",

		"#endif"

	].join("\n"),

	// COLOR MAP (particles)

	map_particle_pars_fragment: [

		"#ifdef USE_MAP",

			"uniform sampler2D map;",

		"#endif"

	].join("\n"),


	map_particle_fragment: [

		"#ifdef USE_MAP",

			"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );",

		"#endif"

	].join("\n"),

	// COLOR MAP (triangles)

	map_pars_vertex: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"varying vec2 vUv;",
			"uniform vec4 offsetRepeat;",

		"#endif"

	].join("\n"),

	map_pars_fragment: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"varying vec2 vUv;",

		"#endif",

		"#ifdef USE_MAP",

			"uniform sampler2D map;",

		"#endif"

	].join("\n"),

	map_vertex: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;",

		"#endif"

	].join("\n"),

	map_fragment: [

		"#ifdef USE_MAP",

			"vec4 texelColor = texture2D( map, vUv );",

			"#ifdef GAMMA_INPUT",

				"texelColor.xyz *= texelColor.xyz;",

			"#endif",

			"gl_FragColor = gl_FragColor * texelColor;",

		"#endif"

	].join("\n"),

	// LIGHT MAP

	lightmap_pars_fragment: [

		"#ifdef USE_LIGHTMAP",

			"varying vec2 vUv2;",
			"uniform sampler2D lightMap;",

		"#endif"

	].join("\n"),

	lightmap_pars_vertex: [

		"#ifdef USE_LIGHTMAP",

			"varying vec2 vUv2;",

		"#endif"

	].join("\n"),

	lightmap_fragment: [

		"#ifdef USE_LIGHTMAP",

			"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );",

		"#endif"

	].join("\n"),

	lightmap_vertex: [

		"#ifdef USE_LIGHTMAP",

			"vUv2 = uv2;",

		"#endif"

	].join("\n"),

	// BUMP MAP

	bumpmap_pars_fragment: [

		"#ifdef USE_BUMPMAP",

			"uniform sampler2D bumpMap;",
			"uniform float bumpScale;",

			// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen
			//	http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html

			// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

			"vec2 dHdxy_fwd() {",

				"vec2 dSTdx = dFdx( vUv );",
				"vec2 dSTdy = dFdy( vUv );",

				"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;",
				"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;",
				"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;",

				"return vec2( dBx, dBy );",

			"}",

			"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {",

				"vec3 vSigmaX = dFdx( surf_pos );",
				"vec3 vSigmaY = dFdy( surf_pos );",
				"vec3 vN = surf_norm;",		// normalized

				"vec3 R1 = cross( vSigmaY, vN );",
				"vec3 R2 = cross( vN, vSigmaX );",

				"float fDet = dot( vSigmaX, R1 );",

				"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );",
				"return normalize( abs( fDet ) * surf_norm - vGrad );",

			"}",

		"#endif"

	].join("\n"),

	// NORMAL MAP

	normalmap_pars_fragment: [

		"#ifdef USE_NORMALMAP",

			"uniform sampler2D normalMap;",
			"uniform vec2 normalScale;",

			// Per-Pixel Tangent Space Normal Mapping
			// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html

			"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {",

				"vec3 q0 = dFdx( eye_pos.xyz );",
				"vec3 q1 = dFdy( eye_pos.xyz );",
				"vec2 st0 = dFdx( vUv.st );",
				"vec2 st1 = dFdy( vUv.st );",

				"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );",
				"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );",
				"vec3 N = normalize( surf_norm );",

				"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
				"mapN.xy = normalScale * mapN.xy;",
				"mat3 tsn = mat3( S, T, N );",
				"return normalize( tsn * mapN );",

			"}",

		"#endif"

	].join("\n"),

	// SPECULAR MAP

	specularmap_pars_fragment: [

		"#ifdef USE_SPECULARMAP",

			"uniform sampler2D specularMap;",

		"#endif"

	].join("\n"),

	specularmap_fragment: [

		"float specularStrength;",

		"#ifdef USE_SPECULARMAP",

			"vec4 texelSpecular = texture2D( specularMap, vUv );",
			"specularStrength = texelSpecular.r;",

		"#else",

			"specularStrength = 1.0;",

		"#endif"

	].join("\n"),

	// LIGHTS LAMBERT

	lights_lambert_pars_vertex: [

		"uniform vec3 ambient;",
		"uniform vec3 diffuse;",
		"uniform vec3 emissive;",

		"uniform vec3 ambientLightColor;",

		"#if MAX_DIR_LIGHTS > 0",

			"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
			"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
			"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
			"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

		"#endif",

		"#ifdef WRAP_AROUND",

			"uniform vec3 wrapRGB;",

		"#endif"

	].join("\n"),

	lights_lambert_vertex: [

		"vLightFront = vec3( 0.0 );",

		"#ifdef DOUBLE_SIDED",

			"vLightBack = vec3( 0.0 );",

		"#endif",

		"transformedNormal = normalize( transformedNormal );",

		"#if MAX_DIR_LIGHTS > 0",

		"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

			"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
			"vec3 dirVector = normalize( lDirection.xyz );",

			"float dotProduct = dot( transformedNormal, dirVector );",
			"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

			"#ifdef DOUBLE_SIDED",

				"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

				"#ifdef WRAP_AROUND",

					"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

				"#endif",

			"#endif",

			"#ifdef WRAP_AROUND",

				"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
				"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );",

				"#ifdef DOUBLE_SIDED",

					"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );",

				"#endif",

			"#endif",

			"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;",

			"#ifdef DOUBLE_SIDED",

				"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;",

			"#endif",

		"}",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( pointLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

				"lVector = normalize( lVector );",
				"float dotProduct = dot( transformedNormal, lVector );",

				"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

				"#ifdef DOUBLE_SIDED",

					"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

					"#ifdef WRAP_AROUND",

						"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

					"#endif",

				"#endif",

				"#ifdef WRAP_AROUND",

					"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
					"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );",

					"#ifdef DOUBLE_SIDED",

						"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );",

					"#endif",

				"#endif",

				"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;",

				"#ifdef DOUBLE_SIDED",

					"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;",

				"#endif",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );",

				"if ( spotEffect > spotLightAngleCos[ i ] ) {",

					"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

					"float lDistance = 1.0;",
					"if ( spotLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

					"float dotProduct = dot( transformedNormal, lVector );",
					"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

					"#ifdef DOUBLE_SIDED",

						"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

						"#ifdef WRAP_AROUND",

							"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

						"#endif",

					"#endif",

					"#ifdef WRAP_AROUND",

						"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
						"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );",

						"#ifdef DOUBLE_SIDED",

							"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );",

						"#endif",

					"#endif",

					"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",

					"#ifdef DOUBLE_SIDED",

						"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;",

					"#endif",

				"}",

			"}",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
				"vec3 lVector = normalize( lDirection.xyz );",

				"float dotProduct = dot( transformedNormal, lVector );",

				"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
				"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;",

				"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

				"#ifdef DOUBLE_SIDED",

					"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );",

				"#endif",

			"}",

		"#endif",

		"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;",

		"#ifdef DOUBLE_SIDED",

			"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;",

		"#endif"

	].join("\n"),

	// LIGHTS PHONG

	lights_phong_pars_vertex: [

		"#ifndef PHONG_PER_PIXEL",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
			"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];",

		"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"varying vec3 vWorldPosition;",

		"#endif"

	].join("\n"),


	lights_phong_vertex: [

		"#ifndef PHONG_PER_PIXEL",

		"#if MAX_POINT_LIGHTS > 0",

			"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( pointLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

				"vPointLight[ i ] = vec4( lVector, lDistance );",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( spotLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

				"vSpotLight[ i ] = vec4( lVector, lDistance );",

			"}",

		"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"vWorldPosition = worldPosition.xyz;",

		"#endif"

	].join("\n"),

	lights_phong_pars_fragment: [

		"uniform vec3 ambientLightColor;",

		"#if MAX_DIR_LIGHTS > 0",

			"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
			"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",

			"#ifdef PHONG_PER_PIXEL",

				"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
				"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"#else",

				"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];",

			"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

			"#ifdef PHONG_PER_PIXEL",

				"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"#else",

				"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];",

			"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"varying vec3 vWorldPosition;",

		"#endif",

		"#ifdef WRAP_AROUND",

			"uniform vec3 wrapRGB;",

		"#endif",

		"varying vec3 vViewPosition;",
		"varying vec3 vNormal;"

	].join("\n"),

	lights_phong_fragment: [

		"vec3 normal = normalize( vNormal );",
		"vec3 viewPosition = normalize( vViewPosition );",

		"#ifdef DOUBLE_SIDED",

			"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );",

		"#endif",

		"#ifdef USE_NORMALMAP",

			"normal = perturbNormal2Arb( -vViewPosition, normal );",

		"#elif defined( USE_BUMPMAP )",

			"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"vec3 pointDiffuse  = vec3( 0.0 );",
			"vec3 pointSpecular = vec3( 0.0 );",

			"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"#ifdef PHONG_PER_PIXEL",

					"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
					"vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

					"float lDistance = 1.0;",
					"if ( pointLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

				"#else",

					"vec3 lVector = normalize( vPointLight[ i ].xyz );",
					"float lDistance = vPointLight[ i ].w;",

				"#endif",

				// diffuse

				"float dotProduct = dot( normal, lVector );",

				"#ifdef WRAP_AROUND",

					"float pointDiffuseWeightFull = max( dotProduct, 0.0 );",
					"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

					"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

				"#else",

					"float pointDiffuseWeight = max( dotProduct, 0.0 );",

				"#endif",

				"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;",

				// specular

				"vec3 pointHalfVector = normalize( lVector + viewPosition );",
				"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
				"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

				// 2.0 => 2.0001 is hack to work around ANGLE bug

				"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

				"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );",
				"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"vec3 spotDiffuse  = vec3( 0.0 );",
			"vec3 spotSpecular = vec3( 0.0 );",

			"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"#ifdef PHONG_PER_PIXEL",

					"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
					"vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

					"float lDistance = 1.0;",
					"if ( spotLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

				"#else",

					"vec3 lVector = normalize( vSpotLight[ i ].xyz );",
					"float lDistance = vSpotLight[ i ].w;",

				"#endif",

				"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

				"if ( spotEffect > spotLightAngleCos[ i ] ) {",

					"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

					// diffuse

					"float dotProduct = dot( normal, lVector );",

					"#ifdef WRAP_AROUND",

						"float spotDiffuseWeightFull = max( dotProduct, 0.0 );",
						"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

						"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

					"#else",

						"float spotDiffuseWeight = max( dotProduct, 0.0 );",

					"#endif",

					"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;",

					// specular

					"vec3 spotHalfVector = normalize( lVector + viewPosition );",
					"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
					"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

					// 2.0 => 2.0001 is hack to work around ANGLE bug

					"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

					"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );",
					"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;",

				"}",

			"}",

		"#endif",

		"#if MAX_DIR_LIGHTS > 0",

			"vec3 dirDiffuse  = vec3( 0.0 );",
			"vec3 dirSpecular = vec3( 0.0 );" ,

			"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
				"vec3 dirVector = normalize( lDirection.xyz );",

				// diffuse

				"float dotProduct = dot( normal, dirVector );",

				"#ifdef WRAP_AROUND",

					"float dirDiffuseWeightFull = max( dotProduct, 0.0 );",
					"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

					"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );",

				"#else",

					"float dirDiffuseWeight = max( dotProduct, 0.0 );",

				"#endif",

				"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;",

				// specular

				"vec3 dirHalfVector = normalize( dirVector + viewPosition );",
				"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
				"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

					/*
				// fresnel term from skin shader
				"const float F0 = 0.128;",

				"float base = 1.0 - dot( viewPosition, dirHalfVector );",
				"float exponential = pow( base, 5.0 );",

				"float fresnel = exponential + F0 * ( 1.0 - exponential );",
				*/

				/*
				// fresnel term from fresnel shader
				"const float mFresnelBias = 0.08;",
				"const float mFresnelScale = 0.3;",
				"const float mFresnelPower = 5.0;",

				"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );",
				*/

				// 2.0 => 2.0001 is hack to work around ANGLE bug

				"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

				//"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;",

				"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
				"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",


			"}",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"vec3 hemiDiffuse  = vec3( 0.0 );",
			"vec3 hemiSpecular = vec3( 0.0 );" ,

			"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
				"vec3 lVector = normalize( lDirection.xyz );",

				// diffuse

				"float dotProduct = dot( normal, lVector );",
				"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

				"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

				"hemiDiffuse += diffuse * hemiColor;",

				// specular (sky light)

				"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
				"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
				"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );",

				// specular (ground light)

				"vec3 lVectorGround = -lVector;",

				"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
				"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
				"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );",

				"float dotProductGround = dot( normal, lVectorGround );",

				// 2.0 => 2.0001 is hack to work around ANGLE bug

				"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

				"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );",
				"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );",
				"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

			"}",

		"#endif",

		"vec3 totalDiffuse = vec3( 0.0 );",
		"vec3 totalSpecular = vec3( 0.0 );",

		"#if MAX_DIR_LIGHTS > 0",

			"totalDiffuse += dirDiffuse;",
			"totalSpecular += dirSpecular;",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"totalDiffuse += hemiDiffuse;",
			"totalSpecular += hemiSpecular;",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"totalDiffuse += pointDiffuse;",
			"totalSpecular += pointSpecular;",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"totalDiffuse += spotDiffuse;",
			"totalSpecular += spotSpecular;",

		"#endif",

		"#ifdef METAL",

			"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );",

		"#else",

			"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

		"#endif"

	].join("\n"),

	// VERTEX COLORS

	color_pars_fragment: [

		"#ifdef USE_COLOR",

			"varying vec3 vColor;",

		"#endif"

	].join("\n"),


	color_fragment: [

		"#ifdef USE_COLOR",

			"gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );",

		"#endif"

	].join("\n"),

	color_pars_vertex: [

		"#ifdef USE_COLOR",

			"varying vec3 vColor;",

		"#endif"

	].join("\n"),


	color_vertex: [

		"#ifdef USE_COLOR",

			"#ifdef GAMMA_INPUT",

				"vColor = color * color;",

			"#else",

				"vColor = color;",

			"#endif",

		"#endif"

	].join("\n"),

	// SKINNING

	skinning_pars_vertex: [

		"#ifdef USE_SKINNING",

			"#ifdef BONE_TEXTURE",

				"uniform sampler2D boneTexture;",
				"uniform int boneTextureWidth;",
				"uniform int boneTextureHeight;",

				"mat4 getBoneMatrix( const in float i ) {",

					"float j = i * 4.0;",
					"float x = mod( j, float( boneTextureWidth ) );",
					"float y = floor( j / float( boneTextureWidth ) );",

					"float dx = 1.0 / float( boneTextureWidth );",
					"float dy = 1.0 / float( boneTextureHeight );",

					"y = dy * ( y + 0.5 );",

					"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );",
					"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );",
					"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );",
					"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );",

					"mat4 bone = mat4( v1, v2, v3, v4 );",

					"return bone;",

				"}",

			"#else",

				"uniform mat4 boneGlobalMatrices[ MAX_BONES ];",

				"mat4 getBoneMatrix( const in float i ) {",

					"mat4 bone = boneGlobalMatrices[ int(i) ];",
					"return bone;",

				"}",

			"#endif",

		"#endif"

	].join("\n"),

	skinbase_vertex: [

		"#ifdef USE_SKINNING",

			"mat4 boneMatX = getBoneMatrix( skinIndex.x );",
			"mat4 boneMatY = getBoneMatrix( skinIndex.y );",

		"#endif"

	].join("\n"),

	skinning_vertex: [

		"#ifdef USE_SKINNING",

			"#ifdef USE_MORPHTARGETS",

			"vec4 skinVertex = vec4( morphed, 1.0 );",

			"#else",

			"vec4 skinVertex = vec4( position, 1.0 );",

			"#endif",

			"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
			"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

		"#endif"

	].join("\n"),

	// MORPHING

	morphtarget_pars_vertex: [

		"#ifdef USE_MORPHTARGETS",

			"#ifndef USE_MORPHNORMALS",

			"uniform float morphTargetInfluences[ 8 ];",

			"#else",

			"uniform float morphTargetInfluences[ 4 ];",

			"#endif",

		"#endif"

	].join("\n"),

	morphtarget_vertex: [

		"#ifdef USE_MORPHTARGETS",

			"vec3 morphed = vec3( 0.0 );",
			"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];",
			"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];",
			"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];",
			"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];",

			"#ifndef USE_MORPHNORMALS",

			"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];",
			"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];",
			"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];",
			"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];",

			"#endif",

			"morphed += position;",

		"#endif"

	].join("\n"),

	default_vertex : [

		"vec4 mvPosition;",

		"#ifdef USE_SKINNING",

			"mvPosition = modelViewMatrix * skinned;",

		"#endif",

		"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )",

			"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );",

		"#endif",

		"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )",

			"mvPosition = modelViewMatrix * vec4( position, 1.0 );",

		"#endif",

		"gl_Position = projectionMatrix * mvPosition;"

	].join("\n"),

	morphnormal_vertex: [

		"#ifdef USE_MORPHNORMALS",

			"vec3 morphedNormal = vec3( 0.0 );",

			"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];",
			"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];",
			"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];",
			"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];",

			"morphedNormal += normal;",

		"#endif"

	].join("\n"),

	skinnormal_vertex: [

		"#ifdef USE_SKINNING",

			"mat4 skinMatrix = skinWeight.x * boneMatX;",
			"skinMatrix 	+= skinWeight.y * boneMatY;",

			"#ifdef USE_MORPHNORMALS",

			"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );",

			"#else",

			"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );",

			"#endif",

		"#endif"

	].join("\n"),

	defaultnormal_vertex: [

		"vec3 objectNormal;",

		"#ifdef USE_SKINNING",

			"objectNormal = skinnedNormal.xyz;",

		"#endif",

		"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )",

			"objectNormal = morphedNormal;",

		"#endif",

		"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )",

			"objectNormal = normal;",

		"#endif",

		"#ifdef FLIP_SIDED",

			"objectNormal = -objectNormal;",

		"#endif",

		"vec3 transformedNormal = normalMatrix * objectNormal;"

	].join("\n"),

	// SHADOW MAP

	// based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples
	//  http://spidergl.org/example.php?id=6
	// 	http://fabiensanglard.net/shadowmapping

	shadowmap_pars_fragment: [

		"#ifdef USE_SHADOWMAP",

			"uniform sampler2D shadowMap[ MAX_SHADOWS ];",
			"uniform vec2 shadowMapSize[ MAX_SHADOWS ];",

			"uniform float shadowDarkness[ MAX_SHADOWS ];",
			"uniform float shadowBias[ MAX_SHADOWS ];",

			"varying vec4 vShadowCoord[ MAX_SHADOWS ];",

			"float unpackDepth( const in vec4 rgba_depth ) {",

				"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"float depth = dot( rgba_depth, bit_shift );",
				"return depth;",

			"}",

		"#endif"

	].join("\n"),

	shadowmap_fragment: [

		"#ifdef USE_SHADOWMAP",

			"#ifdef SHADOWMAP_DEBUG",

				"vec3 frustumColors[3];",
				"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );",
				"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );",
				"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );",

			"#endif",

			"#ifdef SHADOWMAP_CASCADE",

				"int inFrustumCount = 0;",

			"#endif",

			"float fDepth;",
			"vec3 shadowColor = vec3( 1.0 );",

			"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

				"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;",

				// "if ( something && something )" 		 breaks ATI OpenGL shader compiler
				// "if ( all( something, something ) )"  using this instead

				"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );",
				"bool inFrustum = all( inFrustumVec );",

				// don't shadow pixels outside of light frustum
				// use just first frustum (for cascades)
				// don't shadow pixels behind far plane of light frustum

				"#ifdef SHADOWMAP_CASCADE",

					"inFrustumCount += int( inFrustum );",
					"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );",

				"#else",

					"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );",

				"#endif",

				"bool frustumTest = all( frustumTestVec );",

				"if ( frustumTest ) {",

					"shadowCoord.z += shadowBias[ i ];",

					"#if defined( SHADOWMAP_TYPE_PCF )",

						// Percentage-close filtering
						// (9 pixel kernel)
						// http://fabiensanglard.net/shadowmappingPCF/

						"float shadow = 0.0;",

						/*
						// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL
						// must enroll loop manually

						"for ( float y = -1.25; y <= 1.25; y += 1.25 )",
							"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {",

								"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );",

								// doesn't seem to produce any noticeable visual difference compared to simple "texture2D" lookup
								//"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );",

								"float fDepth = unpackDepth( rgbaDepth );",

								"if ( fDepth < shadowCoord.z )",
									"shadow += 1.0;",

						"}",

						"shadow /= 9.0;",

						*/

						"const float shadowDelta = 1.0 / 9.0;",

						"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
						"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

						"float dx0 = -1.25 * xPixelOffset;",
						"float dy0 = -1.25 * yPixelOffset;",
						"float dx1 = 1.25 * xPixelOffset;",
						"float dy1 = 1.25 * yPixelOffset;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

					"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )",

						// Percentage-close filtering
						// (9 pixel kernel)
						// http://fabiensanglard.net/shadowmappingPCF/

						"float shadow = 0.0;",

						"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
						"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

						"float dx0 = -1.0 * xPixelOffset;",
						"float dy0 = -1.0 * yPixelOffset;",
						"float dx1 = 1.0 * xPixelOffset;",
						"float dy1 = 1.0 * yPixelOffset;",

						"mat3 shadowKernel;",
						"mat3 depthKernel;",

						"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
						"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
						"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
						"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
						"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
						"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
						"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
						"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
						"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",

						"vec3 shadowZ = vec3( shadowCoord.z );",
						"shadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));",
						"shadowKernel[0] *= vec3(0.25);",
													
						"shadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));",
						"shadowKernel[1] *= vec3(0.25);",

						"shadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));",
						"shadowKernel[2] *= vec3(0.25);",

						"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );",

						"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );",
						"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );",

						"vec4 shadowValues;",
						"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );",
						"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );",
						"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );",
						"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );",

						"shadow = dot( shadowValues, vec4( 1.0 ) );",

						"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

					"#else",

						"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );",
						"float fDepth = unpackDepth( rgbaDepth );",

						"if ( fDepth < shadowCoord.z )",

							// spot with multiple shadows is darker

							"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );",

							// spot with multiple shadows has the same color as single shadow spot

							//"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );",

					"#endif",

				"}",


				"#ifdef SHADOWMAP_DEBUG",

					"#ifdef SHADOWMAP_CASCADE",

						"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];",

					"#else",

						"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];",

					"#endif",

				"#endif",

			"}",

			"#ifdef GAMMA_OUTPUT",

				"shadowColor *= shadowColor;",

			"#endif",

			"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;",

		"#endif"

	].join("\n"),

	shadowmap_pars_vertex: [

		"#ifdef USE_SHADOWMAP",

			"varying vec4 vShadowCoord[ MAX_SHADOWS ];",
			"uniform mat4 shadowMatrix[ MAX_SHADOWS ];",

		"#endif"

	].join("\n"),

	shadowmap_vertex: [

		"#ifdef USE_SHADOWMAP",

			"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

				"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

			"}",

		"#endif"

	].join("\n"),

	// ALPHATEST

	alphatest_fragment: [

		"#ifdef ALPHATEST",

			"if ( gl_FragColor.a < ALPHATEST ) discard;",

		"#endif"

	].join("\n"),

	// LINEAR SPACE

	linear_to_gamma_fragment: [

		"#ifdef GAMMA_OUTPUT",

			"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );",

		"#endif"

	].join("\n")


};
/**
 * Uniform Utilities
 */

THREE.UniformsUtils = {

	merge: function ( uniforms ) {

		var u, p, tmp, merged = {};

		for ( u = 0; u < uniforms.length; u ++ ) {

			tmp = this.clone( uniforms[ u ] );

			for ( p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var u, p, parameter, parameter_src, uniforms_dst = {};

		for ( u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( p in uniforms_src[ u ] ) {

				parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src instanceof THREE.Color ||
					 parameter_src instanceof THREE.Vector2 ||
					 parameter_src instanceof THREE.Vector3 ||
					 parameter_src instanceof THREE.Vector4 ||
					 parameter_src instanceof THREE.Matrix4 ||
					 parameter_src instanceof THREE.Texture ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( parameter_src instanceof Array ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};
/**
 * Uniforms library for shared webgl shaders
 */

THREE.UniformsLib = {

	common: {

		"diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },

		"map" : { type: "t", value: null },
		"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

		"lightMap" : { type: "t", value: null },
		"specularMap" : { type: "t", value: null },

		"envMap" : { type: "t", value: null },
		"flipEnvMap" : { type: "f", value: -1 },
		"useRefract" : { type: "i", value: 0 },
		"reflectivity" : { type: "f", value: 1.0 },
		"refractionRatio" : { type: "f", value: 0.98 },
		"combine" : { type: "i", value: 0 },

		"morphTargetInfluences" : { type: "f", value: 0 }

	},

	bump: {

		"bumpMap" : { type: "t", value: null },
		"bumpScale" : { type: "f", value: 1 }

	},

	normalmap: {

		"normalMap" : { type: "t", value: null },
		"normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
	},

	fog : {

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	lights: {

		"ambientLightColor" : { type: "fv", value: [] },

		"directionalLightDirection" : { type: "fv", value: [] },
		"directionalLightColor" : { type: "fv", value: [] },

		"hemisphereLightDirection" : { type: "fv", value: [] },
		"hemisphereLightSkyColor" : { type: "fv", value: [] },
		"hemisphereLightGroundColor" : { type: "fv", value: [] },

		"pointLightColor" : { type: "fv", value: [] },
		"pointLightPosition" : { type: "fv", value: [] },
		"pointLightDistance" : { type: "fv1", value: [] },

		"spotLightColor" : { type: "fv", value: [] },
		"spotLightPosition" : { type: "fv", value: [] },
		"spotLightDirection" : { type: "fv", value: [] },
		"spotLightDistance" : { type: "fv1", value: [] },
		"spotLightAngleCos" : { type: "fv1", value: [] },
		"spotLightExponent" : { type: "fv1", value: [] }

	},

	particle: {

		"psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },
		"size" : { type: "f", value: 1.0 },
		"scale" : { type: "f", value: 1.0 },
		"map" : { type: "t", value: null },

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	shadowmap: {

		"shadowMap": { type: "tv", value: [] },
		"shadowMapSize": { type: "v2v", value: [] },

		"shadowBias" : { type: "fv1", value: [] },
		"shadowDarkness": { type: "fv1", value: [] },

		"shadowMatrix" : { type: "m4v", value: [] }

	}

};
/**
 * Webgl Shader Library for three.js
 *
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */


THREE.ShaderLib = {

	'basic': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],

				"#ifdef USE_ENVMAP",

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#endif",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],
				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'lambert': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define LAMBERT",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

				"varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_lambert_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

				"varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

				"#ifdef DOUBLE_SIDED",

					//"float isFront = float( gl_FrontFacing );",
					//"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;",

					"if ( gl_FrontFacing )",
						"gl_FragColor.xyz *= vLightFront;",
					"else",
						"gl_FragColor.xyz *= vLightBack;",

				"#else",

					"gl_FragColor.xyz *= vLightFront;",

				"#endif",

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'phong': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "bump" ],
			THREE.UniformsLib[ "normalmap" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
				"shininess": { type: "f", value: 30 },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define PHONG",

			"varying vec3 vViewPosition;",
			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"vNormal = normalize( transformedNormal );",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				"vViewPosition = -mvPosition.xyz;",

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_phong_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform vec3 ambient;",
			"uniform vec3 emissive;",
			"uniform vec3 specular;",
			"uniform float shininess;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
			THREE.ShaderChunk[ "normalmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

				THREE.ShaderChunk[ "lights_phong_fragment" ],

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'particle_basic': {

		uniforms:  THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "particle" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			"uniform float size;",
			"uniform float scale;",

			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",

				"#ifdef USE_SIZEATTENUATION",
					"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
				"#else",
					"gl_PointSize = size;",
				"#endif",

				"gl_Position = projectionMatrix * mvPosition;",

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 psColor;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_particle_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( psColor, opacity );",

				THREE.ShaderChunk[ "map_particle_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'dashed': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],

			{
				"scale":     { type: "f", value: 1 },
				"dashSize":  { type: "f", value: 1 },
				"totalSize": { type: "f", value: 2 }
			}

		] ),

		vertexShader: [

			"uniform float scale;",
			"attribute float lineDistance;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

				"vLineDistance = scale * lineDistance;",

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"gl_Position = projectionMatrix * mvPosition;",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform float dashSize;",
			"uniform float totalSize;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],

			"void main() {",

				"if ( mod( vLineDistance, totalSize ) > dashSize ) {",

					"discard;",

				"}",

				"gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'depth': {

		uniforms: {

			"mNear": { type: "f", value: 1.0 },
			"mFar" : { type: "f", value: 2000.0 },
			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			"void main() {",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float mNear;",
			"uniform float mFar;",
			"uniform float opacity;",

			"void main() {",

				"float depth = gl_FragCoord.z / gl_FragCoord.w;",
				"float color = 1.0 - smoothstep( mNear, mFar, depth );",
				"gl_FragColor = vec4( vec3( color ), opacity );",

			"}"

		].join("\n")

	},

	'normal': {

		uniforms: {

			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],

			"void main() {",

				"vNormal = normalize( normalMatrix * normal );",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",
			"varying vec3 vNormal;",

			"void main() {",

				"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

			"}"

		].join("\n")

	},

	/* -------------------------------------------------------------------------
	//	Normal map shader
	//		- Blinn-Phong
	//		- normal + diffuse + specular + AO + displacement + reflection + shadow maps
	//		- point and directional lights (use with "lights: true" material option)
	 ------------------------------------------------------------------------- */

	'normalmap' : {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{

			"enableAO"		  : { type: "i", value: 0 },
			"enableDiffuse"	  : { type: "i", value: 0 },
			"enableSpecular"  : { type: "i", value: 0 },
			"enableReflection": { type: "i", value: 0 },
			"enableDisplacement": { type: "i", value: 0 },

			"tDisplacement": { type: "t", value: null }, // must go first as this is vertex texture
			"tDiffuse"	   : { type: "t", value: null },
			"tCube"		   : { type: "t", value: null },
			"tNormal"	   : { type: "t", value: null },
			"tSpecular"	   : { type: "t", value: null },
			"tAO"		   : { type: "t", value: null },

			"uNormalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) },

			"uDisplacementBias": { type: "f", value: 0.0 },
			"uDisplacementScale": { type: "f", value: 1.0 },

			"diffuse": { type: "c", value: new THREE.Color( 0xffffff ) },
			"specular": { type: "c", value: new THREE.Color( 0x111111 ) },
			"ambient": { type: "c", value: new THREE.Color( 0xffffff ) },
			"shininess": { type: "f", value: 30 },
			"opacity": { type: "f", value: 1 },

			"useRefract": { type: "i", value: 0 },
			"refractionRatio": { type: "f", value: 0.98 },
			"reflectivity": { type: "f", value: 0.5 },

			"uOffset" : { type: "v2", value: new THREE.Vector2( 0, 0 ) },
			"uRepeat" : { type: "v2", value: new THREE.Vector2( 1, 1 ) },

			"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }

			}

		] ),

		fragmentShader: [

			"uniform vec3 ambient;",
			"uniform vec3 diffuse;",
			"uniform vec3 specular;",
			"uniform float shininess;",
			"uniform float opacity;",

			"uniform bool enableDiffuse;",
			"uniform bool enableSpecular;",
			"uniform bool enableAO;",
			"uniform bool enableReflection;",

			"uniform sampler2D tDiffuse;",
			"uniform sampler2D tNormal;",
			"uniform sampler2D tSpecular;",
			"uniform sampler2D tAO;",

			"uniform samplerCube tCube;",

			"uniform vec2 uNormalScale;",

			"uniform bool useRefract;",
			"uniform float refractionRatio;",
			"uniform float reflectivity;",

			"varying vec3 vTangent;",
			"varying vec3 vBinormal;",
			"varying vec3 vNormal;",
			"varying vec2 vUv;",

			"uniform vec3 ambientLightColor;",

			"#if MAX_DIR_LIGHTS > 0",

				"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
				"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

			"#endif",

			"#if MAX_HEMI_LIGHTS > 0",

				"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
				"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
				"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

			"#endif",

			"#if MAX_POINT_LIGHTS > 0",

				"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
				"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
				"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"#endif",

			"#if MAX_SPOT_LIGHTS > 0",

				"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
				"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
				"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
				"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
				"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",
				"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"#endif",

			"#ifdef WRAP_AROUND",

				"uniform vec3 wrapRGB;",

			"#endif",

			"varying vec3 vWorldPosition;",
			"varying vec3 vViewPosition;",

			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( vec3( 1.0 ), opacity );",

				"vec3 specularTex = vec3( 1.0 );",

				"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;",
				"normalTex.xy *= uNormalScale;",
				"normalTex = normalize( normalTex );",

				"if( enableDiffuse ) {",

					"#ifdef GAMMA_INPUT",

						"vec4 texelColor = texture2D( tDiffuse, vUv );",
						"texelColor.xyz *= texelColor.xyz;",

						"gl_FragColor = gl_FragColor * texelColor;",

					"#else",

						"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );",

					"#endif",

				"}",

				"if( enableAO ) {",

					"#ifdef GAMMA_INPUT",

						"vec4 aoColor = texture2D( tAO, vUv );",
						"aoColor.xyz *= aoColor.xyz;",

						"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;",

					"#else",

						"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;",

					"#endif",

				"}",

				"if( enableSpecular )",
					"specularTex = texture2D( tSpecular, vUv ).xyz;",

				"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );",
				"vec3 finalNormal = tsb * normalTex;",

				"#ifdef FLIP_SIDED",

					"finalNormal = -finalNormal;",

				"#endif",

				"vec3 normal = normalize( finalNormal );",
				"vec3 viewPosition = normalize( vViewPosition );",

				// point lights

				"#if MAX_POINT_LIGHTS > 0",

					"vec3 pointDiffuse = vec3( 0.0 );",
					"vec3 pointSpecular = vec3( 0.0 );",

					"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

						"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
						"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;",

						"float pointDistance = 1.0;",
						"if ( pointLightDistance[ i ] > 0.0 )",
							"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );",

						"pointVector = normalize( pointVector );",

						// diffuse

						"#ifdef WRAP_AROUND",

							"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );",
							"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );",

							"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

						"#else",

							"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );",

						"#endif",

						"pointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;",

						// specular

						"vec3 pointHalfVector = normalize( pointVector + viewPosition );",
						"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
						"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

						// 2.0 => 2.0001 is hack to work around ANGLE bug

						"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

						"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );",
						"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;",

					"}",

				"#endif",

				// spot lights

				"#if MAX_SPOT_LIGHTS > 0",

					"vec3 spotDiffuse = vec3( 0.0 );",
					"vec3 spotSpecular = vec3( 0.0 );",

					"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

						"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
						"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;",

						"float spotDistance = 1.0;",
						"if ( spotLightDistance[ i ] > 0.0 )",
							"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );",

						"spotVector = normalize( spotVector );",

						"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

						"if ( spotEffect > spotLightAngleCos[ i ] ) {",

							"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

							// diffuse

							"#ifdef WRAP_AROUND",

								"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );",
								"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );",

								"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

							"#else",

								"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );",

							"#endif",

							"spotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;",

							// specular

							"vec3 spotHalfVector = normalize( spotVector + viewPosition );",
							"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
							"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

							// 2.0 => 2.0001 is hack to work around ANGLE bug

							"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

							"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );",
							"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;",

						"}",

					"}",

				"#endif",

				// directional lights

				"#if MAX_DIR_LIGHTS > 0",

					"vec3 dirDiffuse = vec3( 0.0 );",
					"vec3 dirSpecular = vec3( 0.0 );",

					"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {",

						"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
						"vec3 dirVector = normalize( lDirection.xyz );",

						// diffuse

						"#ifdef WRAP_AROUND",

							"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );",
							"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );",

							"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );",

						"#else",

							"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );",

						"#endif",

						"dirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;",

						// specular

						"vec3 dirHalfVector = normalize( dirVector + viewPosition );",
						"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
						"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

						// 2.0 => 2.0001 is hack to work around ANGLE bug

						"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

						"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
						"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",

					"}",

				"#endif",

				// hemisphere lights

				"#if MAX_HEMI_LIGHTS > 0",

					"vec3 hemiDiffuse  = vec3( 0.0 );",
					"vec3 hemiSpecular = vec3( 0.0 );" ,

					"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

						"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
						"vec3 lVector = normalize( lDirection.xyz );",

						// diffuse

						"float dotProduct = dot( normal, lVector );",
						"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

						"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

						"hemiDiffuse += diffuse * hemiColor;",

						// specular (sky light)


						"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
						"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
						"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );",

						// specular (ground light)

						"vec3 lVectorGround = -lVector;",

						"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
						"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
						"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );",

						"float dotProductGround = dot( normal, lVectorGround );",

						// 2.0 => 2.0001 is hack to work around ANGLE bug

						"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

						"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );",
						"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );",
						"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

					"}",

				"#endif",

				// all lights contribution summation

				"vec3 totalDiffuse = vec3( 0.0 );",
				"vec3 totalSpecular = vec3( 0.0 );",

				"#if MAX_DIR_LIGHTS > 0",

					"totalDiffuse += dirDiffuse;",
					"totalSpecular += dirSpecular;",

				"#endif",

				"#if MAX_HEMI_LIGHTS > 0",

					"totalDiffuse += hemiDiffuse;",
					"totalSpecular += hemiSpecular;",

				"#endif",

				"#if MAX_POINT_LIGHTS > 0",

					"totalDiffuse += pointDiffuse;",
					"totalSpecular += pointSpecular;",

				"#endif",

				"#if MAX_SPOT_LIGHTS > 0",

					"totalDiffuse += spotDiffuse;",
					"totalSpecular += spotSpecular;",

				"#endif",

				"#ifdef METAL",

					"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );",

				"#else",

					"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

				"#endif",

				"if ( enableReflection ) {",

					"vec3 vReflect;",
					"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

					"if ( useRefract ) {",

						"vReflect = refract( cameraToVertex, normal, refractionRatio );",

					"} else {",

						"vReflect = reflect( cameraToVertex, normal );",

					"}",

					"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",

					"#ifdef GAMMA_INPUT",

						"cubeColor.xyz *= cubeColor.xyz;",

					"#endif",

					"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );",

				"}",

				THREE.ShaderChunk[ "shadowmap_fragment" ],
				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n"),

		vertexShader: [

			"attribute vec4 tangent;",

			"uniform vec2 uOffset;",
			"uniform vec2 uRepeat;",

			"uniform bool enableDisplacement;",

			"#ifdef VERTEX_TEXTURES",

				"uniform sampler2D tDisplacement;",
				"uniform float uDisplacementScale;",
				"uniform float uDisplacementBias;",

			"#endif",

			"varying vec3 vTangent;",
			"varying vec3 vBinormal;",
			"varying vec3 vNormal;",
			"varying vec2 vUv;",

			"varying vec3 vWorldPosition;",
			"varying vec3 vViewPosition;",

			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],

				// normal, tangent and binormal vectors

				"#ifdef USE_SKINNING",

					"vNormal = normalize( normalMatrix * skinnedNormal.xyz );",

					"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );",
					"vTangent = normalize( normalMatrix * skinnedTangent.xyz );",

				"#else",

					"vNormal = normalize( normalMatrix * normal );",
					"vTangent = normalize( normalMatrix * tangent.xyz );",

				"#endif",

				"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

				"vUv = uv * uRepeat + uOffset;",

				// displacement mapping

				"vec3 displacedPosition;",

				"#ifdef VERTEX_TEXTURES",

					"if ( enableDisplacement ) {",

						"vec3 dv = texture2D( tDisplacement, uv ).xyz;",
						"float df = uDisplacementScale * dv.x + uDisplacementBias;",
						"displacedPosition = position + normalize( normal ) * df;",

					"} else {",

						"#ifdef USE_SKINNING",

							"vec4 skinVertex = vec4( position, 1.0 );",

							"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
							"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

							"displacedPosition  = skinned.xyz;",

						"#else",

							"displacedPosition = position;",

						"#endif",

					"}",

				"#else",

					"#ifdef USE_SKINNING",

						"vec4 skinVertex = vec4( position, 1.0 );",

						"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
						"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

						"displacedPosition  = skinned.xyz;",

					"#else",

						"displacedPosition = position;",

					"#endif",

				"#endif",

				//

				"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );",
				"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );",

				"gl_Position = projectionMatrix * mvPosition;",

				//

				"vWorldPosition = worldPosition.xyz;",
				"vViewPosition = -mvPosition.xyz;",

				// shadows

				"#ifdef USE_SHADOWMAP",

					"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

						"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

					"}",

				"#endif",

			"}"

		].join("\n")

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	'cube': {

		uniforms: { "tCube": { type: "t", value: null },
					"tFlip": { type: "f", value: -1 } },

		vertexShader: [

			"varying vec3 vWorldPosition;",

			"void main() {",

				"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
				"vWorldPosition = worldPosition.xyz;",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform samplerCube tCube;",
			"uniform float tFlip;",

			"varying vec3 vWorldPosition;",

			"void main() {",

				"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

			"}"

		].join("\n")

	},

	// Depth encoding into RGBA texture
	// 	based on SpiderGL shadow map example
	// 		http://spidergl.org/example.php?id=6
	// 	originally from
	//		http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
	// 	see also here:
	//		http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/

	'depthRGBA': {

		uniforms: {},

		vertexShader: [

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"vec4 pack_depth( const in float depth ) {",

				"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"vec4 res = fract( depth * bit_shift );",
				"res -= res.xxyz * bit_mask;",
				"return res;",

			"}",

			"void main() {",

				"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

				//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
				//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
				//"gl_FragData[ 0 ] = pack_depth( z );",
				//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

			"}"

		].join("\n")

	}

};

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.WebGLRenderer = function ( parameters ) {

	console.log( 'THREE.WebGLRenderer', THREE.REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),

	_precision = parameters.precision !== undefined ? parameters.precision : 'highp',

	_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
	_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
	_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
	_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
	_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,

	_clearColor = new THREE.Color( 0x000000 ),
	_clearAlpha = 0;

	// public properties

	this.domElement = _canvas;
	this.context = null;
	this.devicePixelRatio = parameters.devicePixelRatio !== undefined
				? parameters.devicePixelRatio
				: self.devicePixelRatio !== undefined
					? self.devicePixelRatio
					: 1;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;
	this.autoUpdateObjects = true;

	// physically based shading

	this.gammaInput = false;
	this.gammaOutput = false;

	// shadow map

	this.shadowMapEnabled = false;
	this.shadowMapAutoUpdate = true;
	this.shadowMapType = THREE.PCFShadowMap;
	this.shadowMapCullFace = THREE.CullFaceFront;
	this.shadowMapDebug = false;
	this.shadowMapCascade = false;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// flags

	this.autoScaleCubemaps = true;

	// custom render plugins

	this.renderPluginsPre = [];
	this.renderPluginsPost = [];

	// info

	this.info = {

		memory: {

			programs: 0,
			geometries: 0,
			textures: 0

		},

		render: {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		}

	};

	// internal properties

	var _this = this,

	_programs = [],
	_programs_counter = 0,

	// internal state cache

	_currentProgram = null,
	_currentFramebuffer = null,
	_currentMaterialId = -1,
	_currentGeometryGroupHash = null,
	_currentCamera = null,
	_geometryGroupCounter = 0,

	_usedTextureUnits = 0,

	// GL state cache

	_oldDoubleSided = -1,
	_oldFlipSided = -1,

	_oldBlending = -1,

	_oldBlendEquation = -1,
	_oldBlendSrc = -1,
	_oldBlendDst = -1,

	_oldDepthTest = -1,
	_oldDepthWrite = -1,

	_oldPolygonOffset = null,
	_oldPolygonOffsetFactor = null,
	_oldPolygonOffsetUnits = null,

	_oldLineWidth = null,

	_viewportX = 0,
	_viewportY = 0,
	_viewportWidth = _canvas.width,
	_viewportHeight = _canvas.height,
	_currentWidth = 0,
	_currentHeight = 0,

	_enabledAttributes = {},

	// frustum

	_frustum = new THREE.Frustum(),

	 // camera matrices cache

	_projScreenMatrix = new THREE.Matrix4(),
	_projScreenMatrixPS = new THREE.Matrix4(),

	_vector3 = new THREE.Vector3(),

	// light arrays cache

	_direction = new THREE.Vector3(),

	_lightsNeedUpdate = true,

	_lights = {

		ambient: [ 0, 0, 0 ],
		directional: { length: 0, colors: new Array(), positions: new Array() },
		point: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },
		spot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },
		hemi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }

	};

	// initialize

	var _gl;

	var _glExtensionTextureFloat;
	var _glExtensionTextureFloatLinear;
	var _glExtensionStandardDerivatives;
	var _glExtensionTextureFilterAnisotropic;
	var _glExtensionCompressedTextureS3TC;

	initGL();

	setDefaultGLState();

	this.context = _gl;

	// GPU capabilities

	var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );
	var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );
	var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;

	var _supportsVertexTextures = ( _maxVertexTextures > 0 );
	var _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;

	var _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];

	//

	var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );
	var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );
	var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );

	var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );
	var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );
	var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );

	var _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );
	var _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );
	var _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );

	var _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );
	var _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );
	var _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );

	// clamp precision to maximum available

	var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
	var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;

	if ( _precision === "highp" && ! highpAvailable ) {

		if ( mediumpAvailable ) {

			_precision = "mediump";
			console.warn( "WebGLRenderer: highp not supported, using mediump" );

		} else {

			_precision = "lowp";
			console.warn( "WebGLRenderer: highp and mediump not supported, using lowp" );

		}

	}

	if ( _precision === "mediump" && ! mediumpAvailable ) {

		_precision = "lowp";
		console.warn( "WebGLRenderer: mediump not supported, using lowp" );

	}

	// API

	this.getContext = function () {

		return _gl;

	};

	this.supportsVertexTextures = function () {

		return _supportsVertexTextures;

	};

	this.supportsFloatTextures = function () {

		return _glExtensionTextureFloat;

	};

	this.supportsStandardDerivatives = function () {

		return _glExtensionStandardDerivatives;

	};

	this.supportsCompressedTextureS3TC = function () {

		return _glExtensionCompressedTextureS3TC;

	};

	this.getMaxAnisotropy  = function () {

		return _maxAnisotropy;

	};

	this.getPrecision = function () {

		return _precision;

	};

	this.setSize = function ( width, height, updateStyle ) {

		_canvas.width = width * this.devicePixelRatio;
		_canvas.height = height * this.devicePixelRatio;

		if ( this.devicePixelRatio !== 1 && updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, _canvas.width, _canvas.height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewportX = x !== undefined ? x : 0;
		_viewportY = y !== undefined ? y : 0;

		_viewportWidth = width !== undefined ? width : _canvas.width;
		_viewportHeight = height !== undefined ? height : _canvas.height;

		_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

	};

	this.setScissor = function ( x, y, width, height ) {

		_gl.scissor( x, y, width, height );

	};

	this.enableScissorTest = function ( enable ) {

		enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );

	};

	// Clearing

	this.setClearColor = function ( color, alpha ) {

		_clearColor.set( color );
		_clearAlpha = alpha !== undefined ? alpha : 1;

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	this.setClearColorHex = function ( hex, alpha ) {

		console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
		this.setClearColor( hex, alpha );

	};

	this.getClearColor = function () {

		return _clearColor;

	};

	this.getClearAlpha = function () {

		return _clearAlpha;

	};

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		_gl.clear( _gl.COLOR_BUFFER_BIT );

	};

	this.clearDepth = function () {

		_gl.clear( _gl.DEPTH_BUFFER_BIT );

	};

	this.clearStencil = function () {

		_gl.clear( _gl.STENCIL_BUFFER_BIT );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	// Plugins

	this.addPostPlugin = function ( plugin ) {

		plugin.init( this );
		this.renderPluginsPost.push( plugin );

	};

	this.addPrePlugin = function ( plugin ) {

		plugin.init( this );
		this.renderPluginsPre.push( plugin );

	};

	// Rendering

	this.updateShadowMap = function ( scene, camera ) {

		_currentProgram = null;
		_oldBlending = -1;
		_oldDepthTest = -1;
		_oldDepthWrite = -1;
		_currentGeometryGroupHash = -1;
		_currentMaterialId = -1;
		_lightsNeedUpdate = true;
		_oldDoubleSided = -1;
		_oldFlipSided = -1;

		this.shadowMapPlugin.update( scene, camera );

	};

	// Internal functions

	// Buffer allocation

	function createParticleBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createLineBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();
		geometry.__webglLineDistanceBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createMeshBuffers ( geometryGroup ) {

		geometryGroup.__webglVertexBuffer = _gl.createBuffer();
		geometryGroup.__webglNormalBuffer = _gl.createBuffer();
		geometryGroup.__webglTangentBuffer = _gl.createBuffer();
		geometryGroup.__webglColorBuffer = _gl.createBuffer();
		geometryGroup.__webglUVBuffer = _gl.createBuffer();
		geometryGroup.__webglUV2Buffer = _gl.createBuffer();

		geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
		geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();

		geometryGroup.__webglFaceBuffer = _gl.createBuffer();
		geometryGroup.__webglLineBuffer = _gl.createBuffer();

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__webglMorphTargetsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__webglMorphNormalsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );

			}

		}

		_this.info.memory.geometries ++;

	};

	// Events

	var onGeometryDispose = function ( event ) {

		var geometry = event.target;

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		deallocateGeometry( geometry );

	};

	var onTextureDispose = function ( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		_this.info.memory.textures --;


	};

	var onRenderTargetDispose = function ( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		_this.info.memory.textures --;

	};

	var onMaterialDispose = function ( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	};

	// Buffer deallocation

	var deleteBuffers = function ( geometry ) {

		if ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );
		if ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );
		if ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );
		if ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );
		if ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );
		if ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );

		if ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );
		if ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );

		if ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );
		if ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );

		if ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );
		// custom attributes

		if ( geometry.__webglCustomAttributesList !== undefined ) {

			for ( var id in geometry.__webglCustomAttributesList ) {

				_gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );

			}

		}

		_this.info.memory.geometries --;

	};

	var deallocateGeometry = function ( geometry ) {

		geometry.__webglInit = undefined;

		if ( geometry instanceof THREE.BufferGeometry ) {

			var attributes = geometry.attributes;

			for ( var key in attributes ) {

				if ( attributes[ key ].buffer !== undefined ) {

					_gl.deleteBuffer( attributes[ key ].buffer );
		
				}

			}

			_this.info.memory.geometries --;

		} else {

			if ( geometry.geometryGroups !== undefined ) {

				for ( var g in geometry.geometryGroups ) {

					var geometryGroup = geometry.geometryGroups[ g ];

					if ( geometryGroup.numMorphTargets !== undefined ) {

						for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

							_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );

						}

					}

					if ( geometryGroup.numMorphNormals !== undefined ) {

						for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

							_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );

						}

					}

					deleteBuffers( geometryGroup );

				}

			} else {

				deleteBuffers( geometry );

			}

		}

	};

	var deallocateTexture = function ( texture ) {

		if ( texture.image && texture.image.__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( texture.image.__webglTextureCube );

		} else {

			// 2D texture

			if ( ! texture.__webglInit ) return;

			texture.__webglInit = false;
			_gl.deleteTexture( texture.__webglTexture );

		}

	};

	var deallocateRenderTarget = function ( renderTarget ) {

		if ( !renderTarget || ! renderTarget.__webglTexture ) return;

		_gl.deleteTexture( renderTarget.__webglTexture );

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );
				_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );
			_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );

		}

	};

	var deallocateMaterial = function ( material ) {

		var program = material.program;

		if ( program === undefined ) return;

		material.program = undefined;

		// only deallocate GL program if this was the last use of shared program
		// assumed there is only single copy of any program in the _programs list
		// (that's how it's constructed)

		var i, il, programInfo;
		var deleteProgram = false;

		for ( i = 0, il = _programs.length; i < il; i ++ ) {

			programInfo = _programs[ i ];

			if ( programInfo.program === program ) {

				programInfo.usedTimes --;

				if ( programInfo.usedTimes === 0 ) {

					deleteProgram = true;

				}

				break;

			}

		}

		if ( deleteProgram === true ) {

			// avoid using array.splice, this is costlier than creating new array from scratch

			var newPrograms = [];

			for ( i = 0, il = _programs.length; i < il; i ++ ) {

				programInfo = _programs[ i ];

				if ( programInfo.program !== program ) {

					newPrograms.push( programInfo );

				}

			}

			_programs = newPrograms;

			_gl.deleteProgram( program );

			_this.info.memory.programs --;

		}

	};

	// Buffer initialization

	function initCustomAttributes ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		var material = object.material;

		if ( material.attributes ) {

			if ( geometry.__webglCustomAttributesList === undefined ) {

				geometry.__webglCustomAttributesList = [];

			}

			for ( var a in material.attributes ) {

				var attribute = material.attributes[ a ];

				if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;		// "f" and "i"

					if ( attribute.type === "v2" ) size = 2;
					else if ( attribute.type === "v3" ) size = 3;
					else if ( attribute.type === "v4" ) size = 4;
					else if ( attribute.type === "c"  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = a;

					attribute.needsUpdate = true;

				}

				geometry.__webglCustomAttributesList.push( attribute );

			}

		}

	};

	function initParticleBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );

		geometry.__sortArray = [];

		geometry.__webglParticleCount = nvertices;

		initCustomAttributes ( geometry, object );

	};

	function initLineBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );
		geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );

		geometry.__webglLineCount = nvertices;

		initCustomAttributes ( geometry, object );

	};

	function initMeshBuffers ( geometryGroup, object ) {

		var geometry = object.geometry,
			faces3 = geometryGroup.faces3,

			nvertices = faces3.length * 3,
			ntris     = faces3.length * 1,
			nlines    = faces3.length * 3,

			material = getBufferMaterial( object, geometryGroup ),

			uvType = bufferGuessUVType( material ),
			normalType = bufferGuessNormalType( material ),
			vertexColorType = bufferGuessVertexColorType( material );

		// console.log( "uvType", uvType, "normalType", normalType, "vertexColorType", vertexColorType, object, geometryGroup, material );

		geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );

		if ( normalType ) {

			geometryGroup.__normalArray = new Float32Array( nvertices * 3 );

		}

		if ( geometry.hasTangents ) {

			geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );

		}

		if ( vertexColorType ) {

			geometryGroup.__colorArray = new Float32Array( nvertices * 3 );

		}

		if ( uvType ) {

			if ( geometry.faceVertexUvs.length > 0 ) {

				geometryGroup.__uvArray = new Float32Array( nvertices * 2 );

			}

			if ( geometry.faceVertexUvs.length > 1 ) {

				geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );

			}

		}

		if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {

			geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );
			geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );

		}

		geometryGroup.__faceArray = new Uint16Array( ntris * 3 );
		geometryGroup.__lineArray = new Uint16Array( nlines * 2 );

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__morphTargetsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__morphNormalsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		geometryGroup.__webglFaceCount = ntris * 3;
		geometryGroup.__webglLineCount = nlines * 2;


		// custom attributes

		if ( material.attributes ) {

			if ( geometryGroup.__webglCustomAttributesList === undefined ) {

				geometryGroup.__webglCustomAttributesList = [];

			}

			for ( var a in material.attributes ) {

				// Do a shallow copy of the attribute object so different geometryGroup chunks use different
				// attribute buffers which are correctly indexed in the setMeshBuffers function

				var originalAttribute = material.attributes[ a ];

				var attribute = {};

				for ( var property in originalAttribute ) {

					attribute[ property ] = originalAttribute[ property ];

				}

				if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;		// "f" and "i"

					if( attribute.type === "v2" ) size = 2;
					else if( attribute.type === "v3" ) size = 3;
					else if( attribute.type === "v4" ) size = 4;
					else if( attribute.type === "c"  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = a;

					originalAttribute.needsUpdate = true;
					attribute.__original = originalAttribute;

				}

				geometryGroup.__webglCustomAttributesList.push( attribute );

			}

		}

		geometryGroup.__inittedArrays = true;

	};

	function getBufferMaterial( object, geometryGroup ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ geometryGroup.materialIndex ]
			: object.material;

	};

	function materialNeedsSmoothNormals ( material ) {

		return material && material.shading !== undefined && material.shading === THREE.SmoothShading;

	};

	function bufferGuessNormalType ( material ) {

		// only MeshBasicMaterial and MeshDepthMaterial don't need normals

		if ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {

			return false;

		}

		if ( materialNeedsSmoothNormals( material ) ) {

			return THREE.SmoothShading;

		} else {

			return THREE.FlatShading;

		}

	};

	function bufferGuessVertexColorType( material ) {

		if ( material.vertexColors ) {

			return material.vertexColors;

		}

		return false;

	};

	function bufferGuessUVType( material ) {

		// material must use some texture to require uvs

		if ( material.map ||
		     material.lightMap ||
		     material.bumpMap ||
		     material.normalMap ||
		     material.specularMap ||
		     material instanceof THREE.ShaderMaterial ) {

			return true;

		}

		return false;

	};

	//

	function initDirectBuffers( geometry ) {

		var a, attribute, type;

		for ( a in geometry.attributes ) {

			if ( a === "index" ) {

				type = _gl.ELEMENT_ARRAY_BUFFER;

			} else {

				type = _gl.ARRAY_BUFFER;

			}

			attribute = geometry.attributes[ a ];

			if ( attribute.numItems === undefined ) {

				attribute.numItems = attribute.array.length;

			}

			attribute.buffer = _gl.createBuffer();

			_gl.bindBuffer( type, attribute.buffer );
			_gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );

		}

	};

	// Buffer setting

	function setParticleBuffers ( geometry, hint, object ) {

		var v, c, vertex, offset, index, color,

		vertices = geometry.vertices,
		vl = vertices.length,

		colors = geometry.colors,
		cl = colors.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,

		sortArray = geometry.__sortArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,
		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( object.sortParticles ) {

			_projScreenMatrixPS.copy( _projScreenMatrix );
			_projScreenMatrixPS.multiply( object.matrixWorld );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				_vector3.copy( vertex );
				_vector3.applyProjection( _projScreenMatrixPS );

				sortArray[ v ] = [ _vector3.z, v ];

			}

			sortArray.sort( numericalSort );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ sortArray[v][1] ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			for ( c = 0; c < cl; c ++ ) {

				offset = c * 3;

				color = colors[ sortArray[c][1] ];

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) ) continue;

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							customAttribute.array[ ca ] = customAttribute.value[ index ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ] 	= value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === "c" ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ]     = value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ]      = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

				}

			}

		} else {

			if ( dirtyVertices ) {

				for ( v = 0; v < vl; v ++ ) {

					vertex = vertices[ v ];

					offset = v * 3;

					vertexArray[ offset ]     = vertex.x;
					vertexArray[ offset + 1 ] = vertex.y;
					vertexArray[ offset + 2 ] = vertex.z;

				}

			}

			if ( dirtyColors ) {

				for ( c = 0; c < cl; c ++ ) {

					color = colors[ c ];

					offset = c * 3;

					colorArray[ offset ]     = color.r;
					colorArray[ offset + 1 ] = color.g;
					colorArray[ offset + 2 ] = color.b;

				}

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( customAttribute.needsUpdate &&
						 ( customAttribute.boundTo === undefined ||
						   customAttribute.boundTo === "vertices") ) {

						cal = customAttribute.value.length;

						offset = 0;

						if ( customAttribute.size === 1 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								customAttribute.array[ ca ] = customAttribute.value[ ca ];

							}

						} else if ( customAttribute.size === 2 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;

								offset += 2;

							}

						} else if ( customAttribute.size === 3 ) {

							if ( customAttribute.type === "c" ) {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ] 	= value.r;
									customAttribute.array[ offset + 1 ] = value.g;
									customAttribute.array[ offset + 2 ] = value.b;

									offset += 3;

								}

							} else {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ] 	= value.x;
									customAttribute.array[ offset + 1 ] = value.y;
									customAttribute.array[ offset + 2 ] = value.z;

									offset += 3;

								}

							}

						} else if ( customAttribute.size === 4 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]      = value.x;
								customAttribute.array[ offset + 1  ] = value.y;
								customAttribute.array[ offset + 2  ] = value.z;
								customAttribute.array[ offset + 3  ] = value.w;

								offset += 4;

							}

						}

					}

				}

			}

		}

		if ( dirtyVertices || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate || object.sortParticles ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}


	};

	function setLineBuffers ( geometry, hint ) {

		var v, c, d, vertex, offset, color,

		vertices = geometry.vertices,
		colors = geometry.colors,
		lineDistances = geometry.lineDistances,

		vl = vertices.length,
		cl = colors.length,
		dl = lineDistances.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,
		lineDistanceArray = geometry.__lineDistanceArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyLineDistances = geometry.lineDistancesNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,

		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( dirtyVertices ) {

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors ) {

			for ( c = 0; c < cl; c ++ ) {

				color = colors[ c ];

				offset = c * 3;

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( dirtyLineDistances ) {

			for ( d = 0; d < dl; d ++ ) {

				lineDistanceArray[ d ] = lineDistances[ d ];

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate &&
					 ( customAttribute.boundTo === undefined ||
					   customAttribute.boundTo === "vertices" ) ) {

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							customAttribute.array[ ca ] = customAttribute.value[ ca ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	= value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === "c" ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	 = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}

	};

	function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {

		if ( ! geometryGroup.__inittedArrays ) {

			return;

		}

		var normalType = bufferGuessNormalType( material ),
		vertexColorType = bufferGuessVertexColorType( material ),
		uvType = bufferGuessUVType( material ),

		needsSmoothNormals = ( normalType === THREE.SmoothShading );

		var f, fl, fi, face,
		vertexNormals, faceNormal, normal,
		vertexColors, faceColor,
		vertexTangents,
		uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,
		c1, c2, c3, c4,
		sw1, sw2, sw3, sw4,
		si1, si2, si3, si4,
		sa1, sa2, sa3, sa4,
		sb1, sb2, sb3, sb4,
		m, ml, i, il,
		vn, uvi, uv2i,
		vk, vkl, vka,
		nka, chf, faceVertexNormals,
		a,

		vertexIndex = 0,

		offset = 0,
		offset_uv = 0,
		offset_uv2 = 0,
		offset_face = 0,
		offset_normal = 0,
		offset_tangent = 0,
		offset_line = 0,
		offset_color = 0,
		offset_skin = 0,
		offset_morphTarget = 0,
		offset_custom = 0,
		offset_customSrc = 0,

		value,

		vertexArray = geometryGroup.__vertexArray,
		uvArray = geometryGroup.__uvArray,
		uv2Array = geometryGroup.__uv2Array,
		normalArray = geometryGroup.__normalArray,
		tangentArray = geometryGroup.__tangentArray,
		colorArray = geometryGroup.__colorArray,

		skinIndexArray = geometryGroup.__skinIndexArray,
		skinWeightArray = geometryGroup.__skinWeightArray,

		morphTargetsArrays = geometryGroup.__morphTargetsArrays,
		morphNormalsArrays = geometryGroup.__morphNormalsArrays,

		customAttributes = geometryGroup.__webglCustomAttributesList,
		customAttribute,

		faceArray = geometryGroup.__faceArray,
		lineArray = geometryGroup.__lineArray,

		geometry = object.geometry, // this is shared for all chunks

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyUvs = geometry.uvsNeedUpdate,
		dirtyNormals = geometry.normalsNeedUpdate,
		dirtyTangents = geometry.tangentsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyMorphTargets = geometry.morphTargetsNeedUpdate,

		vertices = geometry.vertices,
		chunk_faces3 = geometryGroup.faces3,
		obj_faces = geometry.faces,

		obj_uvs  = geometry.faceVertexUvs[ 0 ],
		obj_uvs2 = geometry.faceVertexUvs[ 1 ],

		obj_colors = geometry.colors,

		obj_skinIndices = geometry.skinIndices,
		obj_skinWeights = geometry.skinWeights,

		morphTargets = geometry.morphTargets,
		morphNormals = geometry.morphNormals;

		if ( dirtyVertices ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				v1 = vertices[ face.a ];
				v2 = vertices[ face.b ];
				v3 = vertices[ face.c ];

				vertexArray[ offset ]     = v1.x;
				vertexArray[ offset + 1 ] = v1.y;
				vertexArray[ offset + 2 ] = v1.z;

				vertexArray[ offset + 3 ] = v2.x;
				vertexArray[ offset + 4 ] = v2.y;
				vertexArray[ offset + 5 ] = v2.z;

				vertexArray[ offset + 6 ] = v3.x;
				vertexArray[ offset + 7 ] = v3.y;
				vertexArray[ offset + 8 ] = v3.z;

				offset += 9;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyMorphTargets ) {

			for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {

				offset_morphTarget = 0;

				for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

					chf = chunk_faces3[ f ];
					face = obj_faces[ chf ];

					// morph positions

					v1 = morphTargets[ vk ].vertices[ face.a ];
					v2 = morphTargets[ vk ].vertices[ face.b ];
					v3 = morphTargets[ vk ].vertices[ face.c ];

					vka = morphTargetsArrays[ vk ];

					vka[ offset_morphTarget ] 	  = v1.x;
					vka[ offset_morphTarget + 1 ] = v1.y;
					vka[ offset_morphTarget + 2 ] = v1.z;

					vka[ offset_morphTarget + 3 ] = v2.x;
					vka[ offset_morphTarget + 4 ] = v2.y;
					vka[ offset_morphTarget + 5 ] = v2.z;

					vka[ offset_morphTarget + 6 ] = v3.x;
					vka[ offset_morphTarget + 7 ] = v3.y;
					vka[ offset_morphTarget + 8 ] = v3.z;

					// morph normals

					if ( material.morphNormals ) {

						if ( needsSmoothNormals ) {

							faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];

							n1 = faceVertexNormals.a;
							n2 = faceVertexNormals.b;
							n3 = faceVertexNormals.c;

						} else {

							n1 = morphNormals[ vk ].faceNormals[ chf ];
							n2 = n1;
							n3 = n1;

						}

						nka = morphNormalsArrays[ vk ];

						nka[ offset_morphTarget ] 	  = n1.x;
						nka[ offset_morphTarget + 1 ] = n1.y;
						nka[ offset_morphTarget + 2 ] = n1.z;

						nka[ offset_morphTarget + 3 ] = n2.x;
						nka[ offset_morphTarget + 4 ] = n2.y;
						nka[ offset_morphTarget + 5 ] = n2.z;

						nka[ offset_morphTarget + 6 ] = n3.x;
						nka[ offset_morphTarget + 7 ] = n3.y;
						nka[ offset_morphTarget + 8 ] = n3.z;

					}

					//

					offset_morphTarget += 9;

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );
				_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );

				if ( material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );
					_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );

				}

			}

		}

		if ( obj_skinWeights.length ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				// weights

				sw1 = obj_skinWeights[ face.a ];
				sw2 = obj_skinWeights[ face.b ];
				sw3 = obj_skinWeights[ face.c ];

				skinWeightArray[ offset_skin ]     = sw1.x;
				skinWeightArray[ offset_skin + 1 ] = sw1.y;
				skinWeightArray[ offset_skin + 2 ] = sw1.z;
				skinWeightArray[ offset_skin + 3 ] = sw1.w;

				skinWeightArray[ offset_skin + 4 ] = sw2.x;
				skinWeightArray[ offset_skin + 5 ] = sw2.y;
				skinWeightArray[ offset_skin + 6 ] = sw2.z;
				skinWeightArray[ offset_skin + 7 ] = sw2.w;

				skinWeightArray[ offset_skin + 8 ]  = sw3.x;
				skinWeightArray[ offset_skin + 9 ]  = sw3.y;
				skinWeightArray[ offset_skin + 10 ] = sw3.z;
				skinWeightArray[ offset_skin + 11 ] = sw3.w;

				// indices

				si1 = obj_skinIndices[ face.a ];
				si2 = obj_skinIndices[ face.b ];
				si3 = obj_skinIndices[ face.c ];

				skinIndexArray[ offset_skin ]     = si1.x;
				skinIndexArray[ offset_skin + 1 ] = si1.y;
				skinIndexArray[ offset_skin + 2 ] = si1.z;
				skinIndexArray[ offset_skin + 3 ] = si1.w;

				skinIndexArray[ offset_skin + 4 ] = si2.x;
				skinIndexArray[ offset_skin + 5 ] = si2.y;
				skinIndexArray[ offset_skin + 6 ] = si2.z;
				skinIndexArray[ offset_skin + 7 ] = si2.w;

				skinIndexArray[ offset_skin + 8 ]  = si3.x;
				skinIndexArray[ offset_skin + 9 ]  = si3.y;
				skinIndexArray[ offset_skin + 10 ] = si3.z;
				skinIndexArray[ offset_skin + 11 ] = si3.w;

				offset_skin += 12;

			}

			if ( offset_skin > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );

			}

		}

		if ( dirtyColors && vertexColorType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexColors = face.vertexColors;
				faceColor = face.color;

				if ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {

					c1 = vertexColors[ 0 ];
					c2 = vertexColors[ 1 ];
					c3 = vertexColors[ 2 ];

				} else {

					c1 = faceColor;
					c2 = faceColor;
					c3 = faceColor;

				}

				colorArray[ offset_color ]     = c1.r;
				colorArray[ offset_color + 1 ] = c1.g;
				colorArray[ offset_color + 2 ] = c1.b;

				colorArray[ offset_color + 3 ] = c2.r;
				colorArray[ offset_color + 4 ] = c2.g;
				colorArray[ offset_color + 5 ] = c2.b;

				colorArray[ offset_color + 6 ] = c3.r;
				colorArray[ offset_color + 7 ] = c3.g;
				colorArray[ offset_color + 8 ] = c3.b;

				offset_color += 9;

			}

			if ( offset_color > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

			}

		}

		if ( dirtyTangents && geometry.hasTangents ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexTangents = face.vertexTangents;

				t1 = vertexTangents[ 0 ];
				t2 = vertexTangents[ 1 ];
				t3 = vertexTangents[ 2 ];

				tangentArray[ offset_tangent ]     = t1.x;
				tangentArray[ offset_tangent + 1 ] = t1.y;
				tangentArray[ offset_tangent + 2 ] = t1.z;
				tangentArray[ offset_tangent + 3 ] = t1.w;

				tangentArray[ offset_tangent + 4 ] = t2.x;
				tangentArray[ offset_tangent + 5 ] = t2.y;
				tangentArray[ offset_tangent + 6 ] = t2.z;
				tangentArray[ offset_tangent + 7 ] = t2.w;

				tangentArray[ offset_tangent + 8 ]  = t3.x;
				tangentArray[ offset_tangent + 9 ]  = t3.y;
				tangentArray[ offset_tangent + 10 ] = t3.z;
				tangentArray[ offset_tangent + 11 ] = t3.w;

				offset_tangent += 12;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );

		}

		if ( dirtyNormals && normalType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexNormals = face.vertexNormals;
				faceNormal = face.normal;

				if ( vertexNormals.length === 3 && needsSmoothNormals ) {

					for ( i = 0; i < 3; i ++ ) {

						vn = vertexNormals[ i ];

						normalArray[ offset_normal ]     = vn.x;
						normalArray[ offset_normal + 1 ] = vn.y;
						normalArray[ offset_normal + 2 ] = vn.z;

						offset_normal += 3;

					}

				} else {

					for ( i = 0; i < 3; i ++ ) {

						normalArray[ offset_normal ]     = faceNormal.x;
						normalArray[ offset_normal + 1 ] = faceNormal.y;
						normalArray[ offset_normal + 2 ] = faceNormal.z;

						offset_normal += 3;

					}

				}

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );

		}

		if ( dirtyUvs && obj_uvs && uvType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv = obj_uvs[ fi ];

				if ( uv === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uvi = uv[ i ];

					uvArray[ offset_uv ]     = uvi.x;
					uvArray[ offset_uv + 1 ] = uvi.y;

					offset_uv += 2;

				}

			}

			if ( offset_uv > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );

			}

		}

		if ( dirtyUvs && obj_uvs2 && uvType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv2 = obj_uvs2[ fi ];

				if ( uv2 === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uv2i = uv2[ i ];

					uv2Array[ offset_uv2 ]     = uv2i.x;
					uv2Array[ offset_uv2 + 1 ] = uv2i.y;

					offset_uv2 += 2;

				}

			}

			if ( offset_uv2 > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );

			}

		}

		if ( dirtyElements ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				faceArray[ offset_face ] 	 = vertexIndex;
				faceArray[ offset_face + 1 ] = vertexIndex + 1;
				faceArray[ offset_face + 2 ] = vertexIndex + 2;

				offset_face += 3;

				lineArray[ offset_line ]     = vertexIndex;
				lineArray[ offset_line + 1 ] = vertexIndex + 1;

				lineArray[ offset_line + 2 ] = vertexIndex;
				lineArray[ offset_line + 3 ] = vertexIndex + 2;

				lineArray[ offset_line + 4 ] = vertexIndex + 1;
				lineArray[ offset_line + 5 ] = vertexIndex + 2;

				offset_line += 6;

				vertexIndex += 3;

			}

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( ! customAttribute.__original.needsUpdate ) continue;

				offset_custom = 0;
				offset_customSrc = 0;

				if ( customAttribute.size === 1 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							customAttribute.array[ offset_custom ] 	   = customAttribute.value[ face.a ];
							customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
							customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];

							offset_custom += 3;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							customAttribute.array[ offset_custom ] 	   = value;
							customAttribute.array[ offset_custom + 1 ] = value;
							customAttribute.array[ offset_custom + 2 ] = value;

							offset_custom += 3;

						}

					}

				} else if ( customAttribute.size === 2 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

					}

				} else if ( customAttribute.size === 3 ) {

					var pp;

					if ( customAttribute.type === "c" ) {

						pp = [ "r", "g", "b" ];

					} else {

						pp = [ "x", "y", "z" ];

					}

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					} else if ( customAttribute.boundTo === "faceVertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					}

				} else if ( customAttribute.size === 4 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === "faceVertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					}

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

			}

		}

		if ( dispose ) {

			delete geometryGroup.__inittedArrays;
			delete geometryGroup.__colorArray;
			delete geometryGroup.__normalArray;
			delete geometryGroup.__tangentArray;
			delete geometryGroup.__uvArray;
			delete geometryGroup.__uv2Array;
			delete geometryGroup.__faceArray;
			delete geometryGroup.__vertexArray;
			delete geometryGroup.__lineArray;
			delete geometryGroup.__skinIndexArray;
			delete geometryGroup.__skinWeightArray;

		}

	};

	function setDirectBuffers ( geometry, hint, dispose ) {

		var attributes = geometry.attributes;

		var attributeName, attributeItem;

		for ( attributeName in attributes ) {

			attributeItem = attributes[ attributeName ];

			if ( attributeItem.needsUpdate ) {

				if ( attributeName === 'index' ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.buffer );
					_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.array, hint );

				} else {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, attributeItem.array, hint );

				}

				attributeItem.needsUpdate = false;

			}

			if ( dispose && ! attributeItem.dynamic ) {

				attributeItem.array = null;

			}

		}

	};

	// Buffer rendering

	this.renderBufferImmediate = function ( object, program, material ) {

		if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();
		if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();
		if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();
		if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.position );
			_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );

			if ( material.shading === THREE.FlatShading ) {

				var nx, ny, nz,
					nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,
					normalArray,
					i, il = object.count * 3;

				for( i = 0; i < il; i += 9 ) {

					normalArray = object.normalArray;

					nax  = normalArray[ i ];
					nay  = normalArray[ i + 1 ];
					naz  = normalArray[ i + 2 ];

					nbx  = normalArray[ i + 3 ];
					nby  = normalArray[ i + 4 ];
					nbz  = normalArray[ i + 5 ];

					ncx  = normalArray[ i + 6 ];
					ncy  = normalArray[ i + 7 ];
					ncz  = normalArray[ i + 8 ];

					nx = ( nax + nbx + ncx ) / 3;
					ny = ( nay + nby + ncy ) / 3;
					nz = ( naz + nbz + ncz ) / 3;

					normalArray[ i ] 	 = nx;
					normalArray[ i + 1 ] = ny;
					normalArray[ i + 2 ] = nz;

					normalArray[ i + 3 ] = nx;
					normalArray[ i + 4 ] = ny;
					normalArray[ i + 5 ] = nz;

					normalArray[ i + 6 ] = nx;
					normalArray[ i + 7 ] = ny;
					normalArray[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.normal );
			_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.uv );
			_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.color );
			_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {

		if ( material.visible === false ) return;

		var linewidth, a, attribute;
		var attributeItem, attributeName, attributePointer, attributeSize;

		var program = setProgram( camera, lights, fog, material, object );

		var programAttributes = program.attributes;
		var geometryAttributes = geometry.attributes;

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			disableAttributes();

		}

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			var index = geometryAttributes[ "index" ];

			// indexed triangles

			if ( index ) {

				var offsets = geometry.offsets;

				// if there is more than 1 chunk
				// must set attribute pointers to use new offsets for each chunk
				// even if geometry and materials didn't change

				if ( offsets.length > 1 ) updateBuffers = true;

				for ( var i = 0, il = offsets.length; i < il; i ++ ) {

					var startIndex = offsets[ i ].index;

					if ( updateBuffers ) {

						for ( attributeName in programAttributes ) {

							attributePointer = programAttributes[ attributeName ];
							attributeItem = geometryAttributes[ attributeName ];

							if ( attributePointer >= 0 ) {

								if ( attributeItem ) {

									attributeSize = attributeItem.itemSize;
									_gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
									enableAttribute( attributePointer );
									_gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, startIndex * attributeSize * 4 ); // 4 bytes per Float32

								} else if ( material.defaultAttributeValues ) {

									if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {

										_gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

									} else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {

										_gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

									}

								}

							}

						}

						// indices

						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

					}

					// render indexed triangles

					_gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16

					_this.info.render.calls ++;
					_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
					_this.info.render.faces += offsets[ i ].count / 3;

				}

			// non-indexed triangles

			} else {

				if ( updateBuffers ) {

					for ( attributeName in programAttributes ) {

						if ( attributeName === 'index') continue;

						attributePointer = programAttributes[ attributeName ];
						attributeItem = geometryAttributes[ attributeName ];
						
						if ( attributePointer >= 0 ) {

							if ( attributeItem ) {

								attributeSize = attributeItem.itemSize;
								_gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
								enableAttribute( attributePointer );
								_gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );

							} else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {

								if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {

									_gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

								} else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {

									_gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

								}

							}

						}

					}

				}

				var position = geometry.attributes[ "position" ];

				// render non-indexed triangles

				_gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );

				_this.info.render.calls ++;
				_this.info.render.vertices += position.numItems / 3;
				_this.info.render.faces += position.numItems / 3 / 3;

			}

		// render particles

		} else if ( object instanceof THREE.ParticleSystem ) {

			if ( updateBuffers ) {

				for ( attributeName in programAttributes ) {

					attributePointer = programAttributes[ attributeName ];
					attributeItem = geometryAttributes[ attributeName ];
					
					if ( attributePointer >= 0 ) {

						if ( attributeItem ) {

							attributeSize = attributeItem.itemSize;
							_gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
							enableAttribute( attributePointer );
							_gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );

						} else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {

							if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {

								_gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

							} else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {

								_gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

							}

						}

					}

				}

			}

			var position = geometryAttributes[ "position" ];

			// render particles

			_gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );

			_this.info.render.calls ++;
			_this.info.render.points += position.numItems / 3;

		} else if ( object instanceof THREE.Line ) {

			if ( updateBuffers ) {

				for ( attributeName in programAttributes ) {

					attributePointer = programAttributes[ attributeName ];
					attributeItem = geometryAttributes[ attributeName ];
					
					if ( attributePointer >= 0 ) {

						if ( attributeItem ) {

							attributeSize = attributeItem.itemSize;
							_gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
							enableAttribute( attributePointer );
							_gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, 0 );

						} else if ( material.defaultAttributeValues && material.defaultAttributeValues[ attributeName ] ) {

							if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {

								_gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

							} else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {

								_gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

							}

						}

					}

				}

			}

			// render lines

			var primitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

			setLineWidth( material.linewidth );

			var position = geometryAttributes[ "position" ];

			_gl.drawArrays( primitives, 0, position.numItems / 3 );

			_this.info.render.calls ++;
			_this.info.render.points += position.numItems;

		}

	};

	this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {

		if ( material.visible === false ) return;

		var linewidth, a, attribute, i, il;

		var program = setProgram( camera, lights, fog, material, object );

		var attributes = program.attributes;

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryGroupHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryGroupHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			disableAttributes();

		}

		// vertices

		if ( !material.morphTargets && attributes.position >= 0 ) {

			if ( updateBuffers ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
				enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

		} else {

			if ( object.morphTargetBase ) {

				setupMorphTargets( material, geometryGroup, object );

			}

		}


		if ( updateBuffers ) {

			// custom attributes

			// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers

			if ( geometryGroup.__webglCustomAttributesList ) {

				for ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {

					attribute = geometryGroup.__webglCustomAttributesList[ i ];

					if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );
						enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );
						_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );

					}

				}

			}


			// colors

			if ( attributes.color >= 0 ) {

				if ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
					enableAttribute( attributes.color );
					_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues ) {


					_gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );

				}

			}

			// normals

			if ( attributes.normal >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
				enableAttribute( attributes.normal );
				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			// tangents

			if ( attributes.tangent >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
				enableAttribute( attributes.tangent );
				_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );

			}

			// uvs

			if ( attributes.uv >= 0 ) {

				if ( object.geometry.faceVertexUvs[0] ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
					enableAttribute( attributes.uv );
					_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues ) {


					_gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );

				}

			}

			if ( attributes.uv2 >= 0 ) {

				if ( object.geometry.faceVertexUvs[1] ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
					enableAttribute( attributes.uv2 );
					_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues ) {


					_gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );

				}

			}

			if ( material.skinning &&
				 attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				enableAttribute( attributes.skinIndex );
				_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				enableAttribute( attributes.skinWeight );
				_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );

			}

			// line distances

			if ( attributes.lineDistance >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );
				enableAttribute( attributes.lineDistance );
				_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );

			}

		}

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			// wireframe

			if ( material.wireframe ) {

				setLineWidth( material.wireframeLinewidth );

				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
				_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );

			// triangles

			} else {

				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
				_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );

			}

			_this.info.render.calls ++;
			_this.info.render.vertices += geometryGroup.__webglFaceCount;
			_this.info.render.faces += geometryGroup.__webglFaceCount / 3;

		// render lines

		} else if ( object instanceof THREE.Line ) {

			var primitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

			setLineWidth( material.linewidth );

			_gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );

			_this.info.render.calls ++;

		// render particles

		} else if ( object instanceof THREE.ParticleSystem ) {

			_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );

			_this.info.render.calls ++;
			_this.info.render.points += geometryGroup.__webglParticleCount;

		}

	};

	function enableAttribute( attribute ) {

		if ( ! _enabledAttributes[ attribute ] ) {

			_gl.enableVertexAttribArray( attribute );
			_enabledAttributes[ attribute ] = true;

		}

	};

	function disableAttributes() {

		for ( var attribute in _enabledAttributes ) {

			if ( _enabledAttributes[ attribute ] ) {

				_gl.disableVertexAttribArray( attribute );
				_enabledAttributes[ attribute ] = false;

			}

		}

	};

	function setupMorphTargets ( material, geometryGroup, object ) {

		// set base

		var attributes = material.program.attributes;

		if ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		} else if ( attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.morphTargetForcedOrder.length ) {

			// set forced order

			var m = 0;
			var order = object.morphTargetForcedOrder;
			var influences = object.morphTargetInfluences;

			while ( m < material.numSupportedMorphTargets && m < order.length ) {

				if ( attributes[ "morphTarget" + m ] >= 0 ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ "morphTarget" + m ] );
					_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ "morphNormal" + m ] );
					_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];

				m ++;
			}

		} else {

			// find the most influencing

			var influence, activeInfluenceIndices = [];
			var influences = object.morphTargetInfluences;
			var i, il = influences.length;

			for ( i = 0; i < il; i ++ ) {

				influence = influences[ i ];

				if ( influence > 0 ) {

					activeInfluenceIndices.push( [ influence, i ] );

				}

			}

			if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {

				activeInfluenceIndices.sort( numericalSort );
				activeInfluenceIndices.length = material.numSupportedMorphTargets;

			} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {

				activeInfluenceIndices.sort( numericalSort );

			} else if ( activeInfluenceIndices.length === 0 ) {

				activeInfluenceIndices.push( [ 0, 0 ] );

			};

			var influenceIndex, m = 0;

			while ( m < material.numSupportedMorphTargets ) {

				if ( activeInfluenceIndices[ m ] ) {

					influenceIndex = activeInfluenceIndices[ m ][ 1 ];

					if ( attributes[ "morphTarget" + m ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ "morphTarget" + m ] );
						_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

					}

					if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ "morphNormal" + m ] );
						_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );


					}

					object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];

				} else {

					/*
					_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

					if ( material.morphNormals ) {

						_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

					}
					*/

					object.__webglMorphTargetInfluences[ m ] = 0;

				}

				m ++;

			}

		}

		// load updated influences uniform

		if ( material.program.uniforms.morphTargetInfluences !== null ) {

			_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );

		}

	};

	// Sorting

	function painterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	};

	function numericalSort ( a, b ) {

		return b[ 0 ] - a[ 0 ];

	};


	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( camera instanceof THREE.Camera === false ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		var i, il,

		webglObject, object,
		renderList,

		lights = scene.__lights,
		fog = scene.fog;

		// reset caching for this frame

		_currentMaterialId = -1;
		_lightsNeedUpdate = true;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		// update WebGL objects

		if ( this.autoUpdateObjects ) this.initWebGLObjects( scene );

		// custom render plugins (pre pass)

		renderPlugins( this.renderPluginsPre, scene, camera );

		//

		_this.info.render.calls = 0;
		_this.info.render.vertices = 0;
		_this.info.render.faces = 0;
		_this.info.render.points = 0;

		this.setRenderTarget( renderTarget );

		if ( this.autoClear || forceClear ) {

			this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

		}

		// set matrices for regular objects (frustum culled)

		renderList = scene.__webglObjects;

		for ( i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			webglObject.id = i;
			webglObject.render = false;

			if ( object.visible ) {

				if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

					setupMatrices( object, camera );

					unrollBufferMaterial( webglObject );

					webglObject.render = true;

					if ( this.sortObjects === true ) {

						if ( object.renderDepth !== null ) {

							webglObject.z = object.renderDepth;

						} else {

							_vector3.setFromMatrixPosition( object.matrixWorld );
							_vector3.applyProjection( _projScreenMatrix );

							webglObject.z = _vector3.z;

						}

					}

				}

			}

		}

		if ( this.sortObjects ) {

			renderList.sort( painterSortStable );

		}

		// set matrices for immediate objects

		renderList = scene.__webglObjectsImmediate;

		for ( i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			if ( object.visible ) {

				setupMatrices( object, camera );

				unrollImmediateBufferMaterial( webglObject );

			}

		}

		if ( scene.overrideMaterial ) {

			var material = scene.overrideMaterial;

			this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
			this.setDepthTest( material.depthTest );
			this.setDepthWrite( material.depthWrite );
			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			renderObjects( scene.__webglObjects, false, "", camera, lights, fog, true, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "", camera, lights, fog, false, material );

		} else {

			var material = null;

			// opaque pass (front-to-back order)

			this.setBlending( THREE.NoBlending );

			renderObjects( scene.__webglObjects, true, "opaque", camera, lights, fog, false, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "opaque", camera, lights, fog, false, material );

			// transparent pass (back-to-front order)

			renderObjects( scene.__webglObjects, false, "transparent", camera, lights, fog, true, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "transparent", camera, lights, fog, true, material );

		}

		// custom render plugins (post pass)

		renderPlugins( this.renderPluginsPost, scene, camera );


		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {

			updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		this.setDepthTest( true );
		this.setDepthWrite( true );

		// _gl.finish();

	};

	function renderPlugins( plugins, scene, camera ) {

		if ( ! plugins.length ) return;

		for ( var i = 0, il = plugins.length; i < il; i ++ ) {

			// reset state for plugin (to start from clean slate)

			_currentProgram = null;
			_currentCamera = null;

			_oldBlending = -1;
			_oldDepthTest = -1;
			_oldDepthWrite = -1;
			_oldDoubleSided = -1;
			_oldFlipSided = -1;
			_currentGeometryGroupHash = -1;
			_currentMaterialId = -1;

			_lightsNeedUpdate = true;

			plugins[ i ].render( scene, camera, _currentWidth, _currentHeight );

			// reset state after plugin (anything could have changed)

			_currentProgram = null;
			_currentCamera = null;

			_oldBlending = -1;
			_oldDepthTest = -1;
			_oldDepthWrite = -1;
			_oldDoubleSided = -1;
			_oldFlipSided = -1;
			_currentGeometryGroupHash = -1;
			_currentMaterialId = -1;

			_lightsNeedUpdate = true;

		}

	};

	function renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

		var webglObject, object, buffer, material, start, end, delta;

		if ( reverse ) {

			start = renderList.length - 1;
			end = -1;
			delta = -1;

		} else {

			start = 0;
			end = renderList.length;
			delta = 1;
		}

		for ( var i = start; i !== end; i += delta ) {

			webglObject = renderList[ i ];

			if ( webglObject.render ) {

				object = webglObject.object;
				buffer = webglObject.buffer;

				if ( overrideMaterial ) {

					material = overrideMaterial;

				} else {

					material = webglObject[ materialType ];

					if ( ! material ) continue;

					if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

					_this.setDepthTest( material.depthTest );
					_this.setDepthWrite( material.depthWrite );
					setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

				}

				_this.setMaterialFaces( material );

				if ( buffer instanceof THREE.BufferGeometry ) {

					_this.renderBufferDirect( camera, lights, fog, material, buffer, object );

				} else {

					_this.renderBuffer( camera, lights, fog, material, buffer, object );

				}

			}

		}

	};

	function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

		var webglObject, object, material, program;

		for ( var i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			if ( object.visible ) {

				if ( overrideMaterial ) {

					material = overrideMaterial;

				} else {

					material = webglObject[ materialType ];

					if ( ! material ) continue;

					if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

					_this.setDepthTest( material.depthTest );
					_this.setDepthWrite( material.depthWrite );
					setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

				}

				_this.renderImmediateObject( camera, lights, fog, material, object );

			}

		}

	};

	this.renderImmediateObject = function ( camera, lights, fog, material, object ) {

		var program = setProgram( camera, lights, fog, material, object );

		_currentGeometryGroupHash = -1;

		_this.setMaterialFaces( material );

		if ( object.immediateRenderCallback ) {

			object.immediateRenderCallback( program, _gl, _frustum );

		} else {

			object.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );

		}

	};

	function unrollImmediateBufferMaterial ( globject ) {

		var object = globject.object,
			material = object.material;

		if ( material.transparent ) {

			globject.transparent = material;
			globject.opaque = null;

		} else {

			globject.opaque = material;
			globject.transparent = null;

		}

	};

	function unrollBufferMaterial ( globject ) {

		var object = globject.object,
			buffer = globject.buffer,
			material, materialIndex, meshMaterial;

		meshMaterial = object.material;

		if ( meshMaterial instanceof THREE.MeshFaceMaterial ) {

			materialIndex = buffer.materialIndex;

			material = meshMaterial.materials[ materialIndex ];

			if ( material.transparent ) {

				globject.transparent = material;
				globject.opaque = null;

			} else {

				globject.opaque = material;
				globject.transparent = null;

			}

		} else {

			material = meshMaterial;

			if ( material ) {

				if ( material.transparent ) {

					globject.transparent = material;
					globject.opaque = null;

				} else {

					globject.opaque = material;
					globject.transparent = null;

				}

			}

		}

	};

	// Geometry splitting

	function sortFacesByMaterial ( geometry, material ) {

		var f, fl, face, materialIndex, vertices,
			groupHash, hash_map = {};

		var numMorphTargets = geometry.morphTargets.length;
		var numMorphNormals = geometry.morphNormals.length;

		var usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;

		geometry.geometryGroups = {};

		for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

			face = geometry.faces[ f ];
			materialIndex = usesFaceMaterial ? face.materialIndex : 0;

			if ( hash_map[ materialIndex ] === undefined ) {

				hash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };

			}

			groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

			if ( geometry.geometryGroups[ groupHash ] === undefined ) {

				geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

			}

			vertices = 3;

			if ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {

				hash_map[ materialIndex ].counter += 1;
				groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

				if ( geometry.geometryGroups[ groupHash ] === undefined ) {

					geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

				}

			}

			geometry.geometryGroups[ groupHash ].faces3.push( f );
			geometry.geometryGroups[ groupHash ].vertices += vertices;

		}

		geometry.geometryGroupsList = [];

		for ( var g in geometry.geometryGroups ) {

			geometry.geometryGroups[ g ].id = _geometryGroupCounter ++;

			geometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );

		}

	};

	// Objects refresh

	this.initWebGLObjects = function ( scene ) {

		if ( !scene.__webglObjects ) {

			scene.__webglObjects = [];
			scene.__webglObjectsImmediate = [];
			scene.__webglSprites = [];
			scene.__webglFlares = [];

		}

		while ( scene.__objectsAdded.length ) {

			addObject( scene.__objectsAdded[ 0 ], scene );
			scene.__objectsAdded.splice( 0, 1 );

		}

		while ( scene.__objectsRemoved.length ) {

			removeObject( scene.__objectsRemoved[ 0 ], scene );
			scene.__objectsRemoved.splice( 0, 1 );

		}

		// update must be called after objects adding / removal

		for ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {

			var object = scene.__webglObjects[ o ].object;

			// TODO: Remove this hack (WebGLRenderer refactoring)

			if ( object.__webglInit === undefined ) {

				if ( object.__webglActive !== undefined ) {

					removeObject( object, scene );

				}

				addObject( object, scene );

			}

			updateObject( object );

		}

	};

	// Objects adding

	function addObject( object, scene ) {

		var g, geometry, material, geometryGroup;

		if ( object.__webglInit === undefined ) {

			object.__webglInit = true;

			object._modelViewMatrix = new THREE.Matrix4();
			object._normalMatrix = new THREE.Matrix3();

			if ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {

				object.geometry.__webglInit = true;
				object.geometry.addEventListener( 'dispose', onGeometryDispose );

			}

			geometry = object.geometry;

			if ( geometry === undefined ) {

				// fail silently for now

			} else if ( geometry instanceof THREE.BufferGeometry ) {

				initDirectBuffers( geometry );

			} else if ( object instanceof THREE.Mesh ) {

				material = object.material;

				if ( geometry.geometryGroups === undefined ) {

					sortFacesByMaterial( geometry, material );

				}

				// create separate VBOs per geometry chunk

				for ( g in geometry.geometryGroups ) {

					geometryGroup = geometry.geometryGroups[ g ];

					// initialise VBO on the first access

					if ( ! geometryGroup.__webglVertexBuffer ) {

						createMeshBuffers( geometryGroup );
						initMeshBuffers( geometryGroup, object );

						geometry.verticesNeedUpdate = true;
						geometry.morphTargetsNeedUpdate = true;
						geometry.elementsNeedUpdate = true;
						geometry.uvsNeedUpdate = true;
						geometry.normalsNeedUpdate = true;
						geometry.tangentsNeedUpdate = true;
						geometry.colorsNeedUpdate = true;

					}

				}

			} else if ( object instanceof THREE.Line ) {

				if ( ! geometry.__webglVertexBuffer ) {

					createLineBuffers( geometry );
					initLineBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;
					geometry.lineDistancesNeedUpdate = true;

				}

			} else if ( object instanceof THREE.ParticleSystem ) {

				if ( ! geometry.__webglVertexBuffer ) {

					createParticleBuffers( geometry );
					initParticleBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;

				}

			}

		}

		if ( object.__webglActive === undefined ) {

			if ( object instanceof THREE.Mesh ) {

				geometry = object.geometry;

				if ( geometry instanceof THREE.BufferGeometry ) {

					addBuffer( scene.__webglObjects, geometry, object );

				} else if ( geometry instanceof THREE.Geometry ) {

					for ( g in geometry.geometryGroups ) {

						geometryGroup = geometry.geometryGroups[ g ];

						addBuffer( scene.__webglObjects, geometryGroup, object );

					}

				}

			} else if ( object instanceof THREE.Line ||
						object instanceof THREE.ParticleSystem ) {

				geometry = object.geometry;
				addBuffer( scene.__webglObjects, geometry, object );

			} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

				addBufferImmediate( scene.__webglObjectsImmediate, object );

			} else if ( object instanceof THREE.Sprite ) {

				scene.__webglSprites.push( object );

			} else if ( object instanceof THREE.LensFlare ) {

				scene.__webglFlares.push( object );

			}

			object.__webglActive = true;

		}

	};

	function addBuffer( objlist, buffer, object ) {

		objlist.push(
			{
				id: null,
				buffer: buffer,
				object: object,
				opaque: null,
				transparent: null,
				z: 0
			}
		);

	};

	function addBufferImmediate( objlist, object ) {

		objlist.push(
			{
				id: null,
				object: object,
				opaque: null,
				transparent: null,
				z: 0
			}
		);

	};

	// Objects updates

	function updateObject( object ) {

		var geometry = object.geometry,
			geometryGroup, customAttributesDirty, material;

		if ( geometry instanceof THREE.BufferGeometry ) {

			setDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );

		} else if ( object instanceof THREE.Mesh ) {

			// check all geometry groups

			for( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {

				geometryGroup = geometry.geometryGroupsList[ i ];

				material = getBufferMaterial( object, geometryGroup );

				if ( geometry.buffersNeedUpdate ) {

					initMeshBuffers( geometryGroup, object );

				}

				customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

				if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||
					 geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
					 geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {

					setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );

				}

			}

			geometry.verticesNeedUpdate = false;
			geometry.morphTargetsNeedUpdate = false;
			geometry.elementsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.tangentsNeedUpdate = false;

			geometry.buffersNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		} else if ( object instanceof THREE.Line ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {

				setLineBuffers( geometry, _gl.DYNAMIC_DRAW );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.lineDistancesNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );


		} else if ( object instanceof THREE.ParticleSystem ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {

				setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		}

	};

	// Objects updates - custom attributes check

	function areCustomAttributesDirty( material ) {

		for ( var a in material.attributes ) {

			if ( material.attributes[ a ].needsUpdate ) return true;

		}

		return false;

	};

	function clearCustomAttributes( material ) {

		for ( var a in material.attributes ) {

			material.attributes[ a ].needsUpdate = false;

		}

	};

	// Objects removal

	function removeObject( object, scene ) {

		if ( object instanceof THREE.Mesh  ||
			 object instanceof THREE.ParticleSystem ||
			 object instanceof THREE.Line ) {

			removeInstances( scene.__webglObjects, object );

		} else if ( object instanceof THREE.Sprite ) {

			removeInstancesDirect( scene.__webglSprites, object );

		} else if ( object instanceof THREE.LensFlare ) {

			removeInstancesDirect( scene.__webglFlares, object );

		} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

			removeInstances( scene.__webglObjectsImmediate, object );

		}

		delete object.__webglActive;

	};

	function removeInstances( objlist, object ) {

		for ( var o = objlist.length - 1; o >= 0; o -- ) {

			if ( objlist[ o ].object === object ) {

				objlist.splice( o, 1 );

			}

		}

	};

	function removeInstancesDirect( objlist, object ) {

		for ( var o = objlist.length - 1; o >= 0; o -- ) {

			if ( objlist[ o ] === object ) {

				objlist.splice( o, 1 );

			}

		}

	};

	// Materials

	this.initMaterial = function ( material, lights, fog, object ) {

		material.addEventListener( 'dispose', onMaterialDispose );

		var u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;

		if ( material instanceof THREE.MeshDepthMaterial ) {

			shaderID = 'depth';

		} else if ( material instanceof THREE.MeshNormalMaterial ) {

			shaderID = 'normal';

		} else if ( material instanceof THREE.MeshBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.MeshLambertMaterial ) {

			shaderID = 'lambert';

		} else if ( material instanceof THREE.MeshPhongMaterial ) {

			shaderID = 'phong';

		} else if ( material instanceof THREE.LineBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.LineDashedMaterial ) {

			shaderID = 'dashed';

		} else if ( material instanceof THREE.ParticleSystemMaterial ) {

			shaderID = 'particle_basic';

		}

		if ( shaderID ) {

			setMaterialShaders( material, THREE.ShaderLib[ shaderID ] );

		}

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		maxLightCount = allocateLights( lights );

		maxShadows = allocateShadows( lights );

		maxBones = allocateBones( object );

		parameters = {

			map: !!material.map,
			envMap: !!material.envMap,
			lightMap: !!material.lightMap,
			bumpMap: !!material.bumpMap,
			normalMap: !!material.normalMap,
			specularMap: !!material.specularMap,

			vertexColors: material.vertexColors,

			fog: fog,
			useFog: material.fog,
			fogExp: fog instanceof THREE.FogExp2,

			sizeAttenuation: material.sizeAttenuation,

			skinning: material.skinning,
			maxBones: maxBones,
			useVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: this.maxMorphTargets,
			maxMorphNormals: this.maxMorphNormals,

			maxDirLights: maxLightCount.directional,
			maxPointLights: maxLightCount.point,
			maxSpotLights: maxLightCount.spot,
			maxHemiLights: maxLightCount.hemi,

			maxShadows: maxShadows,
			shadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,
			shadowMapType: this.shadowMapType,
			shadowMapDebug: this.shadowMapDebug,
			shadowMapCascade: this.shadowMapCascade,

			alphaTest: material.alphaTest,
			metal: material.metal,
			perPixel: material.perPixel,
			wrapAround: material.wrapAround,
			doubleSided: material.side === THREE.DoubleSide,
			flipSided: material.side === THREE.BackSide

		};

		material.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters, material.index0AttributeName );

		var attributes = material.program.attributes;

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			var id, base = "morphTarget";

			for ( i = 0; i < this.maxMorphTargets; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			var id, base = "morphNormal";

			for ( i = 0; i < this.maxMorphNormals; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		material.uniformsList = [];

		for ( u in material.uniforms ) {

			material.uniformsList.push( [ material.uniforms[ u ], u ] );

		}

	};

	function setMaterialShaders( material, shaders ) {

		material.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );
		material.vertexShader = shaders.vertexShader;
		material.fragmentShader = shaders.fragmentShader;

	};

	function setProgram( camera, lights, fog, material, object ) {

		_usedTextureUnits = 0;

		if ( material.needsUpdate ) {

			if ( material.program ) deallocateMaterial( material );

			_this.initMaterial( material, lights, fog, object );
			material.needsUpdate = false;

		}

		if ( material.morphTargets ) {

			if ( ! object.__webglMorphTargetInfluences ) {

				object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );

			}

		}

		var refreshMaterial = false;

		var program = material.program,
			p_uniforms = program.uniforms,
			m_uniforms = material.uniforms;

		if ( program !== _currentProgram ) {

			_gl.useProgram( program );
			_currentProgram = program;

			refreshMaterial = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;
			refreshMaterial = true;

		}

		if ( refreshMaterial || camera !== _currentCamera ) {

			_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			if ( camera !== _currentCamera ) _currentCamera = camera;

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			if ( _supportsBoneTextures && object.useVertexTexture ) {

				if ( p_uniforms.boneTexture !== null ) {

					var textureUnit = getTextureUnit();

					_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
					_this.setTexture( object.boneTexture, textureUnit );

				}

				if ( p_uniforms.boneTextureWidth !== null ) {

					_gl.uniform1i( p_uniforms.boneTextureWidth, object.boneTextureWidth );

				}

				if ( p_uniforms.boneTextureHeight !== null ) {

					_gl.uniform1i( p_uniforms.boneTextureHeight, object.boneTextureHeight );

				}

			} else {

				if ( p_uniforms.boneGlobalMatrices !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );

				}

			}

		}

		if ( refreshMaterial ) {

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material.lights ) {

				if ( _lightsNeedUpdate ) {

					setupLights( program, lights );
					_lightsNeedUpdate = false;

				}

				refreshUniformsLights( m_uniforms, _lights );

			}

			if ( material instanceof THREE.MeshBasicMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			}

			// refresh single material specific uniforms

			if ( material instanceof THREE.LineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

			} else if ( material instanceof THREE.LineDashedMaterial ) {

				refreshUniformsLine( m_uniforms, material );
				refreshUniformsDash( m_uniforms, material );

			} else if ( material instanceof THREE.ParticleSystemMaterial ) {

				refreshUniformsParticle( m_uniforms, material );

			} else if ( material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsPhong( m_uniforms, material );

			} else if ( material instanceof THREE.MeshLambertMaterial ) {

				refreshUniformsLambert( m_uniforms, material );

			} else if ( material instanceof THREE.MeshDepthMaterial ) {

				m_uniforms.mNear.value = camera.near;
				m_uniforms.mFar.value = camera.far;
				m_uniforms.opacity.value = material.opacity;

			} else if ( material instanceof THREE.MeshNormalMaterial ) {

				m_uniforms.opacity.value = material.opacity;

			}

			if ( object.receiveShadow && ! material._shadowPass ) {

				refreshUniformsShadow( m_uniforms, lights );

			}

			// load common uniforms

			loadUniformsGeneric( program, material.uniformsList );

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material instanceof THREE.ShaderMaterial ||
				 material instanceof THREE.MeshPhongMaterial ||
				 material.envMap ) {

				if ( p_uniforms.cameraPosition !== null ) {

					_vector3.setFromMatrixPosition( camera.matrixWorld );
					_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );

				}

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.ShaderMaterial ||
				 material.skinning ) {

				if ( p_uniforms.viewMatrix !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

				}

			}

		}

		loadUniformsMatrices( p_uniforms, object );

		if ( p_uniforms.modelMatrix !== null ) {

			_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

		}

		return program;

	};

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon ( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( _this.gammaInput ) {

			uniforms.diffuse.value.copyGammaToLinear( material.color );

		} else {

			uniforms.diffuse.value = material.color;

		}

		uniforms.map.value = material.map;
		uniforms.lightMap.value = material.lightMap;
		uniforms.specularMap.value = material.specularMap;

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		// uv repeat and offset setting priorities
		//	1. color map
		//	2. specular map
		//	3. normal map
		//	4. bump map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		}

		if ( uvScaleMap !== undefined ) {

			var offset = uvScaleMap.offset;
			var repeat = uvScaleMap.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

		uniforms.envMap.value = material.envMap;
		uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;

		if ( _this.gammaInput ) {

			//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;
			uniforms.reflectivity.value = material.reflectivity;

		} else {

			uniforms.reflectivity.value = material.reflectivity;

		}

		uniforms.refractionRatio.value = material.refractionRatio;
		uniforms.combine.value = material.combine;
		uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;

	};

	function refreshUniformsLine ( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	};

	function refreshUniformsDash ( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	};

	function refreshUniformsParticle ( uniforms, material ) {

		uniforms.psColor.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size;
		uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.

		uniforms.map.value = material.map;

	};

	function refreshUniformsFog ( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog instanceof THREE.Fog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog instanceof THREE.FogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	};

	function refreshUniformsPhong ( uniforms, material ) {

		uniforms.shininess.value = material.shininess;

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );
			uniforms.specular.value.copyGammaToLinear( material.specular );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;
			uniforms.specular.value = material.specular;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	};

	function refreshUniformsLambert ( uniforms, material ) {

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	};

	function refreshUniformsLights ( uniforms, lights ) {

		uniforms.ambientLightColor.value = lights.ambient;

		uniforms.directionalLightColor.value = lights.directional.colors;
		uniforms.directionalLightDirection.value = lights.directional.positions;

		uniforms.pointLightColor.value = lights.point.colors;
		uniforms.pointLightPosition.value = lights.point.positions;
		uniforms.pointLightDistance.value = lights.point.distances;

		uniforms.spotLightColor.value = lights.spot.colors;
		uniforms.spotLightPosition.value = lights.spot.positions;
		uniforms.spotLightDistance.value = lights.spot.distances;
		uniforms.spotLightDirection.value = lights.spot.directions;
		uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
		uniforms.spotLightExponent.value = lights.spot.exponents;

		uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
		uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
		uniforms.hemisphereLightDirection.value = lights.hemi.positions;

	};

	function refreshUniformsShadow ( uniforms, lights ) {

		if ( uniforms.shadowMatrix ) {

			var j = 0;

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];

				if ( ! light.castShadow ) continue;

				if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {

					uniforms.shadowMap.value[ j ] = light.shadowMap;
					uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;

					uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;

					uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;
					uniforms.shadowBias.value[ j ] = light.shadowBias;

					j ++;

				}

			}

		}

	};

	// Uniforms (load to GPU)

	function loadUniformsMatrices ( uniforms, object ) {

		_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );

		if ( uniforms.normalMatrix ) {

			_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );

		}

	};

	function getTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= _maxTextures ) {

			console.warn( "WebGLRenderer: trying to use " + textureUnit + " texture units while this GPU supports only " + _maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	};

	function loadUniformsGeneric ( program, uniforms ) {

		var uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;

		for ( j = 0, jl = uniforms.length; j < jl; j ++ ) {

			location = program.uniforms[ uniforms[ j ][ 1 ] ];
			if ( !location ) continue;

			uniform = uniforms[ j ][ 0 ];

			type = uniform.type;
			value = uniform.value;

			if ( type === "i" ) { // single integer

				_gl.uniform1i( location, value );

			} else if ( type === "f" ) { // single float

				_gl.uniform1f( location, value );

			} else if ( type === "v2" ) { // single THREE.Vector2

				_gl.uniform2f( location, value.x, value.y );

			} else if ( type === "v3" ) { // single THREE.Vector3

				_gl.uniform3f( location, value.x, value.y, value.z );

			} else if ( type === "v4" ) { // single THREE.Vector4

				_gl.uniform4f( location, value.x, value.y, value.z, value.w );

			} else if ( type === "c" ) { // single THREE.Color

				_gl.uniform3f( location, value.r, value.g, value.b );

			} else if ( type === "iv1" ) { // flat array of integers (JS or typed array)

				_gl.uniform1iv( location, value );

			} else if ( type === "iv" ) { // flat array of integers with 3 x N size (JS or typed array)

				_gl.uniform3iv( location, value );

			} else if ( type === "fv1" ) { // flat array of floats (JS or typed array)

				_gl.uniform1fv( location, value );

			} else if ( type === "fv" ) { // flat array of floats with 3 x N size (JS or typed array)

				_gl.uniform3fv( location, value );

			} else if ( type === "v2v" ) { // array of THREE.Vector2

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 2 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 2;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;

				}

				_gl.uniform2fv( location, uniform._array );

			} else if ( type === "v3v" ) { // array of THREE.Vector3

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 3 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 3;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;
					uniform._array[ offset + 2 ] = value[ i ].z;

				}

				_gl.uniform3fv( location, uniform._array );

			} else if ( type === "v4v" ) { // array of THREE.Vector4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 4 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 4;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;
					uniform._array[ offset + 2 ] = value[ i ].z;
					uniform._array[ offset + 3 ] = value[ i ].w;

				}

				_gl.uniform4fv( location, uniform._array );

			} else if ( type === "m4") { // single THREE.Matrix4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 16 );

				}

				value.flattenToArray( uniform._array );
				_gl.uniformMatrix4fv( location, false, uniform._array );

			} else if ( type === "m4v" ) { // array of THREE.Matrix4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 16 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

				}

				_gl.uniformMatrix4fv( location, false, uniform._array );

			} else if ( type === "t" ) { // single THREE.Texture (2d or cube)

				texture = value;
				textureUnit = getTextureUnit();

				_gl.uniform1i( location, textureUnit );

				if ( !texture ) continue;

				if ( texture.image instanceof Array && texture.image.length === 6 ) {

					setCubeTexture( texture, textureUnit );

				} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

					setCubeTextureDynamic( texture, textureUnit );

				} else {

					_this.setTexture( texture, textureUnit );

				}

			} else if ( type === "tv" ) { // array of THREE.Texture (2d)

				if ( uniform._array === undefined ) {

					uniform._array = [];

				}

				for( i = 0, il = uniform.value.length; i < il; i ++ ) {

					uniform._array[ i ] = getTextureUnit();

				}

				_gl.uniform1iv( location, uniform._array );

				for( i = 0, il = uniform.value.length; i < il; i ++ ) {

					texture = uniform.value[ i ];
					textureUnit = uniform._array[ i ];

					if ( !texture ) continue;

					_this.setTexture( texture, textureUnit );

				}

			} else {

				console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );

			}

		}

	};

	function setupMatrices ( object, camera ) {

		object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object._normalMatrix.getNormalMatrix( object._modelViewMatrix );

	};

	//

	function setColorGamma( array, offset, color, intensitySq ) {

		array[ offset ]     = color.r * color.r * intensitySq;
		array[ offset + 1 ] = color.g * color.g * intensitySq;
		array[ offset + 2 ] = color.b * color.b * intensitySq;

	};

	function setColorLinear( array, offset, color, intensity ) {

		array[ offset ]     = color.r * intensity;
		array[ offset + 1 ] = color.g * intensity;
		array[ offset + 2 ] = color.b * intensity;

	};

	function setupLights ( program, lights ) {

		var l, ll, light, n,
		r = 0, g = 0, b = 0,
		color, skyColor, groundColor,
		intensity,  intensitySq,
		position,
		distance,

		zlights = _lights,

		dirColors = zlights.directional.colors,
		dirPositions = zlights.directional.positions,

		pointColors = zlights.point.colors,
		pointPositions = zlights.point.positions,
		pointDistances = zlights.point.distances,

		spotColors = zlights.spot.colors,
		spotPositions = zlights.spot.positions,
		spotDistances = zlights.spot.distances,
		spotDirections = zlights.spot.directions,
		spotAnglesCos = zlights.spot.anglesCos,
		spotExponents = zlights.spot.exponents,

		hemiSkyColors = zlights.hemi.skyColors,
		hemiGroundColors = zlights.hemi.groundColors,
		hemiPositions = zlights.hemi.positions,

		dirLength = 0,
		pointLength = 0,
		spotLength = 0,
		hemiLength = 0,

		dirCount = 0,
		pointCount = 0,
		spotCount = 0,
		hemiCount = 0,

		dirOffset = 0,
		pointOffset = 0,
		spotOffset = 0,
		hemiOffset = 0;

		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

			light = lights[ l ];

			if ( light.onlyShadow ) continue;

			color = light.color;
			intensity = light.intensity;
			distance = light.distance;

			if ( light instanceof THREE.AmbientLight ) {

				if ( ! light.visible ) continue;

				if ( _this.gammaInput ) {

					r += color.r * color.r;
					g += color.g * color.g;
					b += color.b * color.b;

				} else {

					r += color.r;
					g += color.g;
					b += color.b;

				}

			} else if ( light instanceof THREE.DirectionalLight ) {

				dirCount += 1;

				if ( ! light.visible ) continue;

				_direction.setFromMatrixPosition( light.matrixWorld );
				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				_direction.sub( _vector3 );
				_direction.normalize();

				// skip lights with undefined direction
				// these create troubles in OpenGL (making pixel black)

				if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

				dirOffset = dirLength * 3;

				dirPositions[ dirOffset ]     = _direction.x;
				dirPositions[ dirOffset + 1 ] = _direction.y;
				dirPositions[ dirOffset + 2 ] = _direction.z;

				if ( _this.gammaInput ) {

					setColorGamma( dirColors, dirOffset, color, intensity * intensity );

				} else {

					setColorLinear( dirColors, dirOffset, color, intensity );

				}

				dirLength += 1;

			} else if ( light instanceof THREE.PointLight ) {

				pointCount += 1;

				if ( ! light.visible ) continue;

				pointOffset = pointLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( pointColors, pointOffset, color, intensity * intensity );

				} else {

					setColorLinear( pointColors, pointOffset, color, intensity );

				}

				_vector3.setFromMatrixPosition( light.matrixWorld );

				pointPositions[ pointOffset ]     = _vector3.x;
				pointPositions[ pointOffset + 1 ] = _vector3.y;
				pointPositions[ pointOffset + 2 ] = _vector3.z;

				pointDistances[ pointLength ] = distance;

				pointLength += 1;

			} else if ( light instanceof THREE.SpotLight ) {

				spotCount += 1;

				if ( ! light.visible ) continue;

				spotOffset = spotLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( spotColors, spotOffset, color, intensity * intensity );

				} else {

					setColorLinear( spotColors, spotOffset, color, intensity );

				}

				_vector3.setFromMatrixPosition( light.matrixWorld );

				spotPositions[ spotOffset ]     = _vector3.x;
				spotPositions[ spotOffset + 1 ] = _vector3.y;
				spotPositions[ spotOffset + 2 ] = _vector3.z;

				spotDistances[ spotLength ] = distance;

				_direction.copy( _vector3 );
				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				_direction.sub( _vector3 );
				_direction.normalize();

				spotDirections[ spotOffset ]     = _direction.x;
				spotDirections[ spotOffset + 1 ] = _direction.y;
				spotDirections[ spotOffset + 2 ] = _direction.z;

				spotAnglesCos[ spotLength ] = Math.cos( light.angle );
				spotExponents[ spotLength ] = light.exponent;

				spotLength += 1;

			} else if ( light instanceof THREE.HemisphereLight ) {

				hemiCount += 1;

				if ( ! light.visible ) continue;

				_direction.setFromMatrixPosition( light.matrixWorld );
				_direction.normalize();

				// skip lights with undefined direction
				// these create troubles in OpenGL (making pixel black)

				if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

				hemiOffset = hemiLength * 3;

				hemiPositions[ hemiOffset ]     = _direction.x;
				hemiPositions[ hemiOffset + 1 ] = _direction.y;
				hemiPositions[ hemiOffset + 2 ] = _direction.z;

				skyColor = light.color;
				groundColor = light.groundColor;

				if ( _this.gammaInput ) {

					intensitySq = intensity * intensity;

					setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );
					setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );

				} else {

					setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
					setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );

				}

				hemiLength += 1;

			}

		}

		// null eventual remains from removed lights
		// (this is to avoid if in shader)

		for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
		for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
		for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;

		zlights.directional.length = dirLength;
		zlights.point.length = pointLength;
		zlights.spot.length = spotLength;
		zlights.hemi.length = hemiLength;

		zlights.ambient[ 0 ] = r;
		zlights.ambient[ 1 ] = g;
		zlights.ambient[ 2 ] = b;

	};

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		if ( cullFace === THREE.CullFaceNone ) {

			_gl.disable( _gl.CULL_FACE );

		} else {

			if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			if ( cullFace === THREE.CullFaceBack ) {

				_gl.cullFace( _gl.BACK );

			} else if ( cullFace === THREE.CullFaceFront ) {

				_gl.cullFace( _gl.FRONT );

			} else {

				_gl.cullFace( _gl.FRONT_AND_BACK );

			}

			_gl.enable( _gl.CULL_FACE );

		}

	};

	this.setMaterialFaces = function ( material ) {

		var doubleSided = material.side === THREE.DoubleSide;
		var flipSided = material.side === THREE.BackSide;

		if ( _oldDoubleSided !== doubleSided ) {

			if ( doubleSided ) {

				_gl.disable( _gl.CULL_FACE );

			} else {

				_gl.enable( _gl.CULL_FACE );

			}

			_oldDoubleSided = doubleSided;

		}

		if ( _oldFlipSided !== flipSided ) {

			if ( flipSided ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			_oldFlipSided = flipSided;

		}

	};

	this.setDepthTest = function ( depthTest ) {

		if ( _oldDepthTest !== depthTest ) {

			if ( depthTest ) {

				_gl.enable( _gl.DEPTH_TEST );

			} else {

				_gl.disable( _gl.DEPTH_TEST );

			}

			_oldDepthTest = depthTest;

		}

	};

	this.setDepthWrite = function ( depthWrite ) {

		if ( _oldDepthWrite !== depthWrite ) {

			_gl.depthMask( depthWrite );
			_oldDepthWrite = depthWrite;

		}

	};

	function setLineWidth ( width ) {

		if ( width !== _oldLineWidth ) {

			_gl.lineWidth( width );

			_oldLineWidth = width;

		}

	};

	function setPolygonOffset ( polygonoffset, factor, units ) {

		if ( _oldPolygonOffset !== polygonoffset ) {

			if ( polygonoffset ) {

				_gl.enable( _gl.POLYGON_OFFSET_FILL );

			} else {

				_gl.disable( _gl.POLYGON_OFFSET_FILL );

			}

			_oldPolygonOffset = polygonoffset;

		}

		if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {

			_gl.polygonOffset( factor, units );

			_oldPolygonOffsetFactor = factor;
			_oldPolygonOffsetUnits = units;

		}

	};

	this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {

		if ( blending !== _oldBlending ) {

			if ( blending === THREE.NoBlending ) {

				_gl.disable( _gl.BLEND );

			} else if ( blending === THREE.AdditiveBlending ) {

				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );

			} else if ( blending === THREE.SubtractiveBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );

			} else if ( blending === THREE.MultiplyBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );

			} else if ( blending === THREE.CustomBlending ) {

				_gl.enable( _gl.BLEND );

			} else {

				_gl.enable( _gl.BLEND );
				_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );
				_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );

			}

			_oldBlending = blending;

		}

		if ( blending === THREE.CustomBlending ) {

			if ( blendEquation !== _oldBlendEquation ) {

				_gl.blendEquation( paramThreeToGL( blendEquation ) );

				_oldBlendEquation = blendEquation;

			}

			if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {

				_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );

				_oldBlendSrc = blendSrc;
				_oldBlendDst = blendDst;

			}

		} else {

			_oldBlendEquation = null;
			_oldBlendSrc = null;
			_oldBlendDst = null;

		}

	};

	// Defines

	function generateDefines ( defines ) {

		var value, chunk, chunks = [];

		for ( var d in defines ) {

			value = defines[ d ];
			if ( value === false ) continue;

			chunk = "#define " + d + " " + value;
			chunks.push( chunk );

		}

		return chunks.join( "\n" );

	};

	// Shaders

	function buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters, index0AttributeName ) {

		var p, pl, d, program, code;
		var chunks = [];

		// Generate code

		if ( shaderID ) {

			chunks.push( shaderID );

		} else {

			chunks.push( fragmentShader );
			chunks.push( vertexShader );

		}

		for ( d in defines ) {

			chunks.push( d );
			chunks.push( defines[ d ] );

		}

		for ( p in parameters ) {

			chunks.push( p );
			chunks.push( parameters[ p ] );

		}

		code = chunks.join();

		// Check if code has been already compiled

		for ( p = 0, pl = _programs.length; p < pl; p ++ ) {

			var programInfo = _programs[ p ];

			if ( programInfo.code === code ) {

				// console.log( "Code already compiled." /*: \n\n" + code*/ );

				programInfo.usedTimes ++;

				return programInfo.program;

			}

		}

		var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";

		if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";

		} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";

		}

		// console.log( "building new program " );

		//

		var customDefines = generateDefines( defines );

		//

		program = _gl.createProgram();

		var prefix_vertex = [

			"precision " + _precision + " float;",
			"precision " + _precision + " int;",

			customDefines,

			_supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",

			_this.gammaInput ? "#define GAMMA_INPUT" : "",
			_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

			"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
			"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
			"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
			"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

			"#define MAX_SHADOWS " + parameters.maxShadows,

			"#define MAX_BONES " + parameters.maxBones,

			parameters.map ? "#define USE_MAP" : "",
			parameters.envMap ? "#define USE_ENVMAP" : "",
			parameters.lightMap ? "#define USE_LIGHTMAP" : "",
			parameters.bumpMap ? "#define USE_BUMPMAP" : "",
			parameters.normalMap ? "#define USE_NORMALMAP" : "",
			parameters.specularMap ? "#define USE_SPECULARMAP" : "",
			parameters.vertexColors ? "#define USE_COLOR" : "",

			parameters.skinning ? "#define USE_SKINNING" : "",
			parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",

			parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
			parameters.morphNormals ? "#define USE_MORPHNORMALS" : "",
			parameters.perPixel ? "#define PHONG_PER_PIXEL" : "",
			parameters.wrapAround ? "#define WRAP_AROUND" : "",
			parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
			parameters.flipSided ? "#define FLIP_SIDED" : "",

			parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
			parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
			parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
			parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

			parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",

			"uniform mat4 modelMatrix;",
			"uniform mat4 modelViewMatrix;",
			"uniform mat4 projectionMatrix;",
			"uniform mat4 viewMatrix;",
			"uniform mat3 normalMatrix;",
			"uniform vec3 cameraPosition;",

			"attribute vec3 position;",
			"attribute vec3 normal;",
			"attribute vec2 uv;",
			"attribute vec2 uv2;",

			"#ifdef USE_COLOR",

				"attribute vec3 color;",

			"#endif",

			"#ifdef USE_MORPHTARGETS",

				"attribute vec3 morphTarget0;",
				"attribute vec3 morphTarget1;",
				"attribute vec3 morphTarget2;",
				"attribute vec3 morphTarget3;",

				"#ifdef USE_MORPHNORMALS",

					"attribute vec3 morphNormal0;",
					"attribute vec3 morphNormal1;",
					"attribute vec3 morphNormal2;",
					"attribute vec3 morphNormal3;",

				"#else",

					"attribute vec3 morphTarget4;",
					"attribute vec3 morphTarget5;",
					"attribute vec3 morphTarget6;",
					"attribute vec3 morphTarget7;",

				"#endif",

			"#endif",

			"#ifdef USE_SKINNING",

				"attribute vec4 skinIndex;",
				"attribute vec4 skinWeight;",

			"#endif",

			""

		].join("\n");

		var prefix_fragment = [

			"precision " + _precision + " float;",
			"precision " + _precision + " int;",

			( parameters.bumpMap || parameters.normalMap ) ? "#extension GL_OES_standard_derivatives : enable" : "",

			customDefines,

			"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
			"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
			"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
			"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

			"#define MAX_SHADOWS " + parameters.maxShadows,

			parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest: "",

			_this.gammaInput ? "#define GAMMA_INPUT" : "",
			_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

			( parameters.useFog && parameters.fog ) ? "#define USE_FOG" : "",
			( parameters.useFog && parameters.fogExp ) ? "#define FOG_EXP2" : "",

			parameters.map ? "#define USE_MAP" : "",
			parameters.envMap ? "#define USE_ENVMAP" : "",
			parameters.lightMap ? "#define USE_LIGHTMAP" : "",
			parameters.bumpMap ? "#define USE_BUMPMAP" : "",
			parameters.normalMap ? "#define USE_NORMALMAP" : "",
			parameters.specularMap ? "#define USE_SPECULARMAP" : "",
			parameters.vertexColors ? "#define USE_COLOR" : "",

			parameters.metal ? "#define METAL" : "",
			parameters.perPixel ? "#define PHONG_PER_PIXEL" : "",
			parameters.wrapAround ? "#define WRAP_AROUND" : "",
			parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
			parameters.flipSided ? "#define FLIP_SIDED" : "",

			parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
			parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
			parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
			parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

			"uniform mat4 viewMatrix;",
			"uniform vec3 cameraPosition;",
			""

		].join("\n");

		var glVertexShader = getShader( "vertex", prefix_vertex + vertexShader );
		var glFragmentShader = getShader( "fragment", prefix_fragment + fragmentShader );

		_gl.attachShader( program, glVertexShader );
		_gl.attachShader( program, glFragmentShader );

		//Force a particular attribute to index 0.
		// because potentially expensive emulation is done by browser if attribute 0 is disabled.
		//And, color, for example is often automatically bound to index 0 so disabling it
		if ( index0AttributeName ) {
			_gl.bindAttribLocation( program, 0, index0AttributeName );
		}

		_gl.linkProgram( program );

		if ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {

			console.error( "Could not initialise shader\n" + "VALIDATE_STATUS: " + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + ", gl error [" + _gl.getError() + "]" );
			console.error( "Program Info Log: " + _gl.getProgramInfoLog( program ) );
		}

		// clean up

		_gl.deleteShader( glFragmentShader );
		_gl.deleteShader( glVertexShader );

		// console.log( prefix_fragment + fragmentShader );
		// console.log( prefix_vertex + vertexShader );

		program.uniforms = {};
		program.attributes = {};

		var identifiers, u, a, i;

		// cache uniform locations

		identifiers = [

			'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',
			'morphTargetInfluences'

		];

		if ( parameters.useVertexTexture ) {

			identifiers.push( 'boneTexture' );
			identifiers.push( 'boneTextureWidth' );
			identifiers.push( 'boneTextureHeight' );

		} else {

			identifiers.push( 'boneGlobalMatrices' );

		}

		for ( u in uniforms ) {

			identifiers.push( u );

		}

		cacheUniformLocations( program, identifiers );

		// cache attributes locations

		identifiers = [

			"position", "normal", "uv", "uv2", "tangent", "color",
			"skinIndex", "skinWeight", "lineDistance"

		];

		for ( i = 0; i < parameters.maxMorphTargets; i ++ ) {

			identifiers.push( "morphTarget" + i );

		}

		for ( i = 0; i < parameters.maxMorphNormals; i ++ ) {

			identifiers.push( "morphNormal" + i );

		}

		for ( a in attributes ) {

			identifiers.push( a );

		}

		cacheAttributeLocations( program, identifiers );

		program.id = _programs_counter ++;

		_programs.push( { program: program, code: code, usedTimes: 1 } );

		_this.info.memory.programs = _programs.length;

		return program;

	};

	// Shader parameters cache

	function cacheUniformLocations ( program, identifiers ) {

		var i, l, id;

		for( i = 0, l = identifiers.length; i < l; i ++ ) {

			id = identifiers[ i ];
			program.uniforms[ id ] = _gl.getUniformLocation( program, id );

		}

	};

	function cacheAttributeLocations ( program, identifiers ) {

		var i, l, id;

		for( i = 0, l = identifiers.length; i < l; i ++ ) {

			id = identifiers[ i ];
			program.attributes[ id ] = _gl.getAttribLocation( program, id );

		}

	};

	function addLineNumbers ( string ) {

		var chunks = string.split( "\n" );

		for ( var i = 0, il = chunks.length; i < il; i ++ ) {

			// Chrome reports shader errors on lines
			// starting counting from 1

			chunks[ i ] = ( i + 1 ) + ": " + chunks[ i ];

		}

		return chunks.join( "\n" );

	};

	function getShader ( type, string ) {

		var shader;

		if ( type === "fragment" ) {

			shader = _gl.createShader( _gl.FRAGMENT_SHADER );

		} else if ( type === "vertex" ) {

			shader = _gl.createShader( _gl.VERTEX_SHADER );

		}

		_gl.shaderSource( shader, string );
		_gl.compileShader( shader );

		if ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {

			console.error( _gl.getShaderInfoLog( shader ) );
			console.error( addLineNumbers( string ) );
			return null;

		}

		return shader;

	};

	// Textures


	function isPowerOfTwo ( value ) {

		return ( value & ( value - 1 ) ) === 0;

	};

	function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {

		if ( isImagePowerOfTwo ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

		}

		if ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {

			if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {

				_gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );
				texture.__oldAnisotropy = texture.anisotropy;

			}

		}

	};

	this.setTexture = function ( texture, slot ) {

		if ( texture.needsUpdate ) {

			if ( ! texture.__webglInit ) {

				texture.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				texture.__webglTexture = _gl.createTexture();

				_this.info.memory.textures ++;

			}

			_gl.activeTexture( _gl.TEXTURE0 + slot );
			_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = texture.image,
			isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture instanceof THREE.DataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture instanceof THREE.CompressedTexture ) {

				for( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					if ( texture.format!==THREE.RGBAFormat ) {
						_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
					} else {
						_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
					}

				}

			} else { // regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );

				}

			}

			if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			texture.needsUpdate = false;

			if ( texture.onUpdate ) texture.onUpdate();

		} else {

			_gl.activeTexture( _gl.TEXTURE0 + slot );
			_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

		}

	};

	function clampToMaxSize ( image, maxSize ) {

		if ( image.width <= maxSize && image.height <= maxSize ) {

			return image;

		}

		// Warning: Scaling through the canvas will only work with images that use
		// premultiplied alpha.

		var maxDimension = Math.max( image.width, image.height );
		var newWidth = Math.floor( image.width * maxSize / maxDimension );
		var newHeight = Math.floor( image.height * maxSize / maxDimension );

		var canvas = document.createElement( 'canvas' );
		canvas.width = newWidth;
		canvas.height = newHeight;

		var ctx = canvas.getContext( "2d" );
		ctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );

		return canvas;

	}

	function setCubeTexture ( texture, slot ) {

		if ( texture.image.length === 6 ) {

			if ( texture.needsUpdate ) {

				if ( ! texture.image.__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					texture.image.__webglTextureCube = _gl.createTexture();

					_this.info.memory.textures ++;

				}

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = texture instanceof THREE.CompressedTexture;

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( _this.autoScaleCubemaps && ! isCompressed ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );

					} else {

						cubeImage[ i ] = texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
				isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					if( !isCompressed ) {

						_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

					} else {
						
						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];
							if ( texture.format!==THREE.RGBAFormat ) {

								_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

							} else {
								_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
							}

						}
					}
				}

				if ( texture.generateMipmaps && isImagePowerOfTwo ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				texture.needsUpdate = false;

				if ( texture.onUpdate ) texture.onUpdate();

			} else {

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

			}

		}

	};

	function setCubeTextureDynamic ( texture, slot ) {

		_gl.activeTexture( _gl.TEXTURE0 + slot );
		_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );

	};

	// Render targets

	function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );

	};

	function setupRenderBuffer ( renderbuffer, renderTarget  ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		/* For some reason this is not working. Defaulting to RGBA4.
		} else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
		*/
		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

	};

	this.setRenderTarget = function ( renderTarget ) {

		var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

		if ( renderTarget && ! renderTarget.__webglFramebuffer ) {

			if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
			if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			renderTarget.__webglTexture = _gl.createTexture();

			_this.info.memory.textures ++;

			// Setup texture, create render and frame buffers

			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),
				glFormat = paramThreeToGL( renderTarget.format ),
				glType = paramThreeToGL( renderTarget.type );

			if ( isCube ) {

				renderTarget.__webglFramebuffer = [];
				renderTarget.__webglRenderbuffer = [];

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();
					renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();

					_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

					setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
					setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

			} else {

				renderTarget.__webglFramebuffer = _gl.createFramebuffer();

				if ( renderTarget.shareDepthFrom ) {

					renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;

				} else {

					renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();

				}

				_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );

				_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

				setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );

				if ( renderTarget.shareDepthFrom ) {

					if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					}

				} else {

					setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			}

			// Release everything

			if ( isCube ) {

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				_gl.bindTexture( _gl.TEXTURE_2D, null );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		var framebuffer, width, height, vx, vy;

		if ( renderTarget ) {

			if ( isCube ) {

				framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];

			} else {

				framebuffer = renderTarget.__webglFramebuffer;

			}

			width = renderTarget.width;
			height = renderTarget.height;

			vx = 0;
			vy = 0;

		} else {

			framebuffer = null;

			width = _viewportWidth;
			height = _viewportHeight;

			vx = _viewportX;
			vy = _viewportY;

		}

		if ( framebuffer !== _currentFramebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.viewport( vx, vy, width, height );

			_currentFramebuffer = framebuffer;

		}

		_currentWidth = width;
		_currentHeight = height;

	};

	function updateRenderTargetMipmap ( renderTarget ) {

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_2D );
			_gl.bindTexture( _gl.TEXTURE_2D, null );

		}

	};

	// Fallback filters for non-power-of-2 textures

	function filterFallback ( f ) {

		if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	};

	// Map three.js constants to WebGL constants

	function paramThreeToGL ( p ) {

		if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
		if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
		if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

		if ( p === THREE.NearestFilter ) return _gl.NEAREST;
		if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
		if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

		if ( p === THREE.LinearFilter ) return _gl.LINEAR;
		if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
		if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

		if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
		if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

		if ( p === THREE.ByteType ) return _gl.BYTE;
		if ( p === THREE.ShortType ) return _gl.SHORT;
		if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
		if ( p === THREE.IntType ) return _gl.INT;
		if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
		if ( p === THREE.FloatType ) return _gl.FLOAT;

		if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
		if ( p === THREE.RGBFormat ) return _gl.RGB;
		if ( p === THREE.RGBAFormat ) return _gl.RGBA;
		if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
		if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

		if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
		if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
		if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

		if ( p === THREE.ZeroFactor ) return _gl.ZERO;
		if ( p === THREE.OneFactor ) return _gl.ONE;
		if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
		if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
		if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
		if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
		if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
		if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

		if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
		if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
		if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

		if ( _glExtensionCompressedTextureS3TC !== undefined ) {

			if ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;
			if ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;

		}

		return 0;

	};

	// Allocations

	function allocateBones ( object ) {

		if ( _supportsBoneTextures && object && object.useVertexTexture ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader
			//   to be used with multiple objects )
			//
			// 	- leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = nVertexMatrices;

			if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

				maxBones = Math.min( object.bones.length, maxBones );

				if ( maxBones < object.bones.length ) {

					console.warn( "WebGLRenderer: too many bones - " + object.bones.length + ", this GPU supports just " + maxBones + " (try OpenGL instead of ANGLE)" );

				}

			}

			return maxBones;

		}

	};

	function allocateLights( lights ) {

		var dirLights = 0;
		var pointLights = 0;
		var spotLights = 0;
		var hemiLights = 0;

		for ( var l = 0, ll = lights.length; l < ll; l ++ ) {

			var light = lights[ l ];

			if ( light.onlyShadow ) continue;

			if ( light instanceof THREE.DirectionalLight ) dirLights ++;
			if ( light instanceof THREE.PointLight ) pointLights ++;
			if ( light instanceof THREE.SpotLight ) spotLights ++;
			if ( light instanceof THREE.HemisphereLight ) hemiLights ++;

		}

		return { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };

	};

	function allocateShadows( lights ) {

		var maxShadows = 0;

		for ( var l = 0, ll = lights.length; l < ll; l++ ) {

			var light = lights[ l ];

			if ( ! light.castShadow ) continue;

			if ( light instanceof THREE.SpotLight ) maxShadows ++;
			if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;

		}

		return maxShadows;

	};

	// Initialization

	function initGL() {

		try {

			var attributes = {
				alpha: _alpha,
				premultipliedAlpha: _premultipliedAlpha,
				antialias: _antialias,
				stencil: _stencil,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				throw 'Error creating WebGL context.';

			}

		} catch ( error ) {

			console.error( error );

		}

		_glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );
		_glExtensionTextureFloatLinear = _gl.getExtension( 'OES_texture_float_linear' );
		_glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );

		_glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );

		_glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );

		if ( ! _glExtensionTextureFloat ) {

			console.log( 'THREE.WebGLRenderer: Float textures not supported.' );

		}

		if ( ! _glExtensionStandardDerivatives ) {

			console.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );

		}

		if ( ! _glExtensionTextureFilterAnisotropic ) {

			console.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );

		}

		if ( ! _glExtensionCompressedTextureS3TC ) {

			console.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );

		}

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function() {

				return {
					"rangeMin"  : 1,
					"rangeMax"  : 1,
					"precision" : 1
				};

			}
		}

	};

	function setDefaultGLState () {

		_gl.clearColor( 0, 0, 0, 1 );
		_gl.clearDepth( 1 );
		_gl.clearStencil( 0 );

		_gl.enable( _gl.DEPTH_TEST );
		_gl.depthFunc( _gl.LEQUAL );

		_gl.frontFace( _gl.CCW );
		_gl.cullFace( _gl.BACK );
		_gl.enable( _gl.CULL_FACE );

		_gl.enable( _gl.BLEND );
		_gl.blendEquation( _gl.FUNC_ADD );
		_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );

		_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );
		
		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	// default plugins (order is important)

	this.shadowMapPlugin = new THREE.ShadowMapPlugin();
	this.addPrePlugin( this.shadowMapPlugin );

	this.addPostPlugin( new THREE.SpritePlugin() );
	this.addPostPlugin( new THREE.LensFlarePlugin() );

};

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.WebGLRenderTarget = function ( width, height, options ) {

	this.width = width;
	this.height = height;

	options = options || {};

	this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
	this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
	this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

	this.generateMipmaps = true;

	this.shareDepthFrom = null;

};

THREE.WebGLRenderTarget.prototype = {

	constructor: THREE.WebGLRenderTarget,

	clone: function () {

		var tmp = new THREE.WebGLRenderTarget( this.width, this.height );

		tmp.wrapS = this.wrapS;
		tmp.wrapT = this.wrapT;

		tmp.magFilter = this.magFilter;
		tmp.minFilter = this.minFilter;

		tmp.anisotropy = this.anisotropy;

		tmp.offset.copy( this.offset );
		tmp.repeat.copy( this.repeat );

		tmp.format = this.format;
		tmp.type = this.type;

		tmp.depthBuffer = this.depthBuffer;
		tmp.stencilBuffer = this.stencilBuffer;

		tmp.generateMipmaps = this.generateMipmaps;

		tmp.shareDepthFrom = this.shareDepthFrom;

		return tmp;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );

/**
 * @author alteredq / http://alteredqualia.com
 */

THREE.WebGLRenderTargetCube = function ( width, height, options ) {

	THREE.WebGLRenderTarget.call( this, width, height, options );

	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

};

THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableVertex = function () {

	this.position = new THREE.Vector3();
	this.positionWorld = new THREE.Vector3();
	this.positionScreen = new THREE.Vector4();

	this.visible = true;

};

THREE.RenderableVertex.prototype.copy = function ( vertex ) {

	this.positionWorld.copy( vertex.positionWorld );
	this.positionScreen.copy( vertex.positionScreen );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableFace3 = function () {

	this.id = 0;

	this.v1 = new THREE.RenderableVertex();
	this.v2 = new THREE.RenderableVertex();
	this.v3 = new THREE.RenderableVertex();

	this.centroidModel = new THREE.Vector3();

	this.normalModel = new THREE.Vector3();
	this.normalModelView = new THREE.Vector3();

	this.vertexNormalsLength = 0;
	this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
	this.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];

	this.color = null;
	this.material = null;
	this.uvs = [[]];

	this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableObject = function () {

	this.id = 0;

	this.object = null;
	this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableSprite = function () {

	this.id = 0;

	this.object = null;

	this.x = 0;
	this.y = 0;
	this.z = 0;

	this.rotation = 0;
	this.scale = new THREE.Vector2();

	this.material = null;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableLine = function () {

	this.id = 0;

	this.v1 = new THREE.RenderableVertex();
	this.v2 = new THREE.RenderableVertex();

	this.vertexColors = [ new THREE.Color(), new THREE.Color() ];
	this.material = null;

	this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.GeometryUtils = {

	// Merge two geometries or geometry and geometry from object (using object's transform)

	merge: function ( geometry1, object2 /* mesh | geometry */, materialIndexOffset ) {

		var matrix, normalMatrix,
		vertexOffset = geometry1.vertices.length,
		uvPosition = geometry1.faceVertexUvs[ 0 ].length,
		geometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,
		vertices1 = geometry1.vertices,
		vertices2 = geometry2.vertices,
		faces1 = geometry1.faces,
		faces2 = geometry2.faces,
		uvs1 = geometry1.faceVertexUvs[ 0 ],
		uvs2 = geometry2.faceVertexUvs[ 0 ];

		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

		if ( object2 instanceof THREE.Mesh ) {

			object2.matrixAutoUpdate && object2.updateMatrix();

			matrix = object2.matrix;

			normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix ) vertexCopy.applyMatrix4( matrix );

			vertices1.push( vertexCopy );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
			faceVertexNormals = face.vertexNormals,
			faceVertexColors = face.vertexColors;

			faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faceCopy.centroid.copy( face.centroid );

			if ( matrix ) {

				faceCopy.centroid.applyMatrix4( matrix );

			}

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			uvs1.push( uvCopy );

		}

	},

	// Get random point in triangle (via barycentric coordinates)
	// 	(uniform distribution)
	// 	http://www.cgafaq.info/wiki/Random_Point_In_Triangle

	randomPointInTriangle: function () {

		var vector = new THREE.Vector3();

		return function ( vectorA, vectorB, vectorC ) {

			var point = new THREE.Vector3();

			var a = THREE.Math.random16();
			var b = THREE.Math.random16();

			if ( ( a + b ) > 1 ) {

				a = 1 - a;
				b = 1 - b;

			}

			var c = 1 - a - b;

			point.copy( vectorA );
			point.multiplyScalar( a );

			vector.copy( vectorB );
			vector.multiplyScalar( b );

			point.add( vector );

			vector.copy( vectorC );
			vector.multiplyScalar( c );

			point.add( vector );

			return point;

		};

	}(),

	// Get random point in face (triangle / quad)
	// (uniform distribution)

	randomPointInFace: function ( face, geometry, useCachedAreas ) {

		var vA, vB, vC, vD;

		vA = geometry.vertices[ face.a ];
		vB = geometry.vertices[ face.b ];
		vC = geometry.vertices[ face.c ];

		return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );

	},

	// Get uniformly distributed random points in mesh
	// 	- create array with cumulative sums of face areas
	//  - pick random number from 0 to total area
	//  - find corresponding place in area array by binary search
	//	- get random point in face

	randomPointsInGeometry: function ( geometry, n ) {

		var face, i,
			faces = geometry.faces,
			vertices = geometry.vertices,
			il = faces.length,
			totalArea = 0,
			cumulativeAreas = [],
			vA, vB, vC, vD;

		// precompute face areas

		for ( i = 0; i < il; i ++ ) {

			face = faces[ i ];

			vA = vertices[ face.a ];
			vB = vertices[ face.b ];
			vC = vertices[ face.c ];

			face._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );

			totalArea += face._area;

			cumulativeAreas[ i ] = totalArea;

		}

		// binary search cumulative areas array

		function binarySearchIndices( value ) {

			function binarySearch( start, end ) {

				// return closest larger index
				// if exact number is not found

				if ( end < start )
					return start;

				var mid = start + Math.floor( ( end - start ) / 2 );

				if ( cumulativeAreas[ mid ] > value ) {

					return binarySearch( start, mid - 1 );

				} else if ( cumulativeAreas[ mid ] < value ) {

					return binarySearch( mid + 1, end );

				} else {

					return mid;

				}

			}

			var result = binarySearch( 0, cumulativeAreas.length - 1 )
			return result;

		}

		// pick random face weighted by face area

		var r, index,
			result = [];

		var stats = {};

		for ( i = 0; i < n; i ++ ) {

			r = THREE.Math.random16() * totalArea;

			index = binarySearchIndices( r );

			result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );

			if ( ! stats[ index ] ) {

				stats[ index ] = 1;

			} else {

				stats[ index ] += 1;

			}

		}

		return result;

	},

	// Get triangle area (half of parallelogram)
	//	http://mathworld.wolfram.com/TriangleArea.html

	triangleArea: function () {

		var vector1 = new THREE.Vector3();
		var vector2 = new THREE.Vector3();

		return function ( vectorA, vectorB, vectorC ) {

			vector1.subVectors( vectorB, vectorA );
			vector2.subVectors( vectorC, vectorA );
			vector1.cross( vector2 );

			return 0.5 * vector1.length();

		};

	}(),

	// Center geometry so that 0,0,0 is in center of bounding box

	center: function ( geometry ) {

		geometry.computeBoundingBox();

		var bb = geometry.boundingBox;

		var offset = new THREE.Vector3();

		offset.addVectors( bb.min, bb.max );
		offset.multiplyScalar( -0.5 );

		geometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );
		geometry.computeBoundingBox();

		return offset;

	},

	triangulateQuads: function ( geometry ) {

		var i, il, j, jl;

		var faces = [];
		var faceVertexUvs = [];

		for ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

			faceVertexUvs[ i ] = [];

		}

		for ( i = 0, il = geometry.faces.length; i < il; i ++ ) {

			var face = geometry.faces[ i ];

			faces.push( face );

			for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

				faceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );

			}

		}

		geometry.faces = faces;
		geometry.faceVertexUvs = faceVertexUvs;

		geometry.computeCentroids();
		geometry.computeFaceNormals();
		geometry.computeVertexNormals();

		if ( geometry.hasTangents ) geometry.computeTangents();

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageUtils = {

	crossOrigin: undefined,

	loadTexture: function ( url, mapping, onLoad, onError ) {

		var loader = new THREE.ImageLoader();
		loader.crossOrigin = this.crossOrigin;

		var texture = new THREE.Texture( undefined, mapping );

		var image = loader.load( url, function () {

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture );

		} );

		texture.image = image;
		texture.sourceFile = url;

		return texture;

	},

	loadCompressedTexture: function ( url, mapping, onLoad, onError ) {

		var texture = new THREE.CompressedTexture();
		texture.mapping = mapping;

		var request = new XMLHttpRequest();

		request.onload = function () {

			var buffer = request.response;
			var dds = THREE.ImageUtils.parseDDS( buffer, true );

			texture.format = dds.format;

			texture.mipmaps = dds.mipmaps;
			texture.image.width = dds.width;
			texture.image.height = dds.height;

			// gl.generateMipmap fails for compressed textures
			// mipmaps must be embedded in the DDS file
			// or texture filters must not use mipmapping

			texture.generateMipmaps = false;

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture );

		}

		request.onerror = onError;

		request.open( 'GET', url, true );
		request.responseType = "arraybuffer";
		request.send( null );

		return texture;

	},

	loadTextureCube: function ( array, mapping, onLoad, onError ) {

		var images = [];
		images.loadCount = 0;

		var texture = new THREE.Texture();
		texture.image = images;
		if ( mapping !== undefined ) texture.mapping = mapping;

		// no flipping needed for cube textures

		texture.flipY = false;

		for ( var i = 0, il = array.length; i < il; ++ i ) {

			var cubeImage = new Image();
			images[ i ] = cubeImage;

			cubeImage.onload = function () {

				images.loadCount += 1;

				if ( images.loadCount === 6 ) {

					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			};

			cubeImage.onerror = onError;

			cubeImage.crossOrigin = this.crossOrigin;
			cubeImage.src = array[ i ];

		}

		return texture;

	},

	loadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {

		var images = [];
		images.loadCount = 0;

		var texture = new THREE.CompressedTexture();
		texture.image = images;
		if ( mapping !== undefined ) texture.mapping = mapping;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		texture.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		texture.generateMipmaps = false;

		var generateCubeFaceCallback = function ( rq, img ) {

			return function () {

				var buffer = rq.response;
				var dds = THREE.ImageUtils.parseDDS( buffer, true );

				img.format = dds.format;

				img.mipmaps = dds.mipmaps;
				img.width = dds.width;
				img.height = dds.height;

				images.loadCount += 1;

				if ( images.loadCount === 6 ) {

					texture.format = dds.format;
					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			}

		}

		// compressed cubemap textures as 6 separate DDS files

		if ( array instanceof Array ) {

			for ( var i = 0, il = array.length; i < il; ++ i ) {

				var cubeImage = {};
				images[ i ] = cubeImage;

				var request = new XMLHttpRequest();

				request.onload = generateCubeFaceCallback( request, cubeImage );
				request.onerror = onError;

				var url = array[ i ];

				request.open( 'GET', url, true );
				request.responseType = "arraybuffer";
				request.send( null );

			}

		// compressed cubemap texture stored in a single DDS file

		} else {

			var url = array;
			var request = new XMLHttpRequest();

			request.onload = function( ) {

				var buffer = request.response;
				var dds = THREE.ImageUtils.parseDDS( buffer, true );

				if ( dds.isCubemap ) {

					var faces = dds.mipmaps.length / dds.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < dds.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );
							images[ f ].format = dds.format;
							images[ f ].width = dds.width;
							images[ f ].height = dds.height;

						}

					}

					texture.format = dds.format;
					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			}

			request.onerror = onError;

			request.open( 'GET', url, true );
			request.responseType = "arraybuffer";
			request.send( null );

		}

		return texture;

	},

	loadDDSTexture: function ( url, mapping, onLoad, onError ) {

		var images = [];
		images.loadCount = 0;

		var texture = new THREE.CompressedTexture();
		texture.image = images;
		if ( mapping !== undefined ) texture.mapping = mapping;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		texture.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		texture.generateMipmaps = false;

		{
			var request = new XMLHttpRequest();

			request.onload = function( ) {

				var buffer = request.response;
				var dds = THREE.ImageUtils.parseDDS( buffer, true );

				if ( dds.isCubemap ) {

					var faces = dds.mipmaps.length / dds.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < dds.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );
							images[ f ].format = dds.format;
							images[ f ].width = dds.width;
							images[ f ].height = dds.height;

						}

					}


				} else {
					texture.image.width = dds.width;
					texture.image.height = dds.height;
					texture.mipmaps = dds.mipmaps;
				}

				texture.format = dds.format;
				texture.needsUpdate = true;
				if ( onLoad ) onLoad( texture );

			}

			request.onerror = onError;

			request.open( 'GET', url, true );
			request.responseType = "arraybuffer";
			request.send( null );

		}

		return texture;

	},

	parseDDS: function ( buffer, loadMipmaps ) {

		var dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };

		// Adapted from @toji's DDS utils
		//	https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js

		// All values and structures referenced from:
		// http://msdn.microsoft.com/en-us/library/bb943991.aspx/

		var DDS_MAGIC = 0x20534444;

		var DDSD_CAPS = 0x1,
			DDSD_HEIGHT = 0x2,
			DDSD_WIDTH = 0x4,
			DDSD_PITCH = 0x8,
			DDSD_PIXELFORMAT = 0x1000,
			DDSD_MIPMAPCOUNT = 0x20000,
			DDSD_LINEARSIZE = 0x80000,
			DDSD_DEPTH = 0x800000;

		var DDSCAPS_COMPLEX = 0x8,
			DDSCAPS_MIPMAP = 0x400000,
			DDSCAPS_TEXTURE = 0x1000;

		var DDSCAPS2_CUBEMAP = 0x200,
			DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
			DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
			DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
			DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
			DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
			DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
			DDSCAPS2_VOLUME = 0x200000;

		var DDPF_ALPHAPIXELS = 0x1,
			DDPF_ALPHA = 0x2,
			DDPF_FOURCC = 0x4,
			DDPF_RGB = 0x40,
			DDPF_YUV = 0x200,
			DDPF_LUMINANCE = 0x20000;

		function fourCCToInt32( value ) {

			return value.charCodeAt(0) +
				(value.charCodeAt(1) << 8) +
				(value.charCodeAt(2) << 16) +
				(value.charCodeAt(3) << 24);

		}

		function int32ToFourCC( value ) {

			return String.fromCharCode(
				value & 0xff,
				(value >> 8) & 0xff,
				(value >> 16) & 0xff,
				(value >> 24) & 0xff
			);
		}

		function loadARGBMip( buffer, dataOffset, width, height ) {
			var dataLength = width*height*4;
			var srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );
			var byteArray = new Uint8Array( dataLength );
			var dst = 0;
			var src = 0;
			for ( var y = 0; y < height; y++ ) {
				for ( var x = 0; x < width; x++ ) {
					var b = srcBuffer[src]; src++;
					var g = srcBuffer[src]; src++;
					var r = srcBuffer[src]; src++;
					var a = srcBuffer[src]; src++;
					byteArray[dst] = r; dst++;	//r
					byteArray[dst] = g; dst++;	//g
					byteArray[dst] = b; dst++;	//b
					byteArray[dst] = a; dst++;	//a
				}
			}
			return byteArray;
		}

		var FOURCC_DXT1 = fourCCToInt32("DXT1");
		var FOURCC_DXT3 = fourCCToInt32("DXT3");
		var FOURCC_DXT5 = fourCCToInt32("DXT5");

		var headerLengthInt = 31; // The header length in 32 bit ints

		// Offsets into the header array

		var off_magic = 0;

		var off_size = 1;
		var off_flags = 2;
		var off_height = 3;
		var off_width = 4;

		var off_mipmapCount = 7;

		var off_pfFlags = 20;
		var off_pfFourCC = 21;
		var off_RGBBitCount = 22;
		var off_RBitMask = 23;
		var off_GBitMask = 24;
		var off_BBitMask = 25;
		var off_ABitMask = 26;

		var off_caps = 27;
		var off_caps2 = 28;
		var off_caps3 = 29;
		var off_caps4 = 30;

		// Parse header

		var header = new Int32Array( buffer, 0, headerLengthInt );

		if ( header[ off_magic ] !== DDS_MAGIC ) {

			console.error( "ImageUtils.parseDDS(): Invalid magic number in DDS header" );
			return dds;

		}

		if ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {

			console.error( "ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code" );
			return dds;

		}

		var blockBytes;

		var fourCC = header[ off_pfFourCC ];

		var isRGBAUncompressed = false;

		switch ( fourCC ) {

			case FOURCC_DXT1:

				blockBytes = 8;
				dds.format = THREE.RGB_S3TC_DXT1_Format;
				break;

			case FOURCC_DXT3:

				blockBytes = 16;
				dds.format = THREE.RGBA_S3TC_DXT3_Format;
				break;

			case FOURCC_DXT5:

				blockBytes = 16;
				dds.format = THREE.RGBA_S3TC_DXT5_Format;
				break;

			default:

				if( header[off_RGBBitCount] ==32 
					&& header[off_RBitMask]&0xff0000
					&& header[off_GBitMask]&0xff00 
					&& header[off_BBitMask]&0xff
					&& header[off_ABitMask]&0xff000000  ) {
					isRGBAUncompressed = true;
					blockBytes = 64;
					dds.format = THREE.RGBAFormat;
				} else {
					console.error( "ImageUtils.parseDDS(): Unsupported FourCC code: ", int32ToFourCC( fourCC ) );
					return dds;
				}
		}

		dds.mipmapCount = 1;

		if ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {

			dds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );

		}

		//TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.

		dds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;

		dds.width = header[ off_width ];
		dds.height = header[ off_height ];

		var dataOffset = header[ off_size ] + 4;

		// Extract mipmaps buffers

		var width = dds.width;
		var height = dds.height;

		var faces = dds.isCubemap ? 6 : 1;

		for ( var face = 0; face < faces; face ++ ) {

			for ( var i = 0; i < dds.mipmapCount; i ++ ) {

				if( isRGBAUncompressed ) {
					var byteArray = loadARGBMip( buffer, dataOffset, width, height );
					var dataLength = byteArray.length;
				} else {
					var dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;
					var byteArray = new Uint8Array( buffer, dataOffset, dataLength );
				}
				
				var mipmap = { "data": byteArray, "width": width, "height": height };
				dds.mipmaps.push( mipmap );

				dataOffset += dataLength;

				width = Math.max( width * 0.5, 1 );
				height = Math.max( height * 0.5, 1 );

			}

			width = dds.width;
			height = dds.height;

		}

		return dds;

	},

	getNormalMap: function ( image, depth ) {

		// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/

		var cross = function ( a, b ) {

			return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];

		}

		var subtract = function ( a, b ) {

			return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];

		}

		var normalize = function ( a ) {

			var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );
			return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];

		}

		depth = depth | 1;

		var width = image.width;
		var height = image.height;

		var canvas = document.createElement( 'canvas' );
		canvas.width = width;
		canvas.height = height;

		var context = canvas.getContext( '2d' );
		context.drawImage( image, 0, 0 );

		var data = context.getImageData( 0, 0, width, height ).data;
		var imageData = context.createImageData( width, height );
		var output = imageData.data;

		for ( var x = 0; x < width; x ++ ) {

			for ( var y = 0; y < height; y ++ ) {

				var ly = y - 1 < 0 ? 0 : y - 1;
				var uy = y + 1 > height - 1 ? height - 1 : y + 1;
				var lx = x - 1 < 0 ? 0 : x - 1;
				var ux = x + 1 > width - 1 ? width - 1 : x + 1;

				var points = [];
				var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];
				points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );
				points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );

				var normals = [];
				var num_points = points.length;

				for ( var i = 0; i < num_points; i ++ ) {

					var v1 = points[ i ];
					var v2 = points[ ( i + 1 ) % num_points ];
					v1 = subtract( v1, origin );
					v2 = subtract( v2, origin );
					normals.push( normalize( cross( v1, v2 ) ) );

				}

				var normal = [ 0, 0, 0 ];

				for ( var i = 0; i < normals.length; i ++ ) {

					normal[ 0 ] += normals[ i ][ 0 ];
					normal[ 1 ] += normals[ i ][ 1 ];
					normal[ 2 ] += normals[ i ][ 2 ];

				}

				normal[ 0 ] /= normals.length;
				normal[ 1 ] /= normals.length;
				normal[ 2 ] /= normals.length;

				var idx = ( y * width + x ) * 4;

				output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;
				output[ idx + 3 ] = 255;

			}

		}

		context.putImageData( imageData, 0, 0 );

		return canvas;

	},

	generateDataTexture: function ( width, height, color ) {

		var size = width * height;
		var data = new Uint8Array( 3 * size );

		var r = Math.floor( color.r * 255 );
		var g = Math.floor( color.g * 255 );
		var b = Math.floor( color.b * 255 );

		for ( var i = 0; i < size; i ++ ) {

			data[ i * 3 ] 	  = r;
			data[ i * 3 + 1 ] = g;
			data[ i * 3 + 2 ] = b;

		}

		var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );
		texture.needsUpdate = true;

		return texture;

	}

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneUtils = {

	createMultiMaterialObject: function ( geometry, materials ) {

		var group = new THREE.Object3D();

		for ( var i = 0, l = materials.length; i < l; i ++ ) {

			group.add( new THREE.Mesh( geometry, materials[ i ] ) );

		}

		return group;

	},

	detach : function ( child, parent, scene ) {

		child.applyMatrix( parent.matrixWorld );
		parent.remove( child );
		scene.add( child );

	},

	attach: function ( child, scene, parent ) {

		var matrixWorldInverse = new THREE.Matrix4();
		matrixWorldInverse.getInverse( parent.matrixWorld );
		child.applyMatrix( matrixWorldInverse );

		scene.remove( child );
		parent.add( child );

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For Text operations in three.js (See TextGeometry)
 *
 * It uses techniques used in:
 *
 * 	typeface.js and canvastext
 * 		For converting fonts and rendering with javascript
 *		http://typeface.neocracy.org
 *
 *	Triangulation ported from AS3
 *		Simple Polygon Triangulation
 *		http://actionsnippet.com/?p=1462
 *
 * 	A Method to triangulate shapes with holes
 *		http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/
 *
 */

THREE.FontUtils = {

	faces : {},

	// Just for now. face[weight][style]

	face : "helvetiker",
	weight: "normal",
	style : "normal",
	size : 150,
	divisions : 10,

	getFace : function() {

		return this.faces[ this.face ][ this.weight ][ this.style ];

	},

	loadFace : function( data ) {

		var family = data.familyName.toLowerCase();

		var ThreeFont = this;

		ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};

		ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};
		ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		return data;

	},

	drawText : function( text ) {

		var characterPts = [], allPts = [];

		// RenderText

		var i, p,
			face = this.getFace(),
			scale = this.size / face.resolution,
			offset = 0,
			chars = String( text ).split( '' ),
			length = chars.length;

		var fontPaths = [];

		for ( i = 0; i < length; i ++ ) {

			var path = new THREE.Path();

			var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );
			offset += ret.offset;

			fontPaths.push( ret.path );

		}

		// get the width

		var width = offset / 2;
		//
		// for ( p = 0; p < allPts.length; p++ ) {
		//
		// 	allPts[ p ].x -= width;
		//
		// }

		//var extract = this.extractPoints( allPts, characterPts );
		//extract.contour = allPts;

		//extract.paths = fontPaths;
		//extract.offset = width;

		return { paths : fontPaths, offset : width };

	},




	extractGlyphPoints : function( c, face, scale, offset, path ) {

		var pts = [];

		var i, i2, divisions,
			outline, action, length,
			scaleX, scaleY,
			x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,
			laste,
			glyph = face.glyphs[ c ] || face.glyphs[ '?' ];

		if ( !glyph ) return;

		if ( glyph.o ) {

			outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
			length = outline.length;

			scaleX = scale;
			scaleY = scale;

			for ( i = 0; i < length; ) {

				action = outline[ i ++ ];

				//console.log( action );

				switch( action ) {

				case 'm':

					// Move To

					x = outline[ i++ ] * scaleX + offset;
					y = outline[ i++ ] * scaleY;

					path.moveTo( x, y );
					break;

				case 'l':

					// Line To

					x = outline[ i++ ] * scaleX + offset;
					y = outline[ i++ ] * scaleY;
					path.lineTo(x,y);
					break;

				case 'q':

					// QuadraticCurveTo

					cpx  = outline[ i++ ] * scaleX + offset;
					cpy  = outline[ i++ ] * scaleY;
					cpx1 = outline[ i++ ] * scaleX + offset;
					cpy1 = outline[ i++ ] * scaleY;

					path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
							var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
					  }

				  }

				  break;

				case 'b':

					// Cubic Bezier Curve

					cpx  = outline[ i++ ] *  scaleX + offset;
					cpy  = outline[ i++ ] *  scaleY;
					cpx1 = outline[ i++ ] *  scaleX + offset;
					cpy1 = outline[ i++ ] * -scaleY;
					cpx2 = outline[ i++ ] *  scaleX + offset;
					cpy2 = outline[ i++ ] * -scaleY;

					path.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
							var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

						}

					}

					break;

				}

			}
		}



		return { offset: glyph.ha*scale, path:path};
	}

};


THREE.FontUtils.generateShapes = function( text, parameters ) {

	// Parameters 

	parameters = parameters || {};

	var size = parameters.size !== undefined ? parameters.size : 100;
	var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;

	var font = parameters.font !== undefined ? parameters.font : "helvetiker";
	var weight = parameters.weight !== undefined ? parameters.weight : "normal";
	var style = parameters.style !== undefined ? parameters.style : "normal";

	THREE.FontUtils.size = size;
	THREE.FontUtils.divisions = curveSegments;

	THREE.FontUtils.face = font;
	THREE.FontUtils.weight = weight;
	THREE.FontUtils.style = style;

	// Get a Font data json object

	var data = THREE.FontUtils.drawText( text );

	var paths = data.paths;
	var shapes = [];

	for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

		Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

	}

	return shapes;

};


/**
 * This code is a quick port of code written in C++ which was submitted to
 * flipcode.com by John W. Ratcliff  // July 22, 2000
 * See original code and more information here:
 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
 *
 * ported to actionscript by Zevan Rosser
 * www.actionsnippet.com
 *
 * ported to javascript by Joshua Koo
 * http://www.lab4games.net/zz85/blog
 *
 */


( function( namespace ) {

	var EPSILON = 0.0000000001;

	// takes in an contour array and returns

	var process = function( contour, indices ) {

		var n = contour.length;

		if ( n < 3 ) return null;

		var result = [],
			verts = [],
			vertIndices = [];

		/* we want a counter-clockwise polygon in verts */

		var u, v, w;

		if ( area( contour ) > 0.0 ) {

			for ( v = 0; v < n; v++ ) verts[ v ] = v;

		} else {

			for ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;

		}

		var nv = n;

		/*  remove nv - 2 vertices, creating 1 triangle every time */

		var count = 2 * nv;   /* error detection */

		for( v = nv - 1; nv > 2; ) {

			/* if we loop, it is probably a non-simple polygon */

			if ( ( count-- ) <= 0 ) {

				//** Triangulate: ERROR - probable bad polygon!

				//throw ( "Warning, unable to triangulate polygon!" );
				//return null;
				// Sometimes warning is fine, especially polygons are triangulated in reverse.
				console.log( "Warning, unable to triangulate polygon!" );

				if ( indices ) return vertIndices;
				return result;

			}

			/* three consecutive vertices in current polygon, <u,v,w> */

			u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
			v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
			w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

			if ( snip( contour, u, v, w, nv, verts ) ) {

				var a, b, c, s, t;

				/* true names of the vertices */

				a = verts[ u ];
				b = verts[ v ];
				c = verts[ w ];

				/* output Triangle */

				result.push( [ contour[ a ],
					contour[ b ],
					contour[ c ] ] );


				vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

				/* remove v from the remaining polygon */

				for( s = v, t = v + 1; t < nv; s++, t++ ) {

					verts[ s ] = verts[ t ];

				}

				nv--;

				/* reset error detection counter */

				count = 2 * nv;

			}

		}

		if ( indices ) return vertIndices;
		return result;

	};

	// calculate area of the contour polygon

	var area = function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for( var p = n - 1, q = 0; q < n; p = q++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	};

	var snip = function ( contour, u, v, w, n, verts ) {

		var p;
		var ax, ay, bx, by;
		var cx, cy, px, py;

		ax = contour[ verts[ u ] ].x;
		ay = contour[ verts[ u ] ].y;

		bx = contour[ verts[ v ] ].x;
		by = contour[ verts[ v ] ].y;

		cx = contour[ verts[ w ] ].x;
		cy = contour[ verts[ w ] ].y;

		if ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;

		var aX, aY, bX, bY, cX, cY;
		var apx, apy, bpx, bpy, cpx, cpy;
		var cCROSSap, bCROSScp, aCROSSbp;

		aX = cx - bx;  aY = cy - by;
		bX = ax - cx;  bY = ay - cy;
		cX = bx - ax;  cY = by - ay;

		for ( p = 0; p < n; p++ ) {

			if( (p === u) || (p === v) || (p === w) ) continue;

			px = contour[ verts[ p ] ].x
			py = contour[ verts[ p ] ].y

			apx = px - ax;  apy = py - ay;
			bpx = px - bx;  bpy = py - by;
			cpx = px - cx;  cpy = py - cy;

			// see if p is inside triangle abc

			aCROSSbp = aX*bpy - aY*bpx;
			cCROSSap = cX*apy - cY*apx;
			bCROSScp = bX*cpy - bY*cpx;

			if ( (aCROSSbp >= -EPSILON) && (bCROSScp >= -EPSILON) && (cCROSSap >= -EPSILON) ) return false;

		}

		return true;

	};


	namespace.Triangulate = process;
	namespace.Triangulate.area = area;

	return namespace;

})(THREE.FontUtils);

// To use the typeface.js face files, hook up the API
self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };
THREE.typeface_js = self._typeface_js;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of Curve methods
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTagentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following classes subclasses THREE.Curve:
 *
 * -- 2d classes --
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.CubicBezierCurve
 * THREE.SplineCurve
 * THREE.ArcCurve
 * THREE.EllipseCurve
 *
 * -- 3d classes --
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 * THREE.CubicBezierCurve3
 * THREE.SplineCurve3
 * THREE.ClosedSplineCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

THREE.Curve = function () {

};

// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]

THREE.Curve.prototype.getPoint = function ( t ) {

	console.log( "Warning, getPoint() not implemented!" );
	return null;

};

// Get point at relative position in curve according to arc length
// - u [0 .. 1]

THREE.Curve.prototype.getPointAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getPoint( t );

};

// Get sequence of points using getPoint( t )

THREE.Curve.prototype.getPoints = function ( divisions ) {

	if ( !divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPoint( d / divisions ) );

	}

	return pts;

};

// Get sequence of points using getPointAt( u )

THREE.Curve.prototype.getSpacedPoints = function ( divisions ) {

	if ( !divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPointAt( d / divisions ) );

	}

	return pts;

};

// Get total curve arc length

THREE.Curve.prototype.getLength = function () {

	var lengths = this.getLengths();
	return lengths[ lengths.length - 1 ];

};

// Get list of cumulative segment lengths

THREE.Curve.prototype.getLengths = function ( divisions ) {

	if ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;

	if ( this.cacheArcLengths
		&& ( this.cacheArcLengths.length == divisions + 1 )
		&& !this.needsUpdate) {

		//console.log( "cached", this.cacheArcLengths );
		return this.cacheArcLengths;

	}

	this.needsUpdate = false;

	var cache = [];
	var current, last = this.getPoint( 0 );
	var p, sum = 0;

	cache.push( 0 );

	for ( p = 1; p <= divisions; p ++ ) {

		current = this.getPoint ( p / divisions );
		sum += current.distanceTo( last );
		cache.push( sum );
		last = current;

	}

	this.cacheArcLengths = cache;

	return cache; // { sums: cache, sum:sum }; Sum is in the last element.

};


THREE.Curve.prototype.updateArcLengths = function() {
	this.needsUpdate = true;
	this.getLengths();
};

// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance

THREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {

	var arcLengths = this.getLengths();

	var i = 0, il = arcLengths.length;

	var targetArcLength; // The targeted u distance value to get

	if ( distance ) {

		targetArcLength = distance;

	} else {

		targetArcLength = u * arcLengths[ il - 1 ];

	}

	//var time = Date.now();

	// binary search for the index with largest value smaller than target u distance

	var low = 0, high = il - 1, comparison;

	while ( low <= high ) {

		i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

		comparison = arcLengths[ i ] - targetArcLength;

		if ( comparison < 0 ) {

			low = i + 1;
			continue;

		} else if ( comparison > 0 ) {

			high = i - 1;
			continue;

		} else {

			high = i;
			break;

			// DONE

		}

	}

	i = high;

	//console.log('b' , i, low, high, Date.now()- time);

	if ( arcLengths[ i ] == targetArcLength ) {

		var t = i / ( il - 1 );
		return t;

	}

	// we could get finer grain at lengths, or use simple interpolatation between two points

	var lengthBefore = arcLengths[ i ];
    var lengthAfter = arcLengths[ i + 1 ];

    var segmentLength = lengthAfter - lengthBefore;

    // determine where we are between the 'before' and 'after' points

    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

    // add that fractional amount to t

    var t = ( i + segmentFraction ) / ( il -1 );

	return t;

};

// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation

THREE.Curve.prototype.getTangent = function( t ) {

	var delta = 0.0001;
	var t1 = t - delta;
	var t2 = t + delta;

	// Capping in case of danger

	if ( t1 < 0 ) t1 = 0;
	if ( t2 > 1 ) t2 = 1;

	var pt1 = this.getPoint( t1 );
	var pt2 = this.getPoint( t2 );

	var vec = pt2.clone().sub(pt1);
	return vec.normalize();

};


THREE.Curve.prototype.getTangentAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getTangent( t );

};





/**************************************************************
 *	Utils
 **************************************************************/

THREE.Curve.Utils = {

	tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

		return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

	},

	// Puay Bing, thanks for helping with this derivative!

	tangentCubicBezier: function (t, p0, p1, p2, p3 ) {

		return -3 * p0 * (1 - t) * (1 - t)  +
			3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +
			6 * t *  p2 * (1-t) - 3 * t * t * p2 +
			3 * t * t * p3;
	},


	tangentSpline: function ( t, p0, p1, p2, p3 ) {

		// To check if my formulas are correct

		var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
		var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
		var h01 = -6 * t * t + 6 * t; 	// − 2t3 + 3t2
		var h11 = 3 * t * t - 2 * t;	// t3 − t2

		return h00 + h10 + h01 + h11;

	},

	// Catmull-Rom

	interpolate: function( p0, p1, p2, p3, t ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

};


// TODO: Transformation for Curves?

/**************************************************************
 *	3D Curves
 **************************************************************/

// A Factory method for creating new curve subclasses

THREE.Curve.create = function ( constructor, getPointFunc ) {

	constructor.prototype = Object.create( THREE.Curve.prototype );
	constructor.prototype.getPoint = getPointFunc;

	return constructor;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

THREE.CurvePath = function () {

	this.curves = [];
	this.bends = [];
	
	this.autoClose = false; // Automatically closes the path
};

THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );

THREE.CurvePath.prototype.add = function ( curve ) {

	this.curves.push( curve );

};

THREE.CurvePath.prototype.checkConnection = function() {
	// TODO
	// If the ending of curve is not connected to the starting
	// or the next curve, then, this is not a real path
};

THREE.CurvePath.prototype.closePath = function() {
	// TODO Test
	// and verify for vector3 (needs to implement equals)
	// Add a line curve if start and end of lines are not connected
	var startPoint = this.curves[0].getPoint(0);
	var endPoint = this.curves[this.curves.length-1].getPoint(1);
	
	if (!startPoint.equals(endPoint)) {
		this.curves.push( new THREE.LineCurve(endPoint, startPoint) );
	}
	
};

// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:

// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')

THREE.CurvePath.prototype.getPoint = function( t ) {

	var d = t * this.getLength();
	var curveLengths = this.getCurveLengths();
	var i = 0, diff, curve;

	// To think about boundaries points.

	while ( i < curveLengths.length ) {

		if ( curveLengths[ i ] >= d ) {

			diff = curveLengths[ i ] - d;
			curve = this.curves[ i ];

			var u = 1 - diff / curve.getLength();

			return curve.getPointAt( u );

			break;
		}

		i ++;

	}

	return null;

	// loop where sum != 0, sum > d , sum+1 <d

};

/*
THREE.CurvePath.prototype.getTangent = function( t ) {
};*/


// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength

THREE.CurvePath.prototype.getLength = function() {

	var lens = this.getCurveLengths();
	return lens[ lens.length - 1 ];

};

// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.

THREE.CurvePath.prototype.getCurveLengths = function() {

	// We use cache values if curves and cache array are same length

	if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {

		return this.cacheLengths;

	};

	// Get length of subsurve
	// Push sums into cached array

	var lengths = [], sums = 0;
	var i, il = this.curves.length;

	for ( i = 0; i < il; i ++ ) {

		sums += this.curves[ i ].getLength();
		lengths.push( sums );

	}

	this.cacheLengths = lengths;

	return lengths;

};



// Returns min and max coordinates, as well as centroid

THREE.CurvePath.prototype.getBoundingBox = function () {

	var points = this.getPoints();

	var maxX, maxY, maxZ;
	var minX, minY, minZ;

	maxX = maxY = Number.NEGATIVE_INFINITY;
	minX = minY = Number.POSITIVE_INFINITY;

	var p, i, il, sum;

	var v3 = points[0] instanceof THREE.Vector3;

	sum = v3 ? new THREE.Vector3() : new THREE.Vector2();

	for ( i = 0, il = points.length; i < il; i ++ ) {

		p = points[ i ];

		if ( p.x > maxX ) maxX = p.x;
		else if ( p.x < minX ) minX = p.x;

		if ( p.y > maxY ) maxY = p.y;
		else if ( p.y < minY ) minY = p.y;

		if ( v3 ) {

			if ( p.z > maxZ ) maxZ = p.z;
			else if ( p.z < minZ ) minZ = p.z;

		}

		sum.add( p );

	}

	var ret = {

		minX: minX,
		minY: minY,
		maxX: maxX,
		maxY: maxY,
		centroid: sum.divideScalar( il )

	};

	if ( v3 ) {

		ret.maxZ = maxZ;
		ret.minZ = minZ;

	}

	return ret;

};

/**************************************************************
 *	Create Geometries Helpers
 **************************************************************/

/// Generate geometry from path points (for Line or ParticleSystem objects)

THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

	var pts = this.getPoints( divisions, true );
	return this.createGeometry( pts );

};

// Generate geometry from equidistance sampling along the path

THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

	var pts = this.getSpacedPoints( divisions, true );
	return this.createGeometry( pts );

};

THREE.CurvePath.prototype.createGeometry = function( points ) {

	var geometry = new THREE.Geometry();

	for ( var i = 0; i < points.length; i ++ ) {

		geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );

	}

	return geometry;

};


/**************************************************************
 *	Bend / Wrap Helper Methods
 **************************************************************/

// Wrap path / Bend modifiers?

THREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {

	this.bends.push( bendpath );

};

THREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {

	var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints
	var i, il;

	if ( !bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

THREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {

	var oldPts = this.getSpacedPoints( segments );

	var i, il;

	if ( !bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

// This returns getPoints() bend/wrapped around the contour of a path.
// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html

THREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {

	var bounds = this.getBoundingBox();

	var i, il, p, oldX, oldY, xNorm;

	for ( i = 0, il = oldPts.length; i < il; i ++ ) {

		p = oldPts[ i ];

		oldX = p.x;
		oldY = p.y;

		xNorm = oldX / bounds.maxX;

		// If using actual distance, for length > path, requires line extrusions
		//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance

		xNorm = path.getUtoTmapping( xNorm, oldX );

		// check for out of bounds?

		var pathPt = path.getPoint( xNorm );
		var normal = path.getTangent( xNorm );
		normal.set( -normal.y, normal.x ).multiplyScalar( oldY );

		p.x = pathPt.x + normal.x;
		p.y = pathPt.y + normal.y;

	}

	return oldPts;

};


/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Gyroscope = function () {

	THREE.Object3D.call( this );

};

THREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );

THREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {

	this.matrixAutoUpdate && this.updateMatrix();

	// update matrixWorld

	if ( this.matrixWorldNeedsUpdate || force ) {

		if ( this.parent ) {

			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			this.matrixWorld.decompose( this.translationWorld, this.quaternionWorld, this.scaleWorld );
			this.matrix.decompose( this.translationObject, this.quaternionObject, this.scaleObject );

			this.matrixWorld.compose( this.translationWorld, this.quaternionObject, this.scaleWorld );


		} else {

			this.matrixWorld.copy( this.matrix );

		}


		this.matrixWorldNeedsUpdate = false;

		force = true;

	}

	// update children

	for ( var i = 0, l = this.children.length; i < l; i ++ ) {

		this.children[ i ].updateMatrixWorld( force );

	}

};

THREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.translationObject = new THREE.Vector3();
THREE.Gyroscope.prototype.quaternionWorld = new THREE.Quaternion();
THREE.Gyroscope.prototype.quaternionObject = new THREE.Quaternion();
THREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();


/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 *
 **/

THREE.Path = function ( points ) {

	THREE.CurvePath.call(this);

	this.actions = [];

	if ( points ) {

		this.fromPoints( points );

	}

};

THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );

THREE.PathActions = {

	MOVE_TO: 'moveTo',
	LINE_TO: 'lineTo',
	QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve
	BEZIER_CURVE_TO: 'bezierCurveTo', 		// Bezier cubic curve
	CSPLINE_THRU: 'splineThru',				// Catmull-rom spline
	ARC: 'arc',								// Circle
	ELLIPSE: 'ellipse'
};

// TODO Clean up PATH API

// Create path using straight lines to connect all points
// - vectors: array of Vector2

THREE.Path.prototype.fromPoints = function ( vectors ) {

	this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

	for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {

		this.lineTo( vectors[ v ].x, vectors[ v ].y );

	};

};

// startPath() endPath()?

THREE.Path.prototype.moveTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );
	this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );

};

THREE.Path.prototype.lineTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );

};

THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),
												new THREE.Vector2( aCPx, aCPy ),
												new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );

};

THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,
											   aCP2x, aCP2y,
											   aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),
											new THREE.Vector2( aCP1x, aCP1y ),
											new THREE.Vector2( aCP2x, aCP2y ),
											new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );

};

THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

	var args = Array.prototype.slice.call( arguments );
	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];
//---
	var npts = [ new THREE.Vector2( x0, y0 ) ];
	Array.prototype.push.apply( npts, pts );

	var curve = new THREE.SplineCurve( npts );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );

};

// FUTURE: Change the API or follow canvas API?

THREE.Path.prototype.arc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absarc(aX + x0, aY + y0, aRadius,
		aStartAngle, aEndAngle, aClockwise );

 };

 THREE.Path.prototype.absarc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {
	this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 };

THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absellipse(aX + x0, aY + y0, xRadius, yRadius,
		aStartAngle, aEndAngle, aClockwise );

 };


THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var args = Array.prototype.slice.call( arguments );
	var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,
									aStartAngle, aEndAngle, aClockwise );
	this.curves.push( curve );

	var lastPoint = curve.getPoint(1);
	args.push(lastPoint.x);
	args.push(lastPoint.y);

	this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );

 };

THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {

	if ( ! divisions ) divisions = 40;

	var points = [];

	for ( var i = 0; i < divisions; i ++ ) {

		points.push( this.getPoint( i / divisions ) );

		//if( !this.getPoint( i / divisions ) ) throw "DIE";

	}

	// if ( closedPath ) {
	//
	// 	points.push( points[ 0 ] );
	//
	// }

	return points;

};

/* Return an array of vectors based on contour of the path */

THREE.Path.prototype.getPoints = function( divisions, closedPath ) {

	if (this.useSpacedPoints) {
		console.log('tata');
		return this.getSpacedPoints( divisions, closedPath );
	}

	divisions = divisions || 12;

	var points = [];

	var i, il, item, action, args;
	var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
		laste, j,
		t, tx, ty;

	for ( i = 0, il = this.actions.length; i < il; i ++ ) {

		item = this.actions[ i ];

		action = item.action;
		args = item.args;

		switch( action ) {

		case THREE.PathActions.MOVE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.LINE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.QUADRATIC_CURVE_TO:

			cpx  = args[ 2 ];
			cpy  = args[ 3 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}

			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
				ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

			}

			break;

		case THREE.PathActions.BEZIER_CURVE_TO:

			cpx  = args[ 4 ];
			cpy  = args[ 5 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			cpx2 = args[ 2 ];
			cpy2 = args[ 3 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}


			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
				ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

			}

			break;

		case THREE.PathActions.CSPLINE_THRU:

			laste = this.actions[ i - 1 ].args;

			var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
			var spts = [ last ];

			var n = divisions * args[ 0 ].length;

			spts = spts.concat( args[ 0 ] );

			var spline = new THREE.SplineCurve( spts );

			for ( j = 1; j <= n; j ++ ) {

				points.push( spline.getPointAt( j / n ) ) ;

			}

			break;

		case THREE.PathActions.ARC:

			var aX = args[ 0 ], aY = args[ 1 ],
				aRadius = args[ 2 ],
				aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
				aClockwise = !!args[ 5 ];

			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + aRadius * Math.cos( angle );
				ty = aY + aRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;
		  
		case THREE.PathActions.ELLIPSE:

			var aX = args[ 0 ], aY = args[ 1 ],
				xRadius = args[ 2 ],
				yRadius = args[ 3 ],
				aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
				aClockwise = !!args[ 6 ];


			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + xRadius * Math.cos( angle );
				ty = aY + yRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;

		} // end switch

	}



	// Normalize to remove the closing point by default.
	var lastPoint = points[ points.length - 1];
	var EPSILON = 0.0000000001;
	if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&
			 Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)
		points.splice( points.length - 1, 1);
	if ( closedPath ) {

		points.push( points[ 0 ] );

	}

	return points;

};

// Breaks path into shapes

THREE.Path.prototype.toShapes = function( isCCW ) {

	var i, il, item, action, args;

	var subPaths = [], lastPath = new THREE.Path();

	for ( i = 0, il = this.actions.length; i < il; i ++ ) {

		item = this.actions[ i ];

		args = item.args;
		action = item.action;

		if ( action == THREE.PathActions.MOVE_TO ) {

			if ( lastPath.actions.length != 0 ) {

				subPaths.push( lastPath );
				lastPath = new THREE.Path();

			}

		}

		lastPath[ action ].apply( lastPath, args );

	}

	if ( lastPath.actions.length != 0 ) {

		subPaths.push( lastPath );

	}

	// console.log(subPaths);

	if ( subPaths.length == 0 ) return [];

	var solid, tmpPath, tmpShape, shapes = [];

	if ( subPaths.length == 1) {

		tmpPath = subPaths[0];
		tmpShape = new THREE.Shape();
		tmpShape.actions = tmpPath.actions;
		tmpShape.curves = tmpPath.curves;
		shapes.push( tmpShape );
		return shapes;

	}

	var holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );
	holesFirst = isCCW ? !holesFirst : holesFirst;

	// console.log("Holes first", holesFirst);

	if ( holesFirst ) {

		tmpShape = new THREE.Shape();

		for ( i = 0, il = subPaths.length; i < il; i ++ ) {

			tmpPath = subPaths[ i ];
			solid = THREE.Shape.Utils.isClockWise( tmpPath.getPoints() );
			solid = isCCW ? !solid : solid;

			if ( solid ) {

				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );
				tmpShape = new THREE.Shape();

				//console.log('cw', i);

			} else {

				tmpShape.holes.push( tmpPath );

				//console.log('ccw', i);

			}

		}

	} else {

		// Shapes first
		tmpShape = undefined;

		for ( i = 0, il = subPaths.length; i < il; i ++ ) {

			tmpPath = subPaths[ i ];
			solid = THREE.Shape.Utils.isClockWise( tmpPath.getPoints() );
			solid = isCCW ? !solid : solid;

			if ( solid ) {

				if ( tmpShape ) shapes.push( tmpShape );

				tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

			} else {

				tmpShape.holes.push( tmpPath );

			}

		}

		shapes.push( tmpShape );

	}

	//console.log("shape", shapes);

	return shapes;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

THREE.Shape = function () {

	THREE.Path.apply( this, arguments );
	this.holes = [];

};

THREE.Shape.prototype = Object.create( THREE.Path.prototype );

// Convenience method to return ExtrudeGeometry

THREE.Shape.prototype.extrude = function ( options ) {

	var extruded = new THREE.ExtrudeGeometry( this, options );
	return extruded;

};

// Convenience method to return ShapeGeometry

THREE.Shape.prototype.makeGeometry = function ( options ) {

	var geometry = new THREE.ShapeGeometry( this, options );
	return geometry;

};

// Get points of holes

THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );

	}

	return holesPts;

};

// Get points of holes (spaced by regular distance)

THREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );

	}

	return holesPts;

};


// Get points of shape and holes (keypoints based on segments parameter)

THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

	return {

		shape: this.getTransformedPoints( divisions ),
		holes: this.getPointsHoles( divisions )

	};

};

THREE.Shape.prototype.extractPoints = function ( divisions ) {

	if (this.useSpacedPoints) {
		return this.extractAllSpacedPoints(divisions);
	}

	return this.extractAllPoints(divisions);

};

//
// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {
//
// 	return {
//
// 		shape: this.transform( bend, divisions ),
// 		holes: this.getPointsHoles( divisions, bend )
//
// 	};
//
// };

// Get points of shape and holes (spaced by regular distance)

THREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {

	return {

		shape: this.getTransformedSpacedPoints( divisions ),
		holes: this.getSpacedPointsHoles( divisions )

	};

};

/**************************************************************
 *	Utils
 **************************************************************/

THREE.Shape.Utils = {

	/*
		contour - array of vector2 for contour
		holes   - array of array of vector2
	*/

	removeHoles: function ( contour, holes ) {

		var shape = contour.concat(); // work on this shape
		var allpoints = shape.concat();

		/* For each isolated shape, find the closest points and break to the hole to allow triangulation */


		var prevShapeVert, nextShapeVert,
			prevHoleVert, nextHoleVert,
			holeIndex, shapeIndex,
			shapeId, shapeGroup,
			h, h2,
			hole, shortest, d,
			p, pts1, pts2,
			tmpShape1, tmpShape2,
			tmpHole1, tmpHole2,
			verts = [];

		for ( h = 0; h < holes.length; h ++ ) {

			hole = holes[ h ];

			/*
			shapeholes[ h ].concat(); // preserves original
			holes.push( hole );
			*/

			Array.prototype.push.apply( allpoints, hole );

			shortest = Number.POSITIVE_INFINITY;


			// Find the shortest pair of pts between shape and hole

			// Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)
			// Using distanceToSquared() intead of distanceTo() should speed a little
			// since running square roots operations are reduced.

			for ( h2 = 0; h2 < hole.length; h2 ++ ) {

				pts1 = hole[ h2 ];
				var dist = [];

				for ( p = 0; p < shape.length; p++ ) {

					pts2 = shape[ p ];
					d = pts1.distanceToSquared( pts2 );
					dist.push( d );

					if ( d < shortest ) {

						shortest = d;
						holeIndex = h2;
						shapeIndex = p;

					}

				}

			}

			//console.log("shortest", shortest, dist);

			prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
			prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			var areaapts = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var areaa = THREE.FontUtils.Triangulate.area( areaapts );

			var areabpts = [

				hole[ holeIndex ],
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			var areab = THREE.FontUtils.Triangulate.area( areabpts );

			var shapeOffset = 1;
			var holeOffset = -1;

			var oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;
			shapeIndex += shapeOffset;
			holeIndex += holeOffset;

			if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }
			shapeIndex %= shape.length;

			if ( holeIndex < 0 ) { holeIndex += hole.length;  }
			holeIndex %= hole.length;

			prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
			prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			areaapts = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var areaa2 = THREE.FontUtils.Triangulate.area( areaapts );

			areabpts = [

				hole[ holeIndex ],
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			var areab2 = THREE.FontUtils.Triangulate.area( areabpts );
			//console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));

			if ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {

				// In case areas are not correct.
				//console.log("USE THIS");

				shapeIndex = oldShapeIndex;
				holeIndex = oldHoleIndex ;

				if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }
				shapeIndex %= shape.length;

				if ( holeIndex < 0 ) { holeIndex += hole.length;  }
				holeIndex %= hole.length;

				prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
				prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			} else {

				//console.log("USE THAT ")

			}

			tmpShape1 = shape.slice( 0, shapeIndex );
			tmpShape2 = shape.slice( shapeIndex );
			tmpHole1 = hole.slice( holeIndex );
			tmpHole2 = hole.slice( 0, holeIndex );

			// Should check orders here again?

			var trianglea = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var triangleb = [

				hole[ holeIndex ] ,
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			verts.push( trianglea );
			verts.push( triangleb );

			shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

		}

		return {

			shape:shape, 		/* shape with no holes */
			isolatedPts: verts, /* isolated faces */
			allpoints: allpoints

		}


	},

	triangulateShape: function ( contour, holes ) {

		var shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );

		var shape = shapeWithoutHoles.shape,
			allpoints = shapeWithoutHoles.allpoints,
			isolatedPts = shapeWithoutHoles.isolatedPts;

		var triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		//console.log( "triangles",triangles, triangles.length );
		//console.log( "allpoints",allpoints, allpoints.length );

		var i, il, f, face,
			key, index,
			allPointsMap = {},
			isolatedPointsMap = {};

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ":" + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.log( "Duplicate point", key );

			}

			allPointsMap[ key ] = i;

		}

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		// check isolated points vertices against all points map

		for ( i = 0, il = isolatedPts.length; i < il; i ++ ) {

			face = isolatedPts[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat( isolatedPts );

	}, // end triangulate shapes

	/*
	triangulate2 : function( pts, holes ) {

		// For use with Poly2Tri.js

		var allpts = pts.concat();
		var shape = [];
		for (var p in pts) {
			shape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));
		}

		var swctx = new js.poly2tri.SweepContext(shape);

		for (var h in holes) {
			var aHole = holes[h];
			var newHole = []
			for (i in aHole) {
				newHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));
				allpts.push(aHole[i]);
			}
			swctx.AddHole(newHole);
		}

		var find;
		var findIndexForPt = function (pt) {
			find = new THREE.Vector2(pt.x, pt.y);
			var p;
			for (p=0, pl = allpts.length; p<pl; p++) {
				if (allpts[p].equals(find)) return p;
			}
			return -1;
		};

		// triangulate
		js.poly2tri.sweep.Triangulate(swctx);

		var triangles =  swctx.GetTriangles();
		var tr ;
		var facesPts = [];
		for (var t in triangles) {
			tr =  triangles[t];
			facesPts.push([
				findIndexForPt(tr.GetPoint(0)),
				findIndexForPt(tr.GetPoint(1)),
				findIndexForPt(tr.GetPoint(2))
					]);
		}


	//	console.log(facesPts);
	//	console.log("triangles", triangles.length, triangles);

		// Returns array of faces with 3 element each
	return facesPts;
	},
*/

	isClockWise: function ( pts ) {

		return THREE.FontUtils.Triangulate.area( pts ) < 0;

	},

	// Bezier Curves formulas obtained from
	// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

	// Quad Bezier Functions

	b2p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * p;

	},

	b2p1: function ( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	},

	b2p2: function ( t, p ) {

		return t * t * p;

	},

	b2: function ( t, p0, p1, p2 ) {

		return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );

	},

	// Cubic Bezier Functions

	b3p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	},

	b3p1: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	},

	b3p2: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * t * t * p;

	},

	b3p3: function ( t, p ) {

		return t * t * t * p;

	},

	b3: function ( t, p0, p1, p2, p3 ) {

		return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );

	}

};


/**************************************************************
 *	Line
 **************************************************************/

THREE.LineCurve = function ( v1, v2 ) {

	this.v1 = v1;
	this.v2 = v2;

};

THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.LineCurve.prototype.getPoint = function ( t ) {

	var point = this.v2.clone().sub(this.v1);
	point.multiplyScalar( t ).add( this.v1 );

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

THREE.LineCurve.prototype.getPointAt = function ( u ) {

	return this.getPoint( u );

};

THREE.LineCurve.prototype.getTangent = function( t ) {

	var tangent = this.v2.clone().sub(this.v1);

	return tangent.normalize();

};
/**************************************************************
 *	Quadratic Bezier curve
 **************************************************************/


THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

};

THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );


THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	var tx, ty;

	tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
	ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );

	return new THREE.Vector2( tx, ty );

};


THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

	var tx, ty;

	tx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );
	ty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );

	// returns unit vector

	var tangent = new THREE.Vector2( tx, ty );
	tangent.normalize();

	return tangent;

};
/**************************************************************
 *	Cubic Bezier curve
 **************************************************************/

THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

};

THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

	var tx, ty;

	tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	return new THREE.Vector2( tx, ty );

};

THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

	var tx, ty;

	tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	var tangent = new THREE.Vector2( tx, ty );
	tangent.normalize();

	return tangent;

};
/**************************************************************
 *	Spline curve
 **************************************************************/

THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

	this.points = (points == undefined) ? [] : points;

};

THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.SplineCurve.prototype.getPoint = function ( t ) {

	var v = new THREE.Vector2();
	var c = [];
	var points = this.points, point, intPoint, weight;
	point = ( points.length - 1 ) * t;

	intPoint = Math.floor( point );
	weight = point - intPoint;

	c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
	c[ 1 ] = intPoint;
	c[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;
	c[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;

	v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
	v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );

	return v;

};
/**************************************************************
 *	Ellipse curve
 **************************************************************/

THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {

	this.aX = aX;
	this.aY = aY;

	this.xRadius = xRadius;
	this.yRadius = yRadius;

	this.aStartAngle = aStartAngle;
	this.aEndAngle = aEndAngle;

	this.aClockwise = aClockwise;

};

THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.EllipseCurve.prototype.getPoint = function ( t ) {

	var angle;
	var deltaAngle = this.aEndAngle - this.aStartAngle;

	if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
	if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

	if ( this.aClockwise === true ) {

		angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

	} else {

		angle = this.aStartAngle + t * deltaAngle;

	}

	var tx = this.aX + this.xRadius * Math.cos( angle );
	var ty = this.aY + this.yRadius * Math.sin( angle );

	return new THREE.Vector2( tx, ty );

};

/**************************************************************
 *	Arc curve
 **************************************************************/

THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
};

THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
/**************************************************************
 *	Line3D
 **************************************************************/

THREE.LineCurve3 = THREE.Curve.create(

	function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var r = new THREE.Vector3();


		r.subVectors( this.v2, this.v1 ); // diff
		r.multiplyScalar( t );
		r.add( this.v1 );

		return r;

	}

);

/**************************************************************
 *	Quadratic Bezier 3D curve
 **************************************************************/

THREE.QuadraticBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var tx, ty, tz;

		tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
		ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
		tz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );

		return new THREE.Vector3( tx, ty, tz );

	}

);
/**************************************************************
 *	Cubic Bezier 3D curve
 **************************************************************/

THREE.CubicBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	},

	function ( t ) {

		var tx, ty, tz;

		tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
		ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
		tz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );

		return new THREE.Vector3( tx, ty, tz );

	}

);
/**************************************************************
 *	Spline 3D curve
 **************************************************************/


THREE.SplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = (points == undefined) ? [] : points;

	},

	function ( t ) {

		var v = new THREE.Vector3();
		var c = [];
		var points = this.points, point, intPoint, weight;
		point = ( points.length - 1 ) * t;

		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
		c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

		var pt0 = points[ c[0] ],
			pt1 = points[ c[1] ],
			pt2 = points[ c[2] ],
			pt3 = points[ c[3] ];

		v.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);
		v.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);
		v.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);

		return v;

	}

);


// THREE.SplineCurve3.prototype.getTangent = function(t) {
// 		var v = new THREE.Vector3();
// 		var c = [];
// 		var points = this.points, point, intPoint, weight;
// 		point = ( points.length - 1 ) * t;

// 		intPoint = Math.floor( point );
// 		weight = point - intPoint;

// 		c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
// 		c[ 1 ] = intPoint;
// 		c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
// 		c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

// 		var pt0 = points[ c[0] ],
// 			pt1 = points[ c[1] ],
// 			pt2 = points[ c[2] ],
// 			pt3 = points[ c[3] ];

// 	// t = weight;
// 	v.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );
// 	v.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );
// 	v.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );

// 	return v;

// }
/**************************************************************
 *	Closed Spline 3D curve
 **************************************************************/


THREE.ClosedSplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = (points == undefined) ? [] : points;

	},

    function ( t ) {

        var v = new THREE.Vector3();
        var c = [];
        var points = this.points, point, intPoint, weight;
        point = ( points.length - 0 ) * t;
            // This needs to be from 0-length +1

        intPoint = Math.floor( point );
        weight = point - intPoint;

        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
        c[ 0 ] = ( intPoint - 1 ) % points.length;
        c[ 1 ] = ( intPoint ) % points.length;
        c[ 2 ] = ( intPoint + 1 ) % points.length;
        c[ 3 ] = ( intPoint + 2 ) % points.length;

        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );
        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );

        return v;

    }

);
/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.AnimationHandler = (function() {

	var playing = [];
	var library = {};
	var that    = {};


	//--- update ---

	that.update = function( deltaTimeMS ) {

		for( var i = 0; i < playing.length; i ++ )
			playing[ i ].update( deltaTimeMS );

	};


	//--- add ---

	that.addToUpdate = function( animation ) {

		if ( playing.indexOf( animation ) === -1 )
			playing.push( animation );

	};


	//--- remove ---

	that.removeFromUpdate = function( animation ) {

		var index = playing.indexOf( animation );

		if( index !== -1 )
			playing.splice( index, 1 );

	};


	//--- add ---

	that.add = function( data ) {

		if ( library[ data.name ] !== undefined )
			console.log( "THREE.AnimationHandler.add: Warning! " + data.name + " already exists in library. Overwriting." );

		library[ data.name ] = data;
		initData( data );

	};


	//--- get ---

	that.get = function( name ) {

		if ( typeof name === "string" ) {

			if ( library[ name ] ) {

				return library[ name ];

			} else {

				console.log( "THREE.AnimationHandler.get: Couldn't find animation " + name );
				return null;

			}

		} else {

			// todo: add simple tween library

		}

	};

	//--- parse ---

	that.parse = function( root ) {

		// setup hierarchy

		var hierarchy = [];

		if ( root instanceof THREE.SkinnedMesh ) {

			for( var b = 0; b < root.bones.length; b++ ) {

				hierarchy.push( root.bones[ b ] );

			}

		} else {

			parseRecurseHierarchy( root, hierarchy );

		}

		return hierarchy;

	};

	var parseRecurseHierarchy = function( root, hierarchy ) {

		hierarchy.push( root );

		for( var c = 0; c < root.children.length; c++ )
			parseRecurseHierarchy( root.children[ c ], hierarchy );

	}


	//--- init data ---

	var initData = function( data ) {

		if( data.initialized === true )
			return;


		// loop through all keys

		for( var h = 0; h < data.hierarchy.length; h ++ ) {

			for( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				// remove minus times

				if( data.hierarchy[ h ].keys[ k ].time < 0 )
					data.hierarchy[ h ].keys[ k ].time = 0;


				// create quaternions

				if( data.hierarchy[ h ].keys[ k ].rot !== undefined &&
				 !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {

					var quat = data.hierarchy[ h ].keys[ k ].rot;
					data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );

				}

			}


			// prepare morph target keys

			if( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {

				// get all used

				var usedMorphTargets = {};

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

						var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];
						usedMorphTargets[ morphTargetName ] = -1;

					}

				}

				data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;


				// set all used on all frames

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					var influences = {};

					for ( var morphTargetName in usedMorphTargets ) {

						for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

							if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {

								influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];
								break;

							}

						}

						if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {

							influences[ morphTargetName ] = 0;

						}

					}

					data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;

				}

			}


			// remove all keys that are on the same time

			for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {

				if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {

					data.hierarchy[ h ].keys.splice( k, 1 );
					k --;

				}

			}


			// set index

			for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				data.hierarchy[ h ].keys[ k ].index = k;

			}

		}


		// JIT

		var lengthInFrames = parseInt( data.length * data.fps, 10 );

		data.JIT = {};
		data.JIT.hierarchy = [];

		for( var h = 0; h < data.hierarchy.length; h ++ )
			data.JIT.hierarchy.push( new Array( lengthInFrames ) );


		// done

		data.initialized = true;

	};


	// interpolation types

	that.LINEAR = 0;
	that.CATMULLROM = 1;
	that.CATMULLROM_FORWARD = 2;

	return that;

}());

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Animation = function ( root, name, interpolationType ) {

	this.root = root;
	this.data = THREE.AnimationHandler.get( name );
	this.hierarchy = THREE.AnimationHandler.parse( root );

	this.currentTime = 0;
	this.timeScale = 1;

	this.isPlaying = false;
	this.isPaused = true;
	this.loop = true;

	this.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;

	this.points = [];
	this.target = new THREE.Vector3();

};

THREE.Animation.prototype.play = function ( loop, startTimeMS ) {

	if ( this.isPlaying === false ) {

		this.isPlaying = true;
		this.loop = loop !== undefined ? loop : true;
		this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;

		// reset key cache

		var h, hl = this.hierarchy.length,
			object;

		for ( h = 0; h < hl; h ++ ) {

			object = this.hierarchy[ h ];

			object.matrixAutoUpdate = true;

			if ( object.animationCache === undefined ) {

				object.animationCache = {};
				object.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };
				object.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };
				object.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

			}

			var prevKey = object.animationCache.prevKey;
			var nextKey = object.animationCache.nextKey;

			prevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];
			prevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];
			prevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];

			nextKey.pos = this.getNextKeyWith( "pos", h, 1 );
			nextKey.rot = this.getNextKeyWith( "rot", h, 1 );
			nextKey.scl = this.getNextKeyWith( "scl", h, 1 );

		}

		this.update( 0 );

	}

	this.isPaused = false;

	THREE.AnimationHandler.addToUpdate( this );

};


THREE.Animation.prototype.pause = function() {

	if ( this.isPaused === true ) {

		THREE.AnimationHandler.addToUpdate( this );

	} else {

		THREE.AnimationHandler.removeFromUpdate( this );

	}

	this.isPaused = !this.isPaused;

};


THREE.Animation.prototype.stop = function() {

	this.isPlaying = false;
	this.isPaused  = false;
	THREE.AnimationHandler.removeFromUpdate( this );

};


THREE.Animation.prototype.update = function ( deltaTimeMS ) {

	// early out

	if ( this.isPlaying === false ) return;


	// vars

	var types = [ "pos", "rot", "scl" ];
	var type;
	var scale;
	var vector;
	var prevXYZ, nextXYZ;
	var prevKey, nextKey;
	var object;
	var animationCache;
	var frame;
	var JIThierarchy = this.data.JIT.hierarchy;
	var currentTime, unloopedCurrentTime;
	var currentPoint, forwardPoint, angle;


	this.currentTime += deltaTimeMS * this.timeScale;

	unloopedCurrentTime = this.currentTime;

	// Mod operation fails on floats
	// was this supposed to be in frames?
	while ( this.currentTime > this.data.length ) {

		this.currentTime -= this.data.length;

	}

	currentTime = this.currentTime = this.currentTime % this.data.length;

	
	frame = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );


	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		object = this.hierarchy[ h ];
		animationCache = object.animationCache;

		// loop through pos/rot/scl

		for ( var t = 0; t < 3; t ++ ) {

			// get keys

			type    = types[ t ];
			prevKey = animationCache.prevKey[ type ];
			nextKey = animationCache.nextKey[ type ];

			// switch keys?
			
			if ( nextKey.time <= unloopedCurrentTime ) {

				// did we loop?

				if ( currentTime <= unloopedCurrentTime ) {

					if ( this.loop ) {

						prevKey = this.data.hierarchy[ h ].keys[ 0 ];
						nextKey = this.getNextKeyWith( type, h, 1 );

						// if ( nextKey.index < prevKey.index ) then we have wrapped over the end, and nextKey.time < currentTime will loop forever
						while ( nextKey !== null && nextKey.time < currentTime && nextKey.index > prevKey.index) {

							prevKey = nextKey;
							nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

						}

					} else {

						this.stop();
						return;

					}

				} else {

					do {

						prevKey = nextKey;
						nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

					} while ( nextKey !== null && nextKey.time < currentTime && nextKey.index > prevKey.index )
					// if ( nextKey.index < prevKey.index ) then we have wrapped over the end, and nextKey.time < currentTime will loop forever

				}

				animationCache.prevKey[ type ] = prevKey;
				animationCache.nextKey[ type ] = nextKey;

			}


			object.matrixAutoUpdate = true;
			object.matrixWorldNeedsUpdate = true;

			scale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );
			prevXYZ = prevKey[ type ];
			nextXYZ = nextKey[ type ];


			// check scale error

			if ( scale < 0 || scale > 1 ) {

				console.log( "THREE.Animation.update: Warning! Scale out of bounds:" + scale + " on bone " + h );
				scale = scale < 0 ? 0 : 1;

			}

			// interpolate

			if ( type === "pos" ) {

				vector = object.position;

				if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {

					vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
					vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
					vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

				} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
						    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

					this.points[ 0 ] = this.getPrevKeyWith( "pos", h, prevKey.index - 1 )[ "pos" ];
					this.points[ 1 ] = prevXYZ;
					this.points[ 2 ] = nextXYZ;
					this.points[ 3 ] = this.getNextKeyWith( "pos", h, nextKey.index + 1 )[ "pos" ];

					scale = scale * 0.33 + 0.33;

					currentPoint = this.interpolateCatmullRom( this.points, scale );

					vector.x = currentPoint[ 0 ];
					vector.y = currentPoint[ 1 ];
					vector.z = currentPoint[ 2 ];

					if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

						forwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );

						this.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );
						this.target.sub( vector );
						this.target.y = 0;
						this.target.normalize();

						angle = Math.atan2( this.target.x, this.target.z );
						object.rotation.set( 0, angle, 0 );

					}

				}

			} else if ( type === "rot" ) {

				THREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );

			} else if ( type === "scl" ) {

				vector = object.scale;

				vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
				vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
				vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

			}

		}

	}

};

// Catmull-Rom spline

THREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {

	var c = [], v3 = [],
	point, intPoint, weight, w2, w3,
	pa, pb, pc, pd;

	point = ( points.length - 1 ) * scale;
	intPoint = Math.floor( point );
	weight = point - intPoint;

	c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
	c[ 1 ] = intPoint;
	c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
	c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;

	pa = points[ c[ 0 ] ];
	pb = points[ c[ 1 ] ];
	pc = points[ c[ 2 ] ];
	pd = points[ c[ 3 ] ];

	w2 = weight * weight;
	w3 = weight * w2;

	v3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );
	v3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );
	v3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );

	return v3;

};

THREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {

	var v0 = ( p2 - p0 ) * 0.5,
		v1 = ( p3 - p1 ) * 0.5;

	return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

};



// Get next key with

THREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		 this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key < keys.length - 1 ? key : keys.length - 1;

	} else {

		key = key % keys.length;

	}

	for ( ; key < keys.length; key++ ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ 0 ];

};

// Get previous key with

THREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		 this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key > 0 ? key : 0;

	} else {

		key = key >= 0 ? key : key + keys.length;

	}


	for ( ; key >= 0; key -- ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ keys.length - 1 ];

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author khang duong
 * @author erik kitson
 */

THREE.KeyFrameAnimation = function( root, data, JITCompile ) {

	this.root = root;
	this.data = THREE.AnimationHandler.get( data );
	this.hierarchy = THREE.AnimationHandler.parse( root );
	this.currentTime = 0;
	this.timeScale = 0.001;
	this.isPlaying = false;
	this.isPaused = true;
	this.loop = true;
	this.JITCompile = JITCompile !== undefined ? JITCompile : true;

	// initialize to first keyframes

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

		var keys = this.data.hierarchy[h].keys,
			sids = this.data.hierarchy[h].sids,
			obj = this.hierarchy[h];

		if ( keys.length && sids ) {

			for ( var s = 0; s < sids.length; s++ ) {

				var sid = sids[ s ],
					next = this.getNextKeyWith( sid, h, 0 );

				if ( next ) {

					next.apply( sid );

				}

			}

			obj.matrixAutoUpdate = false;
			this.data.hierarchy[h].node.updateMatrix();
			obj.matrixWorldNeedsUpdate = true;

		}

	}

};

// Play

THREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {

	if( !this.isPlaying ) {

		this.isPlaying = true;
		this.loop = loop !== undefined ? loop : true;
		this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;
		this.startTimeMs = startTimeMS;
		this.startTime = 10000000;
		this.endTime = -this.startTime;


		// reset key cache

		var h, hl = this.hierarchy.length,
			object,
			node;

		for ( h = 0; h < hl; h++ ) {

			object = this.hierarchy[ h ];
			node = this.data.hierarchy[ h ];

			if ( node.animationCache === undefined ) {

				node.animationCache = {};
				node.animationCache.prevKey = null;
				node.animationCache.nextKey = null;
				node.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

			}

			var keys = this.data.hierarchy[h].keys;

			if (keys.length) {

				node.animationCache.prevKey = keys[ 0 ];
				node.animationCache.nextKey = keys[ 1 ];

				this.startTime = Math.min( keys[0].time, this.startTime );
				this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );

			}

		}

		this.update( 0 );

	}

	this.isPaused = false;

	THREE.AnimationHandler.addToUpdate( this );

};



// Pause

THREE.KeyFrameAnimation.prototype.pause = function() {

	if( this.isPaused ) {

		THREE.AnimationHandler.addToUpdate( this );

	} else {

		THREE.AnimationHandler.removeFromUpdate( this );

	}

	this.isPaused = !this.isPaused;

};


// Stop

THREE.KeyFrameAnimation.prototype.stop = function() {

	this.isPlaying = false;
	this.isPaused  = false;
	THREE.AnimationHandler.removeFromUpdate( this );


	// reset JIT matrix and remove cache

	for ( var h = 0; h < this.data.hierarchy.length; h++ ) {
        
        var obj = this.hierarchy[ h ];
		var node = this.data.hierarchy[ h ];

		if ( node.animationCache !== undefined ) {

			var original = node.animationCache.originalMatrix;

			if( obj instanceof THREE.Bone ) {

				original.copy( obj.skinMatrix );
				obj.skinMatrix = original;

			} else {

				original.copy( obj.matrix );
				obj.matrix = original;

			}

			delete node.animationCache;

		}

	}

};


// Update

THREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {

	// early out

	if( !this.isPlaying ) return;


	// vars

	var prevKey, nextKey;
	var object;
	var node;
	var frame;
	var JIThierarchy = this.data.JIT.hierarchy;
	var currentTime, unloopedCurrentTime;
	var looped;


	// update

	this.currentTime += deltaTimeMS * this.timeScale;

	unloopedCurrentTime = this.currentTime;
	currentTime         = this.currentTime = this.currentTime % this.data.length;

	// if looped around, the current time should be based on the startTime
	if ( currentTime < this.startTimeMs ) {

		currentTime = this.currentTime = this.startTimeMs + currentTime;

	}

	frame               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );
	looped 				= currentTime < unloopedCurrentTime;

	if ( looped && !this.loop ) {

		// Set the animation to the last keyframes and stop
		for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

			var keys = this.data.hierarchy[h].keys,
				sids = this.data.hierarchy[h].sids,
				end = keys.length-1,
				obj = this.hierarchy[h];

			if ( keys.length ) {

				for ( var s = 0; s < sids.length; s++ ) {

					var sid = sids[ s ],
						prev = this.getPrevKeyWith( sid, h, end );

					if ( prev ) {
						prev.apply( sid );

					}

				}

				this.data.hierarchy[h].node.updateMatrix();
				obj.matrixWorldNeedsUpdate = true;

			}

		}

		this.stop();
		return;

	}

	// check pre-infinity
	if ( currentTime < this.startTime ) {

		return;

	}

	// update

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

		object = this.hierarchy[ h ];
		node = this.data.hierarchy[ h ];

		var keys = node.keys,
			animationCache = node.animationCache;

		// use JIT?

		if ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {

			if( object instanceof THREE.Bone ) {

				object.skinMatrix = JIThierarchy[ h ][ frame ];
				object.matrixWorldNeedsUpdate = false;

			} else {

				object.matrix = JIThierarchy[ h ][ frame ];
				object.matrixWorldNeedsUpdate = true;

			}

		// use interpolation

		} else if ( keys.length ) {

			// make sure so original matrix and not JIT matrix is set

			if ( this.JITCompile && animationCache ) {

				if( object instanceof THREE.Bone ) {

					object.skinMatrix = animationCache.originalMatrix;

				} else {

					object.matrix = animationCache.originalMatrix;

				}

			}

			prevKey = animationCache.prevKey;
			nextKey = animationCache.nextKey;

			if ( prevKey && nextKey ) {

				// switch keys?

				if ( nextKey.time <= unloopedCurrentTime ) {

					// did we loop?

					if ( looped && this.loop ) {

						prevKey = keys[ 0 ];
						nextKey = keys[ 1 ];

						while ( nextKey.time < currentTime ) {

							prevKey = nextKey;
							nextKey = keys[ prevKey.index + 1 ];

						}

					} else if ( !looped ) {

						var lastIndex = keys.length - 1;

						while ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {

							prevKey = nextKey;
							nextKey = keys[ prevKey.index + 1 ];

						}

					}

					animationCache.prevKey = prevKey;
					animationCache.nextKey = nextKey;

				}
                if(nextKey.time >= currentTime)
                    prevKey.interpolate( nextKey, currentTime );
                else
                    prevKey.interpolate( nextKey, nextKey.time);

			}

			this.data.hierarchy[h].node.updateMatrix();
			object.matrixWorldNeedsUpdate = true;

		}

	}

	// update JIT?

	if ( this.JITCompile ) {

		if ( JIThierarchy[ 0 ][ frame ] === undefined ) {

			this.hierarchy[ 0 ].updateMatrixWorld( true );

			for ( var h = 0; h < this.hierarchy.length; h++ ) {

				if( this.hierarchy[ h ] instanceof THREE.Bone ) {

					JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();

				} else {

					JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();

				}

			}

		}

	}

};

// Get next key with

THREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key % keys.length;

	for ( ; key < keys.length; key++ ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ 0 ];

};

// Get previous key with

THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key >= 0 ? key : key + keys.length;

	for ( ; key >= 0; key-- ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ keys.length - 1 ];

};

/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CubeCamera = function ( near, far, cubeResolution ) {

	THREE.Object3D.call( this );

	var fov = 90, aspect = 1;

	var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPX.up.set( 0, -1, 0 );
	cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
	this.add( cameraPX );

	var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNX.up.set( 0, -1, 0 );
	cameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );
	this.add( cameraNX );

	var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPY.up.set( 0, 0, 1 );
	cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
	this.add( cameraPY );

	var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNY.up.set( 0, 0, -1 );
	cameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );
	this.add( cameraNY );

	var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPZ.up.set( 0, -1, 0 );
	cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
	this.add( cameraPZ );

	var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNZ.up.set( 0, -1, 0 );
	cameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );
	this.add( cameraNZ );

	this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );

	this.updateCubeMap = function ( renderer, scene ) {

		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.generateMipmaps;

		renderTarget.generateMipmaps = false;

		renderTarget.activeCubeFace = 0;
		renderer.render( scene, cameraPX, renderTarget );

		renderTarget.activeCubeFace = 1;
		renderer.render( scene, cameraNX, renderTarget );

		renderTarget.activeCubeFace = 2;
		renderer.render( scene, cameraPY, renderTarget );

		renderTarget.activeCubeFace = 3;
		renderer.render( scene, cameraNY, renderTarget );

		renderTarget.activeCubeFace = 4;
		renderer.render( scene, cameraPZ, renderTarget );

		renderTarget.generateMipmaps = generateMipmaps;

		renderTarget.activeCubeFace = 5;
		renderer.render( scene, cameraNZ, renderTarget );

	};

};

THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );

/**
 *	@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog
 *
 *	A general perpose camera, for setting FOV, Lens Focal Length,
 *		and switching between perspective and orthographic views easily.
 *		Use this only if you do not wish to manage
 *		both a Orthographic and Perspective Camera
 *
 */


THREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {

	THREE.Camera.call( this );

	this.fov = fov;

	this.left = -width / 2;
	this.right = width / 2
	this.top = height / 2;
	this.bottom = -height / 2;

	// We could also handle the projectionMatrix internally, but just wanted to test nested camera objects

	this.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 	orthoNear, orthoFar );
	this.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );

	this.zoom = 1;

	this.toPerspective();

	var aspect = width/height;

};

THREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.CombinedCamera.prototype.toPerspective = function () {

	// Switches to the Perspective Camera

	this.near = this.cameraP.near;
	this.far = this.cameraP.far;

	this.cameraP.fov =  this.fov / this.zoom ;

	this.cameraP.updateProjectionMatrix();

	this.projectionMatrix = this.cameraP.projectionMatrix;

	this.inPerspectiveMode = true;
	this.inOrthographicMode = false;

};

THREE.CombinedCamera.prototype.toOrthographic = function () {

	// Switches to the Orthographic camera estimating viewport from Perspective

	var fov = this.fov;
	var aspect = this.cameraP.aspect;
	var near = this.cameraP.near;
	var far = this.cameraP.far;

	// The size that we set is the mid plane of the viewing frustum

	var hyperfocus = ( near + far ) / 2;

	var halfHeight = Math.tan( fov / 2 ) * hyperfocus;
	var planeHeight = 2 * halfHeight;
	var planeWidth = planeHeight * aspect;
	var halfWidth = planeWidth / 2;

	halfHeight /= this.zoom;
	halfWidth /= this.zoom;

	this.cameraO.left = -halfWidth;
	this.cameraO.right = halfWidth;
	this.cameraO.top = halfHeight;
	this.cameraO.bottom = -halfHeight;

	// this.cameraO.left = -farHalfWidth;
	// this.cameraO.right = farHalfWidth;
	// this.cameraO.top = farHalfHeight;
	// this.cameraO.bottom = -farHalfHeight;

	// this.cameraO.left = this.left / this.zoom;
	// this.cameraO.right = this.right / this.zoom;
	// this.cameraO.top = this.top / this.zoom;
	// this.cameraO.bottom = this.bottom / this.zoom;

	this.cameraO.updateProjectionMatrix();

	this.near = this.cameraO.near;
	this.far = this.cameraO.far;
	this.projectionMatrix = this.cameraO.projectionMatrix;

	this.inPerspectiveMode = false;
	this.inOrthographicMode = true;

};


THREE.CombinedCamera.prototype.setSize = function( width, height ) {

	this.cameraP.aspect = width / height;
	this.left = -width / 2;
	this.right = width / 2
	this.top = height / 2;
	this.bottom = -height / 2;

};


THREE.CombinedCamera.prototype.setFov = function( fov ) {

	this.fov = fov;

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toOrthographic();

	}

};

// For mantaining similar API with PerspectiveCamera

THREE.CombinedCamera.prototype.updateProjectionMatrix = function() {

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toPerspective();
		this.toOrthographic();

	}

};

/*
* Uses Focal Length (in mm) to estimate and set FOV
* 35mm (fullframe) camera is used if frame size is not specified;
* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
*/
THREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {

	if ( frameHeight === undefined ) frameHeight = 24;

	var fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );

	this.setFov( fov );

	return fov;
};


THREE.CombinedCamera.prototype.setZoom = function( zoom ) {

	this.zoom = zoom;

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toOrthographic();

	}

};

THREE.CombinedCamera.prototype.toFrontView = function() {

	this.rotation.x = 0;
	this.rotation.y = 0;
	this.rotation.z = 0;

	// should we be modifing the matrix instead?

	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBackView = function() {

	this.rotation.x = 0;
	this.rotation.y = Math.PI;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toLeftView = function() {

	this.rotation.x = 0;
	this.rotation.y = - Math.PI / 2;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toRightView = function() {

	this.rotation.x = 0;
	this.rotation.y = Math.PI / 2;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toTopView = function() {

	this.rotation.x = - Math.PI / 2;
	this.rotation.y = 0;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBottomView = function() {

	this.rotation.x = Math.PI / 2;
	this.rotation.y = 0;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

/**
 * @author hughes
 */

THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.radius = radius = radius || 50;
	this.segments = segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	this.thetaStart = thetaStart = thetaStart !== undefined ? thetaStart : 0;
	this.thetaLength = thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	var i, uvs = [],
	center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );

	this.vertices.push(center);
	uvs.push( centerUV );

	for ( i = 0; i <= segments; i ++ ) {

		var vertex = new THREE.Vector3();
		var segment = thetaStart + i / segments * thetaLength;

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		this.vertices.push( vertex );
		uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );

	}

	var n = new THREE.Vector3( 0, 0, 1 );

	for ( i = 1; i <= segments; i ++ ) {

		var v1 = i;
		var v2 = i + 1 ;
		var v3 = 0;

		this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
		this.faceVertexUvs[ 0 ].push( [ uvs[ i ].clone(), uvs[ i + 1 ].clone(), centerUV.clone() ] );

	}

	this.computeCentroids();
	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
 */

THREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.width = width;
	this.height = height;
	this.depth = depth;

	this.widthSegments = widthSegments || 1;
	this.heightSegments = heightSegments || 1;
	this.depthSegments = depthSegments || 1;

	var width_half = this.width / 2;
	var height_half = this.height / 2;
	var depth_half = this.depth / 2;

	buildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px
	buildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx
	buildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py
	buildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny
	buildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz
	buildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz

	function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

		var w, ix, iy,
		gridX = scope.widthSegments,
		gridY = scope.heightSegments,
		width_half = width / 2,
		height_half = height / 2,
		offset = scope.vertices.length;

		if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

			w = 'z';

		} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

			w = 'y';
			gridY = scope.depthSegments;

		} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

			w = 'x';
			gridX = scope.depthSegments;

		}

		var gridX1 = gridX + 1,
		gridY1 = gridY + 1,
		segment_width = width / gridX,
		segment_height = height / gridY,
		normal = new THREE.Vector3();

		normal[ w ] = depth > 0 ? 1 : - 1;

		for ( iy = 0; iy < gridY1; iy ++ ) {

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var vector = new THREE.Vector3();
				vector[ u ] = ( ix * segment_width - width_half ) * udir;
				vector[ v ] = ( iy * segment_height - height_half ) * vdir;
				vector[ w ] = depth;

				scope.vertices.push( vector );

			}

		}

		for ( iy = 0; iy < gridY; iy++ ) {

			for ( ix = 0; ix < gridX; ix++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
				var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
				var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
				var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );

				var face = new THREE.Face3( a + offset, b + offset, d + offset );
				face.normal.copy( normal );
				face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
				face.materialIndex = materialIndex;

				scope.faces.push( face );
				scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				face = new THREE.Face3( b + offset, c + offset, d + offset );
				face.normal.copy( normal );
				face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
				face.materialIndex = materialIndex;

				scope.faces.push( face );
				scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

	}

	this.computeCentroids();
	this.mergeVertices();

};

THREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {

	THREE.Geometry.call( this );

	this.radiusTop = radiusTop = radiusTop !== undefined ? radiusTop : 20;
	this.radiusBottom = radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	this.height = height = height !== undefined ? height : 100;

	this.radialSegments = radialSegments = radialSegments || 8;
	this.heightSegments = heightSegments = heightSegments || 1;

	this.openEnded = openEnded = openEnded !== undefined ? openEnded : false;

	var heightHalf = height / 2;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= heightSegments; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		var v = y / heightSegments;
		var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;

			var vertex = new THREE.Vector3();
			vertex.x = radius * Math.sin( u * Math.PI * 2 );
			vertex.y = - v * height + heightHalf;
			vertex.z = radius * Math.cos( u * Math.PI * 2 );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	var tanTheta = ( radiusBottom - radiusTop ) / height;
	var na, nb;

	for ( x = 0; x < radialSegments; x ++ ) {

		if ( radiusTop !== 0 ) {

			na = this.vertices[ vertices[ 0 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

		} else {

			na = this.vertices[ vertices[ 1 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

		}

		na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
		nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

		for ( y = 0; y < heightSegments; y ++ ) {

			var v1 = vertices[ y ][ x ];
			var v2 = vertices[ y + 1 ][ x ];
			var v3 = vertices[ y + 1 ][ x + 1 ];
			var v4 = vertices[ y ][ x + 1 ];

			var n1 = na.clone();
			var n2 = na.clone();
			var n3 = nb.clone();
			var n4 = nb.clone();

			var uv1 = uvs[ y ][ x ].clone();
			var uv2 = uvs[ y + 1 ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
			var uv4 = uvs[ y ][ x + 1 ].clone();

			this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

			this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

		}

	}

	// top cap

	if ( openEnded === false && radiusTop > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

		for ( x = 0; x < radialSegments; x ++ ) {

			var v1 = vertices[ 0 ][ x ];
			var v2 = vertices[ 0 ][ x + 1 ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, 1, 0 );
			var n2 = new THREE.Vector3( 0, 1, 0 );
			var n3 = new THREE.Vector3( 0, 1, 0 );

			var uv1 = uvs[ 0 ][ x ].clone();
			var uv2 = uvs[ 0 ][ x + 1 ].clone();
			var uv3 = new THREE.Vector2( uv2.x, 0 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	// bottom cap

	if ( openEnded === false && radiusBottom > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

		for ( x = 0; x < radialSegments; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, - 1, 0 );
			var n2 = new THREE.Vector3( 0, - 1, 0 );
			var n3 = new THREE.Vector3( 0, - 1, 0 );

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = new THREE.Vector2( uv2.x, 1 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();

}

THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
 *
 *  material: <int> // material index for front and back faces
 *  extrudeMaterial: <int> // material index for extrusion and beveled faces
 *  uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ExtrudeGeometry = function ( shapes, options ) {

	if ( typeof( shapes ) === "undefined" ) {
		shapes = [];
		return;
	}

	THREE.Geometry.call( this );

	shapes = shapes instanceof Array ? shapes : [ shapes ];

	this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

	this.addShapeList( shapes, options );

	this.computeCentroids();
	this.computeFaceNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

};

THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );

THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
	var sl = shapes.length;

	for ( var s = 0; s < sl; s ++ ) {
		var shape = shapes[ s ];
		this.addShape( shape, options );
	}
};

THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	var material = options.material;
	var extrudeMaterial = options.extrudeMaterial;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

	var shapebb = this.shapebb;
	//shapebb = shape.getBoundingBox();



	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// Reuse TNB from TubeGeomtry for now.
		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new THREE.Vector3();
		normal = new THREE.Vector3();
		position2 = new THREE.Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initalization

	var ahole, h, hl; // looping of holes
	var scope = this;
	var bevelPoints = [];

	var shapesOffset = this.vertices.length;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( THREE.Shape.Utils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

		reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

	}


	var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2 ( pt, vec, size ) {

		if ( !vec ) console.log( "die" );

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length,
		cont, clen = contour.length;


	// Find directions for point movement

	var RAD_TO_DEGREES = 180 / Math.PI;


	function getBevelVec( pt_i, pt_j, pt_k ) {

		// Algorithm 2

		return getBevelVec2( pt_i, pt_j, pt_k );

	}

	function getBevelVec1( pt_i, pt_j, pt_k ) {

		var anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );
		var angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );

		if ( anglea > angleb ) {

			angleb += Math.PI * 2;

		}

		var anglec = ( anglea + angleb ) / 2;


		//console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);

		var x = - Math.cos( anglec );
		var y = - Math.sin( anglec );

		var vec = new THREE.Vector2( x, y ); //.normalize();

		return vec;

	}

	function getBevelVec2( pt_i, pt_j, pt_k ) {

		var a = THREE.ExtrudeGeometry.__v1,
			b = THREE.ExtrudeGeometry.__v2,
			v_hat = THREE.ExtrudeGeometry.__v3,
			w_hat = THREE.ExtrudeGeometry.__v4,
			p = THREE.ExtrudeGeometry.__v5,
			q = THREE.ExtrudeGeometry.__v6,
			v, w,
			v_dot_w_hat, q_sub_p_dot_w_hat,
			s, intersection;

		// good reading for line-line intersection
		// http://sputsoft.com/blog/2010/03/line-line-intersection.html

		// define a as vector j->i
		// define b as vectot k->i

		a.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );
		b.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );

		// get unit vectors

		v = a.normalize();
		w = b.normalize();

		// normals from pt i

		v_hat.set( -v.y, v.x );
		w_hat.set( w.y, -w.x );

		// pts from i

		p.copy( pt_i ).add( v_hat );
		q.copy( pt_i ).add( w_hat );

		if ( p.equals( q ) ) {

			//console.log("Warning: lines are straight");
			return w_hat.clone();

		}

		// Points from j, k. helps prevents points cross overover most of the time

		p.copy( pt_j ).add( v_hat );
		q.copy( pt_k ).add( w_hat );

		v_dot_w_hat = v.dot( w_hat );
		q_sub_p_dot_w_hat = q.sub( p ).dot( w_hat );

		// We should not reach these conditions

		if ( v_dot_w_hat === 0 ) {

			console.log( "Either infinite or no solutions!" );

			if ( q_sub_p_dot_w_hat === 0 ) {

				console.log( "Its finite solutions." );

			} else {

				console.log( "Too bad, no solutions." );

			}

		}

		s = q_sub_p_dot_w_hat / v_dot_w_hat;

		if ( s < 0 ) {

			// in case of emergecy, revert to algorithm 1.

			return getBevelVec1( pt_i, pt_j, pt_k );

		}

		intersection = v.multiplyScalar( s ).add( p );

		return intersection.sub( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly

	}

	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		var pt_i = contour[ i ];
		var pt_j = contour[ j ];
		var pt_k = contour[ k ];

		contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {
	//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );

		//z = bevelThickness * t;
		bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved
		//bs = bevelSize * t ; // linear

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			//vert = scalePt( contour[ i ], contourCentroid, bs, false );
			v( vert.x, vert.y,  - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
				//vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );

				v( vert.x, vert.y,  -z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( !extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);
			binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);

			position2.copy( extrudePts[0] ).add(normal).add(binormal);

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( !extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[s] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );
		//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
		bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y,  amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( !extrudeByPath ) {

					v( vert.x, vert.y,  amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		if ( bevelEnabled ) {

			var layer = 0 ; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ], true );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );

			}
		}

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}

	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( --i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0, sl = steps  + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d, contour, s, sl, j, k );

			}
		}

	}


	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vector3( x, y, z ) );

	}

	function f3( a, b, c, isBottom ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;

		// normal, color, material
		scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );

		var uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );

 		scope.faceVertexUvs[ 0 ].push( uvs );

	}

	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;
		d += shapesOffset;

 		scope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );
 		scope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );

 		var uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,
 		                                    stepIndex, stepsLength, contourIndex1, contourIndex2 );

 		scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
 		scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

	}

};

THREE.ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {
		var ax = geometry.vertices[ indexA ].x,
			ay = geometry.vertices[ indexA ].y,

			bx = geometry.vertices[ indexB ].x,
			by = geometry.vertices[ indexB ].y,

			cx = geometry.vertices[ indexC ].x,
			cy = geometry.vertices[ indexC ].y;

		return [
			new THREE.Vector2( ax, ay ),
			new THREE.Vector2( bx, by ),
			new THREE.Vector2( cx, cy )
		];

	},

	generateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {

		return this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );

	},

	generateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,
	                              indexA, indexB, indexC, indexD, stepIndex, stepsLength,
	                              contourIndex1, contourIndex2 ) {

		var ax = geometry.vertices[ indexA ].x,
			ay = geometry.vertices[ indexA ].y,
			az = geometry.vertices[ indexA ].z,

			bx = geometry.vertices[ indexB ].x,
			by = geometry.vertices[ indexB ].y,
			bz = geometry.vertices[ indexB ].z,

			cx = geometry.vertices[ indexC ].x,
			cy = geometry.vertices[ indexC ].y,
			cz = geometry.vertices[ indexC ].z,

			dx = geometry.vertices[ indexD ].x,
			dy = geometry.vertices[ indexD ].y,
			dz = geometry.vertices[ indexD ].z;

		if ( Math.abs( ay - by ) < 0.01 ) {
			return [
				new THREE.Vector2( ax, 1 - az ),
				new THREE.Vector2( bx, 1 - bz ),
				new THREE.Vector2( cx, 1 - cz ),
				new THREE.Vector2( dx, 1 - dz )
			];
		} else {
			return [
				new THREE.Vector2( ay, 1 - az ),
				new THREE.Vector2( by, 1 - bz ),
				new THREE.Vector2( cy, 1 - cz ),
				new THREE.Vector2( dy, 1 - dz )
			];
		}
	}
};

THREE.ExtrudeGeometry.__v1 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2();

/**
 * @author jonobr1 / http://jonobr1.com
 *
 * Creates a one-sided polygonal geometry from a path shape. Similar to
 * ExtrudeGeometry.
 *
 * parameters = {
 *
 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
 *
 *	material: <int> // material index for front and back faces
 *	uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ShapeGeometry = function ( shapes, options ) {

	THREE.Geometry.call( this );

	if ( shapes instanceof Array === false ) shapes = [ shapes ];

	this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

	this.addShapeList( shapes, options );

	this.computeCentroids();
	this.computeFaceNormals();

};

THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * Add an array of shapes to THREE.ShapeGeometry.
 */
THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

	for ( var i = 0, l = shapes.length; i < l; i++ ) {

		this.addShape( shapes[ i ], options );

	}

	return this;

};

/**
 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
 */
THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

	if ( options === undefined ) options = {};
	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var material = options.material;
	var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

	var shapebb = this.shapebb;

	//

	var i, l, hole, s;

	var shapesOffset = this.vertices.length;
	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = !THREE.Shape.Utils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe...

		for ( i = 0, l = holes.length; i < l; i++ ) {

			hole = holes[ i ];

			if ( THREE.Shape.Utils.isClockWise( hole ) ) {

				holes[ i ] = hole.reverse();

			}

		}

		reverse = false;

	}

	var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );

	// Vertices

	var contour = vertices;

	for ( i = 0, l = holes.length; i < l; i++ ) {

		hole = holes[ i ];
		vertices = vertices.concat( hole );

	}

	//

	var vert, vlen = vertices.length;
	var face, flen = faces.length;
	var cont, clen = contour.length;

	for ( i = 0; i < vlen; i++ ) {

		vert = vertices[ i ];

		this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

	}

	for ( i = 0; i < flen; i++ ) {

		face = faces[ i ];

		var a = face[ 0 ] + shapesOffset;
		var b = face[ 1 ] + shapesOffset;
		var c = face[ 2 ] + shapesOffset;

		this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
		this.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );

	}

};

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://exocortex.com
 */

// points - to create a closed torus, one must use a set of points 
//    like so: [ a, b, c, d, a ], see first is the same as last.
// segments - the number of circumference segments to create
// phiStart - the starting radian
// phiLength - the radian (0 to 2*PI) range of the lathed section
//    2*pi is a closed lathe, less than 2PI is a portion.
THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

	THREE.Geometry.call( this );

	segments = segments || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || 2 * Math.PI;

	var inversePointLength = 1.0 / ( points.length - 1 );
	var inverseSegments = 1.0 / segments;

	for ( var i = 0, il = segments; i <= il; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var c = Math.cos( phi ),
			s = Math.sin( phi );

		for ( var j = 0, jl = points.length; j < jl; j ++ ) {

			var pt = points[ j ];

			var vertex = new THREE.Vector3();

			vertex.x = c * pt.x - s * pt.y;
			vertex.y = s * pt.x + c * pt.y;
			vertex.z = pt.z;

			this.vertices.push( vertex );

		}

	}

	var np = points.length;

	for ( var i = 0, il = segments; i < il; i ++ ) {

		for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {

			var base = j + np * i;
			var a = base;
			var b = base + np;
			var c = base + 1 + np;
			var d = base + 1;

			var u0 = i * inverseSegments;
			var v0 = j * inversePointLength;
			var u1 = u0 + inverseSegments;
			var v1 = v0 + inversePointLength;

			this.faces.push( new THREE.Face3( a, b, d ) );

			this.faceVertexUvs[ 0 ].push( [

				new THREE.Vector2( u0, v0 ),
				new THREE.Vector2( u1, v0 ),
				new THREE.Vector2( u0, v1 )

			] );

			this.faces.push( new THREE.Face3( b, c, d ) );

			this.faceVertexUvs[ 0 ].push( [

				new THREE.Vector2( u1, v0 ),
				new THREE.Vector2( u1, v1 ),
				new THREE.Vector2( u0, v1 )

			] );


		}

	}

	this.mergeVertices();
	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
 */

THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

	THREE.Geometry.call( this );

	this.width = width;
	this.height = height;

	this.widthSegments = widthSegments || 1;
	this.heightSegments = heightSegments || 1;

	var ix, iz;
	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = this.widthSegments;
	var gridZ = this.heightSegments;

	var gridX1 = gridX + 1;
	var gridZ1 = gridZ + 1;

	var segment_width = this.width / gridX;
	var segment_height = this.height / gridZ;

	var normal = new THREE.Vector3( 0, 0, 1 );

	for ( iz = 0; iz < gridZ1; iz ++ ) {

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;
			var y = iz * segment_height - height_half;

			this.vertices.push( new THREE.Vector3( x, - y, 0 ) );

		}

	}

	for ( iz = 0; iz < gridZ; iz ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iz;
			var b = ix + gridX1 * ( iz + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iz + 1 );
			var d = ( ix + 1 ) + gridX1 * iz;

			var uva = new THREE.Vector2( ix / gridX, 1 - iz / gridZ );
			var uvb = new THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ );
			var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ );
			var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ );

			var face = new THREE.Face3( a, b, d );
			face.normal.copy( normal );
			face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );

			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

			face = new THREE.Face3( b, c, d );
			face.normal.copy( normal );
			face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );

			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

		}

	}

	this.computeCentroids();

};

THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author Kaleb Murphy
 */

THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	innerRadius = innerRadius || 0;
	outerRadius = outerRadius || 50;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 3, phiSegments ) : 8;

	var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );

	for ( i = 0; i <= phiSegments; i ++ ) { // concentric circles inside ring

		for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle

			var vertex = new THREE.Vector3();
			var segment = thetaStart + o / thetaSegments * thetaLength;

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			this.vertices.push( vertex );
			uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );
		}

		radius += radiusStep;

	}

	var n = new THREE.Vector3( 0, 0, 1 );

	for ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring

		var thetaSegment = i * thetaSegments;

		for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle

			var segment = o + thetaSegment;

			var v1 = segment + i;
			var v2 = segment + thetaSegments + i;
			var v3 = segment + thetaSegments + 1 + i;

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

			v1 = segment + i;
			v2 = segment + thetaSegments + 1 + i;
			v3 = segment + 1 + i;

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

		}
	}

	this.computeCentroids();
	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.radius = radius = radius || 50;

	this.widthSegments = widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	this.heightSegments = heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	this.phiStart = phiStart = phiStart !== undefined ? phiStart : 0;
	this.phiLength = phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	this.thetaStart = thetaStart = thetaStart !== undefined ? thetaStart : 0;
	this.thetaLength = thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= heightSegments; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		for ( x = 0; x <= widthSegments; x ++ ) {

			var u = x / widthSegments;
			var v = y / heightSegments;

			var vertex = new THREE.Vector3();
			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	for ( y = 0; y < this.heightSegments; y ++ ) {

		for ( x = 0; x < this.widthSegments; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = vertices[ y + 1 ][ x ];
			var v4 = vertices[ y + 1 ][ x + 1 ];

			var n1 = this.vertices[ v1 ].clone().normalize();
			var n2 = this.vertices[ v2 ].clone().normalize();
			var n3 = this.vertices[ v3 ].clone().normalize();
			var n4 = this.vertices[ v4 ].clone().normalize();

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x ].clone();
			var uv4 = uvs[ y + 1 ][ x + 1 ].clone();

			if ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {

				uv1.x = ( uv1.x + uv2.x ) / 2;
				this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );

			} else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {

				uv3.x = ( uv3.x + uv4.x ) / 2;
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			} else {

				this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

				this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

			}

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For creating 3D text geometry in three.js
 *
 * Text = 3D Text
 *
 * parameters = {
 *  size: 			<float>, 	// size of the text
 *  height: 		<float>, 	// thickness to extrude text
 *  curveSegments: 	<int>,		// number of points on the curves
 *
 *  font: 			<string>,		// font name
 *  weight: 		<string>,		// font weight (normal, bold)
 *  style: 			<string>,		// font style  (normal, italics)
 *
 *  bevelEnabled:	<bool>,			// turn on bevel
 *  bevelThickness: <float>, 		// how deep into text bevel goes
 *  bevelSize:		<float>, 		// how far from text outline is bevel
 *  }
 *
 */

/*	Usage Examples

	// TextGeometry wrapper

	var text3d = new TextGeometry( text, options );

	// Complete manner

	var textShapes = THREE.FontUtils.generateShapes( text, options );
	var text3d = new ExtrudeGeometry( textShapes, options );

*/


THREE.TextGeometry = function ( text, parameters ) {

	parameters = parameters || {};

	var textShapes = THREE.FontUtils.generateShapes( text, parameters );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	THREE.ExtrudeGeometry.call( this, textShapes, parameters );

};

THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
 */

THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.radius = radius || 100;
	this.tube = tube || 40;
	this.radialSegments = radialSegments || 8;
	this.tubularSegments = tubularSegments || 6;
	this.arc = arc || Math.PI * 2;

	var center = new THREE.Vector3(), uvs = [], normals = [];

	for ( var j = 0; j <= this.radialSegments; j ++ ) {

		for ( var i = 0; i <= this.tubularSegments; i ++ ) {

			var u = i / this.tubularSegments * this.arc;
			var v = j / this.radialSegments * Math.PI * 2;

			center.x = this.radius * Math.cos( u );
			center.y = this.radius * Math.sin( u );

			var vertex = new THREE.Vector3();
			vertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = this.tube * Math.sin( v );

			this.vertices.push( vertex );

			uvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );
			normals.push( vertex.clone().sub( center ).normalize() );

		}

	}


	for ( var j = 1; j <= this.radialSegments; j ++ ) {

		for ( var i = 1; i <= this.tubularSegments; i ++ ) {

			var a = ( this.tubularSegments + 1 ) * j + i - 1;
			var b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( this.tubularSegments + 1 ) * j + i;

			var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );

			face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();

};

THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author oosmoxiecode
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
 */

THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.radius = radius || 100;
	this.tube = tube || 40;
	this.radialSegments = radialSegments || 64;
	this.tubularSegments = tubularSegments || 8;
	this.p = p || 2;
	this.q = q || 3;
	this.heightScale = heightScale || 1;
	this.grid = new Array( this.radialSegments );

	var tang = new THREE.Vector3();
	var n = new THREE.Vector3();
	var bitan = new THREE.Vector3();

	for ( var i = 0; i < this.radialSegments; ++ i ) {

		this.grid[ i ] = new Array( this.tubularSegments );
		var u = i / this.radialSegments * 2 * this.p * Math.PI;
		var p1 = getPos( u, this.q, this.p, this.radius, this.heightScale );
		var p2 = getPos( u + 0.01, this.q, this.p, this.radius, this.heightScale );
		tang.subVectors( p2, p1 );
		n.addVectors( p2, p1 );

		bitan.crossVectors( tang, n );
		n.crossVectors( bitan, tang );
		bitan.normalize();
		n.normalize();

		for ( var j = 0; j < this.tubularSegments; ++ j ) {

			var v = j / this.tubularSegments * 2 * Math.PI;
			var cx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			var cy = this.tube * Math.sin( v );

			var pos = new THREE.Vector3();
			pos.x = p1.x + cx * n.x + cy * bitan.x;
			pos.y = p1.y + cx * n.y + cy * bitan.y;
			pos.z = p1.z + cx * n.z + cy * bitan.z;

			this.grid[ i ][ j ] = scope.vertices.push( pos ) - 1;

		}

	}

	for ( var i = 0; i < this.radialSegments; ++ i ) {

		for ( var j = 0; j < this.tubularSegments; ++ j ) {

			var ip = ( i + 1 ) % this.radialSegments;
			var jp = ( j + 1 ) % this.tubularSegments;

			var a = this.grid[ i ][ j ];
			var b = this.grid[ ip ][ j ];
			var c = this.grid[ ip ][ jp ];
			var d = this.grid[ i ][ jp ];

			var uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );
			var uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );
			var uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );
			var uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );

			this.faces.push( new THREE.Face3( a, b, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

			this.faces.push( new THREE.Face3( b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

		}
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

	function getPos( u, in_q, in_p, radius, heightScale ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = in_q / in_p * u;
		var cs = Math.cos( quOverP );

		var tx = radius * ( 2 + cs ) * 0.5 * cu;
		var ty = radius * ( 2 + cs ) * su * 0.5;
		var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

		return new THREE.Vector3( tx, ty, tz );

	}

};

THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 *
 * Modified from the TorusKnotGeometry by @oosmoxiecode
 *
 * Creates a tube which extrudes along a 3d spline
 *
 * Uses parallel transport frames as described in
 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
 */

THREE.TubeGeometry = function( path, segments, radius, radialSegments, closed ) {

	THREE.Geometry.call( this );

	this.path = path;
	this.segments = segments || 64;
	this.radius = radius || 1;
	this.radialSegments = radialSegments || 8;
	this.closed = closed || false;

	this.grid = [];

	var scope = this,

		tangent,
		normal,
		binormal,

		numpoints = this.segments + 1,

		x, y, z,
		tx, ty, tz,
		u, v,

		cx, cy,
		pos, pos2 = new THREE.Vector3(),
		i, j,
		ip, jp,
		a, b, c, d,
		uva, uvb, uvc, uvd;

	var frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),
		tangents = frames.tangents,
		normals = frames.normals,
		binormals = frames.binormals;

	// proxy internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	function vert( x, y, z ) {

		return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

	}


	// consruct the grid

	for ( i = 0; i < numpoints; i++ ) {

		this.grid[ i ] = [];

		u = i / ( numpoints - 1 );

		pos = path.getPointAt( u );

		tangent = tangents[ i ];
		normal = normals[ i ];
		binormal = binormals[ i ];

		for ( j = 0; j < this.radialSegments; j++ ) {

			v = j / this.radialSegments * 2 * Math.PI;

			cx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			cy = this.radius * Math.sin( v );

			pos2.copy( pos );
			pos2.x += cx * normal.x + cy * binormal.x;
			pos2.y += cx * normal.y + cy * binormal.y;
			pos2.z += cx * normal.z + cy * binormal.z;

			this.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

		}
	}


	// construct the mesh

	for ( i = 0; i < this.segments; i++ ) {

		for ( j = 0; j < this.radialSegments; j++ ) {

			ip = ( this.closed ) ? (i + 1) % this.segments : i + 1;
			jp = (j + 1) % this.radialSegments;

			a = this.grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
			b = this.grid[ ip ][ j ];
			c = this.grid[ ip ][ jp ];
			d = this.grid[ i ][ jp ];

			uva = new THREE.Vector2( i / this.segments, j / this.radialSegments );
			uvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radialSegments );
			uvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radialSegments );
			uvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radialSegments );

			this.faces.push( new THREE.Face3( a, b, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

			this.faces.push( new THREE.Face3( b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

		}
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );


// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
THREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {

	var	tangent = new THREE.Vector3(),
		normal = new THREE.Vector3(),
		binormal = new THREE.Vector3(),

		tangents = [],
		normals = [],
		binormals = [],

		vec = new THREE.Vector3(),
		mat = new THREE.Matrix4(),

		numpoints = segments + 1,
		theta,
		epsilon = 0.0001,
		smallest,

		tx, ty, tz,
		i, u, v;


	// expose internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	// compute the tangent vectors for each segment on the path

	for ( i = 0; i < numpoints; i++ ) {

		u = i / ( numpoints - 1 );

		tangents[ i ] = path.getTangentAt( u );
		tangents[ i ].normalize();

	}

	initialNormal3();

	function initialNormal1(lastBinormal) {
		// fixed start binormal. Has dangers of 0 vectors
		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
		normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
	}

	function initialNormal2() {

		// This uses the Frenet-Serret formula for deriving binormal
		var t2 = path.getTangentAt( epsilon );

		normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
		binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

		normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

	}

	function initialNormal3() {
		// select an initial normal vector perpenicular to the first tangent vector,
		// and in the direction of the smallest tangent xyz component

		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		smallest = Number.MAX_VALUE;
		tx = Math.abs( tangents[ 0 ].x );
		ty = Math.abs( tangents[ 0 ].y );
		tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= smallest ) {
			smallest = tx;
			normal.set( 1, 0, 0 );
		}

		if ( ty <= smallest ) {
			smallest = ty;
			normal.set( 0, 1, 0 );
		}

		if ( tz <= smallest ) {
			normal.set( 0, 0, 1 );
		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	}


	// compute the slowly-varying normal and binormal vectors for each segment on the path

	for ( i = 1; i < numpoints; i++ ) {

		normals[ i ] = normals[ i-1 ].clone();

		binormals[ i ] = binormals[ i-1 ].clone();

		vec.crossVectors( tangents[ i-1 ], tangents[ i ] );

		if ( vec.length() > epsilon ) {

			vec.normalize();

			theta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors

			normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

		}

		binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

	}


	// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

	if ( closed ) {

		theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), -1, 1 ) );
		theta /= ( numpoints - 1 );

		if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {

			theta = -theta;

		}

		for ( i = 1; i < numpoints; i++ ) {

			// twist a little...
			normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

	}
};

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {

	THREE.Geometry.call( this );

	radius = radius || 1;
	detail = detail || 0;

	var that = this;

	for ( var i = 0, l = vertices.length; i < l; i ++ ) {

		prepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );

	}

	var midpoints = [], p = this.vertices;

	var f = [];
	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var v1 = p[ faces[ i ][ 0 ] ];
		var v2 = p[ faces[ i ][ 1 ] ];
		var v3 = p[ faces[ i ][ 2 ] ];

		f[ i ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

	}

	for ( var i = 0, l = f.length; i < l; i ++ ) {

		subdivide(f[ i ], detail);

	}


	// Handle case when face straddles the seam

	for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

		var uvs = this.faceVertexUvs[ 0 ][ i ];

		var x0 = uvs[ 0 ].x;
		var x1 = uvs[ 1 ].x;
		var x2 = uvs[ 2 ].x;

		var max = Math.max( x0, Math.max( x1, x2 ) );
		var min = Math.min( x0, Math.min( x1, x2 ) );

		if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary

			if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
			if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
			if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

		}

	}


	// Apply radius

	for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

		this.vertices[ i ].multiplyScalar( radius );

	}


	// Merge vertices

	this.mergeVertices();

	this.computeCentroids();

	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


	// Project vector onto sphere's surface

	function prepare( vector ) {

		var vertex = vector.normalize().clone();
		vertex.index = that.vertices.push( vertex ) - 1;

		// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

		var u = azimuth( vector ) / 2 / Math.PI + 0.5;
		var v = inclination( vector ) / Math.PI + 0.5;
		vertex.uv = new THREE.Vector2( u, 1 - v );

		return vertex;

	}


	// Approximate a curved face with recursively sub-divided triangles.

	function make( v1, v2, v3 ) {

		var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
		face.centroid.add( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );
		that.faces.push( face );

		var azi = azimuth( face.centroid );

		that.faceVertexUvs[ 0 ].push( [
			correctUV( v1.uv, v1, azi ),
			correctUV( v2.uv, v2, azi ),
			correctUV( v3.uv, v3, azi )
		] );

	}


	// Analytically subdivide a face to the required detail level.

	function subdivide(face, detail ) {

		var cols = Math.pow(2, detail);
		var cells = Math.pow(4, detail);
		var a = prepare( that.vertices[ face.a ] );
		var b = prepare( that.vertices[ face.b ] );
		var c = prepare( that.vertices[ face.c ] );
		var v = [];

		// Construct all of the vertices for this subdivision.

		for ( var i = 0 ; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = prepare( a.clone().lerp( c, i / cols ) );
			var bj = prepare( b.clone().lerp( c, i / cols ) );
			var rows = cols - i;

			for ( var j = 0; j <= rows; j ++) {

				if ( j == 0 && i == cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

				}

			}

		}

		// Construct all of the faces.

		for ( var i = 0; i < cols ; i ++ ) {

			for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 == 0 ) {

					make(
						v[ i ][ k + 1],
						v[ i + 1 ][ k ],
						v[ i ][ k ]
					);

				} else {

					make(
						v[ i ][ k + 1 ],
						v[ i + 1][ k + 1],
						v[ i + 1 ][ k ]
					);

				}

			}

		}

	}


	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, -vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}


	// Texture fixing helper. Spheres have some odd behaviours.

	function correctUV( uv, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
		return uv.clone();

	}


};

THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.IcosahedronGeometry = function ( radius, detail ) {

	this.radius = radius;
	this.detail = detail;

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		[ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],
		[  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],
		[  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]
	];

	var faces = [
		[ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],
		[ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],
		[ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],
		[ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );

};

THREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.OctahedronGeometry = function ( radius, detail ) {

	var vertices = [
		[ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]
	];

	var faces = [
		[ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );
};

THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.TetrahedronGeometry = function ( radius, detail ) {

	var vertices = [
		[ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]
	];

	var faces = [
		[ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );

};

THREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / https://github.com/zz85
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 *
 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
 *
 */

THREE.ParametricGeometry = function ( func, slices, stacks ) {

	THREE.Geometry.call( this );

	var verts = this.vertices;
	var faces = this.faces;
	var uvs = this.faceVertexUvs[ 0 ];

	var i, il, j, p;
	var u, v;

	var stackCount = stacks + 1;
	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			u = j / slices;

			p = func( u, v );
			verts.push( p );

		}
	}

	var a, b, c, d;
	var uva, uvb, uvc, uvd;

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			a = i * sliceCount + j;
			b = i * sliceCount + j + 1;
			c = (i + 1) * sliceCount + j + 1;
			d = (i + 1) * sliceCount + j;

			uva = new THREE.Vector2( j / slices, i / stacks );
			uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
			uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
			uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

			faces.push( new THREE.Face3( a, b, d ) );
			uvs.push( [ uva, uvb, uvd ] );

			faces.push( new THREE.Face3( b, c, d ) );
			uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

		}

	}

	// console.log(this);

	// magic bullet
	// var diff = this.mergeVertices();
	// console.log('removed ', diff, ' vertices by merging');

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AxisHelper = function ( size ) {

	size = size || 1;

	var geometry = new THREE.Geometry();

	geometry.vertices.push(
		new THREE.Vector3(), new THREE.Vector3( size, 0, 0 ),
		new THREE.Vector3(), new THREE.Vector3( 0, size, 0 ),
		new THREE.Vector3(), new THREE.Vector3( 0, 0, size )
	);

	geometry.colors.push(
		new THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),
		new THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),
		new THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )
	);

	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://exocortex.com
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  hex - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */

THREE.ArrowHelper = function ( dir, origin, length, hex, headLength, headWidth ) {

	// dir is assumed to be normalized

	THREE.Object3D.call( this );

	if ( hex === undefined ) hex = 0xffff00;
	if ( length === undefined ) length = 1;
	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	this.position = origin;

	var lineGeometry = new THREE.Geometry();
	lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
	lineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );

	this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );
	this.line.matrixAutoUpdate = false;
	this.add( this.line );

	var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
	coneGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );

	this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );
	this.cone.matrixAutoUpdate = false;
	this.add( this.cone );

	this.setDirection( dir );
	this.setLength( length, headLength, headWidth );

};

THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.ArrowHelper.prototype.setDirection = function () {

	var axis = new THREE.Vector3();
	var radians;

	return function ( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			axis.set( dir.z, 0, - dir.x ).normalize();

			radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( axis, radians );

		}

	};

}();

THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	this.line.scale.set( 1, length, 1 );
	this.line.updateMatrix();

	this.cone.scale.set( headWidth, headLength, headWidth );
	this.cone.position.y = length;
	this.cone.updateMatrix();

};

THREE.ArrowHelper.prototype.setColor = function ( hex ) {

	this.line.material.color.setHex( hex );
	this.cone.material.color.setHex( hex );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BoxHelper = function ( object ) {

	//   5____4
	// 1/___0/|
	// | 6__|_7
	// 2/___3/

	var vertices = [
		new THREE.Vector3(   1,   1,   1 ),
		new THREE.Vector3( - 1,   1,   1 ),
		new THREE.Vector3( - 1, - 1,   1 ),
		new THREE.Vector3(   1, - 1,   1 ),

		new THREE.Vector3(   1,   1, - 1 ),
		new THREE.Vector3( - 1,   1, - 1 ),
		new THREE.Vector3( - 1, - 1, - 1 ),
		new THREE.Vector3(   1, - 1, - 1 )
	];

	this.vertices = vertices;

	// TODO: Wouldn't be nice if Line had .segments?

	var geometry = new THREE.Geometry();
	geometry.vertices.push(
		vertices[ 0 ], vertices[ 1 ],
		vertices[ 1 ], vertices[ 2 ],
		vertices[ 2 ], vertices[ 3 ],
		vertices[ 3 ], vertices[ 0 ],

		vertices[ 4 ], vertices[ 5 ],
		vertices[ 5 ], vertices[ 6 ],
		vertices[ 6 ], vertices[ 7 ],
		vertices[ 7 ], vertices[ 4 ],

		vertices[ 0 ], vertices[ 4 ],
		vertices[ 1 ], vertices[ 5 ],
		vertices[ 2 ], vertices[ 6 ],
		vertices[ 3 ], vertices[ 7 ]
	);

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );

	if ( object !== undefined ) {

		this.update( object );

	}

};

THREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );

THREE.BoxHelper.prototype.update = function ( object ) {

	var geometry = object.geometry;

	if ( geometry.boundingBox === null ) {

		geometry.computeBoundingBox();

	}

	var min = geometry.boundingBox.min;
	var max = geometry.boundingBox.max;
	var vertices = this.vertices;

	vertices[ 0 ].set( max.x, max.y, max.z );
	vertices[ 1 ].set( min.x, max.y, max.z );
	vertices[ 2 ].set( min.x, min.y, max.z );
	vertices[ 3 ].set( max.x, min.y, max.z );
	vertices[ 4 ].set( max.x, max.y, min.z );
	vertices[ 5 ].set( min.x, max.y, min.z );
	vertices[ 6 ].set( min.x, min.y, min.z );
	vertices[ 7 ].set( max.x, min.y, min.z );

	this.geometry.computeBoundingSphere();
	this.geometry.verticesNeedUpdate = true;

	this.matrixAutoUpdate = false;
	this.matrixWorld = object.matrixWorld;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

// a helper to show the world-axis-aligned bounding box for an object

THREE.BoundingBoxHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0x888888;

	this.object = object;

	this.box = new THREE.Box3();

	THREE.Mesh.call( this, new THREE.CubeGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

};

THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.BoundingBoxHelper.prototype.update = function () {

	this.box.setFromObject( this.object );

	this.box.size( this.scale );

	this.box.center( this.position );

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

THREE.CameraHelper = function ( camera ) {

	var geometry = new THREE.Geometry();
	var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

	var pointMap = {};

	// colors

	var hexFrustum = 0xffaa00;
	var hexCone = 0xff0000;
	var hexUp = 0x00aaff;
	var hexTarget = 0xffffff;
	var hexCross = 0x333333;

	// near

	addLine( "n1", "n2", hexFrustum );
	addLine( "n2", "n4", hexFrustum );
	addLine( "n4", "n3", hexFrustum );
	addLine( "n3", "n1", hexFrustum );

	// far

	addLine( "f1", "f2", hexFrustum );
	addLine( "f2", "f4", hexFrustum );
	addLine( "f4", "f3", hexFrustum );
	addLine( "f3", "f1", hexFrustum );

	// sides

	addLine( "n1", "f1", hexFrustum );
	addLine( "n2", "f2", hexFrustum );
	addLine( "n3", "f3", hexFrustum );
	addLine( "n4", "f4", hexFrustum );

	// cone

	addLine( "p", "n1", hexCone );
	addLine( "p", "n2", hexCone );
	addLine( "p", "n3", hexCone );
	addLine( "p", "n4", hexCone );

	// up

	addLine( "u1", "u2", hexUp );
	addLine( "u2", "u3", hexUp );
	addLine( "u3", "u1", hexUp );

	// target

	addLine( "c", "t", hexTarget );
	addLine( "p", "c", hexCross );

	// cross

	addLine( "cn1", "cn2", hexCross );
	addLine( "cn3", "cn4", hexCross );

	addLine( "cf1", "cf2", hexCross );
	addLine( "cf3", "cf4", hexCross );

	function addLine( a, b, hex ) {

		addPoint( a, hex );
		addPoint( b, hex );

	}

	function addPoint( id, hex ) {

		geometry.vertices.push( new THREE.Vector3() );
		geometry.colors.push( new THREE.Color( hex ) );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( geometry.vertices.length - 1 );

	}

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

	this.camera = camera;
	this.matrixWorld = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

};

THREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );

THREE.CameraHelper.prototype.update = function () {

	var vector = new THREE.Vector3();
	var camera = new THREE.Camera();
	var projector = new THREE.Projector();

	return function () {

		var scope = this;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( "c", 0, 0, -1 );
		setPoint( "t", 0, 0,  1 );

		// near

		setPoint( "n1", -w, -h, -1 );
		setPoint( "n2",  w, -h, -1 );
		setPoint( "n3", -w,  h, -1 );
		setPoint( "n4",  w,  h, -1 );

		// far

		setPoint( "f1", -w, -h, 1 );
		setPoint( "f2",  w, -h, 1 );
		setPoint( "f3", -w,  h, 1 );
		setPoint( "f4",  w,  h, 1 );

		// up

		setPoint( "u1",  w * 0.7, h * 1.1, -1 );
		setPoint( "u2", -w * 0.7, h * 1.1, -1 );
		setPoint( "u3",        0, h * 2,   -1 );

		// cross

		setPoint( "cf1", -w,  0, 1 );
		setPoint( "cf2",  w,  0, 1 );
		setPoint( "cf3",  0, -h, 1 );
		setPoint( "cf4",  0,  h, 1 );

		setPoint( "cn1", -w,  0, -1 );
		setPoint( "cn2",  w,  0, -1 );
		setPoint( "cn3",  0, -h, -1 );
		setPoint( "cn4",  0,  h, -1 );

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z );
			projector.unprojectVector( vector, camera );

			var points = scope.pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					scope.geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		this.geometry.verticesNeedUpdate = true;

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.DirectionalLightHelper = function ( light, size ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrixWorld = light.matrixWorld;
	this.matrixAutoUpdate = false;

	size = size || 1;
	var geometry = new THREE.PlaneGeometry( size, size );
	var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	this.lightPlane = new THREE.Mesh( geometry, material );
	this.add( this.lightPlane );

	geometry = new THREE.Geometry();
	geometry.vertices.push( new THREE.Vector3() );
	geometry.vertices.push( new THREE.Vector3() );

	material = new THREE.LineBasicMaterial( { fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	this.targetLine = new THREE.Line( geometry, material );
	this.add( this.targetLine );

	this.update();

};

THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.DirectionalLightHelper.prototype.dispose = function () {
	
	this.lightPlane.geometry.dispose();
	this.lightPlane.material.dispose();
	this.targetLine.geometry.dispose();
	this.targetLine.material.dispose();
};

THREE.DirectionalLightHelper.prototype.update = function () {

	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();
	var v3 = new THREE.Vector3();

	return function () {

		v1.setFromMatrixPosition( this.light.matrixWorld );
		v2.setFromMatrixPosition( this.light.target.matrixWorld );
		v3.subVectors( v2, v1 );

		this.lightPlane.lookAt( v3 );
		this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.targetLine.geometry.vertices[ 1 ].copy( v3 );
		this.targetLine.geometry.verticesNeedUpdate = true;
		this.targetLine.material.color.copy( this.lightPlane.material.color );

	}

}();


/**
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.EdgesHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0xffffff;

	var edge = [ 0, 0 ], hash = {};
	var sortFunction = function ( a, b ) { return a - b };

	var keys = [ 'a', 'b', 'c' ];
	var geometry = new THREE.BufferGeometry();

	var geometry2 = object.geometry.clone();

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var vertices = geometry2.vertices;
	var faces = geometry2.faces;
	var numEdges = 0;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge[ 0 ] = face[ keys[ j ] ];
			edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
			edge.sort( sortFunction );

			var key = edge.toString();

			if ( hash[ key ] === undefined ) {

				hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
				numEdges ++;

			} else {

				hash[ key ].face2 = i;

			}

		}

	}

	geometry.addAttribute( 'position', Float32Array, 2 * numEdges, 3 );

	var coords = geometry.attributes.position.array;

	var index = 0;

	for ( var key in hash ) {

		var h = hash[ key ];

		if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) < 0.9999 ) { // hardwired const OK

			var vertex = vertices[ h.vert1 ];
			coords[ index ++ ] = vertex.x;
			coords[ index ++ ] = vertex.y;
			coords[ index ++ ] = vertex.z;

			vertex = vertices[ h.vert2 ];
			coords[ index ++ ] = vertex.x;
			coords[ index ++ ] = vertex.y;
			coords[ index ++ ] = vertex.z;

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;
	this.matrixWorld = object.matrixWorld;

};

THREE.EdgesHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var faces = this.object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		geometry.vertices.push( new THREE.Vector3() );
		geometry.vertices.push( new THREE.Vector3() );

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.normalMatrix = new THREE.Matrix3();

	this.update();

};

THREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.FaceNormalsHelper.prototype.update = ( function ( object ) {

	var v1 = new THREE.Vector3();

	return function ( object ) {

		this.object.updateMatrixWorld( true );

		this.normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var vertices = this.geometry.vertices;

		var faces = this.object.geometry.faces;

		var worldMatrix = this.object.matrixWorld;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			v1.copy( face.normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );

			var idx = 2 * i;

			vertices[ idx ].copy( face.centroid ).applyMatrix4( worldMatrix );

			vertices[ idx + 1 ].addVectors( vertices[ idx ], v1 );

		}

		this.geometry.verticesNeedUpdate = true;

		return this;

	}

}());


/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GridHelper = function ( size, step ) {

	var geometry = new THREE.Geometry();
	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

	this.color1 = new THREE.Color( 0x444444 );
	this.color2 = new THREE.Color( 0x888888 );

	for ( var i = - size; i <= size; i += step ) {

		geometry.vertices.push(
			new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
			new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
		);

		var color = i === 0 ? this.color1 : this.color2;

		geometry.colors.push( color, color, color, color );

	}

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.GridHelper.prototype = Object.create( THREE.Line.prototype );

THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {

	this.color1.set( colorCenterLine );
	this.color2.set( colorGrid );

	this.geometry.colorsNeedUpdate = true;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrixWorld = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.colors = [ new THREE.Color(), new THREE.Color() ];

	var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
	geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

	for ( var i = 0, il = 8; i < il; i ++ ) {

		geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

	}

	var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

	this.lightSphere = new THREE.Mesh( geometry, material );
	this.add( this.lightSphere );

	this.update();

};

THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.HemisphereLightHelper.prototype.dispose = function () {
	this.lightSphere.geometry.dispose();
	this.lightSphere.material.dispose();
};

THREE.HemisphereLightHelper.prototype.update = function () {

	var vector = new THREE.Vector3();

	return function () {

		this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
		this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

		this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
		this.lightSphere.geometry.colorsNeedUpdate = true;

	}

}();


/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLightHelper = function ( light, sphereSize ) {

	this.light = light;
	this.light.updateMatrixWorld();

	var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
	var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	THREE.Mesh.call( this, geometry, material );

	this.matrixWorld = this.light.matrixWorld;
	this.matrixAutoUpdate = false;

	/*
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/

};

THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.PointLightHelper.prototype.dispose = function () {
	
	this.geometry.dispose();
	this.material.dispose();
};

THREE.PointLightHelper.prototype.update = function () {

	this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/

};


/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.SpotLightHelper = function ( light ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrixWorld = light.matrixWorld;
	this.matrixAutoUpdate = false;

	var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );

	geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, -0.5, 0 ) );
	geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

	var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
	
	this.cone = new THREE.Mesh( geometry, material );
	this.add( this.cone );

	this.update();

};

THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.SpotLightHelper.prototype.dispose = function () {
	this.cone.geometry.dispose();
	this.cone.material.dispose();
};

THREE.SpotLightHelper.prototype.update = function () {

	var vector = new THREE.Vector3();
	var vector2 = new THREE.Vector3();

	return function () {

		var coneLength = this.light.distance ? this.light.distance : 10000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		vector.setFromMatrixPosition( this.light.matrixWorld );
		vector2.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( vector2.sub( vector ) );

		this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var vertices = object.geometry.vertices;

	var faces = object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.vertices.push( new THREE.Vector3() );

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.normalMatrix = new THREE.Matrix3();

	this.update();

};

THREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexNormalsHelper.prototype.update = ( function ( object ) {

	var v1 = new THREE.Vector3();

	return function( object ) {

		var keys = [ 'a', 'b', 'c', 'd' ];

		this.object.updateMatrixWorld( true );

		this.normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var vertices = this.geometry.vertices;

		var verts = this.object.geometry.vertices;

		var faces = this.object.geometry.faces;

		var worldMatrix = this.object.matrixWorld;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				var vertexId = face[ keys[ j ] ];
				var vertex = verts[ vertexId ];

				var normal = face.vertexNormals[ j ];

				vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

				v1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );

				v1.add( vertices[ idx ] );
				idx = idx + 1;

				vertices[ idx ].copy( v1 );
				idx = idx + 1;

			}

		}

		this.geometry.verticesNeedUpdate = true;

		return this;

	}

}());

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0x0000ff;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var vertices = object.geometry.vertices;

	var faces = object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.vertices.push( new THREE.Vector3() );

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.update();

};

THREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexTangentsHelper.prototype.update = ( function ( object ) {

	var v1 = new THREE.Vector3();

	return function( object ) {

		var keys = [ 'a', 'b', 'c', 'd' ];

		this.object.updateMatrixWorld( true );

		var vertices = this.geometry.vertices;

		var verts = this.object.geometry.vertices;

		var faces = this.object.geometry.faces;

		var worldMatrix = this.object.matrixWorld;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

				var vertexId = face[ keys[ j ] ];
				var vertex = verts[ vertexId ];

				var tangent = face.vertexTangents[ j ];

				vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

				v1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );

				v1.add( vertices[ idx ] );
				idx = idx + 1;

				vertices[ idx ].copy( v1 );
				idx = idx + 1;

			}

		}

		this.geometry.verticesNeedUpdate = true;

		return this;

	}

}());

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.WireframeHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0xffffff;

	var edge = [ 0, 0 ], hash = {};
	var sortFunction = function ( a, b ) { return a - b };

	var keys = [ 'a', 'b', 'c' ];
	var geometry = new THREE.BufferGeometry();

	if ( object.geometry instanceof THREE.Geometry ) {

		var vertices = object.geometry.vertices;
		var faces = object.geometry.faces;
		var numEdges = 0;

		// allocate maximal size
		var edges = new Uint32Array( 6 * faces.length );

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					edges[ 2 * numEdges ] = edge[ 0 ];
					edges[ 2 * numEdges + 1 ] = edge[ 1 ];
					hash[ key ] = true;
					numEdges ++;

				}

			}

		}

		geometry.addAttribute( 'position', Float32Array, 2 * numEdges, 3 );

		var coords = geometry.attributes.position.array;

		for ( var i = 0, l = numEdges; i < l; i ++ ) {

			for ( var j = 0; j < 2; j ++ ) {

				var vertex = vertices[ edges [ 2 * i + j] ];

				var index = 6 * i + 3 * j;
				coords[ index + 0 ] = vertex.x;
				coords[ index + 1 ] = vertex.y;
				coords[ index + 2 ] = vertex.z;

			}

		}

	} else if ( object.geometry instanceof THREE.BufferGeometry && object.geometry.attributes.index !== undefined ) { // indexed BufferGeometry

		var vertices = object.geometry.attributes.position.array;
		var indices = object.geometry.attributes.index.array;
		var offsets = object.geometry.offsets;
		var numEdges = 0;

		// allocate maximal size
		var edges = new Uint32Array( 2 * indices.length );

		for ( var o = 0, ol = offsets.length; o < ol; ++ o ) {

			var start = offsets[ o ].start;
			var count = offsets[ o ].count;
			var index = offsets[ o ].index;

			for ( var i = start, il = start + count; i < il; i += 3 ) {

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = index + indices[ i + j ];
					edge[ 1 ] = index + indices[ i + ( j + 1 ) % 3 ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

		}

		geometry.addAttribute( 'position', Float32Array, 2 * numEdges, 3 );

		var coords = geometry.attributes.position.array;

		for ( var i = 0, l = numEdges; i < l; i ++ ) {

			for ( var j = 0; j < 2; j ++ ) {

				var index = 6 * i + 3 * j;
				var index2 = 3 * edges[ 2 * i + j];
				coords[ index + 0 ] = vertices[ index2 ];
				coords[ index + 1 ] = vertices[ index2 + 1 ];
				coords[ index + 2 ] = vertices[ index2 + 2 ];

			}

		}

	} else if ( object.geometry instanceof THREE.BufferGeometry	) { // non-indexed BufferGeometry

		var vertices = object.geometry.attributes.position.array;
		var numEdges = vertices.length / 3;
		var numTris = numEdges / 3;

		geometry.addAttribute( 'position', Float32Array, 2 * numEdges, 3 );

		var coords = geometry.attributes.position.array;

		for ( var i = 0, l = numTris; i < l; i ++ ) {

			for ( var j = 0; j < 3; j ++ ) {

				var index = 18 * i + 6 * j;

				var index1 = 9 * i + 3 * j;
				coords[ index + 0 ] = vertices[ index1 ];
				coords[ index + 1 ] = vertices[ index1 + 1 ];
				coords[ index + 2 ] = vertices[ index1 + 2 ];

				var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
				coords[ index + 3 ] = vertices[ index2 ];
				coords[ index + 4 ] = vertices[ index2 + 1 ];
				coords[ index + 5 ] = vertices[ index2 + 2 ];

			}

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;
	this.matrixWorld = object.matrixWorld;

};

THREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ImmediateRenderObject = function () {

	THREE.Object3D.call( this );

	this.render = function ( renderCallback ) { };

};

THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlare = function ( texture, size, distance, blending, color ) {

	THREE.Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new THREE.Vector3();
	this.customUpdateCallback = undefined;

	if( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

};

THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );


/*
 * Add: adds another flare
 */

THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

	if( size === undefined ) size = -1;
	if( distance === undefined ) distance = 0;
	if( opacity === undefined ) opacity = 1;
	if( color === undefined ) color = new THREE.Color( 0xffffff );
	if( blending === undefined ) blending = THREE.NormalBlending;

	distance = Math.min( distance, Math.max( 0, distance ) );

	this.lensFlares.push( { texture: texture, 			// THREE.Texture
		                    size: size, 				// size in pixels (-1 = use texture.width)
		                    distance: distance, 		// distance (0-1) from light source (0=at light source)
		                    x: 0, y: 0, z: 0,			// screen position (-1 => 1) z = 0 is ontop z = 1 is back
		                    scale: 1, 					// scale
		                    rotation: 1, 				// rotation
		                    opacity: opacity,			// opacity
							color: color,				// color
		                    blending: blending } );		// blending

};


/*
 * Update lens flares update positions on all flares based on the screen position
 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
 */

THREE.LensFlare.prototype.updateLensFlares = function () {

	var f, fl = this.lensFlares.length;
	var flare;
	var vecX = -this.positionScreen.x * 2;
	var vecY = -this.positionScreen.y * 2;

	for( f = 0; f < fl; f ++ ) {

		flare = this.lensFlares[ f ];

		flare.x = this.positionScreen.x + vecX * flare.distance;
		flare.y = this.positionScreen.y + vecY * flare.distance;

		flare.wantedRotation = flare.x * Math.PI * 0.25;
		flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

	}

};













/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphBlendMesh = function( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	this.animationsMap = {};
	this.animationsList = [];

	// prepare default animation
	// (all frames played together in 1 second)

	var numFrames = this.geometry.morphTargets.length;

	var name = "__default";

	var startFrame = 0;
	var endFrame = numFrames - 1;

	var fps = numFrames / 1;

	this.createAnimation( name, startFrame, endFrame, fps );
	this.setAnimationWeight( name, 1 );

};

THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

	var animation = {

		startFrame: start,
		endFrame: end,

		length: end - start + 1,

		fps: fps,
		duration: ( end - start ) / fps,

		lastFrame: 0,
		currentFrame: 0,

		active: false,

		time: 0,
		direction: 1,
		weight: 1,

		directionBackwards: false,
		mirroredLoop: false

	};

	this.animationsMap[ name ] = animation;
	this.animationsList.push( animation );

};

THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

	var pattern = /([a-z]+)(\d+)/;

	var firstAnimation, frameRanges = {};

	var geometry = this.geometry;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var chunks = morph.name.match( pattern );

		if ( chunks && chunks.length > 1 ) {

			var name = chunks[ 1 ];
			var num = chunks[ 2 ];

			if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };

			var range = frameRanges[ name ];

			if ( i < range.start ) range.start = i;
			if ( i > range.end ) range.end = i;

			if ( ! firstAnimation ) firstAnimation = name;

		}

	}

	for ( var name in frameRanges ) {

		var range = frameRanges[ name ];
		this.createAnimation( name, range.start, range.end, fps );

	}

	this.firstAnimation = firstAnimation;

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = 1;
		animation.directionBackwards = false;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = -1;
		animation.directionBackwards = true;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.fps = fps;
		animation.duration = ( animation.end - animation.start ) / animation.fps;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.duration = duration;
		animation.fps = ( animation.end - animation.start ) / animation.duration;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.weight = weight;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = time;

	}

};

THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

	var time = 0;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		time = animation.time;

	}

	return time;

};

THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

	var duration = -1;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		duration = animation.duration;

	}

	return duration;

};

THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = 0;
		animation.active = true;

	} else {

		console.warn( "animation[" + name + "] undefined" );

	}

};

THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.active = false;

	}

};

THREE.MorphBlendMesh.prototype.update = function ( delta ) {

	for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

		var animation = this.animationsList[ i ];

		if ( ! animation.active ) continue;

		var frameTime = animation.duration / animation.length;

		animation.time += animation.direction * delta;

		if ( animation.mirroredLoop ) {

			if ( animation.time > animation.duration || animation.time < 0 ) {

				animation.direction *= -1;

				if ( animation.time > animation.duration ) {

					animation.time = animation.duration;
					animation.directionBackwards = true;

				}

				if ( animation.time < 0 ) {

					animation.time = 0;
					animation.directionBackwards = false;

				}

			}

		} else {

			animation.time = animation.time % animation.duration;

			if ( animation.time < 0 ) animation.time += animation.duration;

		}

		var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
		var weight = animation.weight;

		if ( keyframe !== animation.currentFrame ) {

			this.morphTargetInfluences[ animation.lastFrame ] = 0;
			this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

			this.morphTargetInfluences[ keyframe ] = 0;

			animation.lastFrame = animation.currentFrame;
			animation.currentFrame = keyframe;

		}

		var mix = ( animation.time % frameTime ) / frameTime;

		if ( animation.directionBackwards ) mix = 1 - mix;

		this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
		this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

	}

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlarePlugin = function () {

	var _gl, _renderer, _precision, _lensFlare = {};

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		_precision = renderer.getPrecision();

		_lensFlare.vertices = new Float32Array( 8 + 8 );
		_lensFlare.faces = new Uint16Array( 6 );

		var i = 0;
		_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;	// vertex
		_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;	// uv... etc.

		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;

		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;

		_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
		_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;

		i = 0;
		_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
		_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;

		// buffers

		_lensFlare.vertexBuffer     = _gl.createBuffer();
		_lensFlare.elementBuffer    = _gl.createBuffer();

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
		_gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );
		_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );

		// textures

		_lensFlare.tempTexture      = _gl.createTexture();
		_lensFlare.occlusionTexture = _gl.createTexture();

		_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
		_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

		_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
		_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

		if ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {

			_lensFlare.hasVertexTexture = false;
			_lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlare" ], _precision );

		} else {

			_lensFlare.hasVertexTexture = true;
			_lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlareVertexTexture" ], _precision );

		}

		_lensFlare.attributes = {};
		_lensFlare.uniforms = {};

		_lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, "position" );
		_lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, "uv" );

		_lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, "renderType" );
		_lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, "map" );
		_lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, "occlusionMap" );
		_lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, "opacity" );
		_lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, "color" );
		_lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, "scale" );
		_lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, "rotation" );
		_lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, "screenPosition" );

	};


	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 *         Then _lensFlare.update_lensFlares() is called to re-position and
	 *         update transparency of flares. Then they are rendered.
	 *
	 */

	this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

		var flares = scene.__webglFlares,
			nFlares = flares.length;

		if ( ! nFlares ) return;

		var tempPosition = new THREE.Vector3();

		var invAspect = viewportHeight / viewportWidth,
			halfViewportWidth = viewportWidth * 0.5,
			halfViewportHeight = viewportHeight * 0.5;

		var size = 16 / viewportHeight,
			scale = new THREE.Vector2( size * invAspect, size );

		var screenPosition = new THREE.Vector3( 1, 1, 0 ),
			screenPositionPixels = new THREE.Vector2( 1, 1 );

		var uniforms = _lensFlare.uniforms,
			attributes = _lensFlare.attributes;

		// set _lensFlare program and reset blending

		_gl.useProgram( _lensFlare.program );

		_gl.enableVertexAttribArray( _lensFlare.attributes.vertex );
		_gl.enableVertexAttribArray( _lensFlare.attributes.uv );

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/unforms

		_gl.uniform1i( uniforms.occlusionMap, 0 );
		_gl.uniform1i( uniforms.map, 1 );

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
		_gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );
		_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );

		_gl.disable( _gl.CULL_FACE );
		_gl.depthMask( false );

		var i, j, jl, flare, sprite;

		for ( i = 0; i < nFlares; i ++ ) {

			size = 16 / viewportHeight;
			scale.set( size * invAspect, size );

			// calc object screen position

			flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyProjection( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition )

			screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
			screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

			// screen cull

			if ( _lensFlare.hasVertexTexture || (
				screenPositionPixels.x > 0 &&
				screenPositionPixels.x < viewportWidth &&
				screenPositionPixels.y > 0 &&
				screenPositionPixels.y < viewportHeight ) ) {

				// save current RGB to temp texture

				_gl.activeTexture( _gl.TEXTURE1 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
				_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// render pink quad

				_gl.uniform1i( uniforms.renderType, 0 );
				_gl.uniform2f( uniforms.scale, scale.x, scale.y );
				_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				_gl.disable( _gl.BLEND );
				_gl.enable( _gl.DEPTH_TEST );

				_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				_gl.activeTexture( _gl.TEXTURE0 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
				_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// restore graphics

				_gl.uniform1i( uniforms.renderType, 1 );
				_gl.disable( _gl.DEPTH_TEST );

				_gl.activeTexture( _gl.TEXTURE1 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
				_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition )

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				_gl.uniform1i( uniforms.renderType, 2 );
				_gl.enable( _gl.BLEND );

				for ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewportHeight;

						scale.x = size * invAspect;
						scale.y = size;

						_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						_gl.uniform2f( uniforms.scale, scale.x, scale.y );
						_gl.uniform1f( uniforms.rotation, sprite.rotation );

						_gl.uniform1f( uniforms.opacity, sprite.opacity );
						_gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						_renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
						_renderer.setTexture( sprite.texture, 1 );

						_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		_gl.enable( _gl.CULL_FACE );
		_gl.enable( _gl.DEPTH_TEST );
		_gl.depthMask( true );

	};

	function createProgram ( shader, precision ) {

		var program = _gl.createProgram();

		var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );
		var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );

		var prefix = "precision " + precision + " float;\n";

		_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		_gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		_gl.compileShader( fragmentShader );
		_gl.compileShader( vertexShader );

		_gl.attachShader( program, fragmentShader );
		_gl.attachShader( program, vertexShader );

		_gl.linkProgram( program );

		return program;

	};

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ShadowMapPlugin = function () {

	var _gl,
	_renderer,
	_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

	_frustum = new THREE.Frustum(),
	_projScreenMatrix = new THREE.Matrix4(),

	_min = new THREE.Vector3(),
	_max = new THREE.Vector3(),

	_matrixPosition = new THREE.Vector3();

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
		_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
		_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
		_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

		_depthMaterial._shadowPass = true;
		_depthMaterialMorph._shadowPass = true;
		_depthMaterialSkin._shadowPass = true;
		_depthMaterialMorphSkin._shadowPass = true;

	};

	this.render = function ( scene, camera ) {

		if ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;

		this.update( scene, camera );

	};

	this.update = function ( scene, camera ) {

		var i, il, j, jl, n,

		shadowMap, shadowMatrix, shadowCamera,
		program, buffer, material,
		webglObject, object, light,
		renderList,

		lights = [],
		k = 0,

		fog = null;

		// set GL state for depth map

		_gl.clearColor( 1, 1, 1, 1 );
		_gl.disable( _gl.BLEND );

		_gl.enable( _gl.CULL_FACE );
		_gl.frontFace( _gl.CCW );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.FRONT );

		} else {

			_gl.cullFace( _gl.BACK );

		}

		_renderer.setDepthTest( true );

		// preprocess lights
		// 	- skip lights that are not casting shadows
		//	- create virtual lights for cascaded shadow maps

		for ( i = 0, il = scene.__lights.length; i < il; i ++ ) {

			light = scene.__lights[ i ];

			if ( ! light.castShadow ) continue;

			if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {

				for ( n = 0; n < light.shadowCascadeCount; n ++ ) {

					var virtualLight;

					if ( ! light.shadowCascadeArray[ n ] ) {

						virtualLight = createVirtualLight( light, n );
						virtualLight.originalCamera = camera;

						var gyro = new THREE.Gyroscope();
						gyro.position = light.shadowCascadeOffset;

						gyro.add( virtualLight );
						gyro.add( virtualLight.target );

						camera.add( gyro );

						light.shadowCascadeArray[ n ] = virtualLight;

						console.log( "Created virtualLight", virtualLight );

					} else {

						virtualLight = light.shadowCascadeArray[ n ];

					}

					updateVirtualLight( light, n );

					lights[ k ] = virtualLight;
					k ++;

				}

			} else {

				lights[ k ] = light;
				k ++;

			}

		}

		// render depth map

		for ( i = 0, il = lights.length; i < il; i ++ ) {

			light = lights[ i ];

			if ( ! light.shadowMap ) {

				var shadowFilter = THREE.LinearFilter;

				if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {

					shadowFilter = THREE.NearestFilter;

				}

				var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };

				light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );
				light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );

				light.shadowMatrix = new THREE.Matrix4();

			}

			if ( ! light.shadowCamera ) {

				if ( light instanceof THREE.SpotLight ) {

					light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );

				} else if ( light instanceof THREE.DirectionalLight ) {

					light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );

				} else {

					console.error( "Unsupported light type for shadow" );
					continue;

				}

				scene.add( light.shadowCamera );

				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			}

			if ( light.shadowCameraVisible && ! light.cameraHelper ) {

				light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );
				light.shadowCamera.add( light.cameraHelper );

			}

			if ( light.isVirtual && virtualLight.originalCamera == camera ) {

				updateShadowCamera( camera, light );

			}

			shadowMap = light.shadowMap;
			shadowMatrix = light.shadowMatrix;
			shadowCamera = light.shadowCamera;

			shadowCamera.position.setFromMatrixPosition( light.matrixWorld );
			_matrixPosition.setFromMatrixPosition( light.target.matrixWorld );
			shadowCamera.lookAt( _matrixPosition );
			shadowCamera.updateMatrixWorld();

			shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

			if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;
			if ( light.shadowCameraVisible ) light.cameraHelper.update();

			// compute shadow matrix

			shadowMatrix.set( 0.5, 0.0, 0.0, 0.5,
							  0.0, 0.5, 0.0, 0.5,
							  0.0, 0.0, 0.5, 0.5,
							  0.0, 0.0, 0.0, 1.0 );

			shadowMatrix.multiply( shadowCamera.projectionMatrix );
			shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			// update camera matrices and frustum

			_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			// render shadow map

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// set object matrices & frustum culling

			renderList = scene.__webglObjects;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];
				object = webglObject.object;

				webglObject.render = false;

				if ( object.visible && object.castShadow ) {

					if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

						object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

						webglObject.render = true;

					}

				}

			}

			// render regular objects

			var objectMaterial, useMorphing, useSkinning;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];

				if ( webglObject.render ) {

					object = webglObject.object;
					buffer = webglObject.buffer;

					// culling is overriden globally for all objects
					// while rendering depth map

					// need to deal with MeshFaceMaterial somehow
					// in that case just use the first of material.materials for now
					// (proper solution would require to break objects by materials
					//  similarly to regular rendering and then set corresponding
					//  depth materials per each chunk instead of just once per object)

					objectMaterial = getObjectMaterial( object );

					useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
					useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

					if ( object.customDepthMaterial ) {

						material = object.customDepthMaterial;

					} else if ( useSkinning ) {

						material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

					} else if ( useMorphing ) {

						material = _depthMaterialMorph;

					} else {

						material = _depthMaterial;

					}

					if ( buffer instanceof THREE.BufferGeometry ) {

						_renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );

					} else {

						_renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );

					}

				}

			}

			// set matrices and render immediate objects

			renderList = scene.__webglObjectsImmediate;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];
				object = webglObject.object;

				if ( object.visible && object.castShadow ) {

					object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					_renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );

				}

			}

		}

		// restore GL state

		var clearColor = _renderer.getClearColor(),
		clearAlpha = _renderer.getClearAlpha();

		_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
		_gl.enable( _gl.BLEND );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.BACK );

		}

	};

	function createVirtualLight( light, cascade ) {

		var virtualLight = new THREE.DirectionalLight();

		virtualLight.isVirtual = true;

		virtualLight.onlyShadow = true;
		virtualLight.castShadow = true;

		virtualLight.shadowCameraNear = light.shadowCameraNear;
		virtualLight.shadowCameraFar = light.shadowCameraFar;

		virtualLight.shadowCameraLeft = light.shadowCameraLeft;
		virtualLight.shadowCameraRight = light.shadowCameraRight;
		virtualLight.shadowCameraBottom = light.shadowCameraBottom;
		virtualLight.shadowCameraTop = light.shadowCameraTop;

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;

		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
		virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];
		virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];

		virtualLight.pointsWorld = [];
		virtualLight.pointsFrustum = [];

		var pointsWorld = virtualLight.pointsWorld,
			pointsFrustum = virtualLight.pointsFrustum;

		for ( var i = 0; i < 8; i ++ ) {

			pointsWorld[ i ] = new THREE.Vector3();
			pointsFrustum[ i ] = new THREE.Vector3();

		}

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		pointsFrustum[ 0 ].set( -1, -1, nearZ );
		pointsFrustum[ 1 ].set(  1, -1, nearZ );
		pointsFrustum[ 2 ].set( -1,  1, nearZ );
		pointsFrustum[ 3 ].set(  1,  1, nearZ );

		pointsFrustum[ 4 ].set( -1, -1, farZ );
		pointsFrustum[ 5 ].set(  1, -1, farZ );
		pointsFrustum[ 6 ].set( -1,  1, farZ );
		pointsFrustum[ 7 ].set(  1,  1, farZ );

		return virtualLight;

	}

	// Synchronize virtual light with the original light

	function updateVirtualLight( light, cascade ) {

		var virtualLight = light.shadowCascadeArray[ cascade ];

		virtualLight.position.copy( light.position );
		virtualLight.target.position.copy( light.target.position );
		virtualLight.lookAt( virtualLight.target );

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;
		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		var pointsFrustum = virtualLight.pointsFrustum;

		pointsFrustum[ 0 ].z = nearZ;
		pointsFrustum[ 1 ].z = nearZ;
		pointsFrustum[ 2 ].z = nearZ;
		pointsFrustum[ 3 ].z = nearZ;

		pointsFrustum[ 4 ].z = farZ;
		pointsFrustum[ 5 ].z = farZ;
		pointsFrustum[ 6 ].z = farZ;
		pointsFrustum[ 7 ].z = farZ;

	}

	// Fit shadow camera's ortho frustum to camera frustum

	function updateShadowCamera( camera, light ) {

		var shadowCamera = light.shadowCamera,
			pointsFrustum = light.pointsFrustum,
			pointsWorld = light.pointsWorld;

		_min.set( Infinity, Infinity, Infinity );
		_max.set( -Infinity, -Infinity, -Infinity );

		for ( var i = 0; i < 8; i ++ ) {

			var p = pointsWorld[ i ];

			p.copy( pointsFrustum[ i ] );
			THREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );

			p.applyMatrix4( shadowCamera.matrixWorldInverse );

			if ( p.x < _min.x ) _min.x = p.x;
			if ( p.x > _max.x ) _max.x = p.x;

			if ( p.y < _min.y ) _min.y = p.y;
			if ( p.y > _max.y ) _max.y = p.y;

			if ( p.z < _min.z ) _min.z = p.z;
			if ( p.z > _max.z ) _max.z = p.z;

		}

		shadowCamera.left = _min.x;
		shadowCamera.right = _max.x;
		shadowCamera.top = _max.y;
		shadowCamera.bottom = _min.y;

		// can't really fit near/far
		//shadowCamera.near = _min.z;
		//shadowCamera.far = _max.z;

		shadowCamera.updateProjectionMatrix();

	}

	// For the moment just ignore objects that have multiple materials with different animation methods
	// Only the first material will be taken into account for deciding which depth material to use for shadow maps

	function getObjectMaterial( object ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ 0 ]
			: object.material;

	};

};

THREE.ShadowMapPlugin.__projector = new THREE.Projector();

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpritePlugin = function () {

	var _gl, _renderer, _texture;

	var vertices, faces, vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		vertices = new Float32Array( [
			- 0.5, - 0.5, 0, 0, 
			  0.5, - 0.5, 1, 0,
			  0.5,   0.5, 1, 1,
			- 0.5,   0.5, 0, 1
		] );

		faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer  = _gl.createBuffer();
		elementBuffer = _gl.createBuffer();

		_gl.bindBuffer( _gl.ARRAY_BUFFER, vertexBuffer );
		_gl.bufferData( _gl.ARRAY_BUFFER, vertices, _gl.STATIC_DRAW );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faces, _gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position:			_gl.getAttribLocation ( program, 'position' ),
			uv:					_gl.getAttribLocation ( program, 'uv' )
		};

		uniforms = {
			uvOffset:			_gl.getUniformLocation( program, 'uvOffset' ),
			uvScale:			_gl.getUniformLocation( program, 'uvScale' ),

			rotation:			_gl.getUniformLocation( program, 'rotation' ),
			scale:				_gl.getUniformLocation( program, 'scale' ),

			color:				_gl.getUniformLocation( program, 'color' ),
			map:				_gl.getUniformLocation( program, 'map' ),
			opacity:			_gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: 	_gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix:	_gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType:			_gl.getUniformLocation( program, 'fogType' ),
			fogDensity:			_gl.getUniformLocation( program, 'fogDensity' ),
			fogNear:			_gl.getUniformLocation( program, 'fogNear' ),
			fogFar:				_gl.getUniformLocation( program, 'fogFar' ),
			fogColor:			_gl.getUniformLocation( program, 'fogColor' ),

			alphaTest:			_gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElement( 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = '#ffffff';
		context.fillRect( 0, 0, canvas.width, canvas.height );

		_texture = new THREE.Texture( canvas );
		_texture.needsUpdate = true;

	};

	this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

		var sprites = scene.__webglSprites,
			nSprites = sprites.length;

		if ( ! nSprites ) return;

		// setup gl

		_gl.useProgram( program );

		_gl.enableVertexAttribArray( attributes.position );
		_gl.enableVertexAttribArray( attributes.uv );

		_gl.disable( _gl.CULL_FACE );
		_gl.enable( _gl.BLEND );

		_gl.bindBuffer( _gl.ARRAY_BUFFER, vertexBuffer );
		_gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );
		_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		_gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		_gl.activeTexture( _gl.TEXTURE0 );
		_gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			_gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog instanceof THREE.Fog ) {

				_gl.uniform1f( uniforms.fogNear, fog.near );
				_gl.uniform1f( uniforms.fogFar, fog.far );

				_gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog instanceof THREE.FogExp2 ) {

				_gl.uniform1f( uniforms.fogDensity, fog.density );

				_gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			_gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		var i, sprite, material, fogType, scale = [];

		for( i = 0; i < nSprites; i ++ ) {

			sprite = sprites[ i ];
			material = sprite.material;

			if ( sprite.visible === false ) continue;

			sprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
			sprite.z = - sprite._modelViewMatrix.elements[ 14 ];

		}

		sprites.sort( painterSortStable );

		// render all sprites

		for( i = 0; i < nSprites; i ++ ) {

			sprite = sprites[ i ];

			if ( sprite.visible === false ) continue;

			material = sprite.material;

			_gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );

			scale[ 0 ] = sprite.scale.x;
			scale[ 1 ] = sprite.scale.y;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			} else {

				fogType = 0;

			}

			if ( oldFogType !== fogType ) {

				_gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				_gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				_gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				_gl.uniform2f( uniforms.uvOffset, 0, 0 );
				_gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			_gl.uniform1f( uniforms.opacity, material.opacity );
			_gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			_gl.uniform1f( uniforms.rotation, material.rotation );
			_gl.uniform2fv( uniforms.scale, scale );

			_renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
			_renderer.setDepthTest( material.depthTest );
			_renderer.setDepthWrite( material.depthWrite );

			if ( material.map && material.map.image && material.map.image.width ) {

				_renderer.setTexture( material.map, 0 );

			} else {

				_renderer.setTexture( _texture, 0 );

			}

			_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

		}

		// restore gl

		_gl.enable( _gl.CULL_FACE );

	};

	function createProgram () {

		var program = _gl.createProgram();

		var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );
		var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );

		_gl.shaderSource( vertexShader, [

			'precision ' + _renderer.getPrecision() + ' float;',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',

			'void main() {',

				'vUV = uvOffset + uv * uvScale;',

				'vec2 alignedPosition = position * scale;',

				'vec2 rotatedPosition;',
				'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
				'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

				'vec4 finalPosition;',

				'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
				'finalPosition.xy += rotatedPosition;',
				'finalPosition = projectionMatrix * finalPosition;',

				'gl_Position = finalPosition;',

			'}'

		].join( '\n' ) );

		_gl.shaderSource( fragmentShader, [

			'precision ' + _renderer.getPrecision() + ' float;',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',

			'void main() {',

				'vec4 texture = texture2D( map, vUV );',

				'if ( texture.a < alphaTest ) discard;',

				'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

				'if ( fogType > 0 ) {',

					'float depth = gl_FragCoord.z / gl_FragCoord.w;',
					'float fogFactor = 0.0;',

					'if ( fogType == 1 ) {',

						'fogFactor = smoothstep( fogNear, fogFar, depth );',

					'} else {',

						'const float LOG2 = 1.442695;',
						'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
						'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

					'}',

					'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

				'}',

			'}'

		].join( '\n' ) );

		_gl.compileShader( vertexShader );
		_gl.compileShader( fragmentShader );

		_gl.attachShader( program, vertexShader );
		_gl.attachShader( program, fragmentShader );

		_gl.linkProgram( program );

		return program;

	};

	function painterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	};

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DepthPassPlugin = function () {

	this.enabled = false;
	this.renderTarget = null;

	var _gl,
	_renderer,
	_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

	_frustum = new THREE.Frustum(),
	_projScreenMatrix = new THREE.Matrix4();

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
		_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
		_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
		_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

		_depthMaterial._shadowPass = true;
		_depthMaterialMorph._shadowPass = true;
		_depthMaterialSkin._shadowPass = true;
		_depthMaterialMorphSkin._shadowPass = true;

	};

	this.render = function ( scene, camera ) {

		if ( ! this.enabled ) return;

		this.update( scene, camera );

	};

	this.update = function ( scene, camera ) {

		var i, il, j, jl, n,

		program, buffer, material,
		webglObject, object, light,
		renderList,

		fog = null;

		// set GL state for depth map

		_gl.clearColor( 1, 1, 1, 1 );
		_gl.disable( _gl.BLEND );

		_renderer.setDepthTest( true );

		// update scene

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		// render depth map

		_renderer.setRenderTarget( this.renderTarget );
		_renderer.clear();

		// set object matrices & frustum culling

		renderList = scene.__webglObjects;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];
			object = webglObject.object;

			webglObject.render = false;

			if ( object.visible ) {

				if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

					object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );

					webglObject.render = true;

				}

			}

		}

		// render regular objects

		var objectMaterial, useMorphing, useSkinning;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];

			if ( webglObject.render ) {

				object = webglObject.object;
				buffer = webglObject.buffer;

				// todo: create proper depth material for particles

				if ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;

				objectMaterial = getObjectMaterial( object );

				if ( objectMaterial ) _renderer.setMaterialFaces( object.material );

				useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
				useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

				if ( object.customDepthMaterial ) {

					material = object.customDepthMaterial;

				} else if ( useSkinning ) {

					material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

				} else if ( useMorphing ) {

					material = _depthMaterialMorph;

				} else {

					material = _depthMaterial;

				}

				if ( buffer instanceof THREE.BufferGeometry ) {

					_renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );

				} else {

					_renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );

				}

			}

		}

		// set matrices and render immediate objects

		renderList = scene.__webglObjectsImmediate;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];
			object = webglObject.object;

			if ( object.visible ) {

				object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );

				_renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );

			}

		}

		// restore GL state

		var clearColor = _renderer.getClearColor(),
		clearAlpha = _renderer.getClearAlpha();

		_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
		_gl.enable( _gl.BLEND );

	};

	// For the moment just ignore objects that have multiple materials with different animation methods
	// Only the first material will be taken into account for deciding which depth material to use

	function getObjectMaterial( object ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ 0 ]
			: object.material;

	};

};


/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.ShaderFlares = {

	'lensFlareVertexTexture': {

		vertexShader: [

			"uniform lowp int renderType;",

			"uniform vec3 screenPosition;",
			"uniform vec2 scale;",
			"uniform float rotation;",

			"uniform sampler2D occlusionMap;",

			"attribute vec2 position;",
			"attribute vec2 uv;",

			"varying vec2 vUV;",
			"varying float vVisibility;",

			"void main() {",

				"vUV = uv;",

				"vec2 pos = position;",

				"if( renderType == 2 ) {",

					"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
					"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

					"vVisibility =        visibility.r / 9.0;",
					"vVisibility *= 1.0 - visibility.g / 9.0;",
					"vVisibility *=       visibility.b / 9.0;",
					"vVisibility *= 1.0 - visibility.a / 9.0;",

					"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
					"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

				"}",

				"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

			"}"

		].join( "\n" ),

		fragmentShader: [

			"uniform lowp int renderType;",

			"uniform sampler2D map;",
			"uniform float opacity;",
			"uniform vec3 color;",

			"varying vec2 vUV;",
			"varying float vVisibility;",

			"void main() {",

				// pink square

				"if( renderType == 0 ) {",

					"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

				// restore

				"} else if( renderType == 1 ) {",

					"gl_FragColor = texture2D( map, vUV );",

				// flare

				"} else {",

					"vec4 texture = texture2D( map, vUV );",
					"texture.a *= opacity * vVisibility;",
					"gl_FragColor = texture;",
					"gl_FragColor.rgb *= color;",

				"}",

			"}"
		].join( "\n" )

	},


	'lensFlare': {

		vertexShader: [

			"uniform lowp int renderType;",

			"uniform vec3 screenPosition;",
			"uniform vec2 scale;",
			"uniform float rotation;",

			"attribute vec2 position;",
			"attribute vec2 uv;",

			"varying vec2 vUV;",

			"void main() {",

				"vUV = uv;",

				"vec2 pos = position;",

				"if( renderType == 2 ) {",

					"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
					"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

				"}",

				"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

			"}"

		].join( "\n" ),

		fragmentShader: [

			"precision mediump float;",

			"uniform lowp int renderType;",

			"uniform sampler2D map;",
			"uniform sampler2D occlusionMap;",
			"uniform float opacity;",
			"uniform vec3 color;",

			"varying vec2 vUV;",

			"void main() {",

				// pink square

				"if( renderType == 0 ) {",

					"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

				// restore

				"} else if( renderType == 1 ) {",

					"gl_FragColor = texture2D( map, vUV );",

				// flare

				"} else {",

					"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
					"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
					"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
					"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
					"visibility = ( 1.0 - visibility / 4.0 );",

					"vec4 texture = texture2D( map, vUV );",
					"texture.a *= opacity * visibility;",
					"gl_FragColor = texture;",
					"gl_FragColor.rgb *= color;",

				"}",

			"}"

		].join( "\n" )

	}

};

(function() {


}).call(this);
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//




;
